cset: moving following pidspec: 2042808
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.738604037 seconds)
loading group "shootout"... done (took 1.162382369 seconds)
loading group "string"... done (took 0.653487811 seconds)
loading group "linalg"... done (took 8.473706596 seconds)
loading group "parallel"... done (took 0.163635058 seconds)
loading group "find"... done (took 2.954397103 seconds)
loading group "tuple"... done (took 2.050449628 seconds)
loading group "union"... done (took 14.244620711 seconds)
loading group "dates"... done (took 1.415041096 seconds)
loading group "micro"... done (took 0.210754618 seconds)
loading group "simd"... done (took 4.616641603 seconds)
loading group "io"... done (took 1.378039281 seconds)
loading group "random"... done (took 9.517672342 seconds)
loading group "problem"... done (took 1.594127689 seconds)
loading group "array"... done (took 24.878931836 seconds)
loading group "misc"... done (took 1.812805645 seconds)
loading group "scalar"... done (took 41.870971908 seconds)
loading group "sort"... done (took 3.193347229 seconds)
loading group "sparse"... done (took 12.739874457 seconds)
loading group "collection"... done (took 17.966582284 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.439896354 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.11315837 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.162298801 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109356231 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.230544069 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124691682 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126546588 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087411275 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.05132991 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140525967 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.136216967 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.420213245 seconds)
done (took 5.552711948 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.306688655 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240206548 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161910772 seconds)
  done (took 1.544629577 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091590794 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057759233 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064438542 seconds)
  done (took 1.353948901 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.062994543 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138644656 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063858243 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064205392 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064127653 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063715088 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063542927 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063564171 seconds)
  done (took 1.663958504 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07168893 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06519723 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063125736 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064791541 seconds)
  done (took 1.40536694 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065690896 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118076205 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06215795 seconds)
    (4/4) benchmarking "different"...
    done (took 0.061920538 seconds)
  done (took 1.445818044 seconds)
done (took 8.941766555 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157826868 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.761027431 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.848664643 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144724696 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.31308871 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.342595046 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119201413 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.200321477 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.11299271 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074562561 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.146658928 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079831977 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.479644776 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.474818827 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070647169 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.185266755 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.613899842 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084117939 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.111813417 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.193389045 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.080978088 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.081881887 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086823868 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.07080427 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.109872323 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.175587802 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.614097209 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098450506 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.169551465 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.089309561 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069501164 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073712539 seconds)
  done (took 10.407190721 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114924309 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110795821 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066268588 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100100836 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092647355 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.06737839 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072683673 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066089037 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085014723 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128695844 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089460881 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122360987 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065794617 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.06724817 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.098409361 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.15881775 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081814797 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079983752 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06629318 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079412055 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092118647 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078224683 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076447429 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.075971421 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.109703165 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.131425458 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.085620623 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.109625378 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066485531 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.07865697 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093074637 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106053387 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066825702 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064748846 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.106841037 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083496111 seconds)
  done (took 4.411815677 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024571493 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092970332 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.105538085 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096790115 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107978631 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092559116 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146678552 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120514164 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098003907 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066810944 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.17456107 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.677916177 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.054983482 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070555738 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.14612838 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361258111 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.898538923 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072323671 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067168238 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.097378136 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06892026 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139324373 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066134267 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175807618 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.646583544 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070824491 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06865993 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.220346009 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.092248912 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063716842 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138542501 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092468457 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068002831 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.577208054 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065341209 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062658212 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.083180885 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091432304 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064732588 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.065686214 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076039692 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063769669 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114343618 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07875089 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.546637286 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068505385 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.627023134 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.340224527 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072724276 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071020899 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.100962964 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063490709 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069684748 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.617386674 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.149671492 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06631035 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.283568241 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.067377262 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066369983 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066990808 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067950446 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.09912057 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066384179 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067457664 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07174449 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083730484 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.015018157 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.150673891 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.084854173 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.0675267 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.417070752 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076893295 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069382268 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070471962 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.096709928 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.136352056 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066691409 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066014619 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110593666 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.233194091 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090790822 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068702924 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065646084 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064789892 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.548153188 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.960367177 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068983844 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066440546 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.501195619 seconds)
    (89/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.112223868 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062710192 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064688126 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066570875 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087008181 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065489832 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062247739 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063049619 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098757284 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067758084 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.54300495 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066669253 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.48370732 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069178985 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097168828 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121612908 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066532159 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.104587087 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066610509 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063831294 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072301183 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064601919 seconds)
    (111/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063689292 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063546065 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068455035 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064950341 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065515916 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067876521 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067740269 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0665248 seconds)
  done (took 23.126740491 seconds)
done (took 40.113405204 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.397361836 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077100706 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076825811 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076680076 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076681536 seconds)
  done (took 1.893230737 seconds)
done (took 3.187574721 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254348591 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076730069 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062647544 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203643491 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087223809 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.17831228 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.217438852 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.291074577 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.0899108 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088523862 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088991276 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.221727371 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.233616809 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089991396 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161788044 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.234809639 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091199484 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065083854 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.090685674 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090752723 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.09074831 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064167853 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089386003 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090790426 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.16210696 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088897813 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06348363 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.16442665 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.092183809 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.167846544 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092082285 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.09107741 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091748036 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163753009 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092163044 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164354278 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064207242 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.09186523 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.094112947 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.097232939 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093937177 seconds)
  done (took 6.359758239 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077117309 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079521717 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080948295 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060196209 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069196258 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079397735 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060224317 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.07892263 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099781418 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079668924 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.07922427 seconds)
  done (took 2.133651355 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070895083 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08011929 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081319806 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059631507 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070772869 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08022298 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059993801 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079798977 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08279414 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080309153 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080209884 seconds)
  done (took 2.049499121 seconds)
done (took 11.753132721 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190461187 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087570537 seconds)
  done (took 1.482108669 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.257254542 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.496737464 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.235557643 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.125161144 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.103154871 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.118160171 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.232151091 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.09952124 seconds)
  done (took 7.049146545 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.098127441 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065467862 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.093911092 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.06602596 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065692941 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065580213 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067101174 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065433265 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067330186 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065542472 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066080447 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065328654 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067637432 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066422443 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066337704 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066482078 seconds)
  done (took 2.464766363 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100163173 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.066958012 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095966164 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059774729 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069586152 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060724887 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068500869 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070197892 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067564443 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067916025 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.06922509 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067852971 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068862041 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069020964 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070182548 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070709532 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071505063 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069041676 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070979075 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071917195 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070573221 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07183538 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.072933903 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070192093 seconds)
  done (took 3.055111749 seconds)
done (took 15.273174702 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177117533 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072462745 seconds)
  done (took 1.467726256 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093524233 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091798476 seconds)
  done (took 1.421520454 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072684441 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058309717 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075066704 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067375599 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059004714 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058673036 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074061702 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.05898447 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058825813 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058989862 seconds)
  done (took 1.881556012 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063234751 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065463268 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063276015 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061902395 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064092973 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059844569 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062193425 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06006783 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.065848759 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059031913 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062754513 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080535159 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062554425 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080756032 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062290502 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062905893 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064611453 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063186849 seconds)
  done (took 2.404402354 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061469338 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059018088 seconds)
  done (took 1.364714275 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064310438 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059272053 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061032177 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060866335 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059273054 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058661737 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059402084 seconds)
  done (took 1.659770471 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427578903 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192540862 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.425655062 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068002229 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.08149083 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.26660991 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062772177 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067321503 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067192402 seconds)
  done (took 2.938022623 seconds)
done (took 14.385278243 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083870758 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181510747 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110294935 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.416638107 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.07773977 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06557006 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093459408 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.208684261 seconds)
done (took 2.499075244 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.290681281 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.207524784 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.255215708 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146391637 seconds)
  done (took 2.857123531 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418111765 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.16610954 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074671105 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065298486 seconds)
  done (took 1.979383156 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065860066 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06950976 seconds)
  done (took 1.39121042 seconds)
done (took 7.780167824 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073452016 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.094074166 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.058990504 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.060916323 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061180265 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.060890674 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.0602224 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061195024 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059245657 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.061160995 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.061140827 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061108315 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060729042 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06075058 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.060188971 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061124901 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.05902656 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.060891186 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061297132 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059900593 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061837583 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062188262 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061214391 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061849757 seconds)
  done (took 2.780541384 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079964067 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063366631 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063877285 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063779875 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064547467 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064344119 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06427411 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063393789 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064540204 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063299562 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064751109 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06474603 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063135356 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064927522 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063282013 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064888163 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064529295 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063593828 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063293347 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064745788 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064284726 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063884162 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065452823 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065192663 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065682048 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065777107 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064249763 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064660798 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065381889 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065868081 seconds)
  done (took 3.218175902 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067236868 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.05760241 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057869845 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067632479 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057500589 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057789914 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058500452 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057552254 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058029335 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058798429 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058388911 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057834186 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058562723 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057943619 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057895366 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058380663 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062942092 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078315002 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.05808637 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.0578881 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062478555 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058053793 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.057870819 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.05782694 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058266577 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058195581 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058056221 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058608208 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058541658 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059158901 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058579676 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063131546 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064591294 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058476725 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068798972 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063689449 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058638868 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065371628 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059720079 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058600655 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058610479 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058542398 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058707399 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058637558 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069056813 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058915941 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059946222 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062003596 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059109204 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058631983 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058710385 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060284596 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064388408 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059939777 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058371854 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059781575 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058485212 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059263012 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058919341 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.05860335 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.05856716 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062658963 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060110511 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05945841 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079712612 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060209557 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069219935 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058644059 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059106997 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.0627409 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059227762 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078075948 seconds)
  done (took 5.647121101 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072652196 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068808451 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07647835 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067795841 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061693029 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058972841 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061954244 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058812354 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067829625 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062374287 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058782152 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062254345 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067918035 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06238067 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05974327 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067717243 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062248372 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061484928 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059088617 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062800624 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06030937 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062598766 seconds)
  done (took 2.694431401 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144296421 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06412398 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105964116 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067901602 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066391505 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067676905 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064240387 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064186459 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064359977 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064772209 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064684269 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0644731 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066451612 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064847866 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064714347 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0645773 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064709813 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064929126 seconds)
  done (took 2.565399754 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077525499 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063996113 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090104778 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063535429 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06382538 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063576847 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067471825 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067708527 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06360929 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063990054 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067564067 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063755579 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063549689 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06393401 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063661791 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.063836572 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063823359 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06408815 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068275571 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070162503 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068281449 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068210384 seconds)
  done (took 2.749166054 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078850099 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062873354 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078614734 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064209676 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057984823 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058330009 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064913459 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063259629 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064674203 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062986245 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063230946 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058213402 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065130046 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063338994 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065517378 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063385366 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063034986 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063404383 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063124595 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058261811 seconds)
  done (took 2.558625027 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098111512 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060704314 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060483259 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065126635 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060672593 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061071812 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065335602 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06061021 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060908918 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.096206212 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061032353 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060867491 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065483881 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063673306 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060796336 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065205484 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065136344 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065863683 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061438393 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061359846 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085577343 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061840331 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06668834 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061840873 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061760261 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061704013 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06165888 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064703634 seconds)
  done (took 3.121046264 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065619744 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061534289 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061679676 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061594223 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061521379 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061262045 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061588073 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064607037 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061473252 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06174785 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061449442 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061557996 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061390485 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061443343 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061468102 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061442455 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061537978 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061666456 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061887651 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061625448 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061559895 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061547962 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061625552 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061736278 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061857007 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061468529 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062093808 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062187303 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061868266 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062140105 seconds)
  done (took 3.142282087 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073813012 seconds)
    (2/2) benchmarking "in"...
    done (took 0.068906336 seconds)
  done (took 1.424998149 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062461679 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07540481 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05730613 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070283211 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066229511 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062027674 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066760156 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066582511 seconds)
  done (took 1.802175916 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.09403164 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.114859626 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059829673 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060236617 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089779034 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126395098 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.099868253 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071811925 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073773223 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062598569 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.05994115 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099872729 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059318142 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073254425 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060687801 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069435752 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067769046 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078241652 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07344021 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058461319 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07309963 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06083478 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059773434 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061192143 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060897561 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067677167 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076774688 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073285737 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069239958 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058100506 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079518219 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058908469 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06021324 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069706284 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.092034964 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059511999 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097251372 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059716723 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064135176 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.05875114 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071790102 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08058815 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07396844 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077779819 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060811439 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061016636 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058852329 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060925181 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063334392 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068875041 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058931588 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067088542 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058302525 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060493018 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070186617 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059525712 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064307775 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068976331 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073549722 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070408663 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071940171 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075447539 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068717951 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.06800254 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060141537 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079916452 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061239991 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073421093 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074982811 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060681936 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073344153 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059154633 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.05852207 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059407058 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094349766 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061281419 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060784195 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060697527 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060733076 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062252953 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071172193 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06648068 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068839993 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06451209 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077677189 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070681638 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06088084 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069298726 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080314138 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065002471 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061404332 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079061303 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065138301 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060593742 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080764947 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072262741 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063668023 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062804915 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065716526 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076824853 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063568004 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060710614 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071132032 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063890841 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.248243198 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063488872 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067854403 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058945624 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.06961378 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064138849 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060063871 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057401919 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063252601 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059257321 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057239263 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068083992 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058371959 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073049659 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065375643 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073307511 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073696732 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069229537 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074579147 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058250937 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059891762 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076685988 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067949416 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059333929 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076527917 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05775636 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069177586 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057708496 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059434763 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068018557 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057349653 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059821988 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058056734 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063696557 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.05961565 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.05985763 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064323873 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067441516 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070719716 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059338607 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067597967 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058708563 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074742943 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.06902294 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063849348 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062180579 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059765959 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071725256 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066530452 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069162902 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058977248 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060181668 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.05955472 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070692817 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069499734 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061061537 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06757743 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064386158 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060075171 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059674881 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06058795 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063424327 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062679724 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.059973711 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067739476 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068620036 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073915008 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066503382 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068927798 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058406569 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058845157 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060876832 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058751763 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064134615 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068966163 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075563688 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071610193 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081237019 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059698585 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069776592 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06092095 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077006348 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073567872 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06069489 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064284984 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058673329 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061220627 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070771364 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073127318 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075753971 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0765772 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066082688 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06597969 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060538973 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07669429 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061377034 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069950933 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07084564 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06747985 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061024679 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062930024 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070604255 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066075084 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062077154 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078173454 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070083406 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061244923 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076763199 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062067576 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073285528 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061323565 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065995642 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067621734 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.223364823 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070033333 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075005317 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057820664 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059398415 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074617075 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060069977 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059748566 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067142399 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07398551 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063447698 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066658118 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06933916 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069019314 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063460346 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068620652 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059049037 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.067978162 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060926112 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070166665 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058190354 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076455436 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.05713733 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073798855 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058618189 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069649459 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058851892 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068145732 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059062555 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075644 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059673018 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059134962 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070461512 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057234942 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068027697 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057774423 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063941573 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065302386 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068037998 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059901011 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068074904 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059844868 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067803376 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063524103 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067066001 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068563924 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063927551 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058607371 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067947182 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070755666 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067800248 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060553667 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060509463 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059857572 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069321605 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060904884 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060660058 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068122775 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064675404 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065585689 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060924253 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061282345 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060993171 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068467213 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069295487 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080858874 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068490292 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067454987 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069081018 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.05892008 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075672237 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059551066 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067421132 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058209541 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066136542 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069062633 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059543489 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079172586 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060826832 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067917111 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07229881 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068786096 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063696011 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078161218 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062898552 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068723807 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068413529 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064831156 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067036833 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06164096 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068813923 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070177899 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072263533 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061949819 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069073636 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070547832 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062746733 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071022117 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06302836 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069883939 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062952034 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06017057 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066148441 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073237179 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066153718 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066645696 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06162388 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06015387 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061973905 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070963731 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067038366 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071185863 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078263412 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060744961 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063191682 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061813116 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.227986828 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078363259 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069253431 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067444443 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063978542 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057836797 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.05997705 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060064399 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058783793 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061332952 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057431257 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057749441 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069208426 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059797379 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063104323 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058481409 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059069096 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068637153 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062248831 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058704391 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065334074 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058083742 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063938123 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057515053 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059673924 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063397033 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057837119 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06255878 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069067086 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075115607 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065387749 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067788513 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059335031 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066854404 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074186189 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065711532 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059361394 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068112135 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057624412 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077330481 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068110546 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06744081 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068530746 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.05931644 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075463541 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063589538 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069261838 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075195258 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060335598 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066733236 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058691587 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075278166 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064217555 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058705735 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067598301 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067480204 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065442637 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07158381 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060181678 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06794539 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064474689 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063407639 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061021964 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060941798 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068711309 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076064126 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060294394 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064822352 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067817341 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068304439 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064390153 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072043144 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068078569 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060553241 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061100387 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063488575 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060133047 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07190786 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059888372 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06452838 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064376435 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058922096 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066553227 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07675756 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069418281 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069546815 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059226185 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058967627 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078409747 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064058442 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063309196 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068664422 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.0705366 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073511315 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070970537 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078990816 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061798944 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067510013 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074235572 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062032067 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06099941 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06513201 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062743375 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070841027 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071566839 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069115989 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063433965 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071415364 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075808092 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063193235 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066982311 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068771208 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062710453 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073150853 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070966826 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071470163 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.222240577 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059106149 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062826744 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068037853 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066711646 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068005278 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059431204 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065293056 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072218515 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066457346 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0611285 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.05782171 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061039736 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067877654 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063176154 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057777817 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063372752 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062362775 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065180953 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067985712 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063277187 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057755329 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075433746 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066837963 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067961592 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059905042 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060015293 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058886541 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057822262 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069738093 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057732033 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059700236 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06353038 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059686361 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076351582 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066945457 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07447695 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059297289 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063396302 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058005887 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068263872 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063388613 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058736481 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069258462 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057983704 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075051007 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071367172 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065506764 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058882574 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065037503 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067814902 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074951408 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069381432 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068808548 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062404399 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069275347 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060856325 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070623799 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058970447 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058464065 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069989377 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068643474 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072459519 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059056251 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069939509 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061284607 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068338711 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068011603 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06115151 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061016997 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061195619 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069467368 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064489622 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069239542 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064617611 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076859038 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060394608 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07113176 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069116439 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070967441 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073905827 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07231861 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068139416 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060358031 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067635225 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068195265 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061057247 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065421041 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063426016 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082986254 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062109283 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061779581 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07502484 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069441018 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061298761 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069853959 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066281795 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071972878 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062241661 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072286042 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067361929 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062115946 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066342074 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06648568 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060617283 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06089886 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061746657 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07229655 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066469859 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062133101 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082411644 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063934086 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071385544 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.232541518 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066969806 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060345125 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057852794 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.05973452 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072444476 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074601376 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062393247 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067492135 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059710417 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068077214 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057339134 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067609118 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066867035 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067245068 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057841839 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058561241 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073897439 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074207186 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063399103 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074593864 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067912258 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059653198 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080442961 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068145736 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059515044 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069605104 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060461126 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057800621 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057589347 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059868258 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070192825 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058100864 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060541107 seconds)
  done (took 41.676377029 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102925723 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059682049 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061066763 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058176744 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06555511 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059789203 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058636027 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059718606 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059647297 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060776964 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058443429 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058453592 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063967651 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073528578 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066169863 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062069384 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058571815 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059639103 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05845765 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059915059 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065223829 seconds)
  done (took 2.712303186 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064974645 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062258194 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061745131 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062010304 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061440662 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058619344 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062039653 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058654349 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062650644 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059088716 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062580735 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058739955 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059013177 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059071388 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059457803 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060039533 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062368338 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061688701 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058681028 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062134967 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060318708 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062631049 seconds)
  done (took 2.705346594 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063174754 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059117653 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067757693 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057752455 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057642554 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061091415 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058124858 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063298994 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063318431 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063120117 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067900274 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059195502 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057996472 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064973388 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057878576 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059189585 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10297512 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059377071 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059381143 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058214587 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060904128 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068120514 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058321885 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058701565 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063578451 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061713033 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.05862327 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061365448 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059309035 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063546907 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059831441 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058416363 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068248575 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067655237 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063619085 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063609171 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060411515 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059644722 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058581717 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058602736 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067733101 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060189111 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058849441 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060134121 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068309976 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058564433 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058375418 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068276561 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05840267 seconds)
  done (took 4.420849012 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07344989 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108585501 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064369034 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090728216 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.0704659 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063668632 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064305927 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09161661 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059509311 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059887281 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071195406 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071313979 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060997209 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062165898 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06547786 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06105879 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062030949 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060808348 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063705952 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061167675 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063796819 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065864404 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070937688 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071471324 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062236133 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060744263 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060988238 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062506578 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071033 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064271157 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062748185 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06328469 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071675165 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065207278 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061115616 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061713393 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072513227 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062097492 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061733823 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060314616 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06151134 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063041968 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066334167 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072937993 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062088166 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066845191 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061955902 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059906333 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072142022 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061731037 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065316751 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073322945 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062767643 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064778295 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06320879 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072033321 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061883458 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060655959 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062049467 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072015496 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060557831 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062778586 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072932898 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061545421 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065135325 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073423541 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066954397 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063079369 seconds)
  done (took 6.01498307 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071172734 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093335945 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072761796 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072900459 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068790215 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068814049 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068757879 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068766376 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068454363 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071268744 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068765949 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131888453 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065923973 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070196794 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.0687982 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069503702 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069277471 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069359109 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069403684 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069270079 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.06926365 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073963535 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069219619 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074452286 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073829797 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066072681 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069329415 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069301816 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0741615 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069248867 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073962508 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069334302 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069491314 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074239709 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073916534 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069828568 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060385572 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069684526 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069938021 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069758374 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06642701 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074949537 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069801034 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066464041 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069974167 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069674752 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074900091 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074677396 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071458064 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072802581 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069976085 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074932017 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069780976 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069965296 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074980829 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078091854 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075221831 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075289077 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070333016 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075217337 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075211197 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078407522 seconds)
  done (took 5.895484432 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07612268 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064057463 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076952725 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058293175 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058316583 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067849522 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058427621 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058352728 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064323577 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064327831 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065813947 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067748193 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06961286 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065857711 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067673341 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069348622 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067685066 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068189934 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064941021 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068367702 seconds)
  done (took 2.73350031 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063579246 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063378335 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.05882044 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074222769 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059177899 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066617503 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059151611 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059152701 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059230932 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05916666 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063581191 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063525718 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059175644 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067034262 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062627671 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06650166 seconds)
  done (took 2.39255511 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064628541 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066320165 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.093128733 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060223322 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061548224 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059033825 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060476577 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058873196 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060988786 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072818591 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060021496 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061776456 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059753515 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058947117 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059090042 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06188059 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060872526 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.05976046 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059620473 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094227698 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068374022 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060644072 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062298441 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060853279 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061771322 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068950621 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.06156382 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061764739 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060155886 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062236116 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061861487 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070993265 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061990715 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063603153 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059828099 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059955497 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060234133 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062412125 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06264626 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060403738 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059202011 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061862718 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060238559 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060604478 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061469371 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062373983 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061754443 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070579488 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060601361 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062418067 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060715231 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062293613 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061365642 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.07198743 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062992728 seconds)
  done (took 4.873783077 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079200583 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063951437 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058165729 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05801919 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063540125 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064347006 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063967849 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.063976435 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064364322 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058383096 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064419398 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063447001 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064409302 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06390904 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064454203 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064048764 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058264889 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.0642449 seconds)
  done (took 2.558108885 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068529572 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06350615 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063836949 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.05981808 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060330698 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06437097 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058649747 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059779197 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059864159 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060112332 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060110483 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059823567 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059917792 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059841376 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063779523 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060256751 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059915454 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058733031 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06000865 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058506404 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064700156 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059056221 seconds)
  done (took 2.736795198 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118441128 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082487998 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.158918785 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078826462 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088804761 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070381668 seconds)
  done (took 1.993544844 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095473277 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095769399 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063737109 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063651696 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067933804 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066438326 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066441387 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066540842 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069354699 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072113216 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0664781 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069549594 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06936262 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071136771 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067801512 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068068469 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066943986 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067008439 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064216131 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074844648 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067050872 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070228799 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067080737 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067138948 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067121717 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072070086 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070289679 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07306687 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067135289 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070551491 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068753211 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067262058 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070717581 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073045728 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064407696 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070302672 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06742653 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075142398 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069317081 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07282132 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064620071 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069338329 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07108549 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070719826 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071259032 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067991235 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070636868 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06772172 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06787692 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079395099 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069627469 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072695353 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069600379 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071224789 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070905932 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079467456 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074169759 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073132813 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069819087 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074110827 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073063266 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070012051 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07301258 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074269554 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071781708 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075524779 seconds)
  done (took 6.065174787 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105362686 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064429447 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0694142 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072039693 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071237174 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066813143 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066878206 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066753208 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066583131 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064320341 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102033075 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067059592 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071479747 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071307981 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066825398 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066623163 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067208758 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071957095 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064826597 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078552778 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067321104 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07212603 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072092159 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072043788 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07307551 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06911234 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067516905 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067310755 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067288235 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067271944 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070199053 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067463824 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072226757 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064880982 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072215316 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06752322 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067366102 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07027023 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067725726 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069545162 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0728783 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075834344 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067871924 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067750262 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073776821 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067955254 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067781846 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065245592 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067811377 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065305082 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073990712 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073873889 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073874749 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072791147 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067974182 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068011375 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068063394 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068101862 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06824035 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0698291 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07302711 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068033423 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079997442 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06823302 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068224992 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074521794 seconds)
  done (took 6.083567995 seconds)
done (took 125.815958132 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.26118322 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.223420454 seconds)
  done (took 1.864341994 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075071133 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.266093082 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07586592 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072268163 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132636677 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132080004 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.10684682 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070363275 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072384203 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069784182 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168268455 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107145622 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070222789 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069977367 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069907575 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.06976279 seconds)
  done (took 3.036456274 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.147163528 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.209522054 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080087006 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068127416 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151619662 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076070564 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071157196 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074535801 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075753521 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068941518 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.38444826 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084085888 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073778158 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074708019 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07097204 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073259905 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074333545 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076430315 seconds)
  done (took 3.345734973 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103898544 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.112133836 seconds)
  done (took 1.629228663 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.16040903 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107275168 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145200808 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.352872203 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.140326445 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141016835 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.148161841 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.140328388 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114334679 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.138528406 seconds)
  done (took 2.995401341 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106655592 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102572899 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30558514 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100837096 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080011684 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074971712 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072695295 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077746788 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072767148 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074236736 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120133061 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073061912 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070262736 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122351632 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097273563 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104599997 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069265313 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076579725 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078124126 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069052571 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073770258 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078161594 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177026101 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077206906 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100082374 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073452511 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075387505 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072496054 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072493728 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076377872 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077118483 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100372971 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076996898 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082894733 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074712684 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096312666 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070235956 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098792269 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073033942 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070847369 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073206738 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077236624 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070623032 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079304552 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073507086 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075987716 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078963624 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069536295 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073765667 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073183968 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07119382 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074683493 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074468367 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075461195 seconds)
  done (took 6.110071873 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123352536 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.110156739 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067958222 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115422476 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10928045 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068278906 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123970081 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104308353 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.12232117 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067563486 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067747071 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066956369 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074738191 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078523954 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119565692 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113758872 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070010186 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068287247 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112688747 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112829175 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06708156 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124618138 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115758245 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.11197757 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067016829 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068350483 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066933545 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067464702 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075566376 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075043113 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067407122 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077739845 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.0800643 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074773067 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066731959 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066835738 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06684241 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075237932 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076855216 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076775762 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07394058 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066481645 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066927862 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067494556 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0679284 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.0664761 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076826155 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075878354 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077221231 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068462124 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067941393 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06721527 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068772316 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074987679 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073890291 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075523224 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078550268 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068537291 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067683096 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069009422 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079046403 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076338135 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075931816 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06891123 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077061618 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067693208 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078052569 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081320878 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067753429 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068269983 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067862335 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067858656 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068318966 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074615921 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074655654 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069115508 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069962193 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068787454 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077887552 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07655005 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068935383 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078699538 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068533114 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069025245 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069590652 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070453672 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080921582 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079447315 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070772811 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070975767 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070364917 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07024097 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069405993 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.233487269 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075113495 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074523265 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075644675 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067002416 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075926822 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07459619 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067061541 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072919802 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.0664805 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066641528 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066607965 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072762921 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072384943 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074295425 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066171107 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065933737 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074035389 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076699218 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066393272 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072403689 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074661642 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072873418 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065989167 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075987777 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066478638 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07517001 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066571986 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074769707 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06653601 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072945211 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066386687 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065800325 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066227105 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075612349 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066631192 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066189235 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066651986 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066311617 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073176893 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076781179 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067493151 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074104009 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074477774 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067610793 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076087961 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067212426 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076417938 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067370054 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067495339 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066538138 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078652941 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067410308 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068449924 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070204027 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07645345 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067578773 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076484975 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073961563 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06698852 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077449691 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077009269 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074130243 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077270064 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06830533 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067664996 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067449266 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067660028 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07677459 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078346529 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069088575 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067658332 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073929932 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077305058 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067310817 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074441417 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074630159 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075148318 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068051457 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068152387 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078902515 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081598991 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076911972 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.079787394 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077782058 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069277072 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076596577 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07992935 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06921472 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08367373 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069897327 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081321587 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081771831 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077767785 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.238316088 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077695533 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075070128 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07512833 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076976287 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066040466 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066290246 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072558835 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066071235 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066235515 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072174151 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066660162 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067389447 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079456576 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066789204 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075328914 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066008392 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073344772 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06587046 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066719095 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077455719 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066507846 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066753712 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073452181 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066430456 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072624524 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075101868 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072517877 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066223523 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066611784 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075842601 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075758773 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066346327 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066181054 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066747592 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.0749154 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074327732 seconds)
  done (took 18.451387756 seconds)
done (took 38.862597595 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169827167 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.11195529 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224014301 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.202768892 seconds)
  done (took 2.217607856 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101287413 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063408431 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106611212 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116277371 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06361306 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.102082878 seconds)
  done (took 2.00729742 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201309783 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175355692 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250066357 seconds)
  done (took 2.076340011 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367165985 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150347734 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.257680332 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.515028164 seconds)
  done (took 2.846804897 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.135609187 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132016696 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075394937 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145661966 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082520754 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060384917 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.144678579 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067889843 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097353535 seconds)
  done (took 2.458170228 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.140721353 seconds)
done (took 13.196081156 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.109220508 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.316143573 seconds)
    (3/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071307929 seconds)
    (4/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.290174823 seconds)
    (5/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.278590887 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.122584085 seconds)
    (7/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.100410221 seconds)
    (8/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.304253716 seconds)
    (9/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068229254 seconds)
    (10/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074662114 seconds)
    (11/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.181715655 seconds)
    (12/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069661064 seconds)
    (13/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.117066202 seconds)
    (14/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.290577519 seconds)
    (15/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074314767 seconds)
    (16/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.11044246 seconds)
    (17/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.296696329 seconds)
    (18/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.302620419 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075368445 seconds)
    (20/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.082648775 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074029772 seconds)
    (22/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.152410332 seconds)
    (23/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.19000403 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075262763 seconds)
    (25/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.304493234 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.125155144 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.158210435 seconds)
    (28/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.230842902 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.163210431 seconds)
    (30/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075023547 seconds)
    (31/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075459536 seconds)
    (32/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.267476163 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074145067 seconds)
    (34/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.127126202 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.070776071 seconds)
    (36/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.29014625 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181434044 seconds)
    (38/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.245448207 seconds)
    (39/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076432812 seconds)
    (40/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.078161789 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.152537523 seconds)
    (42/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.143704885 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093904731 seconds)
    (44/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.097159526 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.085992967 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.078318619 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.088484038 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091568631 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073813267 seconds)
    (50/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.181693957 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.088770673 seconds)
    (52/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.225583647 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079013922 seconds)
    (54/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.261382408 seconds)
    (55/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.165576386 seconds)
    (56/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.086550006 seconds)
    (57/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075876166 seconds)
    (58/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080701544 seconds)
    (59/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.238037505 seconds)
    (60/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.14999881 seconds)
    (61/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077822604 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156638585 seconds)
    (63/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.383117211 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.088776207 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069295913 seconds)
    (66/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.071771862 seconds)
    (67/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.141667357 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.130399084 seconds)
    (69/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141208086 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.208454558 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072812299 seconds)
    (72/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.064524781 seconds)
    (73/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.144012681 seconds)
    (74/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071233481 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071673947 seconds)
    (76/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07509472 seconds)
    (77/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.228143431 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.208153669 seconds)
    (79/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.173957686 seconds)
    (80/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093778992 seconds)
    (81/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.194618691 seconds)
    (82/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265480191 seconds)
    (83/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.162715335 seconds)
    (84/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.197939983 seconds)
    (85/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066054061 seconds)
    (86/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141437613 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085577716 seconds)
    (88/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07725578 seconds)
    (89/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068193335 seconds)
    (90/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.065677354 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091167763 seconds)
    (92/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.140793921 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.24917934 seconds)
    (94/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075488737 seconds)
    (95/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.22695667 seconds)
    (96/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064873346 seconds)
    (97/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.209054561 seconds)
    (98/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.212615852 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.186919667 seconds)
    (100/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.141835234 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064805949 seconds)
    (102/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072136255 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.09123068 seconds)
    (104/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.066619431 seconds)
    (105/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.196960397 seconds)
    (106/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.202109377 seconds)
    (107/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069925722 seconds)
    (108/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.163243667 seconds)
    (109/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.083848909 seconds)
    (110/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068814395 seconds)
    (111/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06802021 seconds)
    (112/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06528628 seconds)
    (113/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.064781575 seconds)
    (114/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.189507003 seconds)
    (115/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.066102611 seconds)
    (116/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.149306999 seconds)
    (117/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075321922 seconds)
    (118/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069715825 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121916672 seconds)
    (120/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.084860886 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066012935 seconds)
    (122/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067675641 seconds)
    (123/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072843293 seconds)
    (124/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086788466 seconds)
    (125/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.066931315 seconds)
    (126/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065479699 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.088592636 seconds)
    (128/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.218702997 seconds)
    (129/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065678807 seconds)
    (130/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.277604483 seconds)
    (131/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.20001601 seconds)
    (132/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066574822 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074824597 seconds)
    (134/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.113297616 seconds)
    (135/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065943425 seconds)
    (136/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065899944 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.096688563 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073880984 seconds)
    (139/341) benchmarking ("sort", Float32, false)...
    done (took 0.139374523 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.194462666 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.126037824 seconds)
    (142/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067648107 seconds)
    (143/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.215497915 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074694402 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.250538383 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085694365 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074623214 seconds)
    (148/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065206623 seconds)
    (149/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.073688074 seconds)
    (150/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.064904889 seconds)
    (151/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150582836 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074028687 seconds)
    (153/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170539882 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 0.140979926 seconds)
    (155/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064962018 seconds)
    (156/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070962206 seconds)
    (157/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073450765 seconds)
    (158/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064475672 seconds)
    (159/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06436336 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 0.0651831 seconds)
    (161/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064231264 seconds)
    (162/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.205895283 seconds)
    (163/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072210675 seconds)
    (164/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.148877429 seconds)
    (165/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075563861 seconds)
    (166/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.216233573 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063984122 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063884401 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095093091 seconds)
    (170/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083280097 seconds)
    (171/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.068633326 seconds)
    (172/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064234365 seconds)
    (173/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.222496523 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186096846 seconds)
    (175/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068014128 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072652983 seconds)
    (177/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.065490904 seconds)
    (178/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.081207026 seconds)
    (179/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.136620891 seconds)
    (180/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065554986 seconds)
    (181/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.083979928 seconds)
    (182/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.063658821 seconds)
    (183/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.063771517 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068360352 seconds)
    (185/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064300484 seconds)
    (186/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.066116887 seconds)
    (187/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.19608816 seconds)
    (188/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090449043 seconds)
    (189/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.085140372 seconds)
    (190/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.07165837 seconds)
    (191/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.191032391 seconds)
    (192/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06564189 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090096751 seconds)
    (194/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072790333 seconds)
    (195/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066013287 seconds)
    (196/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079519439 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.156119568 seconds)
    (198/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087590787 seconds)
    (199/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.081350138 seconds)
    (200/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08585819 seconds)
    (201/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065396486 seconds)
    (202/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064424722 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064784226 seconds)
    (204/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064429829 seconds)
    (205/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065100143 seconds)
    (206/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066629523 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071533451 seconds)
    (208/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071285298 seconds)
    (209/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066757247 seconds)
    (210/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.173435907 seconds)
    (211/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073400038 seconds)
    (212/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070384116 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.06479682 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065005673 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148252846 seconds)
    (216/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071853754 seconds)
    (217/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065286619 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.141803892 seconds)
    (219/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066185828 seconds)
    (220/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073406999 seconds)
    (221/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067135868 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066972023 seconds)
    (223/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138607485 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064800642 seconds)
    (225/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066533776 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086598126 seconds)
    (227/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066040322 seconds)
    (228/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.07051462 seconds)
    (229/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065108412 seconds)
    (230/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065070572 seconds)
    (231/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.176412687 seconds)
    (232/341) benchmarking ("sort", Float64, false)...
    done (took 0.138307392 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075992191 seconds)
    (234/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068139191 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07731605 seconds)
    (236/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065395427 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131891649 seconds)
    (238/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.178215592 seconds)
    (239/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065656869 seconds)
    (240/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.139429147 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121677714 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073526203 seconds)
    (243/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.146711499 seconds)
    (244/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.217637847 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067356425 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074216974 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072679765 seconds)
    (248/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06776258 seconds)
    (249/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067542093 seconds)
    (250/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.258121498 seconds)
    (251/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07421253 seconds)
    (252/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.070301187 seconds)
    (253/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.085080823 seconds)
    (254/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.189515833 seconds)
    (255/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06549134 seconds)
    (256/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.203723635 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089490457 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065988286 seconds)
    (259/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.073523225 seconds)
    (260/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.064762012 seconds)
    (261/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064262365 seconds)
    (262/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.064210955 seconds)
    (263/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063524253 seconds)
    (264/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.070925902 seconds)
    (265/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.074383965 seconds)
    (266/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063508797 seconds)
    (267/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.063976915 seconds)
    (268/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.063597625 seconds)
    (269/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.069741609 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063812687 seconds)
    (271/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.174225879 seconds)
    (272/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073335802 seconds)
    (273/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064428749 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.070895898 seconds)
    (275/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091199611 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06489238 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064167537 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.082819694 seconds)
    (279/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068763514 seconds)
    (280/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.064618618 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083602889 seconds)
    (282/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.199586034 seconds)
    (283/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071889618 seconds)
    (284/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.078290341 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091539702 seconds)
    (286/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.06451158 seconds)
    (287/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064121239 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063668627 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159310441 seconds)
    (290/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064050202 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071616201 seconds)
    (292/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.066321718 seconds)
    (293/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064137024 seconds)
    (294/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064559718 seconds)
    (295/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064531433 seconds)
    (296/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.065109007 seconds)
    (297/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.064111481 seconds)
    (298/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064822055 seconds)
    (299/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063869398 seconds)
    (300/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.064562037 seconds)
    (301/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.069494276 seconds)
    (302/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066684471 seconds)
    (303/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064854215 seconds)
    (304/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066003264 seconds)
    (305/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.06474333 seconds)
    (306/341) benchmarking ("sort", Int8, false)...
    done (took 0.148198276 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.15657972 seconds)
    (308/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071829583 seconds)
    (309/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069982166 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083062906 seconds)
    (311/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070669239 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064622065 seconds)
    (313/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.064669196 seconds)
    (314/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.06870338 seconds)
    (315/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090294357 seconds)
    (316/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.069026882 seconds)
    (317/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064155703 seconds)
    (318/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.069876628 seconds)
    (319/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065640204 seconds)
    (320/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066685619 seconds)
    (321/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070377035 seconds)
    (322/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064048458 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076207035 seconds)
    (324/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064574404 seconds)
    (325/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.072295292 seconds)
    (326/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.072401183 seconds)
    (327/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065196583 seconds)
    (328/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.064800602 seconds)
    (329/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.069698626 seconds)
    (330/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.066777449 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064665801 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.151352756 seconds)
    (333/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065319424 seconds)
    (334/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113084995 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108897144 seconds)
    (336/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065986033 seconds)
    (337/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.069673535 seconds)
    (338/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07169608 seconds)
    (339/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.06725484 seconds)
    (340/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065299104 seconds)
    (341/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065410696 seconds)
  done (took 38.664365024 seconds)
done (took 40.137218892 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.125394673 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077730462 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07546092 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072447058 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076182601 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07640187 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.07604408 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073605734 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078148774 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07495637 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106351926 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063328277 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070969193 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080260436 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072284199 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078750487 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078488725 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078372285 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064037268 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078538717 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089227722 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076863898 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07260798 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078405294 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064429977 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072530929 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119878574 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083858133 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069026281 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073682432 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071624974 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080035125 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071702965 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071215791 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073644535 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.06907567 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073999746 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070448024 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120420327 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.06949409 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064936174 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076871024 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071385615 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072137477 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072687914 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076124467 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.06939648 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079678375 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06380747 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075353444 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12078972 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069832646 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068950201 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072641625 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069527526 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073779512 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068942694 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075571513 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069189073 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075847987 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073806475 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071991422 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063963797 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072675266 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071118594 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07142761 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062852419 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069506455 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063894854 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064151128 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063608484 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07300257 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071046867 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069143051 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063476099 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064287027 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063728019 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076163289 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071387765 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073364079 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064769967 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069797396 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069297629 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064901184 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070005957 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076232947 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064028361 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065168263 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06373311 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079428926 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071309136 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064636788 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076569421 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070219858 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070208848 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064825747 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064215665 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0703528 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072866727 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06477623 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063570565 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070158754 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070620484 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074876022 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066193443 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071403594 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071298726 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064709864 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074874754 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073361022 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075921475 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079606151 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076020544 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080382612 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067189018 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065641557 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.23942102 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064892445 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069575063 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07153042 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068748677 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071366153 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063973111 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06254261 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068820553 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069128278 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063672738 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063722962 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063581679 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071953 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07043172 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062205233 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063229262 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071943148 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071748162 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063279303 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062666378 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071786845 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063717741 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069059204 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068281772 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071889204 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062743596 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063494224 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062329731 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062611831 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06241863 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068192159 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068631986 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063670899 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071908054 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070356636 seconds)
done (took 12.722654385 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068277903 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107208553 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115690091 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109518773 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077284529 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065338927 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06795 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084006514 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067519071 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089491998 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089312649 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085804505 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128855635 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063050378 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064372972 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06496732 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062507396 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07640096 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113576001 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088383755 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106937022 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064341438 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080595688 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08458109 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077495816 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083581596 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065820942 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06533745 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067643858 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081998055 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090528507 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064480719 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065699238 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083810382 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080752574 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073462384 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065487662 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07148809 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065447664 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064548132 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066642339 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08330651 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071815438 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071960803 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065761203 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065564301 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06478822 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072308743 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078739498 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070862109 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077521588 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081592671 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066329045 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064566087 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.0628922 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072496454 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064882019 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065476424 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065235141 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064592362 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065190808 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067454794 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070317926 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075383093 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068818072 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072191327 seconds)
  done (took 6.543883719 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083565752 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09249265 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078332145 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078431038 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064003345 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06465321 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064726098 seconds)
  done (took 2.120451565 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06848955 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104836344 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111805564 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112672762 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.12150136 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.110142376 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06555276 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097278286 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064108929 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106068481 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.11940795 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.114176923 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067815898 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076888004 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06551174 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114608734 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065725999 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072072329 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110504676 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116005669 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069649565 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095544072 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078731902 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065839783 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114985066 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106931398 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067634745 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065928669 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067491323 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064898145 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064803062 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088073487 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106712447 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08009024 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065771072 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06435568 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104629876 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066183655 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.10382798 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072423293 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103851928 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067273549 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067633044 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065142402 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066106657 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109010822 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066391677 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065036794 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064685835 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.108004356 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064676125 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106655525 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067560236 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07054025 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072549763 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071832209 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072938596 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066112524 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.110506686 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075723292 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067345954 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.119634529 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.118481799 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.106223389 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118673116 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074868314 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109735234 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106470898 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065737364 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065538821 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066200217 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119905295 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069746361 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068782685 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071468488 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073850377 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113628281 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.126181397 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.127589727 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081746157 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.236540043 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065913369 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070717735 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119475883 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069433342 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064574893 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065195752 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063977205 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.06933272 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06623101 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.06929502 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064237546 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074331512 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067078058 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066421298 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.11215368 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064773749 seconds)
  done (took 9.909214378 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069912923 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06708925 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06569615 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06565244 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065818343 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065588795 seconds)
  done (took 2.014388883 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09254276 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065720905 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077196987 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068276272 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.0873073 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108300551 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107429838 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067172552 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081545588 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076735865 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.108166311 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.109808562 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.110072372 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066869421 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107414693 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066965712 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109049719 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069317585 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076657132 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067640495 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079715174 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067249501 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067294636 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116629906 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068683721 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067080704 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06674622 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077155741 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.084166155 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067299642 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067147541 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068320892 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075016363 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067327506 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110537247 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075324125 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066397544 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070856196 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068040954 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068351114 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112815632 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06793445 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070370891 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07086337 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067355184 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075070732 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070754686 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070137122 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110588403 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07079044 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070661832 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066570719 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068150631 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070545483 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074869143 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067231637 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070502104 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110884989 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067502245 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07526203 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066450499 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068583724 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067635139 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068241875 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071561667 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07110423 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07554611 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067876096 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067870435 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066758729 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071403279 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066852577 seconds)
  done (took 7.170944348 seconds)
done (took 29.333239743 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54552745 seconds)
  done (took 2.117197602 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.961429157 seconds)
  done (took 2.577437042 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.584215471 seconds)
  done (took 12.203690008 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.398614207 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.476643294 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.760498253 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.1359987 seconds)
  done (took 3.414521278 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.884868219 seconds)
  done (took 2.509443714 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.240100442 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226813993 seconds)
  done (took 2.109724198 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.450617071 seconds)
  done (took 2.064250874 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.214588654 seconds)
  done (took 2.833232792 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236194649 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163828487 seconds)
  done (took 2.023979028 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.627410639 seconds)
  done (took 2.246330945 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.574997843 seconds)
  done (took 6.198805748 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.324866573 seconds)
  done (took 1.994281176 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.24112247 seconds)
  done (took 1.866154122 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.599441224 seconds)
  done (took 4.217535416 seconds)
done (took 50.011174574 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086305668 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083956966 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083610332 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079258794 seconds)
  done (took 1.928101726 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075593229 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068680026 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071188583 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071536979 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068995479 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070687996 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071499122 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067797491 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069249961 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068399342 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066695444 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068242326 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070677143 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.06789604 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070378118 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071675465 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068167439 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068422233 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070249934 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06771905 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070536623 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068087993 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066072248 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067684986 seconds)
  done (took 3.286394015 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079265846 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070049045 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072920501 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068711842 seconds)
  done (took 1.919814566 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077475279 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074356092 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082739235 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087255115 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073735243 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07461752 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081504504 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08159949 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063511926 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084410752 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065914617 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064582574 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064649397 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083249536 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080745106 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060036881 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061368423 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074812364 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073917973 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076657696 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066145222 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063329061 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073898911 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075048007 seconds)
  done (took 3.39266019 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083173501 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063704732 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079897532 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088481333 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090088645 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063648209 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078011402 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090333157 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12645655 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063858315 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072457826 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063627443 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10312784 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06362537 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078875649 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108164524 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111301304 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067521096 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096644584 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063558549 seconds)
  done (took 3.294184533 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078422349 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067796546 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068085388 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063533872 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073907271 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070353219 seconds)
  done (took 2.060410036 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069294501 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066135075 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065263957 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069969944 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065762509 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065676428 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065134891 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064394224 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064263253 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065030405 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064969569 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065342651 seconds)
  done (took 2.421245972 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215645075 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070856182 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068461606 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064078651 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065769199 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064901089 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078787689 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066890711 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087330765 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064953795 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064934017 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067093237 seconds)
  done (took 2.612158476 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106092972 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108989376 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141647259 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113586319 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11455318 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093444957 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163561733 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092134338 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158371671 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135502702 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115390077 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092529874 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084905273 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068013429 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099151197 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11889306 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13780771 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071207176 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111786659 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.207953954 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131883516 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134579769 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146505273 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115638966 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091481817 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146824688 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095789833 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101608471 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124317421 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127333862 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118289193 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097211658 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070750105 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069748578 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151119379 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108795526 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124177117 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092606899 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106004158 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088652223 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108885278 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069213948 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.08329874 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112832849 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086001003 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134323148 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093702645 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118881842 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083375884 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.312563418 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125295759 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134964989 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084040678 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103297529 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134697845 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109718981 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131387365 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103630945 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079917165 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116049429 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104047468 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097012491 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105395981 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077547676 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173639084 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0868935 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109509801 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108905939 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.0932058 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093708302 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104495759 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134946597 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126984146 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126490161 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139588434 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095261318 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119980383 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100872194 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128744704 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103802158 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071813 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.123100776 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130275787 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100814832 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10201417 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133349523 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093249832 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077675301 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102000671 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120540292 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0803404 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115036346 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080804991 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111110808 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140389346 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101286116 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116545468 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124369091 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.251619061 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151380903 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106183646 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070958918 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114063051 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109514719 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152798297 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092566958 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074355868 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098261864 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100162275 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150504001 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104730235 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077503358 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106365725 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137083355 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091488589 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.215499154 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092903242 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140127835 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108012717 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085188961 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073269497 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089025594 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112518205 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10730666 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111154212 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093546126 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083292637 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085470985 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114466081 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093057895 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07988732 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113519969 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098625657 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.073799153 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087421242 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075380434 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142416768 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077830869 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139261389 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127320562 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076953452 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108421603 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098847352 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110065583 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098153923 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120429398 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144323484 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116530661 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091901763 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097527773 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114462797 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.154415746 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.30733468 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090946302 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07523462 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09893387 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110150603 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095524829 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123565804 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093528701 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104455181 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1004921 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137446932 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13953047 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09552131 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097887394 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104258588 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119097219 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074633503 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153088263 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101139701 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116117498 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082412639 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138077306 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109978938 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088022776 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08580152 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098602524 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10467921 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107458552 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144120244 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095239235 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071709662 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092244276 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144428128 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076803676 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109388379 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09054294 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091952478 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118863602 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094770105 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0807865 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067728826 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129340641 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162241691 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070118197 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116334939 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110734751 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10471416 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.124856417 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070704508 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124502464 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14655979 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124108436 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.322814777 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164895379 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116075748 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116264744 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110496977 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103150671 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076953119 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122195774 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131549338 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092946242 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088771681 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131739226 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116217632 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136242933 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113949209 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115733005 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102507478 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106263185 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100395671 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102797326 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14274869 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121510342 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124336137 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085610985 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105463653 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119624221 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137182451 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081343772 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141615895 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084533018 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120503125 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077878473 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12464012 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077235748 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108367166 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078996544 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101661751 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069002651 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073678832 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144769721 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114154115 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109238021 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10280635 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.1410345 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139613046 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079148672 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109582941 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120164643 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104028355 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122941146 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.287370829 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088083039 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093160721 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106721389 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08319808 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079301283 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112588408 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091441753 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122032547 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081873877 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072855561 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13621901 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101473955 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092150837 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075805511 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104704119 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121183623 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090365881 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084314513 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115241228 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102785254 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138129131 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088897973 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095063473 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121985597 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077960408 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090287027 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067859461 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083966572 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074652405 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128465166 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07513517 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116869022 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.06796882 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130981903 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087084555 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092116407 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101894151 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109657088 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127463833 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094015457 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141005143 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08933224 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121574151 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10908277 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095268815 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089733952 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104278298 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101459848 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.125415939 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096579993 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125717037 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147404638 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104891968 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14832888 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095207274 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130354671 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.285594005 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12455864 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109594121 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16425755 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135148092 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108984986 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109472566 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074028512 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093073284 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102263237 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109432716 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169700399 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122446399 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070417855 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104640424 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091860062 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106076878 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101381476 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079829927 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142066163 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100594945 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086635252 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110440205 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089817619 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10362068 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075407537 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099994954 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104536171 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094830043 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097017151 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117870821 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12967844 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11304246 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144723758 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100462803 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091657464 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.11874245 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110916469 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110932009 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086531815 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086905498 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140802372 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124111804 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.12930349 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102708863 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11064115 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114881184 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102003912 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130041109 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113986216 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.309525812 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07932652 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075046665 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066640789 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070458574 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121239222 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104898045 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108861081 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095869532 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070309543 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10060379 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103768249 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070100356 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08533809 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091228188 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093450906 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089579492 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104152755 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109809954 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088929076 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101227471 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096780075 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143552285 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099510525 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085976332 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140617285 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146925975 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086499671 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091010924 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070290441 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077685931 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111286501 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15044307 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152706457 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07809956 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086341693 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085563712 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086157954 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070678068 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088705164 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088364582 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105602594 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100907625 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113427158 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106363021 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075605036 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102971735 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099666904 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093147265 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108821782 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124923326 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129749008 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.14492489 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11637864 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109695484 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076607143 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081319693 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076536524 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081366578 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105503471 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.253739452 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075324054 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140407665 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.08982156 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102524107 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105663149 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085374955 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073424269 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133759664 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067505033 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131562527 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069321379 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079516264 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079828901 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076616411 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090589366 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133662156 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108462259 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108733439 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105302059 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101624382 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15803217 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154090656 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079382567 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142228696 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074420436 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075707132 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07471794 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110583537 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089191959 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115323986 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142362466 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090141192 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101424431 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077500475 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144353039 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099153515 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104220689 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085764391 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078607686 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14587836 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07966959 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082043763 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089864648 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112458129 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072318539 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104737457 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085609679 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079895426 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167708866 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.712862193 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091074686 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075839118 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097074973 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.148406144 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.317943761 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09575632 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106201939 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116316386 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098453449 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093931477 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105009216 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.189369788 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072428739 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091809206 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10113694 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094997203 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099070569 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096151641 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085924023 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089739913 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08482224 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076977799 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10479753 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08565484 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093944647 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108423776 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081233412 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085870986 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127914863 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101404332 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080318661 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085667236 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103081764 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086140819 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101686528 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068651428 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113133219 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090397474 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118987322 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098218819 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107827925 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128909015 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094049502 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137439506 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.10714307 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122561366 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08747017 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078215832 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127860106 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090316747 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077909491 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147613075 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098197774 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09166886 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105113061 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097486178 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114985288 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122152659 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117826392 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099965094 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080617828 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.277317274 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100977771 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084636061 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077350246 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072562357 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07477834 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104679211 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083691659 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081346161 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112095774 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086454473 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100519215 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10089829 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119156213 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085843337 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099287408 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108754095 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089081881 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107571199 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098959589 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12587667 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170570403 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121906361 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127242955 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133192269 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076551503 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074442741 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067641272 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115310295 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079077959 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089205187 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081123691 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135094556 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082187389 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113028267 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243265978 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080245297 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09441721 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096463553 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068944061 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083101342 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10754142 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086760473 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079408025 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119429243 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083225417 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130989775 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113113547 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100632922 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096792538 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081497341 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116659563 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105416694 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132005674 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098956245 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076014659 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128335853 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109223379 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149234429 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.248984997 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079401902 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127736023 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101497566 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128197294 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077899438 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146009047 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140791629 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098032298 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130800959 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069023311 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085713405 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086638482 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124087669 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08147139 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108183096 seconds)
  done (took 68.353118939 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.144899418 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174443754 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.12265418 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.133067255 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.290452389 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299921595 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152703241 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123693303 seconds)
  done (took 3.227165758 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070460068 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081781422 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079604219 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.24335904 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096529097 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066462747 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07198673 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080672254 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066065638 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065712153 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099911511 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066030174 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066161243 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.534251533 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065754536 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071845429 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066259669 seconds)
  done (took 3.674021707 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.350471066 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.955323217 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.32543476 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.653296932 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168482661 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.724780745 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074702626 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081969398 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.812367885 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.214135426 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159677897 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087713272 seconds)
  done (took 21.386392408 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078112662 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.119516957 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.118488254 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073002339 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07255509 seconds)
  done (took 2.229949937 seconds)
done (took 121.433790845 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085555396 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172498235 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067606203 seconds)
  done (took 2.042656156 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.12130465 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.118624568 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.116836653 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.118471301 seconds)
  done (took 2.251208405 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076387544 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074914021 seconds)
  done (took 1.926945335 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227812559 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.215473664 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090187165 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085110124 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078278648 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079696502 seconds)
  done (took 2.028776878 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073100547 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069704246 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069834396 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069916401 seconds)
  done (took 2.05308269 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170654888 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065797271 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067985192 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069790155 seconds)
  done (took 2.146271859 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08710602 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085916959 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114588391 seconds)
  done (took 2.064733966 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085322269 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083369102 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077385417 seconds)
  done (took 2.024379806 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110907706 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095013003 seconds)
  done (took 1.979343109 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081037391 seconds)
  done (took 1.858880727 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093284423 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096940763 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183514743 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.148769739 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.184412385 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170681735 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075589304 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075870507 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071523352 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070559167 seconds)
  done (took 2.94400847 seconds)
done (took 25.712952732 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085839344 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.191045545 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.439504545 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085412799 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.824688815 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.436760434 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.731111124 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088759986 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098345267 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066975147 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083917259 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.803774037 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.730349231 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.143982129 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.716080987 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.133987635 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.560174448 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067246908 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066323684 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066871178 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715206813 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066609458 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066938977 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067296019 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558725238 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.453393816 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067959107 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.133957043 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066613124 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073692101 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.436453839 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068038239 seconds)
  done (took 14.947846023 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077295801 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.144838018 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071775684 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082461765 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068992866 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068729934 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070857951 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06767131 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109374197 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067374498 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084279345 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066558998 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071651933 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068545408 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087726858 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067042331 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069329195 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067771427 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06715149 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06759631 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085834977 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066783142 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067555173 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067653643 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067330441 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081020913 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068120949 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066982058 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067175437 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071014078 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072153366 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068621555 seconds)
  done (took 4.189593955 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129337993 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129369103 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07243601 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107229842 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11601857 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069865378 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150574107 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089744258 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113113947 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067640098 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084511833 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067140111 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102972662 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068667759 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088251237 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067352203 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069560546 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067636328 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066982395 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067607376 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086275152 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066716653 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067319207 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067629267 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067541247 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082938903 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068530639 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067540093 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067262735 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071232837 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073149602 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068699171 seconds)
  done (took 4.44516134 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.0711273 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069750965 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075693578 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078558878 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064840547 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066871906 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067989078 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065055978 seconds)
  done (took 2.357849253 seconds)
done (took 27.735340331 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080338439 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066197696 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068892774 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085683136 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072118094 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.109854455 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063459133 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072987929 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.06953273 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069803258 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071312401 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065761113 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068267774 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063305026 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070001685 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064109349 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112469481 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068437204 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.109586401 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.110975658 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066741001 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069595437 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072539844 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110828347 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.110079317 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.109888243 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073143067 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070032533 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064947959 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067452459 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.183958255 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.184258815 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074044588 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116924469 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065111126 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064803262 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068981478 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067297021 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113817254 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073906842 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066925781 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073431439 seconds)
  done (took 5.290504565 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.190594281 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.193451252 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.18634763 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.07879782 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091219068 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078611691 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192477824 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076194563 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074422686 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191764531 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070304898 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074594523 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076651994 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067409096 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074103445 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070385743 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075744714 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068418539 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074062423 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.073947763 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.191637834 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067961464 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078694044 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07574201 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069790098 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075703016 seconds)
  done (took 4.455112874 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074393074 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087415466 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091012124 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145978952 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109088745 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081843933 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080916856 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092580179 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100421721 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066805524 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07048956 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097298719 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095058693 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073488989 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106262604 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084609457 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078444899 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068123448 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073041799 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100466277 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089192281 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084911895 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099168821 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086410625 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065499136 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075524248 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073294316 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081987182 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073749114 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.07871369 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070366124 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069887724 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067049097 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078016038 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070911879 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064744451 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089452895 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079827951 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08180359 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106636569 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077030631 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068403226 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094142194 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.18042174 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066964686 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069099835 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070851502 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.07962018 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068689083 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097634282 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08261318 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066787465 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086036885 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068501879 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068390093 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083091651 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068697798 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068711185 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078621918 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073050423 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08774315 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072144827 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088013112 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.0668282 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078224649 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068115556 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068393544 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065517026 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100802641 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07438906 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117202162 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068201034 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064700981 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079327376 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078433039 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073729213 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066479485 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086083096 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078893775 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070671338 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077779816 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069458927 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070019466 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103613689 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065631282 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064864096 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06479144 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069078922 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070494468 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067843625 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080076136 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066593213 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070613777 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082065826 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067238586 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067717819 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069599034 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068164989 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066604531 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077768037 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071597424 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069357021 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080473456 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068773077 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071049078 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082512598 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076662608 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06741173 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.06925082 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071393645 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07110006 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073799739 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072685358 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071029709 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074032796 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076968905 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07589797 seconds)
  done (took 11.036181295 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.209258274 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.194815672 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068374026 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.190884534 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075557366 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.124206415 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192614735 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130874194 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067612231 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068081453 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066411536 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.138544353 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.132815379 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.143519694 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.115006069 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06765696 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.09375184 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.144325845 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.196886051 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.191463109 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093317801 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075362303 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069858058 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068799385 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068853931 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076684687 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08317753 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076167516 seconds)
  done (took 5.09105872 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076033643 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082669441 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070571118 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091139295 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083606839 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066911078 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069067696 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068153923 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083888448 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.0725481 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066670896 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071253995 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.06995334 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067317587 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067620139 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073099263 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07318684 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065419288 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07013802 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071080457 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077654235 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154532728 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071345654 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069957539 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069113288 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067019795 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073474918 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075149812 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066375463 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099979036 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064006601 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071061135 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08128537 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067739384 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067056948 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067903468 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067235916 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067294882 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067496717 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065135723 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064997008 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073257306 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065982526 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072233643 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081759125 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076012287 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068575811 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069615156 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069477911 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064104147 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070448003 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070530948 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070080373 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075842281 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070860326 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069500484 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069086283 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.0983387 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073440217 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066819714 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067245944 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065584798 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068885303 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07526787 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083947252 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068794647 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065573984 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067199558 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07475764 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081811153 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066815039 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072545334 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063979107 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067221761 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069363536 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070199024 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068770539 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065489855 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067184553 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067323468 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068250951 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067053002 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067607198 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070153092 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065012929 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065539623 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068179904 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068892955 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072781773 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.0661824 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070301388 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069252939 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066673402 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070650301 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074021066 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07102514 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088101428 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075923925 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068162002 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065626629 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082730753 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069467816 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066948656 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071226528 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072228686 seconds)
  done (took 9.427538918 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098542711 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068270022 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087100442 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098444445 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07675308 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07154088 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081032853 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067377418 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088237581 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065582178 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075283398 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064614088 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080113339 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07585129 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067986706 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07696812 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068924802 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08761134 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081440525 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064919543 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07571024 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078987865 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079015597 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085025267 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084504854 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085576723 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078857772 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068891198 seconds)
  done (took 4.05456547 seconds)
done (took 41.139916877 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.886970616 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.128962104 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.886021823 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.486575284 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.957246484 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.92043371 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.960105088 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.86963921 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.462626245 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.946628569 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.620196706 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.491871537 seconds)
done (took 68.501405178 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.958117611 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.02629716 seconds)
    (2/2) benchmarking "String"...
    done (took 2.123295602 seconds)
  done (took 5.99795681 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.314508075 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.874563255 seconds)
    (3/3) benchmarking "different"...
    done (took 1.911226667 seconds)
  done (took 7.904812819 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.132948427 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.681092352 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.151964072 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.873688123 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.881976175 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.364596246 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.060580366 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.518263578 seconds)
  done (took 33.346989682 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.878646589 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.243291226 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.241688328 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.317755362 seconds)
  done (took 21.568483038 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.31747307 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.199102572 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.198158403 seconds)
    (4/4) benchmarking "different"...
    done (took 2.340094973 seconds)
  done (took 10.954729171 seconds)
done (took 91.825374942 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.874566987 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.069153376 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.886813692 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.053517995 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.888068712 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.962697768 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.882999253 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.896456746 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.880917706 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.881713828 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.354970801 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.877222553 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.875421296 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.935712073 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.876283429 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.941159868 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.996699872 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.889355861 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.889608467 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.372289384 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.054031239 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.887774715 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.882312183 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.090068256 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.106493578 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.909977239 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.224698772 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.889641382 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.89861294 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.889589268 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.878576799 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.884236187 seconds)
  done (took 207.68880162 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.876412079 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.565334725 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.583716677 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.890632972 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.159452465 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.220156894 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.680375801 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.187454686 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.881789994 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.880672716 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.735640521 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.877647227 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.794643564 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.392922794 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.909740964 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.891897229 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.688815843 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.620958956 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.91490775 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.744434456 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.886337622 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.340176421 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.358106595 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.616360652 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.90244704 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.911443141 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.881091702 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.896580822 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.333762858 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.646013497 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.886457735 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.905820929 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.32042683 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.10883463 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.87901529 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.891440479 seconds)
  done (took 180.080045358 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.104274357 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.884786762 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.9223414 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.988219896 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.649474439 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.5268216 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.879923478 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.875291381 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.875733417 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.882686275 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.880499545 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.941642237 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.230320428 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.904324755 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.876587683 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.876606766 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.284762492 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.06472 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.876306366 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.876056982 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.998782707 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.22515989 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.294551698 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.879582041 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.912252435 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.987878535 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.887047542 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.876760401 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.875556025 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.986170949 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.879994379 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.00177337 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.990395041 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.911590244 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.931917618 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.88685407 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.962164153 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.880403979 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.876628515 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.878321054 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.921504445 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.88059979 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.701141921 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.978985266 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.879881636 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.89471532 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.344203431 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.467980452 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.885375102 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.878129985 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.877080652 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.877149931 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.877517766 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.910562131 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.880560562 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.910205904 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.91658531 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.881070458 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.877893801 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.878243806 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.877706979 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.877674256 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.877600158 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.883854595 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.942561459 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.442459694 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.611534972 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.237861135 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.503818928 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.881881793 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.055909467 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.96758501 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.881114853 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.042561385 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.88169184 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.878319726 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.877628915 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.877451598 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.911121703 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.83027578 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.883514059 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.9883033 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.882351067 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.878458567 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.176629636 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.288497943 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.886019171 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.897184886 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.963232596 seconds)
    (89/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.881118673 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.878553208 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.878361537 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.885622881 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.820621052 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.884510859 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.878563649 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.878614041 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.060243436 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.883459575 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.224360952 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.245013388 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.976470624 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.281780781 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.672047509 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.886963598 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.879161023 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.896997502 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.881264213 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.879748545 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.914140667 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.880081359 seconds)
    (111/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.879343533 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.878949696 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.878838373 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.880220187 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.879265395 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.88362522 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.898273712 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.881439938 seconds)
  done (took 417.774935988 seconds)
done (took 809.537662189 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.545274013 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.611017511 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.465556771 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.514783055 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.471652467 seconds)
  done (took 14.420993215 seconds)
done (took 16.235306143 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.908136189 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.909163947 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.889912908 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.906942461 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.905350635 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.900315121 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.916641279 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.919238809 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.911776679 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.900032978 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.908425191 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.901421215 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.911386273 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.915376065 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.926971202 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.914685672 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.904744698 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.895068799 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.910486466 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.903038315 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.903843135 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.907851699 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.902364058 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.909845553 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.917855065 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.905041791 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.900597929 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.908803551 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.906515819 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.911771514 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.921268747 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.915926257 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.914369299 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.915358338 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.913590245 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.917266131 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.910010805 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.919042956 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.90511648 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.919186965 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.912776972 seconds)
  done (took 80.111474693 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.894009794 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.05690585 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.167730977 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.933612315 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.891722361 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.164182541 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.96082659 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.050741195 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.055946516 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.192234825 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.206608082 seconds)
  done (took 24.39274033 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.892279043 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.059793086 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.185786528 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.936826871 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.894077739 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.177142818 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.96596482 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.050988951 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.060008515 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.175015404 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.192846346 seconds)
  done (took 24.425863805 seconds)
done (took 130.747241258 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.430697405 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.941972695 seconds)
  done (took 6.188704942 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.8859344 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.905856196 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.065757344 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.909391668 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.889393752 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.907218526 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.907411635 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.889871693 seconds)
  done (took 17.177189304 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.886963108 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.886527881 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.886607963 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.886827793 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.886476912 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.887020747 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.887153149 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.886879361 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.887714854 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.887065596 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.887378816 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.88715513 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.887578892 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.888075307 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.888260739 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.887999468 seconds)
  done (took 32.01329336 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.887245058 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.887334603 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.887338263 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.886944932 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.887956404 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.887754146 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.891102592 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.888815933 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.887494313 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.887861933 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.888774009 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.887851912 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.887303445 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.887715075 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.888056195 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.888244549 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.887860683 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.8881871 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.890271558 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.888701333 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.887607095 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.888222603 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.896624553 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.887899262 seconds)
  done (took 47.142065634 seconds)
done (took 104.358981701 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.495080357 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.907668285 seconds)
  done (took 9.220250375 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.892853849 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.888125898 seconds)
  done (took 5.695518269 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.888116007 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.888212273 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.888981909 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.888300475 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.888198261 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.888230137 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.8887211 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.889435016 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.888375205 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.888951803 seconds)
  done (took 20.703588603 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.888997747 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.889514731 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.888737295 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.888569568 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.888984087 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.888592818 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.888632942 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.889245452 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.889431874 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.888716653 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.888852907 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.889847576 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.889444535 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.889819339 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.889686544 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.889143014 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.889288042 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.889899519 seconds)
  done (took 35.824815096 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.890750522 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.889844869 seconds)
  done (took 5.600689207 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.889469439 seconds)
    (2/7) benchmarking "second"...
    done (took 1.889632426 seconds)
    (3/7) benchmarking "month"...
    done (took 1.889518418 seconds)
    (4/7) benchmarking "year"...
    done (took 1.889645464 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.890117999 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.890104755 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.889853627 seconds)
  done (took 15.048191578 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.89074818 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.036932847 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.07947711 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.370861046 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.891605799 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.893936714 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.499003766 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.893360175 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.895202433 seconds)
  done (took 20.27127574 seconds)
done (took 114.184834559 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.72739504 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.893990665 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.551597621 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.998771962 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.961392595 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.245284272 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.895553688 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.471296004 seconds)
done (took 44.568594635 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.94508468 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.891250306 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.932093577 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.93051777 seconds)
  done (took 22.575204946 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.899255096 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.58281293 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.922358027 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.962089298 seconds)
  done (took 23.270946877 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.401483071 seconds)
    (2/2) benchmarking "read"...
    done (took 2.302036412 seconds)
  done (took 6.538067086 seconds)
done (took 61.15427644 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.891474481 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.891654295 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.891658161 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.892337691 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.89147703 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.89393773 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.892375433 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.892292061 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.892470774 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.892319641 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.892388544 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.892149701 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.891852394 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.892387757 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.892450084 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.892054494 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.893655828 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.893203425 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.893530878 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.892760002 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.893678362 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.89325482 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.893355508 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.893126071 seconds)
  done (took 47.244045803 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.893293324 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.8928198 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.892664036 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.892615825 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.893478065 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.892969092 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.893853839 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.892914414 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.893183831 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.893780686 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.893720774 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.89375182 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.893492722 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.893590234 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.89378708 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.893962616 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.894000123 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.89396044 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.893478423 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.893954522 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.894326912 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.894513165 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.89475266 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.894412346 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.894668883 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.895017469 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.895127497 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.89422272 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.894856368 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.894699577 seconds)
  done (took 58.639451683 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.893741307 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.894051762 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.894619196 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.894568951 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.894561552 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.89476776 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.894337274 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.894258848 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.894711535 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.895079415 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.894743491 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.897315931 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.89431853 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.894760643 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.895304968 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.894541245 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.895062748 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.895312547 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.8944298 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.895362002 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.894999189 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.895089425 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.895360148 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.895414585 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.894889849 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.895046222 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.895952968 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.895318526 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.895799337 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.895560278 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.895538649 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.895743797 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.895818005 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.896021942 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.895497687 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.896409243 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.895981826 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.900359533 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.905378066 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.895217627 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.896142438 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.895815344 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.896465109 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.89569764 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.896180795 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.896358783 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.896535821 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.896806143 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.896518428 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.896971013 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.896324623 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.897293768 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.897428504 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.896537096 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.897336919 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.897138967 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.897308467 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.897544045 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.898201006 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.897467801 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.896797935 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.89734004 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.897542174 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.897406588 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.897949135 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.897926078 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.897881186 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.897973157 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.897491153 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.898763022 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.897553369 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.898249788 seconds)
  done (took 138.356035835 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.897226835 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.898234139 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.898682179 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.898486599 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.898106838 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.898228279 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.898814512 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.898031657 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.899040356 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.899080429 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.898765006 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.898762299 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.899025575 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.898422545 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.898931347 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.898784482 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.898990308 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.898480087 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.899447155 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.899284883 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.899111708 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.89947964 seconds)
  done (took 43.599829083 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.899352358 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.899315038 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.901246265 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.901181409 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.900862037 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.90132385 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.900933345 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.901323276 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.901628611 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.90172284 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.901388226 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.901372233 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.901993561 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.901943204 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.901936095 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.902208784 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.901320918 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.90263371 seconds)
  done (took 36.052832917 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.901803738 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.902291728 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.902230992 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.902102125 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.902544629 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.902560359 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.902499478 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.902636147 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.902419594 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.902246806 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.902759731 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.902553941 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.902942913 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.90265325 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.902523702 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.902885616 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.902251468 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.901963242 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.902574857 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.902799708 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.903360143 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.903382059 seconds)
  done (took 43.688233351 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.902686547 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.902769138 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.902766837 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.903148874 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.9025341 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.902358682 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.903033401 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.902621005 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.902910949 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.903309722 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.902942297 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.902876042 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.903518522 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.903275803 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.903689287 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.903435983 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.90376986 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.90443232 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.903626314 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.903063807 seconds)
  done (took 39.895270667 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.903394626 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.903412064 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.903543832 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.903219447 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.902892362 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.903414576 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.90379181 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.903314094 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.903733053 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.904262051 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.903461884 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.903888494 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.903544707 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.90407148 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.903936098 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.903749905 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.903622577 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.904115721 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.904410819 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.904075825 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.904782985 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.904428637 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.903858813 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.904213402 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.904715754 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.904165893 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.90432388 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.905043093 seconds)
  done (took 55.142868701 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.904419191 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.904730238 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.904469136 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.905407017 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.905065978 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.904946494 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.905712843 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.905341714 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.905311964 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.905364338 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.905100126 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.905579079 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.905036474 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.905039348 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.905451132 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.905589935 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.905963693 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.905687652 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.905711026 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.905550122 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.906224024 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.905534478 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.905933848 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.906330098 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.905103451 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.905660219 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.906360775 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.906643492 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.905901798 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.906104858 seconds)
  done (took 59.000839985 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.927408847 seconds)
    (2/2) benchmarking "in"...
    done (took 1.929516553 seconds)
  done (took 5.69249994 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.906471301 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.906477254 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.905594279 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.907273523 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.908016385 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.907402371 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.906245668 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.906704808 seconds)
  done (took 17.08973708 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.906249672 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.90972726 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.906486451 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.906411279 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.905906987 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.914225114 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.909004891 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.907730644 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.90851137 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.909416786 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.911344359 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.911134097 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.916068353 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.911258522 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.907396364 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.908793755 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.908205987 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.909745251 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.908585967 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.906879513 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.910445211 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.906966174 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.907212085 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.906968083 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.907400326 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.910414321 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.918915132 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.908624985 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.908872994 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.907932106 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.915436677 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.908801461 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.907744731 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.90913573 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.907463342 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.908326154 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.915042594 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.907866719 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.907811007 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.908284156 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.910490886 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.910620522 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.911688188 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.91645047 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.90846402 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.908685599 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.908062512 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.90835216 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.909591279 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.913556033 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.919258908 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.909372948 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.908388225 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.909275033 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.910933089 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.908748547 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.908542482 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.911637022 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.916430346 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.916075018 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.912807294 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.933798307 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.920213397 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.908783064 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.908143132 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.921747856 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.93999672 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.911088711 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.911752821 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.909356918 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.9176004 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.909452176 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.909958889 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.910096718 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.925151329 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.919782219 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.909419064 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.910306644 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.910411278 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.910409055 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.911866331 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.909322905 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.911117632 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.910402301 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.922198443 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.942064181 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.909840544 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.909723847 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.91284612 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.912967783 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.915508025 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.913543743 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.91135466 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.91041666 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.912006333 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.91462803 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.910899284 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.91062548 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.911575966 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.920228151 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.911897258 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.911220753 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.91540518 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.921512027 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.911222192 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.911353266 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.911737709 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.91092264 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.919466814 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.911024863 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.910845842 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.911406151 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.913611479 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.917313025 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.911489765 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.91670337 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.921434474 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.920057484 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.913919891 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.916340132 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.916086588 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.91502684 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.924752822 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.942688406 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.912224687 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.916015483 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.918846005 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.927111555 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.915931656 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.912466294 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.915118328 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.912302423 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.912550029 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.914235627 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.91290734 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.911850426 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.913163691 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.912671941 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.912951093 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.912777097 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.916594035 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.914774493 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.91558952 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.912495384 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.917376619 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.912467788 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.915530618 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.920650218 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.915371011 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.913516952 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.913650365 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.916951867 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.916234429 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.914586107 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.914082721 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.91378326 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.913069864 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.915513908 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.918945117 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.914166691 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.913909696 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.916054258 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.919150377 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.91383335 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.913936603 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.915331485 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.913857575 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.914173822 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.915794898 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.915190274 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.917164902 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.913887978 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.918775751 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.914614252 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.9142877 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.914150309 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.915269866 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.915040395 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.919905646 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.928666177 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.919800202 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.926485394 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.915428989 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.923089594 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.91617237 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.91667755 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.91579345 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.914683416 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.915356942 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.915348945 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.915446985 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.92016536 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.940029309 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.927363085 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.918053697 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.918684578 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.923211609 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.920723431 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.921790455 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.916721093 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.917172177 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.918341546 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.915581862 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.915583792 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.916270898 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.919957322 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.91709189 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.916636231 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.920716654 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.915816234 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.916443687 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.917853426 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.917611038 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.918912179 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.917335006 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.916889575 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.917073255 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.917110254 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.925870445 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.919472483 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.917020466 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.916763101 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.919443044 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.916945654 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.917205467 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.918263652 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.92131315 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.917577183 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.918494178 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.925664439 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.919046404 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.91847675 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.918547339 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.917548139 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.920033799 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.918186117 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.921437065 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.928184325 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.920132442 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.917369351 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.923716565 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.91800299 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.920363231 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.918027892 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.919480092 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.917868906 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.919667397 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.917884159 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.918841252 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.925876296 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.918641587 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.919184816 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.918493822 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.922296225 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.920774995 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.920823057 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.918638941 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.922864563 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.92837039 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.925049538 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.919951678 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.923663479 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.921085293 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.92184239 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.924471972 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.920131987 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.934550687 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.93122824 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.919459906 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.91998084 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.91937839 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.922853318 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.920217383 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.919645402 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.928145799 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.921366085 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.922494846 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.92469461 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.919458233 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.918831701 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.926354375 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.921479987 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.923399406 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.921464735 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.921107006 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.92122059 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.920013749 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.922645136 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.920174814 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.92251318 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.92515184 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.92031456 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.920328146 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.921594713 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.930225612 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.920874056 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.92116506 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.928699939 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.92201311 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.922449567 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.922181198 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.921423431 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.921962589 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.921748386 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.922275185 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.923798307 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.921160275 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.92622644 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.934877058 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.926101883 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.931301474 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.923527222 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.932935786 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.921223816 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.922225717 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.921538906 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.926099738 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.931603777 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.9216248 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.922129318 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.930431055 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.923689463 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.924211981 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.92656722 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.921901226 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.921457833 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.922055275 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.924627545 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.928409274 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.925919 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.92299165 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.92269156 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.922599326 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.923190232 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.925762547 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.924816859 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.923675873 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.9240996 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.922967404 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.922512747 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.922857575 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.922508573 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.922856393 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.92270416 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.923202149 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.931539284 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.923391106 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.925265357 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.927446651 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.923119298 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.932981135 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.923197653 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.923493723 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.925414323 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.924536675 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.927640104 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.924226419 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.922719659 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.92572172 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.924203303 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.926474292 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.93712947 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.931554471 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.929283189 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.925895437 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.923705458 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.925876043 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.93669952 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.956348342 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.924374632 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.92814266 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.929368347 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.93241116 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.927686694 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.931647228 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.929461272 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.934369881 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.925918317 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.925327532 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.929004248 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.94078557 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.924962376 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.925788951 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.925635199 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.930960529 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.929106893 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.925812407 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.928089705 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.928958173 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.928009751 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.938962256 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.925829572 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.928450208 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.925476167 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.926513832 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.925389035 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.926346004 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.927540853 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.927979298 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.92589228 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.926456702 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.929680811 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.932646876 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.926774293 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.930607066 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.938313759 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.926556275 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.92650065 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.929864074 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.926109051 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.929277512 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.92679726 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.927012801 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.930389962 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.927255332 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.929288551 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.931277163 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.938742483 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.928778966 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.927452812 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.926967107 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.931743426 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.927609645 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.927190326 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.929046957 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.93734997 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.932054622 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.941731794 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.939224432 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.927293931 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.930095558 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.936970742 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.93704398 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.927935858 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.928214029 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.927630087 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.931244456 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.930028737 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.929249161 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.92739654 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.930307791 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.935386999 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.928108082 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.929911287 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.927559728 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.928637451 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.931616277 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.931103717 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.935573974 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.928950546 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.928540336 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.928742455 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.930140855 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.930475178 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.932336758 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.928725124 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.929508459 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.930840172 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.931471149 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.934724186 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.929340865 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.930144005 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.931473336 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.92952397 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.929441122 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.931267806 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.931249341 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.929858254 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.933681315 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.940541451 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.929656223 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.93095078 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.932419728 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.934930046 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.92998507 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.929478648 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.929491112 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.929984188 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.938439946 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.930170527 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.929711211 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.9317445 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.930862977 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.936411414 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.932195515 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.935671498 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.930552451 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.932015009 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.930991145 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.934842798 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.943233954 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.9350878 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.934812347 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.940723884 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.936164982 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.933327026 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.931354493 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.930859457 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.932131591 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.933751885 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.935665853 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.932995383 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.934337419 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.930995995 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.93349408 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.930933708 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.933987366 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.931455904 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.931447049 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.935892979 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.942569085 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.94147937 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.931981615 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.933332992 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.931986181 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.935777282 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.946710214 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.931589597 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.932027158 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.931618728 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.93292354 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.934344889 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.941236321 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.943812241 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.936018937 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.931890289 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.939285582 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.956477563 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.935355929 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.943593879 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.971579978 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.934703163 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.93185986 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.933327336 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.934560159 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.932091664 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.936460804 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.932542542 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.939803829 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.932511484 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.933288302 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.940988037 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.933098591 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.933160557 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.932575211 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.935412854 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.940600248 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.932733224 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.940661588 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.933257903 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.933697971 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.935010978 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.936909821 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.933512181 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.933876564 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.933746049 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.936213993 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.933604782 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.933282491 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.943890406 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.934271913 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.9360801 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.949616881 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.949034539 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.933511504 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.934155617 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.933867024 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.940408371 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.937613658 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.934265503 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.939190245 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.945155507 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.938595152 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.94494534 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.936671182 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.935570182 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.93560277 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.934648142 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.934712936 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.949842807 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.947969798 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.936268203 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.93688682 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.943649396 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.934774277 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.942380268 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.941083689 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.935094869 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.937036157 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.93514224 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.935215475 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.936532178 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.936125153 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.940175609 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.945722506 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.935043776 seconds)
  done (took 1148.528754406 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.935655294 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.936228144 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.935967426 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.935929807 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.936375712 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.936347391 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.935824242 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.936378162 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.936069629 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.935604755 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.936103254 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.936255548 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.936076987 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.936708242 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.937336603 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.936358415 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.936228867 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.935867493 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.93585296 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.936576321 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.9369834 seconds)
  done (took 42.524314913 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.937150419 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.937034672 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.936528309 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.936622932 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.936311257 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.936567956 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.93676526 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.936882528 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.936830036 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.937256738 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.937167433 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.936429878 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.937360197 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.937234489 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.937276044 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.93680599 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.93705967 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.937499097 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.937384867 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.937887781 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.93747469 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.93800983 seconds)
  done (took 44.481413261 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.937387213 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.93751966 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.938262039 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.937780375 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.938464416 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.938371272 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.938354652 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.941961022 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.939180129 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.941090556 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.948138506 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.94911379 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.939083449 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.942774129 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.939114472 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.938386773 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.058636352 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.938532268 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.938336173 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.938400284 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.939249026 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.945890962 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.939733634 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.93955079 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.940267439 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.938995957 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.939334612 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.939836508 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.939745745 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.942509914 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.944378848 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.940041658 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.94092345 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.942721564 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.9412285 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.942314706 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.944657021 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.940126515 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.940422727 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.940004788 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.952031937 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.972380267 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.940060361 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.940448462 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.949021126 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.940827693 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.940312268 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.944898546 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.95087683 seconds)
  done (took 97.138818046 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.940272226 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.940535246 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.940655493 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.939996883 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.94092133 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.940852219 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.941306598 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.94037973 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.940332873 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.94163318 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.941906032 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.941150426 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.940945197 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.940733712 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.942357885 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.941328407 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.940999976 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.94177342 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.941523335 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.941285029 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.941782268 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.941653986 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.942929485 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.942421681 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.941507598 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.941737672 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.942123816 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.942219126 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.942694653 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.941922123 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.94204005 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.942659636 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.942414516 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.943040583 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.942953666 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.942950126 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.943145725 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.94297832 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.942279925 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.942746226 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.942788818 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.94267703 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.94339742 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.943026616 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.942662716 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.942932864 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.942825391 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.943982309 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.943792706 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.943340664 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.94305742 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.943532982 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.943158926 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.943519651 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.942822268 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.944583347 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.944099821 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.942987101 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.943992879 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.94390017 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.943571544 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.942934886 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.944123343 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.944063779 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.943839403 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.944224507 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.943964956 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.943809789 seconds)
  done (took 133.957726125 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.94334871 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.943334794 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.943992747 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.94398566 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.943716311 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.944319916 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.943829166 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.943679742 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.943945754 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.94433867 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.944553882 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.944834454 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.943995516 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.945153118 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.944863351 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.944697208 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.944073679 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.945142128 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.944630401 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.944531492 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.944408807 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.944630352 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.944928252 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.945082902 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.944905052 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.944742479 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.944629579 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.945111488 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.945689318 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.944895198 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.945278287 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.945059622 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.944978838 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.944825925 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.945923308 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.944941379 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.945784622 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.945318706 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.945373644 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.945532366 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.945055077 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.945760436 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.945277737 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.94571032 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.945726938 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.946056677 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.945636001 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.946288815 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.946951987 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.945703943 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.94679128 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.945850186 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.94556469 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.945755742 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.946267848 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.946552367 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.94608599 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.946437315 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.94675881 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.94652685 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.946534042 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.947310123 seconds)
  done (took 122.475076841 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.947130375 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.946710144 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.946606291 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.946864867 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.946535491 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.947125661 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.946845525 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.94672288 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.947035687 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.946878456 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.94728187 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.947470127 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.948512408 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.94667268 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.947185483 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948784834 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947630365 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.947584593 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.947969455 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.947556788 seconds)
  done (took 40.820026556 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.948234663 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.947209288 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.947721196 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.948781734 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.947685054 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.948065142 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.948071774 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.948195785 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.948058843 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.947692327 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.947841656 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.948213232 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948474209 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.948285369 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.948351552 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.948663896 seconds)
  done (took 33.044973915 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.948063983 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.949246935 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.948287522 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.948508439 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.948984475 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.948919847 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.948179702 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.949001168 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.949738547 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.949379108 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.948890385 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.948919585 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.950119679 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.949098671 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.949032772 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.949667572 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.94953709 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.949505115 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.949455602 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.949251027 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.950351979 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.949704395 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.949448806 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.949932432 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.949962737 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.950592365 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.949933139 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.950164485 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.950305903 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.949915089 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.949775979 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.950778316 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.95077977 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.949860111 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.949774932 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.949978588 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.949975157 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.951007619 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.950189563 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.950700849 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.950063273 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.954163621 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.951593681 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.951186548 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.950427591 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.95094071 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.951468403 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.951507607 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.950157733 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.950978089 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.95089841 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.950464835 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.950961755 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.952215919 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.95148083 seconds)
  done (took 109.130839942 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.951516661 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.952072975 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.951625687 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.952210185 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.951999647 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.951789812 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.952067083 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.951872826 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.952259918 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.951845039 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.952316137 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.952382024 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.951940723 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.952688397 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.952289119 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.952248404 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.952171225 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.952252951 seconds)
  done (took 37.016772682 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.952752763 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.951294556 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.952903056 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.952102224 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.952095752 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.952518587 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.951913777 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.952371105 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952689148 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.952726727 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952961533 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.9527093 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.952537394 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.95310726 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.953136026 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953939173 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.954082249 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95359417 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.953427441 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.953885972 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.95300018 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.952892507 seconds)
  done (took 44.843912919 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.954237326 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.95382395 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.972626225 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.982560312 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.980515504 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.001137661 seconds)
  done (took 13.725844156 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.953845359 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.953807413 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.953745642 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.954282186 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.954351523 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.954108873 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.954195932 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95467899 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.954524775 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.954525781 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.954121935 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.954625826 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.954234817 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.955098188 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.955086011 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.954904966 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.955077956 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.954997312 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.95504928 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.955407242 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95509649 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.955351651 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.954987977 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.955068061 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956416089 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95535815 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955397882 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.956026848 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.955137012 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955928917 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.955890328 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.955357509 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.956696531 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.955962374 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.95608583 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.955738973 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95586562 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955787776 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.955373921 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955724643 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.956176068 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.95564729 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955824231 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.955002788 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955888666 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.95606082 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.955279671 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95565418 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955915486 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955623396 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.956372062 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.956394608 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.956036822 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.955483037 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.955996045 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.956701708 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.956137837 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.956425773 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955935948 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956108168 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.956372097 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.956793928 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956158796 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957842054 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.956323871 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956377432 seconds)
  done (took 130.946594429 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957110564 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.956907821 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.957124151 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.956888872 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956183734 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.957212136 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.956351327 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956809841 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.956861576 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957147263 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.956878123 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.957082088 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.956538166 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.957170243 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.956686883 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.956801774 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.957262913 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957558789 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.957589518 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957530981 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957787317 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957241094 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.95797309 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.957719467 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.958235649 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957768423 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.958097855 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.958063625 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957911694 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.958129238 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958197582 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957823621 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.958382559 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.958021278 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.958099951 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95825403 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.959059653 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95854983 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95830763 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.958299791 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95859009 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.958635345 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.958522337 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958625933 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959091949 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.95878285 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958828081 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.9586282 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.959117224 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.958827428 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959357079 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958966526 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958957177 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95927582 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959043973 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95892693 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958797353 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95955271 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.960308748 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959286394 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959800756 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959224141 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959857499 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959326266 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.959878032 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.959501881 seconds)
  done (took 131.125320846 seconds)
done (took 2675.987252965 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.035478169 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.078849154 seconds)
  done (took 16.000443402 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.117198762 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 6.996136891 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.135613982 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.080839657 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.043484766 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.032966642 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.991403322 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.987548213 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.072366892 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.988058644 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.048184409 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.99066944 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.988033038 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.988052908 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.988568073 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.988222664 seconds)
  done (took 54.370266198 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.992256673 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.971282321 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.990539821 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.966822098 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.013949295 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.092202225 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.01780657 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.996838227 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.009608463 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.018868726 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.017416396 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.000638025 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.005252746 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.998850293 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.101402702 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.054730445 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.067986963 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.088715114 seconds)
  done (took 38.293853587 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.092989157 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.001601394 seconds)
  done (took 10.992451913 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.981299248 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.976129878 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.000881243 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.970206588 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.977654755 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.967330547 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.007128636 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.995718294 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.968612251 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.989334614 seconds)
  done (took 71.754608766 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.972287794 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.971211502 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.309734674 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.982226063 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.978834774 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.001197074 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.968725954 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.027363827 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.970161016 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.966622413 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.981454086 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.317372266 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.008168112 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.969945905 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.39557676 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.988627016 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.977144504 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.02892682 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.011876334 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.97618891 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.977039326 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.997064045 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.216016183 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.718441947 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.994815316 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.984978223 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.978140613 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.964795597 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.964985382 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.970036252 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.973841146 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.971787726 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.997471232 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.975110194 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.987215311 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.976966186 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.608383365 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.01543955 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.979500825 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.079731298 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.031424053 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.978447979 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.969537816 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.97878058 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.9666321 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.977137691 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.723820995 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.041341574 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.970847813 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.122546782 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.431672756 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.992684219 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.12121667 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.115255077 seconds)
  done (took 139.457975948 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.964347945 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.418443607 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136491717 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.967098944 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.358276809 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.17499702 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.569070208 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.011249385 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.968330317 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.169742122 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.133193818 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.096034861 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.969291747 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.969304616 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.965502128 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.966329767 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.138267457 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.036146731 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.970546603 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.966111369 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.988329886 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.19937496 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.08630927 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.968832986 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.987158259 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.183908551 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.017405953 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.094809798 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.366880036 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.966358094 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.030154901 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.969590495 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.966003985 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.967844591 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.009173115 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.07937708 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.06165328 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.969450352 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.610396086 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.966561041 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.565536964 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.17140504 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.081163722 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.09471887 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.112230621 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.179444916 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.639098281 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.965965816 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.702296044 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.131297823 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.18476091 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.173830333 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.064408196 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.97077196 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.38376317 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.967373113 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.967708456 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.224887843 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.118590571 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.085670686 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.971191471 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.967442339 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.96815451 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.201994238 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.970542737 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.07601424 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.970907191 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.967642044 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.07707042 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.088200202 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.113587275 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.191951942 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.005502768 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.919671199 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.272776668 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.176031703 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.035028354 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225236793 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.971006109 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.968959874 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.068302277 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.426350885 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.12372626 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.205560776 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.276928801 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00638574 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.458097441 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.96867606 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.189330465 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.111432092 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.280541491 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.11338564 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.024773568 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.820211893 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.96925411 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.969699604 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.270724168 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.089940053 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.974992981 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.507259102 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.208804577 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.053256097 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.989565968 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.447190431 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.075932075 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.974482349 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.575156246 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.970187541 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.182716079 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.013838468 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.971996212 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.969131484 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.11442191 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.892458737 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.971046651 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.234893424 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.031336801 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.973089519 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.125241344 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.973292337 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225317686 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.692745978 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.20683473 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.766487814 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.003949388 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.142357391 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.114920269 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.975140216 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.286939782 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.212336312 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.0676755 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.285459387 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.97431872 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.972358602 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.258801074 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.974560259 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.972002539 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.136100338 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.682488496 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.128983522 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.976019295 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.314298443 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.995361087 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.026394241 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.976677843 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.208243424 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.007824816 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.022412702 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.975083213 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.107539045 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.976475407 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.919076528 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.133256555 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.974829795 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.974668487 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.893500014 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.973697559 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.124139336 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.202046201 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.99032326 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.043691879 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.342064288 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.973007156 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.078882008 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.998723345 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.385765834 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.475715755 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.134929728 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.976931172 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.973542178 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.972531621 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.205494757 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.255359565 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.97895201 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.975322881 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.721708637 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.203438788 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.973139594 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.149704505 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.710458917 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.167918295 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.188035201 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.977036569 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.026141035 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.979090796 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.225743368 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.504942394 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.050209392 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.973760027 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.973809793 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.974049637 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.975019179 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.174602188 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.008553233 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.734257436 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.115277627 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.240159527 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.191824413 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.282449214 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.034712147 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.980140047 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.220541364 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.977587393 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.037523972 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.978182915 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.98535961 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.213695768 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.980385889 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.277659023 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.321562006 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.190319718 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.020308706 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.978029418 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.975228423 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.976653251 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.146103485 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.079687121 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.978575771 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.232452459 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.018113691 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.091588269 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.201563382 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.059661244 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.927233989 seconds)
  done (took 909.894559803 seconds)
done (took 1242.653264532 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.975712193 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.978700961 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.978916654 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.978554397 seconds)
  done (took 29.814009761 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.977729764 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.978181327 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.980678622 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.005717033 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.978601218 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.977295468 seconds)
  done (took 13.807740671 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.97573522 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.978787783 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.979081262 seconds)
  done (took 22.837055842 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.418433683 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.271054406 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.096154946 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.16821507 seconds)
  done (took 10.861376048 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.011481145 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.978214506 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.977517097 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.981521203 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.981041347 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.978170204 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.008229385 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.982232351 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.007419838 seconds)
  done (took 19.819044697 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.46774505 seconds)
done (took 105.512394496 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 6.993173955 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.459564168 seconds)
    (3/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.144782667 seconds)
    (4/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.100573401 seconds)
    (5/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.506154216 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.355302657 seconds)
    (7/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 1.997874193 seconds)
    (8/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.978564105 seconds)
    (9/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.054234218 seconds)
    (10/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.986424631 seconds)
    (11/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.104226796 seconds)
    (12/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 1.996619657 seconds)
    (13/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.027397329 seconds)
    (14/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.130777848 seconds)
    (15/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 1.999152105 seconds)
    (16/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.012221951 seconds)
    (17/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.352195595 seconds)
    (18/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.627241375 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.00310027 seconds)
    (20/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.105370224 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.999440573 seconds)
    (22/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.240383187 seconds)
    (23/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.850082066 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.000191284 seconds)
    (25/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.477260682 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.446860872 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.875863978 seconds)
    (28/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.164776614 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.146132098 seconds)
    (30/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 6.978846159 seconds)
    (31/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 9.182068554 seconds)
    (32/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.176231962 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.997349963 seconds)
    (34/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.089216124 seconds)
    (35/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.134540351 seconds)
    (36/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.034431082 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.240703821 seconds)
    (38/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.155482074 seconds)
    (39/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 6.989304382 seconds)
    (40/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 5.165456652 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.012137353 seconds)
    (42/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.176976839 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.996291109 seconds)
    (44/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 3.020300191 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.04292988 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.288842685 seconds)
    (47/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.329616457 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.142636759 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.006260506 seconds)
    (50/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.414645461 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.483326385 seconds)
    (52/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.514816095 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.49727802 seconds)
    (54/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.981940282 seconds)
    (55/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.3360019 seconds)
    (56/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.257798167 seconds)
    (57/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.302570142 seconds)
    (58/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.654121318 seconds)
    (59/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.994072382 seconds)
    (60/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 8.410130118 seconds)
    (61/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.09352576 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.982998901 seconds)
    (63/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.31148099 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.327912492 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.14058238 seconds)
    (66/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.477200757 seconds)
    (67/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.531345839 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.813873712 seconds)
    (69/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.314334859 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.986346874 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.002858778 seconds)
    (72/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.982148604 seconds)
    (73/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.156776287 seconds)
    (74/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.000368814 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.998728623 seconds)
    (76/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.980537724 seconds)
    (77/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.37072492 seconds)
    (78/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.47964638 seconds)
    (79/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.084441418 seconds)
    (80/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.986151304 seconds)
    (81/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.578635145 seconds)
    (82/341) benchmarking ("sort", BigInt, false)...
    done (took 6.987144028 seconds)
    (83/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.989708276 seconds)
    (84/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.402113321 seconds)
    (85/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.994508507 seconds)
    (86/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.126380459 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.328608243 seconds)
    (88/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.844922731 seconds)
    (89/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.156439264 seconds)
    (90/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.983596277 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 4.765817298 seconds)
    (92/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.538071449 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.148640721 seconds)
    (94/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.976355146 seconds)
    (95/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.99356926 seconds)
    (96/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.35218746 seconds)
    (97/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.004360456 seconds)
    (98/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.989172386 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.123021093 seconds)
    (100/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.097389892 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 3.33385319 seconds)
    (102/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.004449789 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.131219434 seconds)
    (104/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.139890328 seconds)
    (105/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.515917578 seconds)
    (106/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.188087047 seconds)
    (107/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.107284399 seconds)
    (108/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.988044788 seconds)
    (109/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.694278618 seconds)
    (110/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.148987131 seconds)
    (111/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.053839024 seconds)
    (112/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.369166601 seconds)
    (113/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.171789288 seconds)
    (114/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.777378696 seconds)
    (115/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.113006088 seconds)
    (116/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.244313771 seconds)
    (117/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.405194624 seconds)
    (118/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.290163612 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.988569398 seconds)
    (120/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.388213576 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.107391179 seconds)
    (122/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.053086776 seconds)
    (123/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.103982389 seconds)
    (124/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 1.994314488 seconds)
    (125/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.984570002 seconds)
    (126/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.906000956 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.989592522 seconds)
    (128/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.98859828 seconds)
    (129/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.393653621 seconds)
    (130/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.209262268 seconds)
    (131/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.437539362 seconds)
    (132/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.51961679 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.00492213 seconds)
    (134/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.987744859 seconds)
    (135/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.246431689 seconds)
    (136/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.863752084 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.989210463 seconds)
    (138/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 3.87858591 seconds)
    (139/341) benchmarking ("sort", Float32, false)...
    done (took 6.987674783 seconds)
    (140/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.136774745 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 6.984762132 seconds)
    (142/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 4.901154855 seconds)
    (143/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.457826903 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.376900334 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.085247803 seconds)
    (146/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.439157698 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.292072925 seconds)
    (148/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.268855225 seconds)
    (149/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 1.998852241 seconds)
    (150/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.293821974 seconds)
    (151/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.992178734 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.30700823 seconds)
    (153/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.511502532 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 2.215990067 seconds)
    (155/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.22868171 seconds)
    (156/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.01716376 seconds)
    (157/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.002673919 seconds)
    (158/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.403538781 seconds)
    (159/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.132403024 seconds)
    (160/341) benchmarking ("sort", Int64, false)...
    done (took 6.555902705 seconds)
    (161/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.628336252 seconds)
    (162/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.990130824 seconds)
    (163/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.005713572 seconds)
    (164/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.110278355 seconds)
    (165/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.02497243 seconds)
    (166/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.99707705 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.225921997 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.436782059 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.381876209 seconds)
    (170/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.172474159 seconds)
    (171/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.151928714 seconds)
    (172/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.91355307 seconds)
    (173/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.586611736 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 6.991003064 seconds)
    (175/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 4.775238215 seconds)
    (176/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.037490483 seconds)
    (177/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.2649108 seconds)
    (178/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.41442392 seconds)
    (179/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.131235414 seconds)
    (180/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.99058251 seconds)
    (181/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.241547477 seconds)
    (182/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.226754859 seconds)
    (183/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.837926385 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.115532578 seconds)
    (185/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.401705373 seconds)
    (186/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 6.997034091 seconds)
    (187/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 4.542971543 seconds)
    (188/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 6.998625601 seconds)
    (189/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 4.998936661 seconds)
    (190/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.230943863 seconds)
    (191/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.995887246 seconds)
    (192/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.359171172 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.173739693 seconds)
    (194/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.022886446 seconds)
    (195/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.237294179 seconds)
    (196/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.175292469 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.998562438 seconds)
    (198/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.013417581 seconds)
    (199/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.304223648 seconds)
    (200/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.161193451 seconds)
    (201/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.264897254 seconds)
    (202/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.369307664 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.270432417 seconds)
    (204/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.248752343 seconds)
    (205/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.023585442 seconds)
    (206/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.128952276 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.022472398 seconds)
    (208/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.991984263 seconds)
    (209/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.933916769 seconds)
    (210/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.14434552 seconds)
    (211/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.011593916 seconds)
    (212/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.141399218 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.395331155 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.197857215 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.025976494 seconds)
    (216/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.005347124 seconds)
    (217/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.120632712 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.146885065 seconds)
    (219/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.990319455 seconds)
    (220/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.962960713 seconds)
    (221/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.373976436 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.680877908 seconds)
    (223/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.128248622 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.303066492 seconds)
    (225/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.371386227 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.727980487 seconds)
    (227/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.994926987 seconds)
    (228/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.830015699 seconds)
    (229/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.513843172 seconds)
    (230/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.335596152 seconds)
    (231/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.218588797 seconds)
    (232/341) benchmarking ("sort", Float64, false)...
    done (took 6.799699019 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.317269061 seconds)
    (234/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.052726617 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.814836442 seconds)
    (236/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.334711847 seconds)
    (237/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.148601517 seconds)
    (238/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.138262696 seconds)
    (239/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.300642427 seconds)
    (240/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.087619802 seconds)
    (241/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.12642271 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.005422533 seconds)
    (243/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.435375569 seconds)
    (244/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.573192716 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.341860418 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.015251435 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.124497881 seconds)
    (248/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 6.991528618 seconds)
    (249/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 9.273773379 seconds)
    (250/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.213224223 seconds)
    (251/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.998403404 seconds)
    (252/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.073081151 seconds)
    (253/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.151519453 seconds)
    (254/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.002072491 seconds)
    (255/341) benchmarking ("map", abs, Int64, false)...
    done (took 3.143917355 seconds)
    (256/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.509920882 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.092084769 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.002046535 seconds)
    (259/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 3.875309689 seconds)
    (260/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.509811845 seconds)
    (261/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.214116908 seconds)
    (262/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.458299894 seconds)
    (263/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.329395731 seconds)
    (264/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.146963705 seconds)
    (265/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.991441985 seconds)
    (266/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.149358074 seconds)
    (267/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.20200015 seconds)
    (268/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.621341359 seconds)
    (269/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.079106486 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.331346333 seconds)
    (271/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.147190503 seconds)
    (272/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 6.995597527 seconds)
    (273/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 5.059124968 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.027865652 seconds)
    (275/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.02773786 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.281840659 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.509540249 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.325219966 seconds)
    (279/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.332619268 seconds)
    (280/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.398568072 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.648923977 seconds)
    (282/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.144254844 seconds)
    (283/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.006581655 seconds)
    (284/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.109652277 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.898970251 seconds)
    (286/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.184119816 seconds)
    (287/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.375587439 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.407997117 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 6.999442723 seconds)
    (290/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.34361385 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.013617109 seconds)
    (292/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.202262435 seconds)
    (293/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.003074669 seconds)
    (294/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.55386019 seconds)
    (295/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.295419319 seconds)
    (296/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.996277112 seconds)
    (297/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 4.036024669 seconds)
    (298/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.496623089 seconds)
    (299/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.317541105 seconds)
    (300/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.356885678 seconds)
    (301/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.553505735 seconds)
    (302/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.147714181 seconds)
    (303/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.394706095 seconds)
    (304/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.003711907 seconds)
    (305/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 4.340007787 seconds)
    (306/341) benchmarking ("sort", Int8, false)...
    done (took 5.591546988 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.998677389 seconds)
    (308/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.123492444 seconds)
    (309/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.284746425 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.111956774 seconds)
    (311/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.015359029 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.477539092 seconds)
    (313/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.001158651 seconds)
    (314/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.225588487 seconds)
    (315/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.005975535 seconds)
    (316/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.113503324 seconds)
    (317/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.045429628 seconds)
    (318/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.154413352 seconds)
    (319/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.609232323 seconds)
    (320/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.797008015 seconds)
    (321/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.01578157 seconds)
    (322/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.111613484 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.128826964 seconds)
    (324/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.995642136 seconds)
    (325/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.289609421 seconds)
    (326/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.084734795 seconds)
    (327/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.16006608 seconds)
    (328/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.2852779 seconds)
    (329/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.173174566 seconds)
    (330/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.14418711 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.495844056 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.025436843 seconds)
    (333/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.211302534 seconds)
    (334/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.141070635 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.125418627 seconds)
    (336/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.993880004 seconds)
    (337/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 3.803697568 seconds)
    (338/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.006564984 seconds)
    (339/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.143733976 seconds)
    (340/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 6.994521175 seconds)
    (341/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 5.557628536 seconds)
  done (took 1180.380547782 seconds)
done (took 1182.428876749 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.014874246 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.996153411 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.571341287 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.012579543 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.99569118 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.998469413 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.544675939 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.033704056 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.005322663 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.545660326 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.012689103 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.996052986 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.005162461 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.013723906 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.005409098 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.009343693 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.003640613 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.021516246 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.014852777 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.000914406 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.058566795 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.001022734 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.996680407 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.044396854 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.997155393 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.005587168 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.017528113 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.05907105 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.057176104 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.999615928 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.003552081 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.394157161 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.062258363 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.00379712 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.004994352 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.004937848 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.002980064 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.005988451 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.022074533 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.005211799 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.998036468 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.009737021 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.002304281 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.000868229 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.997811462 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.997354095 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.999543228 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.093610856 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.009773812 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.403639677 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.071830993 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.022585265 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.059425466 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.000524727 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.000509398 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.001189701 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.059467869 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.003903961 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.002882406 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.40355256 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.131967781 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.008253925 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.406387662 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.076950648 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.009810508 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.010576562 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.998438266 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.023205907 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.395623728 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.600523838 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.038456494 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.022773877 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.000268726 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.00132926 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.010253723 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.549017442 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.018295806 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.676882788 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.032080942 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.008374726 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.00535321 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.003144912 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.000885356 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.008645435 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.018017198 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.999674023 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.003841571 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.005783108 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.014151344 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.398910666 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.057560969 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.575899644 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.014015134 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.020257266 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.018819057 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.678182605 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.034064346 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.01899035 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.003119875 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.396925652 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.053932168 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.020577897 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.003128469 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.008618622 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.096303107 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.025776166 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.020649423 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.00080281 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.024988763 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.007748099 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.0015204 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.012824197 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.024429719 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.018258144 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.010639996 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.000785253 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.012799163 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.007378849 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.019548445 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.012223262 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.009363077 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.009734712 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.004052145 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.049199121 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.019967897 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.01025546 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.098393874 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.00738075 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.098084055 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.011569722 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.009351202 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.001786127 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.4065683 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.058944265 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.025671608 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.007697122 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.027657608 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.026797481 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.011519885 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.006204265 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.011222089 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.005059758 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.05029046 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.003819504 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.028298114 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.050420383 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.015625063 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.010959684 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.02114772 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.023199217 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.026957347 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.008456578 seconds)
done (took 316.460465231 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.056799668 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.393778006 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.075652577 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.00477551 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.080450833 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.064563354 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.00377172 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.004810935 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.004288365 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.437865434 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.005692311 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.006575992 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.410341446 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.005494876 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.05972318 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.005052556 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.005874611 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.276119266 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.005311121 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.065211216 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.020359073 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.005554267 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.005998463 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.448786095 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.004328766 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.011620117 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.065361719 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.005862048 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.303161775 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.011252701 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.021423109 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.323818469 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.066592739 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.008883787 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.007595626 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.007848045 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.08275001 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.012595694 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.059706471 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.059105158 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.07932269 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.011068694 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.012726207 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.038756289 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.012437019 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.028663333 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.029072279 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.017982083 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.014734447 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.031305011 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.302205267 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.041751472 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.01972399 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.033099579 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.008690793 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.010358469 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.010668698 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.008009888 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.070097694 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.007528117 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.059738578 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.451494816 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.440488555 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.007201812 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.022651057 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.009657915 seconds)
  done (took 160.215494509 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.091544842 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.106387291 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.091158538 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.014186073 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.07256145 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.098523589 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.014164414 seconds)
  done (took 16.421155045 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.015397408 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.007060251 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.033380709 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.038807326 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.007076069 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.180457429 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.020581945 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.009501559 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.039907366 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.012839728 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.366494082 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.040058043 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.008598127 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.009990886 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.021397272 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.039843055 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.011147172 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.00818247 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.114668888 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.082699546 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.008898603 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.009664766 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.045392533 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.021975324 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.009169717 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.013413686 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.008295365 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.016513104 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.008443974 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.008040099 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.008288188 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.02391916 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.00890109 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.055914142 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.009873526 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.01042393 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.009844266 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.008771136 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.008813637 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.396767 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.009674711 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.00908241 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.008959684 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.008551064 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.010536368 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.034853222 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.009121625 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.0096536 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.010125616 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.009179738 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.048111182 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.010341197 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.009697858 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.011566416 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.046677635 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.010871015 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.009546007 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.009945938 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.01076525 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.010640552 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.010424514 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.085205588 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.039514564 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.010998765 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.039753229 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.051251118 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.010627695 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.010058134 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.010101642 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.039520403 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.010515937 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.041960195 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.010534301 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.100532112 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.011141091 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.187638667 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.037020352 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.015185947 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.015125215 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.021542872 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.019591598 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.010523114 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.014289141 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.019153209 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.012035166 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.010764468 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.010965029 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.013524389 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.019168991 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.010822974 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.063550956 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.010815617 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.012107562 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.102739968 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.012889366 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.118746073 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.043424001 seconds)
  done (took 202.255853623 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.017734771 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.013679811 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.027649914 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.013168827 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.01250381 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.01825734 seconds)
  done (took 14.039274883 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.015303224 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.01742032 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.012200447 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.012014352 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.011848575 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.011936552 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.011978548 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.0157983 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.016593448 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.011595935 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.011826466 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.015207659 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.011173359 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.011666813 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.012131346 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.012407354 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.011911516 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.013578387 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.013471169 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.012619889 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.211967665 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.012219681 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.014392592 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.042405793 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.017035344 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.01263103 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.023197182 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.012946378 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.013648611 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.021178843 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.016447458 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.01214373 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.042366805 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.022076146 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.017829581 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.042524014 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.018062375 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.0167262 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.013645771 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.012551084 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.017450482 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.012571712 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.013648353 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.016831194 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.016803516 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.048246718 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.021765111 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.02393391 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.014957564 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.017410303 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.01736395 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.013364563 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.013419068 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.01748207 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.046635155 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.021936258 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.022001349 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.013875724 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.014318108 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.043902255 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.019157602 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.014160659 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.017454587 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.020621095 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.015261198 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.018274719 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.045778395 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.019435857 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.014825498 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.014896389 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.017674513 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.014026681 seconds)
  done (took 147.457253785 seconds)
done (took 542.319744433 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.050882709 seconds)
  done (took 8.989815314 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.264397119 seconds)
  done (took 9.329709613 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.372846325 seconds)
  done (took 14.319908088 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.034070025 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.044563132 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.07386709 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.017825062 seconds)
  done (took 30.134385869 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.237829506 seconds)
  done (took 9.18248942 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.034664004 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.017596221 seconds)
  done (took 16.083161479 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.103442107 seconds)
  done (took 9.053432894 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.334789501 seconds)
  done (took 9.314524283 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.025204721 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.022896838 seconds)
  done (took 16.025471303 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.017516782 seconds)
  done (took 8.958698816 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.586638325 seconds)
  done (took 10.611184015 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.029191011 seconds)
  done (took 9.003195111 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.076753706 seconds)
  done (took 9.019192309 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.72973134 seconds)
  done (took 9.671873931 seconds)
done (took 171.638935506 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.029932086 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.017035705 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.044027173 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.019670678 seconds)
  done (took 30.050840155 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.057457873 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.057675031 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.060553011 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.064268983 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.047293305 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.046566212 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.058241136 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.067169764 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.08740264 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.103294542 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.059635833 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.077090401 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.064403926 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.060502755 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.061130215 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.075607653 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.076604437 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.058791768 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.047053925 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.061021382 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.076996828 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.076653864 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.018576351 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.019387536 seconds)
  done (took 51.435158053 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.225508721 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.090851658 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.184531703 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.077133116 seconds)
  done (took 10.520228027 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.018239437 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.093448448 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.078446405 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.063865571 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.077924193 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.188075037 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.078511595 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.226362133 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.195820233 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.196295197 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.023951606 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.036173923 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.037256612 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.079106033 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.18535667 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.019333938 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.018735811 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.197039409 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.093975091 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.216718746 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.019523501 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.078980386 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.078336966 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.079246343 seconds)
  done (took 52.324294328 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.020107343 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.032965607 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.031907999 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.020878348 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.020626987 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.021078308 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.031525337 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.021488822 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.049532765 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.023771271 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.02088212 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.021062631 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.020849235 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.021035921 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.021387695 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.037668732 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.037657241 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.021243896 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.023567382 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.032633755 seconds)
  done (took 42.475869235 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.018742175 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.255347032 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.225418357 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.184859119 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.018826325 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.021410366 seconds)
  done (took 32.669680324 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.038272201 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.043373989 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.03108268 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.059710292 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.091655026 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.034250531 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.110105432 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.237645725 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.034901457 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.107553386 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.049313816 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.031375509 seconds)
  done (took 26.817461925 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.020913102 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.022785549 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.022905737 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.036685561 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.034954838 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.03141382 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.034040087 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.020544166 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.038570181 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.045515476 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.032070482 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.039447703 seconds)
  done (took 46.325879834 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.191526568 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.198863501 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355244437 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.719357269 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.532042644 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.089219675 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.420955965 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.53893411 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.771255571 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.811560562 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.506447325 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.05619103 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.528892022 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.975759662 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.025240086 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.302123661 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.027084013 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.995644535 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447078152 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.095749368 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.029744859 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.025422635 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.030064494 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.547529587 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.334262983 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.026099166 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.194228908 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049119338 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.025259005 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.23895665 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.03435965 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.044533139 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.16342064 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.321796813 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.539895596 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.104289153 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.109014586 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.006434845 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.080569202 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.063524479 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.03880037 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.042375071 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.551736109 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.040820833 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.269997583 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.027815848 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.038615736 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.615668978 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.980982158 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.134701542 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196161773 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.895490999 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.08307891 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.693675404 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163091654 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.303282263 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.034197589 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.989406703 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101450771 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.064025081 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.202195878 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.109727262 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190307556 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.980666005 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.241310369 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208721453 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.029821019 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.035178283 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.285612007 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.308183182 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.110755363 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.135832976 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.768474928 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.028910694 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.031263743 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.456395333 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143803381 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.029445922 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.753044429 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.536812374 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.981557106 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.129014908 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.645197115 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.035297627 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.026827604 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.039769804 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.242942212 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.979717043 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.111905757 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.070853096 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.361905708 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.029324365 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.029530477 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.056865513 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031356542 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.016045279 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.665926698 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.106972504 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.980277884 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.579386552 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.054385903 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.982024465 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.035425089 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.03528728 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.420604457 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074394046 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.781747307 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.630784087 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.307865265 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.602451606 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.036065249 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.029270778 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113207871 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.110944479 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029166977 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.719128578 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.02849042 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.119858219 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.20151178 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.029073773 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.980514534 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.04362646 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.168401691 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.059398745 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.056639012 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.030488821 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.037917403 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.029821857 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.034667424 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.063529317 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055096505 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.535365383 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.1395839 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.031948089 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.974994437 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.039009947 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.508966245 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.128395074 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.076772582 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.451097659 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.620930213 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.505032509 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.994236271 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.78097269 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.480396156 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.132131096 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114714358 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.183497892 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.186817278 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.114317462 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029781125 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.188775698 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.039880271 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.035628001 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.030456964 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.69353113 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.741661423 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.078474588 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.031567926 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.986110346 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.009110536 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.216387942 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.652214212 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.07276486 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.03907159 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.11833487 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206571429 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.032475529 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.983133831 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388702761 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.251009765 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.530657656 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.389567787 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.654525337 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.118189216 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.045987756 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.201385393 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.115268097 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.677096351 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.655647262 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36425777 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.505572657 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.030170086 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.033440607 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.088601828 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42271202 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.056991432 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.785600472 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.000654131 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.549134836 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.068175483 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.020434051 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.983361504 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04118118 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491268349 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.036825324 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.583817472 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.301155371 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058090513 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.034490162 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.034595138 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041885386 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.282863884 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153042685 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.108487873 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111601912 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.986876072 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.683474861 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.08100278 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.036530397 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.033335836 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.371580224 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.23262264 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.054357841 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.034394376 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120675401 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.130651056 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.638990059 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.03948532 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.039206368 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.547246795 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.043273239 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.552206723 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.037416276 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.17327024 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.073256476 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.060316518 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.888622218 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.553968622 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.13755568 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.117014456 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.035054979 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.036602866 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.300464565 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.048483641 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.300819967 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.516926892 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.638796288 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.725075175 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.132940433 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.629925013 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.057431838 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.036228386 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.676192225 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.071990116 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.036906247 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.173103714 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.631877357 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.137203239 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.188307734 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.120975742 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.03621042 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.484234949 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.622997188 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.075405722 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.969210484 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.143667424 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.036950163 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.240383868 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.789889798 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.038876598 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.036676701 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.046748775 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.201759018 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.174984392 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421767299 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.53144087 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.373718366 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.988797957 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.044729649 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.13012694 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.310643423 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.037391288 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.072301108 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.639530083 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.662642323 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.822445701 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.558474069 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.21346566 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.183150473 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.47643481 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.136025479 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.051684478 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.967538593 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.224632822 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.000856324 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.168970232 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.988748723 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.071646613 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.337917534 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.063966455 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.484372449 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.074036097 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.547547482 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.393740619 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.065955373 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.140611067 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.070524129 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.038607986 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.10581086 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.038356622 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.082657472 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.166819068 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.043883809 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.455124454 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089376093 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.087385934 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.046588695 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.672716667 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068884785 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.043821788 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.505669162 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.068580378 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167734824 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124650276 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.826929306 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.150853483 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.042061089 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.544931251 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.614974555 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.487093848 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.125052614 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.611486769 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105500888 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.792142811 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.040794718 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.209353094 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.048156056 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.709649028 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097386534 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.424640786 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.044497366 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.206152706 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350124204 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.134130829 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.048556018 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.994800557 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.615339068 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.204017136 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.520607905 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.045129084 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.802012277 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.500523927 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.069783514 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.567805349 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.020207696 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.04431321 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.220452231 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.718288172 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.754424599 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084017476 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.043824058 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.161989566 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.227639376 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.109654322 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.763443459 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.0549735 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.069659451 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211117184 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166026562 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.98425041 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.56707918 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.79067245 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.308827135 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.058607532 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.179896495 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.1372253 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.19279209 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.087406401 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118658941 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.794094505 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.490746662 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.141466874 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.992753005 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.042174274 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.72391837 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.767466087 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.126393583 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.322237264 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.468077934 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.158956586 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.139180613 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.112376297 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.255700393 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.722992888 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.74568531 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368543995 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.553467118 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.619359553 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.778358049 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.793508988 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.212255022 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.15896202 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.435254564 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.935239847 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.417369587 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.318774823 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.051361616 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.995795956 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.183978777 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.05056158 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.117478889 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.76440051 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.321549864 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.077038959 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.139753944 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628481301 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.02158478 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.073931078 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.26040696 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.076152763 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.066068661 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.043939409 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.586217078 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.422753773 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.061215583 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.001368027 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.795662863 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.996362039 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.21357701 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.047858415 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.090492138 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.846144984 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.094082483 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.203112167 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.562957775 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.127401225 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.090800314 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.99568271 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.089927866 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.02583922 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.670070804 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.830338842 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070680924 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.049975923 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183704078 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.029520224 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091491923 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.052665741 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.352663131 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.48608445 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.499304696 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208984284 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.39957946 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.323478143 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.932733632 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.142860429 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.274065535 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.997222766 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.13602016 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.025699365 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.095202633 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121783715 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.046289636 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.051549212 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.285712411 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.169661283 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.19569804 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.123288897 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.148927815 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.071129663 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.132627835 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.183453215 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.049300284 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.05420139 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.046841268 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.283051871 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.082664639 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.005142403 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.216732428 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128643932 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.433687641 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124051235 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.932694922 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.054824725 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.935880746 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.197537646 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.553246565 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.048793158 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.82375526 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.117370235 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.048805601 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.499411225 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.692723104 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.186251065 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.302363292 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.070562909 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.064738507 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.100148795 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.052945119 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.059051086 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.647328561 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.422807 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.048682222 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.499265853 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120547274 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.057272439 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.807794942 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.526356237 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.049512787 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.090570615 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.085351735 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.522127067 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.304594264 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.063104565 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.188645148 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.054169863 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.002745932 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.050857053 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.13409338 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.555142389 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.05485174 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.56866763 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.163409328 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.185104047 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054013194 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.051028867 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.051763909 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.218828852 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.641569741 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075502691 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.315928472 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.188034835 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.058872659 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.577261743 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.739816895 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.131046247 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.103328513 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.03343628 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.409782888 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.854275477 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.047142527 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.592147844 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.227790004 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.053259575 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.278282932 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.300058075 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.052665609 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.21606966 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051224393 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399801434 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.320748393 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.602394449 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.152965046 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.105539505 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.267098139 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.055096935 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.574641091 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.494467894 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134916806 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.05154146 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064990561 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.051820405 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.807717012 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.651642062 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226817731 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.161952219 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.954756166 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.564019569 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.055094334 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.005845183 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.05257001 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079090335 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.056493003 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.00376355 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.805524417 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.87755902 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.239393959 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.373634302 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.003345941 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.192441202 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.043887486 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.00728252 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.531787744 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.05390253 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.343392605 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.004708296 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.056958318 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.008370053 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.123791781 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.187268183 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.42631379 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.055394058 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.009458971 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.061949737 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.054093716 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.053555495 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.140235651 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.055133872 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298388168 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.500769148 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.240373592 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.211134421 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.893966649 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.087787928 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.023105028 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.099328365 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.871200313 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.601584211 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.117393423 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.243279011 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.810721449 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.031738063 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.578525943 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079993797 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.760116897 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.061359896 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.058416197 seconds)
  done (took 2389.907062409 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.142387736 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.132954381 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.145493546 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.102730918 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.101703585 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.118477542 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.095499237 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.086678022 seconds)
  done (took 58.904050972 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.054345569 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.031344725 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.070442292 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.056191126 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.058825098 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.066222905 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.283395011 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.097046281 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.057344552 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.065823753 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.05858131 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.064563721 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.057985208 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.061905846 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.06677749 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.308601067 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.084406417 seconds)
  done (took 80.573548848 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.082057081 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.75494139 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.062243065 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.293670669 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.077275052 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.264671104 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.060646148 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.058538709 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.08366155 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.336550437 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.066414253 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.073390968 seconds)
  done (took 89.203070268 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.059088097 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.058311301 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.057907892 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.058267317 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.058677112 seconds)
  done (took 12.272918018 seconds)
done (took 2925.554319822 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.273520633 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.205250287 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.158984747 seconds)
  done (took 6.344218712 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.116601711 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.181298243 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.281260193 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.19987363 seconds)
  done (took 10.772230911 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.340075042 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.536093622 seconds)
  done (took 6.8571114 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.489079695 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.069237012 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.586720011 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.062333954 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.061719962 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.062947066 seconds)
  done (took 23.183850303 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.059603789 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.059622558 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.05958492 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.059802082 seconds)
  done (took 10.227698835 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.05823054 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.029588421 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.062213286 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.079788216 seconds)
  done (took 22.211118913 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.334405638 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.285075399 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.799236342 seconds)
  done (took 9.399691568 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.868632684 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.434381784 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.851169509 seconds)
  done (took 10.13591105 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.012422371 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.978814895 seconds)
  done (took 7.973029122 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.212770712 seconds)
  done (took 4.19457531 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.552409655 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.538786532 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.899183849 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.919074424 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.060489349 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.372020105 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.420955437 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.450214446 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.729070306 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.567476827 seconds)
  done (took 28.492487995 seconds)
done (took 156.193247564 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.055771751 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.451908238 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.247589853 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.728105813 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.227439133 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.247941681 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.12368282 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.507107232 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.622274258 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.617614969 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.72721199 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.226292319 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.119137991 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.444045704 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.122979889 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.401585701 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.468106639 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.035586661 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.285740401 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.966077805 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.132901556 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.30584043 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.417965629 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.30868776 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.47379874 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.200680474 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.247965026 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.404949817 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.526586522 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.2533953 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.205482377 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.215353289 seconds)
  done (took 182.303825115 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.062444584 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.064978252 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.065001979 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.065005445 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.799350249 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.065064496 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.067414615 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.065369819 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.882576184 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.897418691 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.068640303 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.800341331 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.068214027 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.06524284 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.066493361 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.066206971 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.975378108 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.066875519 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.066110419 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.065091528 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.065200271 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.658332154 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.06724344 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.695202599 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.974148932 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.067619015 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.066761861 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.06743268 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.067253979 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.0665753 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.06754933 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.067366064 seconds)
  done (took 218.270190766 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.062437593 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.06460733 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.070445621 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.067387599 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.066515016 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.067185756 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.067702056 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.066162193 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.06504446 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.067340648 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.066075364 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.066695927 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.067666706 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.066826992 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.069440929 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.067775097 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.068466077 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.067660499 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.066408065 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.065751868 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.069399422 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.067756007 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.069940096 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.069477369 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.070369369 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.070965272 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.067907538 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.067182192 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.067857622 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.068688155 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.068357485 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.067521825 seconds)
  done (took 228.159612701 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.363917271 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.065257528 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.066667327 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.442210225 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.06721664 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.066055855 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.421784366 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.363689028 seconds)
  done (took 21.854892667 seconds)
done (took 652.590643548 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.77524877 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.959799435 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.24079231 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.094742727 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.71776478 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.165263126 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.086313565 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.190001549 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.863145645 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.208782357 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.536670949 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.102538039 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.897577451 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.128939175 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.246089159 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.171686819 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.496636915 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.807015491 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.270776574 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.905845206 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.332724079 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.104119365 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.214221275 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.910982686 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.558428295 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.136568188 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.212127004 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.500817449 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.097194338 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.364709718 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.180096448 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.506444119 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.120319439 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.099720351 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.16674897 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.148853098 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.412479875 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.114404716 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.240569803 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.882112255 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.917656288 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.730704916 seconds)
  done (took 111.806836097 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.079990481 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.076256233 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.076127026 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.076675523 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.076771636 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.076332801 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.076618659 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.076313769 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.07679284 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.076113883 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.076854739 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.076673543 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.076145627 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.077311106 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.076130361 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.076339606 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.077189144 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.07711597 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.077636092 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.077101727 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.076870889 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.078801268 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.070594562 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.077550939 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.077346751 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.077369586 seconds)
  done (took 56.011757342 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.069791761 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.249938852 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.426930975 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.111152045 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.071751522 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.07474235 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.112359627 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.082198821 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.073929167 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.073932689 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.176991313 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.077918314 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.08931425 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.422512822 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.110396797 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.072990675 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.07280746 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.073751866 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.25856037 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.095975372 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.117237413 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.083717773 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.114772033 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.094124181 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.076225777 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.074497028 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.076975497 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.585551547 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.088894626 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.182058111 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.124891355 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.122362347 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.474822472 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.434342333 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.15272304 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.082560219 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.07414245 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.229002696 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.091478437 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.075202224 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.115130076 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.086327904 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.424639593 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.69917575 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.097424653 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.072772157 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.582426129 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.24079497 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.130983178 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.089078008 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.431387722 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.110811587 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.07377409 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.074976726 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.1166573 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.084278115 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.074257534 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.375740755 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.091148951 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.11531778 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.084897138 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.074956356 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.264021985 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.087991655 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.255992549 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.089055323 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.083415343 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.076457261 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.424993401 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.112219698 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.688403228 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.097535424 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.074207123 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.183940008 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.264109667 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.617173774 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.095210638 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.265946857 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.500987143 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.127948716 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.089032093 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.565059431 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.130880516 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.089566895 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.07470272 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.074284042 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.074628531 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.120060982 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.114778142 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.613153015 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.702840436 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.405299135 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.13011458 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.092918732 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.076443021 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.377689827 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.088251373 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.075491222 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.420667574 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.717335584 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.099072333 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.084439854 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.674724025 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.100657483 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.118149257 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.091972053 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.43340514 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.113623006 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.121790825 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.075906154 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.084655444 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.079822916 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.118143099 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.091069295 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.076314275 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.668515231 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.249184716 seconds)
  done (took 259.020826084 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.080813678 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.078702719 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.076535714 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.078626177 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.075490548 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.077667957 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.075265592 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.076117095 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.077731935 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.0752809 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.075468485 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.076393399 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.078302092 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.08216548 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.10882679 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.079029945 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.690478159 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.075180824 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.076287873 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.080825547 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.909040976 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.082586511 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.077792226 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.080341938 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.07724137 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.07601003 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.087464069 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.105521461 seconds)
  done (took 173.699265052 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.077601446 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.147475419 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.093654637 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.147198533 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.092468377 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.078920246 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.110896003 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.103472249 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.088386536 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.078255806 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.078642385 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.119394124 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.090446237 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.181693835 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.125575284 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.122078982 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.188879781 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.090894973 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.080238751 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.079110657 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.148946189 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.100070102 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.119760409 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.162606464 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.094659853 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.149381582 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.101155899 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.080310236 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.079876631 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.206362439 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.106317195 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.120816506 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.130597908 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.108075502 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.214014737 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.210373027 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.195492998 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.123766441 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.088058894 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.080389318 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.080552863 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.087068609 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.151484172 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.095745578 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.083210535 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.216389812 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.107915629 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.082509058 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.104877468 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.081311625 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.098639379 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.106104775 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.130549394 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.221844405 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.148041453 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.113987704 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.113769123 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.10362826 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.081828971 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.184594397 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.09794888 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.208760537 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.10862715 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.088308333 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.083035527 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.087284128 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.153496071 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.129257874 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.193769333 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.094936181 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.186199851 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.163784523 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.097746706 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.082229387 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.083119567 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.153399448 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.200821925 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.164637835 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.168196821 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.132929896 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.102280507 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.082960967 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.089365042 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.123645113 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.094382251 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.210109511 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.2119588 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.09445746 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.083888482 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.083948757 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.084020395 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.118261521 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.167400356 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.138290905 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.206102193 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.134563749 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.13421938 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.095067513 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.10109696 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.09172385 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.127559707 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.094664434 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.101178753 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.453574436 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.139949645 seconds)
  done (took 225.239321838 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.489111725 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.145405361 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.171202076 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.34897706 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.503394525 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.414516552 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.142597771 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.154013327 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.147877962 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.285015167 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.195507068 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.202730917 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.139816309 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.117127519 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.14537552 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.14935473 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.181113313 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.559882431 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.279716673 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.214932454 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.144667912 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.458100554 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.470846247 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.516488689 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.193427282 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.594482521 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.793290196 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.24889557 seconds)
  done (took 69.42825419 seconds)
done (took 897.196181531 seconds)
SAVING RESULT...
DONE!
