cset: moving following pidspec: 2102724
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.783877455 seconds)
loading group "shootout"... done (took 1.16481745 seconds)
loading group "string"... done (took 0.663487583 seconds)
loading group "linalg"... done (took 8.60917316 seconds)
loading group "parallel"... done (took 0.162833647 seconds)
loading group "find"... done (took 3.019678422 seconds)
loading group "tuple"... done (took 2.091829437 seconds)
loading group "union"... done (took 14.505195817 seconds)
loading group "dates"... done (took 1.423886939 seconds)
loading group "micro"... done (took 0.212224352 seconds)
loading group "simd"... done (took 4.703604988 seconds)
loading group "io"... done (took 1.375957734 seconds)
loading group "random"... done (took 9.622806206 seconds)
loading group "problem"... done (took 1.608761586 seconds)
loading group "array"... done (took 25.09149972 seconds)
loading group "misc"... done (took 1.818072671 seconds)
loading group "scalar"... done (took 42.83548267 seconds)
loading group "sort"... done (took 3.28817868 seconds)
loading group "sparse"... done (took 13.05870458 seconds)
loading group "collection"... done (took 18.955933951 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.444881437 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.116358406 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.164014923 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114200623 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.232156404 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.126081301 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130926355 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086147567 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.044687557 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.142473629 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.137652506 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.425833992 seconds)
done (took 5.653505053 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.310944597 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.244119354 seconds)
    (2/2) benchmarking "String"...
    done (took 0.165709291 seconds)
  done (took 1.6230123 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.093174553 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.05978279 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066557322 seconds)
  done (took 1.429755872 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064517717 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13923127 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06534768 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067186411 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066614237 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068770501 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065443285 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064842019 seconds)
  done (took 1.747758616 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072141045 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067681216 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065841769 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066840425 seconds)
  done (took 1.481986321 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065731139 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.126304774 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064433651 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063885464 seconds)
  done (took 1.529290183 seconds)
done (took 9.418520857 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.159548977 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.778031875 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.865437413 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.147165228 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.320197228 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.346253712 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123195622 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.207249847 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.115643489 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076410549 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.163394106 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.082271566 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.486481506 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.480512458 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073460217 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.192894711 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.631129884 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085191048 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.116818231 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.239336841 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.083006325 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.084972833 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.090592401 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072266903 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.161325413 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.183665256 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.632294241 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.10003449 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069349999 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.198177574 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071389774 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077380841 seconds)
  done (took 10.76030453 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114972475 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.112500156 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069971298 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.104227673 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094602966 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068820114 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075608255 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068709436 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088343577 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.133082497 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093029657 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.124840058 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06755048 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068183494 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.099801263 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.162982097 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082592236 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.08160818 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069395525 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081774695 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.09579306 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079539668 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07804869 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.0795155 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.113740943 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.136488918 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.086950632 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.110888538 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068000559 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080733932 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.098774546 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.110767588 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069107958 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06647832 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.109650353 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.085952111 seconds)
  done (took 4.576279371 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.039909221 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.0966529 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.107663583 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.101728036 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108043526 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.138857678 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093007729 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148588599 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123759367 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100519367 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064845284 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070688463 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.184657888 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.683021872 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.101606982 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071262344 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.148434305 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.364639504 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.927628184 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072285326 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068014897 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.099374474 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072152035 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.14110008 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.069196189 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.180348234 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.648818799 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.201297828 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069012071 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097292974 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.070321001 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142226098 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094563774 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069623841 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.585686328 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066689637 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063628151 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.085690115 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.09420624 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066924199 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067197223 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077676091 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066546403 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.119852458 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080313015 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.550680198 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069948164 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.630864722 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.333573331 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074095372 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072404353 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102781206 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064485059 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067718132 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.639992253 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.152341823 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06743398 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.290874635 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070243953 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068411154 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069318406 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100691066 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068133939 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069861124 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073227374 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.085071768 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.033857151 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.152450987 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090328181 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070563119 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.425360239 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077239292 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070594523 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072761789 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.097972683 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.138965115 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068104858 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067713296 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112224821 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.236699198 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092795542 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070619302 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066844495 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06637347 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.584285489 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066920588 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.967844948 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069947323 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067788721 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.508861484 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065023052 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066637382 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070168747 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089326907 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067995394 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063351653 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064383987 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104121094 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069995662 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.59655932 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.071441121 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.508109521 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071346791 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102672293 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.12736322 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068303996 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.10698393 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.07033238 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065863586 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074660981 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066848953 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064790849 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070109411 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.068572032 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068119476 seconds)
    (115/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.066226662 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069476879 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068965767 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070823619 seconds)
  done (took 23.71585925 seconds)
done (took 41.304599406 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.400850127 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078327644 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078861888 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080383598 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07904464 seconds)
  done (took 1.978586114 seconds)
done (took 3.346435555 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.258715795 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074618418 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062805256 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.206354671 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089241304 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.180683731 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.344758742 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.17269082 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.090891531 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.090916077 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.091484055 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.226568509 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.237199799 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.093753269 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.165158596 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.23974464 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.094010057 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068351189 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.091146512 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.093360343 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.094296851 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066147011 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.091596904 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.093593048 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.164860282 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.091402981 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064829586 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.166423972 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.094894705 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.169637845 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.094226185 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.094113711 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.093890922 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.165870815 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.095087551 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.166464165 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065834147 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.093209601 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.095697423 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.09715346 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.095492411 seconds)
  done (took 6.529306076 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077601372 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081965075 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082524999 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061787155 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072839355 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081664779 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06240287 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081104595 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.102029502 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083531911 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081806094 seconds)
  done (took 2.234060332 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070957102 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081643847 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088153445 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061421691 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072769223 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08215361 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061190025 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082680434 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086240729 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08207367 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082794972 seconds)
  done (took 2.149475926 seconds)
done (took 12.195698951 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.193669187 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.090328088 seconds)
  done (took 1.566511099 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.261229059 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.501154048 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.270662616 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.124092396 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.10415821 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.122700264 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.229599668 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.10048276 seconds)
  done (took 7.175711448 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.097504387 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067102989 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069294315 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.097393525 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069970374 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068206447 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066712719 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069100832 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068770571 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069670454 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067465234 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066703154 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06714502 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069786817 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07028906 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069617635 seconds)
  done (took 2.574366367 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103792208 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069149127 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097744247 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061398773 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073163338 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062930399 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070613521 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072295648 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069011654 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.0697918 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073321406 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070383832 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071192945 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.070980639 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.071742081 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073467004 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075181044 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070796513 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073655735 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.07364119 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072761589 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075731676 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075332171 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.07261427 seconds)
  done (took 3.185584835 seconds)
done (took 15.803595161 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.178035171 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074409473 seconds)
  done (took 1.549258347 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.094148813 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.092835039 seconds)
  done (took 1.500025695 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073680418 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059400468 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.076337954 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070099372 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062200257 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060687625 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076789646 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060327199 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060502878 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061449794 seconds)
  done (took 1.977072296 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063731193 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066466105 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06455022 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.063856447 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067553776 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061834692 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064452501 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.061512415 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.067447672 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061070274 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066477989 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083222001 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.064583176 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.082427328 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064569177 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06663886 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.066874517 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06561013 seconds)
  done (took 2.515664913 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06192214 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060447346 seconds)
  done (took 1.437119682 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065113525 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060751394 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062074567 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062536391 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062400805 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06155743 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061507733 seconds)
  done (took 1.736177705 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.434958617 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.197885604 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.435632038 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069284289 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.083523711 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.268185916 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064742959 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071019653 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069705587 seconds)
  done (took 3.048246466 seconds)
done (took 15.090432649 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085246997 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184358588 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.112341561 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.42187341 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.079349985 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068673247 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.096407795 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.209455219 seconds)
done (took 2.596584696 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.28618364 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.212707446 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.260456766 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.151259388 seconds)
  done (took 2.948302094 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.422724285 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.168646612 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076779268 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068855893 seconds)
  done (took 2.063230293 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066022255 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070253965 seconds)
  done (took 1.460962155 seconds)
done (took 8.100667402 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073801676 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059801661 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.066180663 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061859847 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.061835205 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.061463949 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.062203976 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.060326862 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 0.062520787 seconds)
    (10/24) benchmarking ("one", "Float32")...
    done (took 0.062378689 seconds)
    (11/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062110937 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061684477 seconds)
    (13/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062008823 seconds)
    (14/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.089823207 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06252601 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061543522 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061963798 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059905991 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061809037 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062563454 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063213887 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063151321 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062342025 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062784474 seconds)
  done (took 2.871680279 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079995439 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063680739 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064136759 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063906171 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064562757 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064527755 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064908896 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064023722 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065299037 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064413104 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066001279 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.065503512 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063955182 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.065144994 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06351219 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064988227 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064477372 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063586174 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063897311 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065871851 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066764918 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065605581 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067119552 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067854131 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068720737 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067086973 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066047674 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066159559 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066680299 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067745623 seconds)
  done (took 3.27830029 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068901779 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.05908725 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059555694 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069545336 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058594592 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059246181 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061441073 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060071107 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059805433 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061026206 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059908234 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058941881 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060349729 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061192673 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.0599992 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059786221 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064973867 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079760651 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.05960761 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.06018581 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065484939 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.05930548 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.05940979 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059777076 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059750906 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060074174 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06038812 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062100605 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059972554 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061048455 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060372267 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.067109104 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066390943 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061842823 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071434946 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065753401 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060480113 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066336197 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061245483 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061689976 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061013039 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060512487 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060621681 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059795009 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070629172 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061833531 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062627913 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061410085 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060922102 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059708887 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060088594 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062818424 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067521473 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062196877 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060686303 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061317268 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059833895 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061248314 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062245464 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060468997 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060609584 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064591472 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06130153 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061021221 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082924354 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062621217 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07156323 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060639012 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060331103 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064531038 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062582629 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079979914 seconds)
  done (took 5.860583938 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074516103 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071137728 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078607778 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069589467 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063173647 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061218625 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064997955 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060954452 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070146704 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063653498 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060169675 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064023189 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071224741 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064336628 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061854892 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069156517 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.063731108 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064183218 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062314023 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064776292 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062370969 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064132249 seconds)
  done (took 2.810488858 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.145942572 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065703414 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107769816 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071616386 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068298376 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06978194 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065944177 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06520955 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066047163 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068305015 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06738738 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066570423 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067964022 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066109479 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066766016 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068684894 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066903644 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06735358 seconds)
  done (took 2.676736575 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079410745 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065907954 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092524545 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064889197 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065214192 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066173088 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070373794 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069813065 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065585084 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065032313 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069399642 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067087358 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066194998 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066163621 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065182741 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065137671 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066550166 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068884051 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070166134 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070361353 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069379342 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069963954 seconds)
  done (took 2.863846973 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079024373 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064179119 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081982198 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066339459 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059614451 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06039518 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066337163 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064565181 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066891237 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066245279 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06479736 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060313262 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067223033 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064545786 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067158732 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066862057 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065422995 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065706672 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064529644 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059246059 seconds)
  done (took 2.665360409 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098581075 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061327239 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061764619 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067828518 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063080508 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062636389 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.067554643 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.061996734 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073717434 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.088751813 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063078541 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062883857 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067535814 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064882112 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062307936 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06839189 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068378113 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068188668 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066794033 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062780998 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087767298 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065628387 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068726177 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062992275 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063979952 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063372425 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06306023 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066737861 seconds)
  done (took 3.254011498 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06555056 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061446309 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061574052 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061649849 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063234708 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062857005 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062627102 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063477943 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065033487 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064219851 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063571812 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063123077 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062642439 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063066883 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064857481 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064097942 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063712086 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063213086 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063007281 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063452893 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06508843 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063436285 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063581033 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063428463 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063029276 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063564612 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065498805 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06367184 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063546129 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064104091 seconds)
  done (took 3.262273066 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07485143 seconds)
    (2/2) benchmarking "in"...
    done (took 0.07163012 seconds)
  done (took 1.49809082 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063046885 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077086608 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058462122 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071787395 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069566018 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06458946 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069068293 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068203141 seconds)
  done (took 1.884694886 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093580492 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.116595893 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062379298 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063645318 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.092204156 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128453034 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.102271216 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073303659 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076796291 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06517449 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061896078 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.101598607 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060488325 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075215879 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064243676 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071575033 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069954681 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079777017 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075284627 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061912437 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075497591 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062324374 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061658255 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062572839 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062227456 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069565705 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080456898 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075478245 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071064117 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059432796 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081634429 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062839133 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062267422 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07120853 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.093527225 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.06087708 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100562651 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061451231 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065734229 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060648065 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.07305992 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082367268 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077566087 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080581656 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062932068 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062241036 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060148876 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063674679 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065968203 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070977844 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060934578 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068278682 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060010799 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063218045 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073071325 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061746295 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066416433 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070253142 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075218846 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073962181 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.074095947 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077591837 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070263368 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069788326 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062478766 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082947038 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063746519 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075463487 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076470092 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062739777 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077178099 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061219015 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060616364 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060827067 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096095827 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064821587 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062910305 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061688341 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062627426 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063584472 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072605674 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06997701 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071241787 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066799346 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079037407 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072366925 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063863176 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.072162518 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.082385099 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066528009 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062446336 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.081343714 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.068125381 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062452818 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.082752113 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073608597 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.065306 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.065433255 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.068147548 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078934329 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06513133 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061832719 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072955596 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.067441769 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.256589172 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06517509 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070922121 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061695351 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.075093792 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066080367 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061146292 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058977532 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066636414 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061528776 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058108901 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069875724 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060387942 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074271106 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066961405 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.077009478 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076664342 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071541441 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075931841 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059894975 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060057499 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079568388 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070412148 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061059042 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077991356 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059658809 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073093228 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059980013 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.061670897 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.069349751 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.058910736 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062094635 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061419439 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066006368 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061632437 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061030972 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06571271 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070211019 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07354567 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061198048 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069859029 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060173396 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076487435 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072522587 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066486206 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064482302 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061486625 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072936011 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068509486 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072793468 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061098933 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062367727 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061096442 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07183067 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071806171 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064386524 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070140731 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066380753 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061283636 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061153779 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063090717 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066430875 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064881818 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062076444 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068913713 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070260406 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077506477 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068656525 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06950603 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058708031 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059072531 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06104543 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058914514 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06436857 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069133528 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075374335 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072611993 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.083386965 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061002335 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071532978 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06417884 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079499945 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075486779 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062102272 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06598551 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060927762 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064644561 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071782419 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074760116 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077057586 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078748799 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06936182 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066752673 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060781944 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077968457 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063431109 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071358139 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072301881 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.070289249 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063640029 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06428691 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072806503 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067278442 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062872986 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.080202789 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.073134974 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.063216536 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.078623026 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063158188 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.075104579 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.064271908 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067225054 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.069261825 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.066022471 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07357598 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.243390615 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060421317 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060646267 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076647472 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06383009 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062331377 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.06930924 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076577821 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064944168 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068571564 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073132026 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071522065 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06566107 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070146327 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060438485 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070349419 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06445618 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072013119 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060561943 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078323785 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058833697 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07689035 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061183028 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071791548 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060867992 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069192932 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060712849 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07917405 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062470894 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061386758 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072415093 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058475537 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069821935 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061258548 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066624398 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067651353 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069640846 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061304177 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070805116 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.063116795 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.070123622 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.065482776 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.06826767 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069913618 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067558017 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.060824163 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.06989558 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075515358 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069033311 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062466906 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063958033 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06166388 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071091222 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062730956 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06179207 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069805344 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068044803 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068270326 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063181171 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062992976 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062266915 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070111106 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073192931 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080643468 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070785721 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068654475 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070762064 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062383569 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078237296 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061647261 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068853788 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059465062 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068397483 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072871608 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060883403 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08073175 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062819251 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068905453 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074075758 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072139065 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065810717 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080500836 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064502723 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069692221 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070207465 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068356278 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069016289 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064016825 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070438408 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071441167 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.07410521 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063051027 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07064445 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.073041439 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064227037 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072980226 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065667954 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072437723 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065277265 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061855767 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067223623 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075312605 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.069545055 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068400238 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063359058 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061325014 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062911399 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.0730262 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.070086237 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.073630055 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080220039 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061919987 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064502957 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.0642693 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.068353063 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083799999 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.241631537 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070354493 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066408678 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059807183 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06130627 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062005401 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062241887 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063825124 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059765228 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059931036 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070517487 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061612846 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066369714 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060879037 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061170611 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070780928 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063661976 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060399157 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068282215 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060592149 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065892801 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059277693 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060642722 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064794387 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060727892 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065045024 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07151273 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077123937 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066892567 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069829151 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06311589 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068905079 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076591819 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067280903 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061052009 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071252337 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060265904 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079550482 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069955445 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068812842 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070656868 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063380029 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078278168 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065589173 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070173227 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076936003 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064021896 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069139202 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060949487 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07725983 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065488236 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060720265 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.071262105 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070083395 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067617471 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072592233 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061516304 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070974774 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067320773 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065428069 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062782669 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06206857 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070535103 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079898853 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.06276731 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067256532 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069101141 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069891019 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067471419 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074806737 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070402194 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062260922 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062383991 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065165874 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063691998 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073890863 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062060121 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066091219 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065677211 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060796869 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06985285 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078884402 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071927696 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071000401 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060677645 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061073647 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081287296 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066338944 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065114087 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072679851 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072396833 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076557442 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072087907 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.07977711 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063350063 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069060362 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077569081 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064526692 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063111536 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066478423 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064332008 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073623074 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074050326 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071229388 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065283291 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069564757 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076858159 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065825866 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.069292904 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.0711405 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064036642 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074453458 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.073537563 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073400053 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065745275 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063332097 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066968603 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.073417098 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.073492838 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.073875444 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065489834 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.073343876 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.079020198 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.073342421 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067975473 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06344289 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067882041 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073003973 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.070993649 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.064815273 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06959862 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.068193675 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.073671059 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07376405 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.069715191 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06403785 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.082369271 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.072725144 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073280243 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.066089563 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.067662219 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064437895 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063835285 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075699357 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063091195 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.066052656 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.070349429 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065836118 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.083243192 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072422399 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.080726178 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066584596 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.069181879 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063838484 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074425053 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068458035 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.064331035 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.076468992 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.063515311 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.080827288 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076682482 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.072133532 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.06483278 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.070311543 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.073126203 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.079857031 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074057032 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.074060594 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06905575 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074663447 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.066257748 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.075296215 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063646589 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.064220009 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.075183065 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073556784 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077130587 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.063181767 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.075536583 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.0666077 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.072631635 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.072637617 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.065932141 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06580886 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.065953473 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07371016 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.068508399 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.073225633 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.067636926 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080366815 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063536063 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074491668 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072206161 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074007729 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076978789 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075813318 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071187477 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063127821 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071562393 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.072749789 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.065297634 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068944589 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067579697 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.086958062 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065070437 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065017747 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07924007 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.071939941 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062882544 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.072808114 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068449154 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074526768 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064877169 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07476266 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.069936964 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064352725 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068543475 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068652512 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062512647 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063514674 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063668062 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073457054 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068392341 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.065393265 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084313359 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065540166 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072654341 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075706988 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.07069492 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065207767 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.397942234 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063219416 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076282111 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078620425 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066207699 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071834056 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063849695 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072511945 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.06173908 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072910107 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071314139 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071318952 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062370195 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065390369 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.079161103 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079824215 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067531174 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.08193392 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.074116342 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064595707 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084324785 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070508834 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062812634 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073191976 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063036843 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059611778 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060117765 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062824549 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074016716 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061588909 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063901934 seconds)
  done (took 43.400713292 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.106818136 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062422591 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059942977 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06025385 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069873238 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062857043 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061413305 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062805635 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061916145 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062650905 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060807233 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062705214 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066983764 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076726223 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068317562 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063909838 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060992073 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063601313 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060384704 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06127741 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065663594 seconds)
  done (took 2.889239575 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065610164 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06319 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063538303 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065710237 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063953299 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059646088 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062814198 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059179716 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062938557 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059309857 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062879666 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059170112 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.05935163 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059265974 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059229098 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060237343 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062566544 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062055699 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058917769 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062359434 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060698654 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062800976 seconds)
  done (took 2.81533583 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063797456 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061254408 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070967055 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059844779 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060056408 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062662121 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059522735 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065257053 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067301303 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066133968 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070625687 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060910302 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059723171 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067186667 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061680429 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061708165 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106433288 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061264977 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061679594 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062146698 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063808622 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070278021 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061228984 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06054806 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065447539 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065304275 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062549325 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064200331 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062149174 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065373605 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061806189 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061072885 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072409962 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070384971 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066281995 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065079552 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062432726 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063247685 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061344775 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060977517 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070254052 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062352424 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060702281 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063313335 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07133508 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061105083 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061135385 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07025904 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060501276 seconds)
  done (took 4.634992899 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073925456 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111796179 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067471436 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093621105 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.072125014 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.065968305 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068044482 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.0947801 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061695904 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061148015 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.073370666 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075314519 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063656702 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064744946 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066058458 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06287012 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064209891 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064365158 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065967396 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062034488 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064401386 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066618364 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072222496 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072584449 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062704249 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061052059 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061404287 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062911949 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07139676 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064466717 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063169753 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064976782 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074234289 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068037471 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063018435 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064687938 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.078173261 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064311719 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063329296 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061820408 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06369445 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066839272 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068884983 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07584365 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063651109 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068498639 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064799375 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063020402 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074726266 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063602036 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066751646 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075172925 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066548241 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064332885 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.0657779 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074171348 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063601457 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062879215 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065993248 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074523018 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062869532 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06448191 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074846723 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065055817 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067962613 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075583841 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068940034 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064532712 seconds)
  done (took 6.265020502 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07173124 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096908971 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075609516 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074977819 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070222078 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071043586 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072760451 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071261544 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070974225 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072825415 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070870186 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.135385163 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067828849 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072508852 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071412901 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070788436 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071431103 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073080547 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072345233 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071805484 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07087846 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076013413 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073208097 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076962599 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076389054 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067296877 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071077278 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072913694 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077042867 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07173968 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075647014 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071133323 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072769423 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.077604292 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076438637 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071018364 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061439491 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071732407 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073042698 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072190441 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068555121 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076418675 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071798626 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069914349 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072432192 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072395584 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076878257 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076652353 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075385548 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075830123 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072639066 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076877476 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07174709 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073551408 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.078119663 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080769454 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076887157 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077385022 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07405897 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.078206552 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077939772 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.0802927 seconds)
  done (took 6.156831245 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076732585 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065075932 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.078691688 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.0618862 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06057473 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070214555 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059763555 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059701324 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066714413 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.0687138 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068563006 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06994774 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070937381 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067880278 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071357146 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07222483 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070532861 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070783377 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066592268 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070756258 seconds)
  done (took 2.886628194 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.065417527 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065076744 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.060782479 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.075656738 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.060235047 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068517715 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06285946 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061246157 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061284352 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061279646 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065096578 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065853624 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062738571 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069084844 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065040915 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068239538 seconds)
  done (took 2.529784451 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064928301 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067152596 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.0951396 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063123859 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06389226 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061151182 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061185257 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060409755 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063807336 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076108499 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062412381 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.063782699 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061053483 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060633108 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062419112 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064406094 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06321731 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061935677 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061019907 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.096548143 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.075421159 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063134304 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06449756 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062123406 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063624361 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071566351 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064201036 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063853282 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062283908 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063689462 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063691537 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.074547017 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064796094 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063090679 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06120967 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061040141 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061970972 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065681358 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065291081 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062693549 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061092053 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.063423018 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062236209 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064199297 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063959 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064743599 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063391972 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.07163591 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062220843 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.065871993 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063151096 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064053007 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062992826 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.073159985 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064908713 seconds)
  done (took 5.101306736 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080317681 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067120528 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060081523 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059840129 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064484787 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065744403 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066971154 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066559265 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066540275 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060466737 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065796759 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065153997 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067478928 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066729944 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066695249 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065916989 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059388941 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065871298 seconds)
  done (took 2.699161019 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068939031 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066335678 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066942666 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062429879 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062328468 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065895133 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06021702 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062548505 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062917892 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062587996 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06222762 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061120152 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061468054 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062868251 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066339625 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061931458 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062159055 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060378453 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061504888 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060652249 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068511739 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061735494 seconds)
  done (took 2.894426189 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119396558 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.0837747 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.161779823 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081642923 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091070944 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072034551 seconds)
  done (took 2.116502515 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096131134 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099940677 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065687293 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065535172 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06914018 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06834987 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070139287 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069273118 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072150661 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073833044 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068311103 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073220747 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072595287 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073878468 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069845878 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069785249 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070053901 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070331334 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066657389 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077061113 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068718132 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072852182 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070562379 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069190324 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069536601 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073556336 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072194486 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076851588 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069731932 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072962091 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070823375 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068972359 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073764682 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076358025 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06673438 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072826154 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06891154 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077076927 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072770288 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07540922 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067091592 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07108168 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073059695 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074388036 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074263089 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070605543 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072685711 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069565518 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07095488 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.08230122 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072358083 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077576239 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071199244 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074094972 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074566455 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082441021 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075760443 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074718521 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072928864 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076838776 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075447995 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072074151 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074566004 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076395501 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073540159 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075872497 seconds)
  done (took 6.340642656 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105579775 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065875598 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069873486 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074518872 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073931007 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068229412 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068592068 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07011763 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069439416 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066699333 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104501002 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068766728 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074838477 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07456381 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069312165 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068966107 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068763207 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074448153 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068339014 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081115625 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069581924 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073578484 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074098901 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075717884 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075778504 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071445924 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068866074 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069014371 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0704943 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070165843 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072879586 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069140211 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073773493 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067623236 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075177321 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070061928 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069423674 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071834778 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069489436 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072863529 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075170215 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078603953 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069341394 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069516832 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077503142 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070468168 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07032084 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066987195 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069444116 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067231012 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077944605 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076835655 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076627463 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07481515 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070409225 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072034862 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069586195 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0698357 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070488553 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071290916 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075233458 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07174689 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.083036655 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070636617 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069807811 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07551231 seconds)
  done (took 6.349667117 seconds)
done (took 131.311289648 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.262202029 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.221226418 seconds)
  done (took 1.972400739 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076325531 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.266838174 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076642893 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073950626 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.13382903 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.133902956 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.107119444 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072187374 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073791278 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071200619 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.17315422 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107485834 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07129736 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.340971613 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072268205 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07320398 seconds)
  done (took 3.441440057 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.146973418 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.213889872 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.081266389 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.06974357 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.156341164 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077696344 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072416715 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077099622 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079162416 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.07179756 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.120684694 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084550994 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076737213 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077476321 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071694241 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074550225 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076645612 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076990654 seconds)
  done (took 3.227868591 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10406228 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.119990229 seconds)
  done (took 1.751491057 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.179585362 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.116193085 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.155046048 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.358719261 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.143091184 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.151584203 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.158992556 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.159303998 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.131570804 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.149152742 seconds)
  done (took 3.219864699 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.10661077 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10316813 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30517285 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100685385 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080101086 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074887288 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072626273 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077667232 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072766765 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074287241 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120703323 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074776316 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070790615 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12267283 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09952768 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106752417 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069697911 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076797103 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07827815 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069081711 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074881195 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080170746 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179751154 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079256021 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.102525952 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074752147 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077263159 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.079034811 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07470989 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078872283 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078682746 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101774293 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081148834 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08460813 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077178911 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097995402 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072184993 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.10294428 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074693257 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073214033 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074834508 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079007526 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074114402 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079078582 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07593008 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07725808 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080415666 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072681746 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076416584 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075367603 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073233927 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076161634 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076767573 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07922353 seconds)
  done (took 6.284690918 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.12379072 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.113680666 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070422205 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.120023555 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.111904103 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072068447 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.125919865 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104584435 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.12234393 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067854885 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068128932 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069110194 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076720781 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079970935 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.123367799 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.116744954 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071699952 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06961847 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.116399948 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.116398246 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06892297 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.12692884 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.12045528 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.114722376 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068679419 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070252437 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070781373 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069762218 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077795767 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076363391 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069285191 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.081394694 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081506355 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077408761 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06803878 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068402242 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069973926 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077951544 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07950158 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078722081 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075759671 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06939028 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069389795 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069600959 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070021651 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067884731 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078724227 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079199279 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.0800496 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070379798 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069121989 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068805075 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071877011 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077750894 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.076439895 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077048879 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080143396 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071597627 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070228317 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071426205 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080727329 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078032665 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079510983 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071169318 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079557223 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069070607 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079623959 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084662144 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070017781 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070282839 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068928793 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069108669 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070958655 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077466061 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077229908 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070173026 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070879289 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070988104 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079368885 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077495204 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069612954 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078541089 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069321411 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072175314 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071806432 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072398097 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.08202948 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.080783941 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07306479 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071958146 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071277385 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070301118 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070269957 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.082832978 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.23175402 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076416022 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07951796 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069419838 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078166829 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076129848 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069076991 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076838509 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068769922 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06904074 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068088565 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074800938 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076429335 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077234361 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068786432 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067644049 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075940485 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080469378 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068880898 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074870065 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07667546 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.074619945 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068411861 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079664433 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069033554 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077404554 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067891943 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077025027 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07019852 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074684615 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067184026 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067548685 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068199591 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077120929 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070545959 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071436489 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069127391 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071253896 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07454262 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079011416 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071194679 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076820083 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077145155 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069495036 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078071306 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070028862 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079572802 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06980833 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069864027 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068012183 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080597006 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070780896 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070241794 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069326409 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078107058 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069054199 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079824032 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076851898 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069288577 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079200973 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078802711 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07767411 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079849396 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069272709 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068169793 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067693297 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068201715 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078608574 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080776199 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070648143 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069005081 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076926695 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080360545 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069603618 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076003587 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075946666 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078032232 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070568 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.07011741 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079572515 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081331555 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078556656 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080534003 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078661141 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069583877 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076490569 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.083277059 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071639409 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085917252 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070674954 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081984067 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.083484108 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078208252 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.082417849 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.239548599 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077835205 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077174534 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078239148 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067913909 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069724735 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075035603 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068683656 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067980803 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074044255 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069912575 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070807115 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082262997 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06864974 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077410598 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069323277 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07620971 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068273375 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068572249 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079043492 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069242948 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07014369 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076066454 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06843142 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07381566 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077278581 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.076667738 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067516111 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068865851 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0782144 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077149764 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06820515 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069720753 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068844485 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.076944279 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.076497442 seconds)
  done (took 19.04510151 seconds)
done (took 40.47591088 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172030206 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115043626 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.227423308 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.209609409 seconds)
  done (took 2.349383602 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101861378 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.064397696 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.109555862 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.120101749 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065172395 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.10442203 seconds)
  done (took 2.134028095 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203665843 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178930215 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.254404122 seconds)
  done (took 2.19530056 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.37220095 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153954817 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.263258696 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.524991751 seconds)
  done (took 2.977562609 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.138656539 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.135321843 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.07763472 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.148121141 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086296343 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062507474 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.147543931 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069892112 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.102005257 seconds)
  done (took 2.595708197 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.143341529 seconds)
done (took 13.961170936 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.323263169 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.159171155 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.185561249 seconds)
    (4/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.317294559 seconds)
    (5/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.327306748 seconds)
    (6/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.218052828 seconds)
    (7/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.103373767 seconds)
    (8/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.231178339 seconds)
    (9/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.336482009 seconds)
    (10/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.131534191 seconds)
    (11/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.168474086 seconds)
    (12/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143942082 seconds)
    (13/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.297163457 seconds)
    (14/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.335862645 seconds)
    (15/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.076075902 seconds)
    (16/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.103391978 seconds)
    (17/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077900417 seconds)
    (18/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.082165319 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078324432 seconds)
    (20/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.126148233 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154068046 seconds)
    (22/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.093977602 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150873363 seconds)
    (24/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067194079 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078859906 seconds)
    (26/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.080641596 seconds)
    (27/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.079985635 seconds)
    (28/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.256869245 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.252681141 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077680644 seconds)
    (31/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078501249 seconds)
    (32/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.110656782 seconds)
    (33/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.235411218 seconds)
    (34/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074897813 seconds)
    (35/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.162003216 seconds)
    (36/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.176804108 seconds)
    (37/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.076165013 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075876193 seconds)
    (39/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.099139351 seconds)
    (40/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.149296096 seconds)
    (41/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.272374619 seconds)
    (42/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.213691662 seconds)
    (43/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.163207926 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.249654286 seconds)
    (45/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074463878 seconds)
    (46/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073918253 seconds)
    (47/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.068208735 seconds)
    (48/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.330212373 seconds)
    (49/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.206713565 seconds)
    (50/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074314032 seconds)
    (51/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.087551841 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.082025666 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091431606 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113234898 seconds)
    (55/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.206217504 seconds)
    (56/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077348152 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094537328 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.214962835 seconds)
    (59/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.162328613 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.090009103 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.081643427 seconds)
    (62/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.091846949 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.10131714 seconds)
    (64/341) benchmarking ("sort", Int8, false)...
    done (took 0.336106063 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.194332503 seconds)
    (66/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.184332258 seconds)
    (67/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.233893963 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.084404697 seconds)
    (69/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.234275929 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.090483526 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.089609879 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066081716 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.212458866 seconds)
    (74/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065324463 seconds)
    (75/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.108949813 seconds)
    (76/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.19432874 seconds)
    (77/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.147548368 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066005248 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067551738 seconds)
    (80/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.076272584 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074945285 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.085410784 seconds)
    (83/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064846834 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071970089 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064537292 seconds)
    (86/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.221450213 seconds)
    (87/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.177374684 seconds)
    (88/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.173855881 seconds)
    (89/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.215906547 seconds)
    (90/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.082230667 seconds)
    (91/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.078510369 seconds)
    (92/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.184911525 seconds)
    (93/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064322012 seconds)
    (94/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.071507956 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.12097243 seconds)
    (96/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.147687395 seconds)
    (97/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.085172378 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125138539 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15362941 seconds)
    (100/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070754872 seconds)
    (101/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.073580904 seconds)
    (102/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06505705 seconds)
    (103/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.203009045 seconds)
    (104/341) benchmarking ("sort", Float64, false)...
    done (took 0.139078424 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134327456 seconds)
    (106/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074688775 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088227983 seconds)
    (108/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066707321 seconds)
    (109/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066627513 seconds)
    (110/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.208534327 seconds)
    (111/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.07299487 seconds)
    (112/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.146548562 seconds)
    (113/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074278452 seconds)
    (114/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.148674077 seconds)
    (115/341) benchmarking ("sort", BigInt, false)...
    done (took 0.274656667 seconds)
    (116/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.293097926 seconds)
    (117/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.07381423 seconds)
    (118/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074856697 seconds)
    (119/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068456812 seconds)
    (120/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066528342 seconds)
    (121/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069282046 seconds)
    (122/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09524922 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092200786 seconds)
    (124/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.084483945 seconds)
    (125/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092514928 seconds)
    (126/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.215372669 seconds)
    (127/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068692697 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06675694 seconds)
    (129/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.076542545 seconds)
    (130/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.206102701 seconds)
    (131/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.143369692 seconds)
    (132/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067736839 seconds)
    (133/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.213196784 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078383678 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073426009 seconds)
    (136/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.200537476 seconds)
    (137/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.082762461 seconds)
    (138/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.068987119 seconds)
    (139/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.06754448 seconds)
    (140/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.087032773 seconds)
    (141/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.212778028 seconds)
    (142/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077166429 seconds)
    (143/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.181793188 seconds)
    (144/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067957842 seconds)
    (145/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.259922729 seconds)
    (146/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077383212 seconds)
    (147/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075235112 seconds)
    (148/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.071708298 seconds)
    (149/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.326989911 seconds)
    (150/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090915225 seconds)
    (151/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.14681137 seconds)
    (152/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.06697152 seconds)
    (153/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065545123 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086326779 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087276811 seconds)
    (156/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072360652 seconds)
    (157/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066434784 seconds)
    (158/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075663505 seconds)
    (159/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.072059722 seconds)
    (160/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067064332 seconds)
    (161/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073793577 seconds)
    (162/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074156155 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075826891 seconds)
    (164/341) benchmarking ("sort", Bool, false)...
    done (took 0.142865703 seconds)
    (165/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076798574 seconds)
    (166/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.085462984 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133688975 seconds)
    (168/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067939286 seconds)
    (169/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092876964 seconds)
    (170/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.06823967 seconds)
    (171/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067272553 seconds)
    (172/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065905221 seconds)
    (173/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072876544 seconds)
    (174/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074777531 seconds)
    (175/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071897554 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.067391718 seconds)
    (177/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066710455 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 0.067292458 seconds)
    (179/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.084626538 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065510514 seconds)
    (181/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067183386 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066134968 seconds)
    (183/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142861267 seconds)
    (184/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073665205 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091602707 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153921234 seconds)
    (187/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066648024 seconds)
    (188/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.065219008 seconds)
    (189/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081420439 seconds)
    (190/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067268434 seconds)
    (191/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.07296598 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083236386 seconds)
    (193/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.064652401 seconds)
    (194/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064848197 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.097151854 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11637962 seconds)
    (197/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076883091 seconds)
    (198/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071470351 seconds)
    (199/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.174454568 seconds)
    (200/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.069214564 seconds)
    (201/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067140648 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.167745454 seconds)
    (203/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068736206 seconds)
    (204/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.070778421 seconds)
    (205/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.0676847 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086751118 seconds)
    (207/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068542415 seconds)
    (208/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096054846 seconds)
    (209/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074838445 seconds)
    (210/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.194402064 seconds)
    (211/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066389821 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.158631399 seconds)
    (213/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.071808163 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.216843585 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.158106774 seconds)
    (216/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068204969 seconds)
    (217/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066946789 seconds)
    (218/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078179541 seconds)
    (219/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.230392866 seconds)
    (220/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.070070259 seconds)
    (221/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068176822 seconds)
    (222/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067294845 seconds)
    (223/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.070900053 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.073710375 seconds)
    (225/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.177856926 seconds)
    (226/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097242328 seconds)
    (227/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077386062 seconds)
    (228/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071943269 seconds)
    (229/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.084080216 seconds)
    (230/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077056497 seconds)
    (231/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.148884355 seconds)
    (232/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067874775 seconds)
    (233/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.23296637 seconds)
    (234/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074720666 seconds)
    (235/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068561276 seconds)
    (236/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074178688 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067424745 seconds)
    (238/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.06649795 seconds)
    (239/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066601029 seconds)
    (240/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067519585 seconds)
    (241/341) benchmarking ("sort", Float32, false)...
    done (took 0.142315484 seconds)
    (242/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.070011688 seconds)
    (243/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078631635 seconds)
    (244/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079230858 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088664581 seconds)
    (246/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.186480094 seconds)
    (247/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.069919353 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.214140219 seconds)
    (249/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06949075 seconds)
    (250/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.06969201 seconds)
    (251/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.145169078 seconds)
    (252/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072940822 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069744172 seconds)
    (254/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069173906 seconds)
    (255/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067785137 seconds)
    (256/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.256589521 seconds)
    (257/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.069582428 seconds)
    (258/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078508442 seconds)
    (259/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.071703566 seconds)
    (260/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079407078 seconds)
    (261/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070486451 seconds)
    (262/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068277405 seconds)
    (263/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073714541 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094844749 seconds)
    (265/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.068995528 seconds)
    (266/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074719706 seconds)
    (267/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.067158973 seconds)
    (268/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06583918 seconds)
    (269/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142674021 seconds)
    (270/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067471263 seconds)
    (271/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073619037 seconds)
    (272/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070381897 seconds)
    (273/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066283771 seconds)
    (274/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.071084202 seconds)
    (275/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.068954933 seconds)
    (276/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070729027 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066261526 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.192473116 seconds)
    (279/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071279877 seconds)
    (280/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080698099 seconds)
    (281/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.176282421 seconds)
    (282/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066614116 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06879447 seconds)
    (284/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077395216 seconds)
    (285/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073227991 seconds)
    (286/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066073523 seconds)
    (287/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.200361939 seconds)
    (288/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071640979 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067156003 seconds)
    (290/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064775914 seconds)
    (291/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065065112 seconds)
    (292/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.071276211 seconds)
    (293/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06749628 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.073176941 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.102582448 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.189018427 seconds)
    (297/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066870865 seconds)
    (298/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06838185 seconds)
    (299/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069338764 seconds)
    (300/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068454828 seconds)
    (301/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.068075509 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144460518 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.162535136 seconds)
    (304/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072669755 seconds)
    (305/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067115953 seconds)
    (306/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080034672 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153488414 seconds)
    (308/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.068884811 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068438 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.202993371 seconds)
    (311/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073703619 seconds)
    (312/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.06814005 seconds)
    (313/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066942648 seconds)
    (314/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.069083972 seconds)
    (315/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066592615 seconds)
    (316/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066326392 seconds)
    (317/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067729104 seconds)
    (318/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067529922 seconds)
    (319/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069193525 seconds)
    (320/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074643951 seconds)
    (321/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070435416 seconds)
    (322/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066978101 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079979773 seconds)
    (324/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094024761 seconds)
    (325/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068557469 seconds)
    (326/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065761462 seconds)
    (327/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077770168 seconds)
    (328/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.072680347 seconds)
    (329/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067893123 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087037342 seconds)
    (331/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066902698 seconds)
    (332/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067020767 seconds)
    (333/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.068969594 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066523782 seconds)
    (335/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.219628861 seconds)
    (336/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075065849 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068316375 seconds)
    (338/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067340887 seconds)
    (339/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.07124046 seconds)
    (340/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.066253483 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.073820635 seconds)
  done (took 39.62651492 seconds)
done (took 41.212284227 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.126022751 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081392333 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07763892 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.0745434 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077760839 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078002546 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079606245 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076650573 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080783578 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076672091 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.109013661 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066662251 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073717209 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082767588 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073861651 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081688545 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07915287 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081116702 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066189185 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080262276 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093217943 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080241445 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.0754074 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080426311 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066161969 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076090691 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.122995551 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085915188 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070447185 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076742121 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074536944 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082400856 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07418949 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072832368 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076005926 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073051545 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.077059204 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072657355 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.121663615 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072794244 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067187414 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079032133 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072860056 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073630453 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075894635 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078630209 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071770835 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.081564165 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064973177 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07785287 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.123383172 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07117827 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071044174 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074262918 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071126499 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077187921 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071089525 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077903529 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071013158 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077198475 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076095412 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075664392 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065596002 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074491736 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073663514 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073242878 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064187421 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071797311 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067132035 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065863375 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065522367 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074534826 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072840814 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.072427866 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066336554 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066475434 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065210188 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077607301 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074076098 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076602799 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066987119 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071816999 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070752821 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06661446 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073408601 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077464319 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06488493 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067280141 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065897212 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080665271 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073644436 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06862234 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.079188355 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072234414 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071333287 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066443624 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067379524 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071799997 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074892699 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066490299 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064600296 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072119536 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073240809 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076233754 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067305511 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07144969 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072087107 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067296675 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077387596 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07537124 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076557923 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080783101 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078453033 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.082065767 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068629032 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066029313 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077719418 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.232078571 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070953129 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073235075 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072280482 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073597967 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065960636 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.064259223 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07016288 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071166 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067439112 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065682985 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065835568 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073556311 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072361146 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06560188 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066289187 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074663729 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074558147 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064287872 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064625452 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075471792 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065279795 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071356379 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070346871 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073366867 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064836466 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067802564 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.064742503 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065014365 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064052201 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070149115 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072142561 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066361512 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074319228 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072479567 seconds)
done (took 13.175727489 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069095859 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108323933 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.118768981 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112931811 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079612476 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069479633 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069931235 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.088048956 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069981884 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.092091326 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091176438 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089798003 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.131857907 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06528395 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06587606 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06672013 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065517517 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.080079595 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.116060013 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090083283 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.111159213 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066446565 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.08045355 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086723232 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07962707 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.087853812 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067871713 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067249619 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.06988311 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083713699 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092717537 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068656231 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067305228 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085740342 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083370249 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075272261 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066920046 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.074336425 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068219409 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066828603 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068467487 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084760809 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074188022 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.075555745 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067944317 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067638689 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06599 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074322982 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082387606 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073590989 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079882976 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083201551 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06833627 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068414825 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065198724 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074826089 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065988604 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067164518 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068544751 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066868511 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066942591 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069963479 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071950041 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.076935673 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072121037 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.074417267 seconds)
  done (took 6.815111839 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084155072 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096275483 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081268134 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081284083 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065211018 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066391479 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067922628 seconds)
  done (took 2.252859075 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068546376 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.105969979 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.115681319 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.115812324 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.12371465 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.114725148 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067474089 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098071509 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064319998 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106470837 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.119424609 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.115673224 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069757042 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078559647 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067611943 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.118736696 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068006171 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073889451 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.112903118 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.120376507 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071689352 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097714482 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080481913 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069160022 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.11795287 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.109276123 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068911085 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067923147 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071295 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067418555 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066810835 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089405443 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.109812065 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082491437 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06826654 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065865196 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.10615941 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069435552 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.10668115 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074190761 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.10558072 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.07024183 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070172792 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067248148 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067730176 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.11107618 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069733334 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067479707 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066927149 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.109486741 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066315571 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110224434 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069682437 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071839693 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073526414 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073928986 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076228589 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068017057 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.111224366 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076782747 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070048198 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.12280567 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.120758987 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.108499563 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.122808479 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.077047645 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111203592 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.109942153 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067531927 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067452604 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067852071 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.121010392 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072698382 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.07103554 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.073031773 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074502212 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.114148666 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.128154218 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.127143459 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081798915 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070989867 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070745864 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.242832569 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.123303022 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071489433 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066704173 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067073679 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065160622 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071274896 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.072964977 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071874443 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066573493 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075911437 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068928021 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070240978 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.115857278 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066445977 seconds)
  done (took 10.239429329 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070572516 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06855875 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066545059 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067281331 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069545285 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06814146 seconds)
  done (took 2.137909515 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094472028 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067715671 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079072184 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067178376 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088720197 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.11184568 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.111369876 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06938312 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083239783 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078994865 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.112284872 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.113635224 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112891946 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068937952 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.112465715 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069442518 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.111493891 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071258663 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080294484 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069905549 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082152974 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068815805 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06889885 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.119556003 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070719496 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069396604 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.075994266 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.079224428 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080446707 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069730483 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069364558 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070134924 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07657724 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069889572 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.114590594 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.077810946 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067880559 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072358061 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071587956 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071001237 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.114791889 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06896563 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072194465 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074355119 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069642986 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.077513542 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072348139 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071901749 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.113611027 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073002669 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072721217 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067845466 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070070552 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074244885 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07701304 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069702192 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072081208 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.112565376 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071008364 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077436681 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068568935 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069696142 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069352973 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071691216 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073998461 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073237595 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07728208 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069171358 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070082223 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070455149 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073522556 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068620246 seconds)
  done (took 7.453921607 seconds)
done (took 30.584109047 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54335269 seconds)
  done (took 2.232919461 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.978300731 seconds)
  done (took 2.712177994 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.281810254 seconds)
  done (took 12.012958253 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.350906242 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.4789938 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.770090624 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.142610141 seconds)
  done (took 3.492050274 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.872663582 seconds)
  done (took 2.609234879 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.241374508 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226494644 seconds)
  done (took 2.21623387 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.464015574 seconds)
  done (took 2.186512588 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.223001234 seconds)
  done (took 2.946609576 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238311052 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164394115 seconds)
  done (took 2.127662677 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.639375421 seconds)
  done (took 2.359687907 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.782496525 seconds)
  done (took 6.520988634 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.330721724 seconds)
  done (took 2.11969057 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240702327 seconds)
  done (took 1.978210905 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.64562541 seconds)
  done (took 4.37153047 seconds)
done (took 51.636930303 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088187272 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08684878 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086176521 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081032504 seconds)
  done (took 2.054165589 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076451388 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.07037156 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.072344078 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073703712 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072473952 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072434345 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073854095 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069610236 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070661027 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071343185 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070219733 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070821715 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073212359 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069445357 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072631708 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.0756817 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070901682 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071038356 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071827282 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069543744 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074547351 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070987131 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.068567693 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069492608 seconds)
  done (took 3.456492577 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080050156 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072101841 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074687875 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069992759 seconds)
  done (took 2.031657321 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078354723 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.076236829 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084142727 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091111023 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076301954 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077017674 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083392723 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083784651 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067291118 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087169674 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066587405 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064923915 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065010369 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083636875 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082756424 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.062330323 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.062727623 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076943886 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080718349 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.07967725 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068715765 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064845233 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076079852 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.079113279 seconds)
  done (took 3.551583543 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083702583 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065606609 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.08427846 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091413639 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091732215 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.065425594 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.081912482 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093462285 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129639878 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065813076 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073215833 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066507122 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10624075 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065459717 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081133205 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112868732 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115123821 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069553341 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098805721 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067216041 seconds)
  done (took 3.461615267 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079173967 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071509027 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070460292 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065714713 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075430477 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072144106 seconds)
  done (took 2.190371185 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069543388 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.067677012 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068586888 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072764546 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067954847 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067057545 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066572294 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067192774 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066775754 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067004943 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067149867 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066876318 seconds)
  done (took 2.561724297 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.220329006 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072190929 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.075178708 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.065742602 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06758599 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067008621 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080267346 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068996214 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.091927492 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067806562 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067247102 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06871693 seconds)
  done (took 2.757774909 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106362739 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110657523 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145354213 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116234476 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114838103 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098240608 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.16643225 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094710272 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.163207451 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.139453736 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1191745 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09335831 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088746604 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069981968 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101108745 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122822684 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14114607 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073254292 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116151711 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.208296609 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134378682 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.137732969 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149548929 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119554352 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094390801 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148632477 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098179878 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105256246 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12472786 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129315993 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12141103 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.100344125 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072300155 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071313544 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153519478 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.11145068 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122446752 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09624518 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108792719 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090191117 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110577396 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.073002049 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.085781738 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114594467 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088263004 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137257343 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.0952758 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118392901 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084785181 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.145310422 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136989206 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146885749 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089110435 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110144895 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14719733 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120601929 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147345134 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112015471 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088426696 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.127337063 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.117715175 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108333365 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118266416 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084583024 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.193448029 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096227882 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.12025639 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123015468 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.104832945 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102816961 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114224114 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.147191003 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137738035 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.138442842 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153190438 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098247405 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129623701 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.109202563 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.136332973 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112732905 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076727854 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.132982115 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137747282 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107863875 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108308513 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142194798 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097799797 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080563474 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.108318673 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.125832453 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083091329 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.122425963 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086969013 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.119399418 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148979539 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106440646 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118976082 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.127308848 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083451849 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.503601523 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113917641 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078879456 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120760656 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114470822 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160430846 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097791438 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077810798 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105583526 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106462507 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.158648116 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109679255 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083315257 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111848874 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145109692 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096870473 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.225883431 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099049856 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144768395 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115569604 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089715967 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076329185 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.092273178 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117805206 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110981022 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114247827 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098409955 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.086447326 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08874248 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117387497 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097090714 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083920232 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117263769 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10119117 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077920427 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090699314 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078338004 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144445437 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080614404 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140806322 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128131425 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078241005 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111517395 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098398328 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109153841 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101400038 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122921041 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14553732 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.119868584 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094235574 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.098433825 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111409907 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14981837 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131117804 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.274189943 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078089761 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102187771 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113213912 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09735933 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124797916 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094919576 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107072988 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102716123 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141559478 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143404212 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098181964 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102402771 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107524079 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.122042969 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075286986 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156656394 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10656434 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121051016 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087828949 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144382232 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.1138363 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090555361 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087701833 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103141842 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.107770637 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109377685 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148197512 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098524681 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073699818 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094205136 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147983523 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079342295 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111516095 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093351631 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.095777449 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122050074 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.097009067 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082874351 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071060886 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131009669 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162312442 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.073021843 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11641444 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112736269 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106300799 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.127233376 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071133462 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122859305 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142725442 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122646679 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148246032 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.347664317 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118716709 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118028948 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114481045 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10629132 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079922188 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.124800915 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136321762 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096238317 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096456307 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135179346 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121088903 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136933973 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.116639428 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121623098 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107486985 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107720782 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103776133 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.107875753 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147194592 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123544485 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127884589 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085584345 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10862866 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119900345 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140175689 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083328177 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14392888 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.086807463 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124181377 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079880838 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126284598 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.07863429 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112657993 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081220963 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10322649 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070240321 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075357817 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147948515 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.11650684 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110918561 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105654075 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.143325861 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140962637 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081625028 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112024004 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118828524 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104630196 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122177702 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112698058 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092068377 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.276274294 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107510069 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085557301 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080832176 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116079702 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093921342 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122927666 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082594257 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074632261 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138878744 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103740367 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096065989 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076272981 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107649187 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122625925 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094619465 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087229736 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115266674 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105651954 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143175405 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092188153 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098587844 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.126125966 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082536907 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093803798 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069930898 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08578901 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077829455 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.131147408 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077178502 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118769089 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071520143 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.1346961 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089146425 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094248384 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105469042 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112516882 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129733936 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097636008 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144498405 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091155175 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123115252 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111559737 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096804768 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088095564 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10719327 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103032275 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124995568 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.098965166 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126993466 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149938048 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106792086 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147579038 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095319999 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12675639 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10921283 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.129009901 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.286738697 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167131069 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140524976 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112573836 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109757398 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076694235 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096808248 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105553588 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112110464 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174174016 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125639225 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072284673 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106749543 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09411215 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109445919 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104403072 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083266633 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1478456 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103856407 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088884556 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114462877 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093071679 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104903163 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07754968 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103948973 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.107577267 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096801505 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099353431 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119188588 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13254575 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115083601 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.149459193 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.102643656 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093721342 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122417069 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113473992 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111305874 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089044565 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088735572 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140872743 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123375885 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.132524457 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104893944 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11184618 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116120751 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104497921 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129861841 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113361192 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.132326981 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082526626 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078433744 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070623326 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074502495 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.299154675 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109665411 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112101973 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098042399 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074060566 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104364343 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103497735 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071651263 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088828841 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094819039 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098807233 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091570026 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108341651 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.113072092 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091776752 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104163092 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097341606 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147553477 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.102530414 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088732301 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146813441 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151813431 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088588503 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094982984 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072437688 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080077584 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113065215 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152958003 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.155794648 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079625903 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088677457 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.089234124 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089748831 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072350014 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090870117 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091841857 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108766399 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099945188 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116701761 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108763806 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077216325 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10358205 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101608365 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094707741 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.110743618 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124715553 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134754908 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.146147199 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11785661 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112993198 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078901631 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082629092 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07780711 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08327162 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105191735 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08134439 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077709214 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149481229 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.267826658 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106780625 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109072241 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087774322 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0754444 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135013677 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070372788 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134313234 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071992589 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083777502 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082819103 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078877306 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092734071 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137867426 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109427084 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11069418 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10937718 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105058943 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161320214 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160746781 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082760271 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142678716 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078258893 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077483839 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076995489 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111161634 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091235838 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117064894 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144685159 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092552669 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105521639 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080392739 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146294283 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.103466391 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107484451 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087795918 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080199403 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147191677 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081500944 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.0824825 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091055719 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115145406 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074275148 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104938912 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085368277 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083210402 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170133814 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.711251115 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094780265 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077670803 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100296949 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146529815 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138924678 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1018095 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112893771 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.298947726 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101605093 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09391681 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108671852 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.1918119 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074162411 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094555866 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104480277 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097839338 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101227706 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098928492 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090478796 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092972283 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086841173 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079153717 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108891028 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088933551 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096460558 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107837918 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085277919 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088747755 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130573163 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105323432 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084578817 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08920064 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105159853 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089284197 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105531134 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069703297 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110968729 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090262774 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119875819 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.100930096 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11048221 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128186753 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096314525 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141481113 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.110287134 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125140184 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090816822 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080796082 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128690295 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091865278 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080806775 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148907801 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.099371784 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093542366 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108363826 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099525083 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116332693 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121721287 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116852208 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099402908 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081950911 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106160339 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.106833432 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089907217 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.258995465 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074998159 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076415916 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109130389 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08689329 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087043113 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112155553 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090465223 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104063845 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103744178 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122443008 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090252807 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102635565 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111053093 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092601713 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111599561 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101795006 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129050151 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175007422 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125289875 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132246404 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136973503 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078743078 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076284645 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070878959 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115907036 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081033856 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089955348 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080437619 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1373186 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084179256 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114930437 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.248876084 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081885508 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10047045 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099269262 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071449983 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085356185 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110169715 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09068417 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08238434 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121623836 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083269964 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.133122525 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113689574 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101542537 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098917142 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083474076 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117052645 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.107188993 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.135820398 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098509661 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077148078 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128906093 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107632959 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143976097 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074995303 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084923178 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1350291 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107333469 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13843738 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0837491 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16055178 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.153060445 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10785233 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14459131 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076307736 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093081331 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096621054 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.133939199 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091637776 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122308874 seconds)
  done (took 70.287582497 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.194928616 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.189237865 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.124045168 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.138646041 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.292294883 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.302373114 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.155300494 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.125232218 seconds)
  done (took 3.522170099 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.074075326 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084554933 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082711247 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.249756042 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.103873482 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.0686046 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074062541 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082246079 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070949573 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068919262 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.107032625 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068618771 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.071233361 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.540430859 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067663843 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073873384 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071371338 seconds)
  done (took 3.89201937 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.352351884 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.619059042 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.336474749 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.631060718 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168797707 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.725120294 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076122166 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082192253 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.814074939 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.404330697 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.16374127 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092499543 seconds)
  done (took 21.382214711 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07863223 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.121813254 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.12163358 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076684212 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074475761 seconds)
  done (took 2.39131432 seconds)
done (took 125.305643561 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08780117 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174097097 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068870463 seconds)
  done (took 2.196374 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.123551074 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.120459064 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119336789 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.122436742 seconds)
  done (took 2.412644089 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077095289 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076717645 seconds)
  done (took 2.081396983 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.230775669 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.2166905 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092389059 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085736658 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080417965 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081035429 seconds)
  done (took 2.183207916 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074796241 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071548443 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071581466 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071679195 seconds)
  done (took 2.209597402 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.172530448 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067118948 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070486909 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073216921 seconds)
  done (took 2.304916218 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087728847 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088082611 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116643191 seconds)
  done (took 2.220840627 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08612248 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085604125 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079016618 seconds)
  done (took 2.181305214 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.112292202 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098888546 seconds)
  done (took 2.136421657 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081457338 seconds)
  done (took 1.9946985 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09546512 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099919602 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.185284543 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.153080692 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.187734499 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.174732799 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077503405 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078479506 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073111805 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072247657 seconds)
  done (took 3.12498253 seconds)
done (took 27.590927406 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08819358 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.194345516 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.320467145 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090395832 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.826906178 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.316517017 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.736801521 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093582404 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101745371 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068662933 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086139703 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.807259211 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.739148075 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.149258586 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.722026042 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.139854187 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.565649823 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072322736 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069979854 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070366004 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.719049973 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071195032 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069096348 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068671804 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.560731731 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.336340441 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07283157 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.13958672 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071180565 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072931237 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.317034397 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072692102 seconds)
  done (took 14.737379227 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077442672 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.147813343 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075994794 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085573762 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070848313 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070230391 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073478228 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071048195 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112950628 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069354518 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086240364 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069702941 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075082806 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070626588 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090774713 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068862074 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071388801 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071320374 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069761891 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070391697 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088234257 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068488898 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070588804 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071028962 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.0692826 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083460414 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070597921 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068849444 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069237055 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073663267 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074762795 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070835791 seconds)
  done (took 4.417545585 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.131323105 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132651089 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074365351 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109288879 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120738681 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072150058 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152679188 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094075542 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117611565 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069922887 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086286006 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069530292 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107547099 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071549089 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090613671 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069237168 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07345261 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070519734 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069133689 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069475445 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089462333 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069131628 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069353056 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070108188 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071874906 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085855286 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070550714 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068619169 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069304817 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075668622 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075284694 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07122253 seconds)
  done (took 4.682718152 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071489397 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.070713162 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077389583 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082357958 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067343726 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069177412 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069299238 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066789503 seconds)
  done (took 2.526434877 seconds)
done (took 28.315154442 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080780137 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067428309 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070795042 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089740815 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074426408 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.111468286 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.06480553 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075926479 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072133582 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071485624 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073893567 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067339311 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06993417 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066038571 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072892148 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066360939 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.114425362 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070080638 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.11340539 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.114524168 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067446336 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071755605 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074583746 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.113126776 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.115033517 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.113921238 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074587714 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.07201821 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068519881 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069758336 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.173587888 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.189966401 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076315638 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.119813889 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066518098 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067382232 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071963059 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069707432 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.116281824 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075704408 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070619932 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07653476 seconds)
  done (took 5.533855657 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.192781061 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.199435945 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.191294393 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081449505 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.09404186 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.080109208 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.197964464 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078804235 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076213367 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.197138612 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073262986 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076992415 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078357091 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.069574387 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078481099 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073479985 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078429573 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.069991706 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076666573 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078374104 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.196103807 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072885231 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.082744333 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078490222 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072359371 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.077630584 seconds)
  done (took 4.696439485 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075920882 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090128171 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09339584 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.147752076 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113265523 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084359831 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083096 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094632337 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.1043406 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069235277 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072759283 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096042651 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099023953 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076406259 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108865438 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086633052 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082227276 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07101073 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075747173 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102626605 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091683553 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089072852 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.1025952 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088503467 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067429679 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079215473 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076382549 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084661008 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075511296 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081283534 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.0746986 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072803915 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069442126 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079978026 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073088291 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067883457 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092111557 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082191581 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083330054 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.110611685 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07923505 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070941232 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096261742 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.18514464 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069064187 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071603839 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072466048 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081522897 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072042995 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100958249 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085133041 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068103543 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088463274 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071498677 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070041184 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085524965 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070136572 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070132735 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082073849 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075765633 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090384546 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073792219 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090258686 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070727881 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080949977 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070485532 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069793145 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067500527 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104787546 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076878931 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119544047 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070014721 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068103067 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081906249 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080936123 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075415039 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068354197 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.09004209 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081560937 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072973764 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079500856 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071470855 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073716459 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106504411 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068059005 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066212373 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065931131 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07135911 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07353419 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069809522 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081807775 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067920241 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072903409 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085926174 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069193233 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069884594 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071697246 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069503346 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068180567 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081597891 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073488363 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.07138571 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081524444 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070164814 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.074247151 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085398861 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079051241 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068364694 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070277244 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073230834 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071349967 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072675503 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071126922 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069552355 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072304461 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075116167 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074039471 seconds)
  done (took 11.448746741 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.210062836 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.198857705 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070162237 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.193637714 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079089734 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.128211763 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.196011233 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.135902425 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070077577 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070062447 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067850321 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.142362099 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.136987623 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146647621 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.119916959 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.07001935 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095332061 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.148428906 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.200572265 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.195839449 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096093786 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077002451 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071150195 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071618671 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072075826 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079151888 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084833136 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077858348 seconds)
  done (took 5.319754893 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076019202 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.083981101 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074008709 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093906563 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086140463 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06828928 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.07089314 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.074487982 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085341784 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07317381 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068130079 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073749404 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071842672 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068945591 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070684731 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076181715 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075848604 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067836761 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071722293 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073196659 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081597038 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.158147658 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073426166 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069084444 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072916825 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069895725 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076088925 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076748634 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068064935 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103574904 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066323272 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07343472 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083125236 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069676793 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070759831 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070640924 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069423116 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068867924 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068905675 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067377616 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068703041 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075405819 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068127464 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.073694742 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083896111 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079919467 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071238237 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071871806 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07100274 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065842906 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074055621 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073378624 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072664337 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077721193 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072539878 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073058375 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071622416 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100814182 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075514889 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068463133 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068414677 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067450379 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072712341 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077906192 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086303614 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070498401 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067576229 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071049796 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077320968 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084047772 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068208855 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075066635 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067348173 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069022843 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071802806 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07194415 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070303822 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068090703 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070531664 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069845127 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.07042695 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068374889 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069165016 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073782768 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067556057 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067849356 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069626166 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070066284 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075733353 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068811134 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072271367 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070785294 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067531186 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072434794 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07730737 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073361412 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090203249 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.077373026 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070157943 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069013668 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084434344 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071935104 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068288318 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072791143 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075454151 seconds)
  done (took 9.819062976 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09860815 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069836785 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090506168 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.10178158 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078691853 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073156168 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084432345 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069705189 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090668857 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067404842 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076849454 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066954751 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083792351 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078631685 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070195114 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07850564 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071207605 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092076137 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084396549 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066757893 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077476175 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.609579839 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081513167 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086599632 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088357653 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088791323 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081650372 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070409903 seconds)
  done (took 4.80573375 seconds)
done (took 43.571775419 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.057368771 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.233910927 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.054080876 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.576420471 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.117600731 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.116162424 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.199975641 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.038495165 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.525822485 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.113747142 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.833836606 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.729692915 seconds)
done (took 70.638487457 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.140273587 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.198072299 seconds)
    (2/2) benchmarking "String"...
    done (took 2.280084823 seconds)
  done (took 6.449813736 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.468813784 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.035141807 seconds)
    (3/3) benchmarking "different"...
    done (took 2.071326779 seconds)
  done (took 8.54442783 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.322879718 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.830290714 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.309902869 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.031208682 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.039574834 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.513321133 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.151667698 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.661519755 seconds)
  done (took 34.507247638 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.043695263 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.319772497 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.475462663 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.478359326 seconds)
  done (took 22.362328023 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.477683925 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.425866825 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.425785377 seconds)
    (4/4) benchmarking "different"...
    done (took 2.720524088 seconds)
  done (took 12.104943947 seconds)
done (took 96.54492073 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.033387778 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.310176542 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.060142278 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.200989349 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.110791197 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.046084252 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.036799042 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.055354653 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.03503164 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.034438009 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.037175405 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.037015639 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.033260299 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.073575568 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.032473273 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.065332187 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.331082564 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.038483208 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.055001033 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.832350791 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.389487194 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.048176646 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.039342073 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.087245497 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.479849473 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.105174751 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.481647011 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.043682755 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.648352954 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.034579819 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.03498802 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.03674174 seconds)
  done (took 212.856755506 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.037495752 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.824549209 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.845460556 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.049374969 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.371647111 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.378774958 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.878412673 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.394740977 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.035359676 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.069431859 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.047271027 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.036957497 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.03619623 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.582973128 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.070513012 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.092239579 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.876360041 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.795018091 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.070061098 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.940504059 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.036126262 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.479087353 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.472949199 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.834858155 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.055536449 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.061338192 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.203925855 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.037925515 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.535250377 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.846560037 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.046156563 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.060969302 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.535488933 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.267243398 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.043833761 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.048705487 seconds)
  done (took 186.972761298 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.272885632 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.063446879 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.078627856 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.145138079 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.997419597 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.034329085 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.847158964 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.036124347 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.032688265 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.032043571 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.035629633 seconds)
    (11/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.027166397 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.037464594 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.106887194 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.23745528 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.060442644 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.038571963 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.038202888 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.173848569 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.038797037 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.032509255 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.037859291 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.107391494 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.37171064 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.144458737 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.035376368 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.045561436 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.146491496 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.045350533 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.037449238 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.144131247 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.03685625 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.168592386 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.146541427 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.047126503 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.096044054 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.04733026 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.250056505 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.037233521 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.038711198 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.036356498 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.08429715 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.038670062 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.126408808 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.139831584 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.037966583 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.054336882 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.48812762 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.604099838 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.040576192 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.037221695 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.034431522 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.035309688 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.037046217 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.515091346 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.037532317 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.028029864 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.479445834 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.040727929 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.038094575 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.035759886 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.040163125 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.03764757 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.04423029 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.077840154 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.664656058 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.301328934 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.393201234 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.775603057 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.039164525 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.891587759 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.097180154 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.039612275 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.215840086 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.038763581 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.03644969 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.015950654 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.025937652 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.084830304 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.045753619 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.041628605 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.146706555 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.041862332 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.039515015 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.437347268 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.034423109 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.130183268 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.047311876 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.058247042 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.096072697 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.039468643 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.040719729 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044822499 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.054425106 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.041893818 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.040838169 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.038256488 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.40405595 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.042709809 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.450700784 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.42076937 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.130345398 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.460918033 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.95914554 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.02672631 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.039594163 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.055732441 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.043529485 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.039913651 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.050313892 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.041360608 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.042791189 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.040579481 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.041844464 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.03475208 seconds)
    (115/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.03594398 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.038479232 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.059715717 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.040994563 seconds)
  done (took 437.785984457 seconds)
done (took 841.974430104 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.654982783 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.838590664 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.605690465 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.661490313 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.606966904 seconds)
  done (took 15.340046862 seconds)
done (took 17.317234766 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.066117301 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.068399875 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.055186747 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.066234373 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.054103865 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.054254132 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.071038535 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.078827568 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.073204832 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.05988981 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.059592317 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.057075045 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.066610535 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.072365429 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.072857322 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.072191663 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.059666811 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.053013756 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.070599491 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.060529894 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.060335113 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.064518153 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.06167469 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.067624259 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.070642841 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.044664794 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.058909729 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.066101223 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.065071256 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.066355324 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.080911228 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.063416304 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.072942546 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.071864912 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.069818417 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.073298643 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.064362439 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.074947523 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.064521125 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.073009024 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.069232344 seconds)
  done (took 86.671745486 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.046635521 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.204738352 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.30321826 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.090761427 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.050871689 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.310551208 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.116426639 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.200975085 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.209391282 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.34539772 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.316643655 seconds)
  done (took 26.175433774 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.036034795 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.206580629 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.320112656 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.091776408 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.055488855 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.325278003 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.122778554 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.200019626 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.212457216 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.349138257 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.339112489 seconds)
  done (took 26.240873069 seconds)
done (took 141.067823164 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.600247209 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.099374316 seconds)
  done (took 6.67603827 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.046449945 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.034286871 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.225987791 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.049352507 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.037122909 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.031996408 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.03635488 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.035319877 seconds)
  done (took 18.473319659 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.03013722 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.039270931 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.042955477 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.045546116 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.045293214 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.046312579 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.045817778 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.047088257 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.047214757 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.046618634 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.039743326 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.045278652 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.004740406 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.042736493 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.044892153 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.045015868 seconds)
  done (took 34.595461577 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.043224806 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.045080665 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.046609848 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.043374584 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.043165029 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.044254867 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.048916197 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.044258089 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.045258603 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.043883272 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.046013621 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.045400421 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.04548733 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.033495378 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.041054761 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.045592968 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.034829095 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.045228887 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.048492053 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.037838362 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.045072315 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.046490635 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.05457594 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.045536239 seconds)
  done (took 51.042326705 seconds)
done (took 112.778068859 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.58974991 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.020246195 seconds)
  done (took 9.587284651 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.047998124 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.044476707 seconds)
  done (took 6.157805674 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.04404573 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.042560306 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.04065375 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.033935365 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.044558283 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.04554847 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.046001708 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.043612631 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.047102337 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.04692201 seconds)
  done (took 22.412097594 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.044101649 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.046952599 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.04723686 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.045449503 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.043626646 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.043903895 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.040908693 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.040233431 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.045806314 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.048055784 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.041549971 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.048054202 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.044986298 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.011062337 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.014529467 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.038273063 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.021958059 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.038784944 seconds)
  done (took 38.685667232 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.048608446 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.04716113 seconds)
  done (took 6.072883439 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.018447786 seconds)
    (2/7) benchmarking "second"...
    done (took 2.035456293 seconds)
    (3/7) benchmarking "month"...
    done (took 2.041989513 seconds)
    (4/7) benchmarking "year"...
    done (took 2.034154711 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.04445958 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.044922298 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.042968362 seconds)
  done (took 16.238809043 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.028320516 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.189898354 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.237138432 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.521942794 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.045892773 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.051029833 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.672781471 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.04898587 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.032783081 seconds)
  done (took 21.803304771 seconds)
done (took 122.930005465 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.793737699 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.057744666 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.660670716 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.145527234 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.126568463 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.386692759 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.050143608 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.643287812 seconds)
done (took 45.83997482 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.080485298 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.044461265 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.083383774 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.085613396 seconds)
  done (took 23.193682468 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.059200337 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.680217568 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.073882458 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.136262279 seconds)
  done (took 24.018605262 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.537667711 seconds)
    (2/2) benchmarking "read"...
    done (took 2.556042114 seconds)
  done (took 7.080514101 seconds)
done (took 63.353663139 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.048326189 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.040822384 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.045449074 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.043245015 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.044387143 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.026881911 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.039250227 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.037246973 seconds)
    (9/24) benchmarking ("zero", "Float32")...
    done (took 2.038560036 seconds)
    (10/24) benchmarking ("one", "Float32")...
    done (took 2.040101704 seconds)
    (11/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.040543152 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.04704317 seconds)
    (13/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034465006 seconds)
    (14/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.048791972 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036812299 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.025967184 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.054507531 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.039842135 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.04906389 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.056557342 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.053164396 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.048431062 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.027477033 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.032422813 seconds)
  done (took 50.972567398 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.053965023 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.051769904 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.062510152 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.046410304 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.040290173 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.032540206 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.045963517 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.041172958 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.039777399 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.043491798 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.044622932 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.045612671 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.04582904 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.051503561 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038388698 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.025369098 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.052201864 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044183499 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.045853216 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.058427663 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.05810475 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.051215459 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.021110728 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.023736194 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.053242795 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.048457545 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.047060909 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.056807032 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.05170043 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.046023334 seconds)
  done (took 63.336537455 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.022786508 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.059453664 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.042970747 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.050769763 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.060007098 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.059306254 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.049929944 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.026761887 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.029851488 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.048196412 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.042019916 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.045550895 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.063943518 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.051669317 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.049806569 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.022532597 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.025507834 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.049955989 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.043202475 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.055468114 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.058283914 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.054068411 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.052076809 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.027031022 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.020596764 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.052252623 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.045090852 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.050931419 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.057948021 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.056593048 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.047591798 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.029918854 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.023719615 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.048214151 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.043620995 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.052685308 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.06034511 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.059929912 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.060515159 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.034012317 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.026484885 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.051094259 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.058810308 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.037452483 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.053644413 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.063335133 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.063672167 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.038607901 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.042941469 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.03350359 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.021338531 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.052186261 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.063282616 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.040643728 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.056798773 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.060225443 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.062761305 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.040176505 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.056298625 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.02405658 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.028954388 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.053985911 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.06238981 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.041696829 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.052385236 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.060871652 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.067103983 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.047186455 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.053451469 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.035935226 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.017937519 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.058350597 seconds)
  done (took 149.328473662 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.039700188 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.052012937 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.059354184 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.062647622 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.048290382 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.052760646 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.030925044 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.018783588 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.058480675 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.053502581 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.048465666 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.050406914 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.061490341 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.064235401 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.053616056 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.045772096 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.037972527 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.017259513 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.052620524 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.055043366 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.052286465 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.031599861 seconds)
  done (took 47.032971328 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.025656705 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.03162573 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.025169681 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.031257803 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.02519427 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.028755075 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.045073272 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.052170198 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041432398 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.017627516 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.026503037 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.025133937 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.026981235 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.026475258 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.024750833 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.028497503 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029533115 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.026690572 seconds)
  done (took 38.496746497 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.052432342 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.030424698 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.023498024 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.030313636 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.026588627 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.028627889 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.0318053 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.026516044 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.029015356 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.022561253 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.049057346 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.052821051 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.042631336 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012637689 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078444237 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.059593867 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.064519243 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.080461704 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.05493885 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.062790862 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.077274784 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.050579663 seconds)
  done (took 46.970972348 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.074269125 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.055917592 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.015495189 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.021523663 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.062124421 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.066637066 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.055646441 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.0750339 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.05851449 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.060826641 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.076155955 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.058602416 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.065515595 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.078493897 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.057596921 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.027148758 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.031739048 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.032846985 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.078535813 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.057500311 seconds)
  done (took 43.110808879 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.073248611 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.054917374 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.07168957 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.075153149 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.059174866 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.072441578 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.069130597 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.054861416 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.024066657 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.012775102 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.074522604 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.067744121 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.060197266 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.079210701 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.056262048 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.062802487 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.080601945 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.057598744 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.065869303 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.079912509 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.057071442 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.025877111 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.033457916 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.027299895 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.084434943 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.05941764 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.069930938 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.080405789 seconds)
  done (took 59.686731814 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.074029753 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.07348394 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.057321073 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.083773474 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.065751696 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.042358098 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.034063109 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.013400497 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.089297226 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.058237556 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.069065446 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.079914656 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.05815255 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.073503547 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.074255579 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.058790673 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.072361286 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.070900324 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.057632828 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029025924 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.012301694 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.06852388 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.070258086 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.064947866 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.085745818 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.060238485 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.069578639 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.08368389 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.058492795 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.0704915 seconds)
  done (took 63.864411462 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.081968599 seconds)
    (2/2) benchmarking "in"...
    done (took 2.0392273 seconds)
  done (took 6.137134881 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.041393039 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.081602742 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.05946459 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.07166795 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.07776958 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.057933653 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.076460444 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.073047662 seconds)
  done (took 18.501123982 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.08510416 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.066976431 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.054828481 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.0283822 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.011403624 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.079264676 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.072541756 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.064052787 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.086348759 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.062129568 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.072428889 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.090951807 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.068040331 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.074258992 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.085553793 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.057228447 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.024803042 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.033341462 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.041135997 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.089276481 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.064476822 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.073526098 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.083472429 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.056886295 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.077489967 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.08683531 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.069503125 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.085173909 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.074935917 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.061587499 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.023835335 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.025580461 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.058442502 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.084047011 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.058847645 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.08017459 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.086851348 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.060727119 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.083102954 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.071837023 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.061902575 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.088431466 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.076377954 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.065106123 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.028733606 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.017272973 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.060652935 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.081678445 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.063877471 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.086662336 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.079962853 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.067349652 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.078482506 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.063497118 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.070754523 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.086870614 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.064370572 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.052100135 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.042497386 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.017648694 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.08352178 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.094763361 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.075624881 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.082757335 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.062022696 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.081140439 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.114417754 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.06313226 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.073286004 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.08558502 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.069235732 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.038092308 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.039929441 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.010734411 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.087467717 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.083159295 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.06613244 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.087301243 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.066795791 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.068003591 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.086966976 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.063872462 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.069443184 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.086310963 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.077053947 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.069261088 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.039676511 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.011774309 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.080306227 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.074074584 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.073251744 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.092429608 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.064136875 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.069834485 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.089342799 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.065772173 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.071654753 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.088197552 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.065098664 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.04425155 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.038693118 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.017503145 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.088043644 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.077100112 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.069140468 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.099664584 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.063461658 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.079233199 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.096975009 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.062378395 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.078025468 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.08306938 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.066089861 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.026534523 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.041474421 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.059066081 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.094300636 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.073645571 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.088495415 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.075207478 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.06405837 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.045827191 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.049452516 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.117792618 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.064678561 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.083735111 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.089776785 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.078288995 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.050488605 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.020454471 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.090713193 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.064537114 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.068962844 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.08964397 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.062846486 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.060118269 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.041260815 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.045628048 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.084739212 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.063531123 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.089140099 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.075492015 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.056429987 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.045713656 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.050600535 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.087215266 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.063496531 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.092120523 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.075801037 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.06349565 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.05393634 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.041363645 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.00319171 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.001875372 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.037763736 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.077639738 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.065719854 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.098590469 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.081561453 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.075907156 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.065647925 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.083240082 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.083779497 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.096265432 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.082823965 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.073768722 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.048246772 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.059716889 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.072822221 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.073123405 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.082172457 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.086276877 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.084753139 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.074246897 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.066233556 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.074264538 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.072442992 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.098145185 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.088807132 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.092759587 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.052395999 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.046376789 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.075699883 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.076783439 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.086078337 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.08496038 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.076543405 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.079188705 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.067366246 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.074063689 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.074895099 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.101074729 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.107488858 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.093477376 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.057395709 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.042339538 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.081762399 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.080535816 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.086820133 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.08877406 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.079832192 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.086240668 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.070280631 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.075591915 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.074689241 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.104485031 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.083435885 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.081010216 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.065161994 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.046275588 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.079761106 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.078987931 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.094136775 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.082764633 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.084090069 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.072561343 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.08187469 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.080280862 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.111772224 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.088286709 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.076576839 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.04951044 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.06390795 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.081796738 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.09213295 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.088073041 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.081209836 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.08409248 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.079526005 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.091600421 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.102317688 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.088342884 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.082938599 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.062578623 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.029985506 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.082255486 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.099090944 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.076192561 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.046013512 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.056927724 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.065034901 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.054862453 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.065791067 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.053686196 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.060234108 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.062101547 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.058972525 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.04191106 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.045361456 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.061088599 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.059090262 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.059217461 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.065611617 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.037839434 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.053033314 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.047323916 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.053922863 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.060251371 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.067264875 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.058374008 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.059451622 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.044848708 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.058965638 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.050723262 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.08189099 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.026523152 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.061227167 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.058766746 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.057058459 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.057485666 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.066421254 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.048429827 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.06088942 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.042532609 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.06820178 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.059824288 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.042751994 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.018058251 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.038137172 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.040187725 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.062924494 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.071106961 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.074081568 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.065948283 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.056053183 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.019257045 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.035170722 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.042998924 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.043029616 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.07000707 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.062324609 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.05345151 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.015428205 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.047796874 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.030884146 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.049181701 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.066016784 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.06316216 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.073809855 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.017084356 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.047940403 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.010514291 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.034560042 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.044258132 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.068889185 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.052778429 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.068007393 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.024579505 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.062991416 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.01900528 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.062247188 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.065689681 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.075154938 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.061634515 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.046633027 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.047841175 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.019542549 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.06439533 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.067334815 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.061891351 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.067895022 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.037628743 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.050952977 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.023927246 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.05025418 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.05456714 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.04992003 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.072935907 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.041841278 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.037500445 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.056585663 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.072981931 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.055238006 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.058651235 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.081552413 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.037385923 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.040981843 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.052667239 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.056143481 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.055280628 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.074134239 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.016026447 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.047354728 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.056405737 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.055545941 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.070105852 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.063401211 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.043478863 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.054025518 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.03671142 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.057092756 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.068780453 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.059925814 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.059236743 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.03552369 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.045521414 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.051939893 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.058892705 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.063329611 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.069520396 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.039927994 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.057558416 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.063838879 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.066714841 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.064505754 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.064816635 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.038159555 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.065330782 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.091069347 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.037903895 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.046441557 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.072841083 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.084818264 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.061601699 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.044102714 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.048180313 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.078348872 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.063820285 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.068111512 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.03594613 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.058881305 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.069454179 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.054394562 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.067930518 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.047812514 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.043952554 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.043995549 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.075424174 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.073783487 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.056917047 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.081458905 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.055853682 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.069838251 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.017445809 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.052691767 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.035623353 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.054465911 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.084012183 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.072950126 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.045139604 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.04757974 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.022018802 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.067916558 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.059584309 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.068895246 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.087873249 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022881916 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.058223719 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.023940142 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.054294208 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.07216255 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.067801451 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.071808174 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.03504384 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.05416689 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.016409775 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.067909233 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.086577355 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.081078325 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.068354437 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.050872004 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.072958262 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.059935531 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.080476323 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.067195792 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.055073173 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.079429637 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.078834274 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.083635306 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.077375414 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.072880507 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.077815285 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.082587342 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.070033103 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.068909414 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.074476962 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.0705288 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.065396811 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.071850207 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.051625391 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.066185305 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.062817958 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.073363943 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.026837472 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.034757451 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.033181495 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.021280457 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.062892773 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.068472017 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.062126386 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.064878551 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.038909664 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.015773394 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.05688124 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.019083468 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.036159564 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.054719957 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.057656661 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.072337547 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.030326253 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.056199056 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.021609907 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.062266493 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.05172138 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.070080951 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.038657133 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.055709323 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.017456555 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.067659514 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.044529347 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.067398923 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.0866878 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.06172901 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.040170264 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.072144499 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.085111545 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.054804863 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.048543586 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.088958524 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.077936827 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.080290039 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.088462766 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.087346559 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.087573534 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.08089231 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.089666156 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.08716292 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.090111545 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.089852335 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.093310581 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.099905998 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.093428397 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.091184007 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.099585843 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.094214391 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.092192078 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.063949681 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.088771087 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.089160958 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.090629615 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.080969888 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.087017447 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.086349281 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.085953404 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.089993651 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.085555517 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.092189268 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.080661742 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.070964039 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.080169365 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.057448816 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.074589526 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.091071547 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.091716687 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.075021064 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.096924073 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.105447412 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.092045803 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.090123819 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.091247701 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.093104203 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.096062165 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.101502474 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.099485437 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.097374459 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.087880663 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.098877935 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.113152112 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.094218164 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.108030641 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.124058607 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.09157926 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.092162436 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.091784829 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.09523492 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.092462378 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.097107656 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.092340599 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.099583227 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.093479705 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.080221683 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.09499812 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.092452415 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.091920962 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.093020346 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.091180786 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.099153115 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.089836253 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.101071641 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.093184951 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.094844865 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.094322619 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.09779678 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.092366473 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.09383265 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.062597008 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.094968725 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.09076608 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.091434579 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.104651637 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.091148085 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.09618888 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.107675426 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.10536368 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.095349161 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.092905939 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.091095965 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.102118271 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.097535129 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.095178937 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.099988262 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.104043054 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.100361292 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.102606536 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.096341276 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.096718968 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.095087076 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.096459746 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.071518058 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.056680087 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.10708772 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.096193825 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.095646733 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.102026921 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.070521271 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.095372892 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.101115214 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.094789759 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.096903624 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.091675599 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.093001274 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.095997641 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.093364196 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.101234134 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.105617072 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.096908872 seconds)
  done (took 1234.967814687 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.096198768 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.090296824 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.096882765 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.097129686 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.096421915 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.095856425 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.095137894 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.096520107 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.08988707 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.09317546 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.096682677 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.095969891 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.096435263 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.095005407 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.098276487 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.09618494 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.096437197 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.095755476 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.08662555 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.099480037 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.093606879 seconds)
  done (took 46.015533122 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.074074999 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.087581245 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.095214368 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.094689799 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.098361291 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.095637793 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.097404345 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.095307035 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.0967483 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.094703217 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.097302372 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.095450806 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.09692016 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.096468991 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.096347212 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.095760754 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.087587053 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.096202398 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.098076043 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.097710528 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.097335979 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.096471622 seconds)
  done (took 48.106895002 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.096884404 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.100767773 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.096358998 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.099191997 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.094335473 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.099747239 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.096681625 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.100758723 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.08952735 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.094570078 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.107210622 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.100998935 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.098085254 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.093527896 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.09324122 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.098123659 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.217613207 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.098660825 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.095921348 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.099906272 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.09993382 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.105622849 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.099023255 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.096058535 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.101678749 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.100135945 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.096934717 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.087367476 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.098539361 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.101489851 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.105504406 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.09949954 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.101610697 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.102602845 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.099416232 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.101864682 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.104034987 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.100506251 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.09973015 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.097890429 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.114790816 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.129487228 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.098640842 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.094011549 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.104283949 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.099723783 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.09986358 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.083684445 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.106657966 seconds)
  done (took 105.033908088 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.096927614 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.100372454 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.100440497 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.097960328 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.098717102 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.096459536 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.101501557 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.097509668 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.098881557 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.100618448 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.098645516 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.101891282 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.099652064 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.097370138 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.099664615 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.091155258 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.0926517 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.100668969 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.101614985 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.101116605 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.099907289 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.101345843 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.098391811 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.100538525 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.098594631 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.097492053 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.094542711 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.090727453 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.098402555 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.091167205 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.103837762 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.102955359 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.103244145 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.101832933 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.102786555 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.102544219 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.104506526 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.101927211 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.101443597 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.103345471 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.103528709 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.100896466 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.104191523 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.104051994 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.103944319 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.102984806 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.097390127 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.101170878 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.10271408 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.102899993 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.101482873 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.101333323 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.099511225 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.099930373 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.089815251 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.068504377 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.072431675 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.027308827 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.026684672 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.02729305 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.068674056 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.028509187 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.02789242 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.027531628 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.027596863 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.028191962 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.028789235 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.028219084 seconds)
  done (took 144.00957006 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.028431043 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.028933186 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028797283 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029643063 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.02893066 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.038188517 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.067402241 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.067831073 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.029336083 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.02918517 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.029259109 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.02954861 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.028838975 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.029517086 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.029199737 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.02906749 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.028783538 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.02946982 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.02950355 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.030016333 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.029209582 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.030167557 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.029681917 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.02936684 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030158819 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.030070219 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.0297534 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.030012877 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.02977163 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.029587393 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.030284368 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.029241684 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.030478086 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.030365787 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.030562041 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.030116802 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.029927874 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030782992 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.030439437 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.030347431 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.029949276 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.030690668 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.030547377 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.030955879 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.030482657 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.030797934 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.031133317 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.031665791 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.030646354 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.030613228 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.030793368 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.031038367 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.031015632 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.030844931 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.031203794 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.031470565 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.03118353 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.031981721 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.031365933 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.032109295 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.030902456 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.031188165 seconds)
  done (took 127.912706437 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.030874092 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.030684302 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.031823234 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.030679048 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.032028868 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.032008785 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.031789403 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.031407775 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.031992678 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.032137142 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031636762 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.031549091 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.032894278 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031358438 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.031846718 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.033393203 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.031856515 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.031856866 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.031373796 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.032406851 seconds)
  done (took 42.596932715 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.030940362 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.031533944 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.031340855 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.03206336 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.031957238 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.031922404 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.031441597 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031597255 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.032364474 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031667357 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.031630832 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.031381713 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.03196472 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.032570532 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.03220957 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.032188687 seconds)
  done (took 34.46931286 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.031779649 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.032119785 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.03232303 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.035023437 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.031958106 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.032414884 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.032371077 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.032964647 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.032182625 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.033109062 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.03277345 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.03194968 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.032531115 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.032974694 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.03257822 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.032819481 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.033007654 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.032736168 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.033195517 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.033203198 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.033967119 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.033598961 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.032963243 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.032912995 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.03285921 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.033504244 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.033592067 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.033774535 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.033130672 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.033327777 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.033368809 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.03443969 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.033905396 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.033515406 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.034077697 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.034675836 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.034607688 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.033775184 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.03417447 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.034045023 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.033900586 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.034030243 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.034585519 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.034403546 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.034432365 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.033962289 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.034636146 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.03553668 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.034751982 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.034598703 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.034945985 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.034353018 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.035250342 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.035733472 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.034267302 seconds)
  done (took 113.810631722 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.035361132 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.035318037 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.034652267 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.035468301 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.035352088 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.035462451 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.035082371 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.035894975 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.036039552 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.035157542 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.036346711 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.035841084 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035921858 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.03638792 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.036407266 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035918012 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.035969795 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.036385107 seconds)
  done (took 38.607295849 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.035536863 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.035734421 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.035740599 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.03599279 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.036216042 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.036336473 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.036103281 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.036285597 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036312973 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.036492298 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036027255 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.036801086 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036917609 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.036737765 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.036805181 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036967571 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.03635646 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.037080521 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.036830901 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.036826979 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.037110282 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.037177887 seconds)
  done (took 46.76835659 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.03851279 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.037793098 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.056697657 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.065312536 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.064149819 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.082652125 seconds)
  done (took 14.311223237 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038461289 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037997388 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.038507205 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037918173 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038197625 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038522801 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037561309 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038200003 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03774638 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038687162 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038245719 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039055725 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038108631 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044731115 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038832013 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041651654 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040936022 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.165055516 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.141184521 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.102385154 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.180124698 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.229933095 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119069554 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.100609409 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.106519065 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121331793 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.291573059 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.232994494 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131460371 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088341162 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08214772 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.105820065 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.169866138 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126831511 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120134695 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.086512072 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.059266552 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051707522 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.056513814 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.056900417 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.062108113 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048886967 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046760426 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039757754 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043753525 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039565552 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040766216 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049017313 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042715188 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044869984 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048450707 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040609106 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043655558 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040909292 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043470566 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043264841 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089284149 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.077028259 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.055136146 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096081127 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051761664 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.116730638 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.062046145 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122351299 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.239606669 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.208044979 seconds)
  done (took 139.395303803 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088463961 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.081330217 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.151919189 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.137444954 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088854348 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054257682 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.071527871 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.067757519 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069885021 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.155591523 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.139863084 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.063571943 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.072101928 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05334329 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066046909 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085757104 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.082032496 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.103166173 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.102725894 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093042366 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.096781186 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128349999 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.069123521 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084502954 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.071239376 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124840329 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.060618716 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.142069432 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.073653921 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.074180835 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089308734 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078203839 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062348397 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.105876976 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062549729 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.102411297 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.078513305 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082196625 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061264006 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089006533 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.106045598 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054157432 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051581807 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070612474 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.097339056 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.115616916 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04921493 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.108951404 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11732529 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.116703075 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129542417 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.108619982 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127609155 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.108436426 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.109179888 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.099371337 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.100673325 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.111783305 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.092570592 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081024214 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09458952 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089032958 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081852534 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091954873 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082407972 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.110955584 seconds)
  done (took 140.101209353 seconds)
done (took 2865.518347222 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.228160987 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.260398512 seconds)
  done (took 16.507615579 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.286496625 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.205520499 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.323850582 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.238351726 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.189284173 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.155505358 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.146978056 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.16364833 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.266643937 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.163822468 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.260718733 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.148720799 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.157797792 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.165673697 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.184095286 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.166934787 seconds)
  done (took 57.303289866 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.213568509 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.19401454 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.189393387 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.191466205 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.214942666 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.284762607 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.222143029 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.189173977 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.216800088 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.236812419 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.22522963 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.194241987 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.204639914 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.191496158 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.303514776 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.245085944 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.263213123 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.287604398 seconds)
  done (took 42.183412313 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.297748581 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.202384462 seconds)
  done (took 11.618997178 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.207296689 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.220787074 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.216997457 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.193139947 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.21925932 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.216361664 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.196725006 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.179726286 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.169735533 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.201725543 seconds)
  done (took 74.168158392 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.186501999 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.174558336 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.524610379 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.181286024 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.191710367 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.208602225 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.171759405 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.205113259 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.174502149 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.176245391 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.180606975 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.525894927 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.183453579 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.172865392 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.594390926 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.193071609 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.17197099 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.19639086 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.212476428 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.184270598 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.168249005 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.165240959 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.428501552 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.912401264 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.163327281 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.176222582 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.180926015 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.1676569 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.179265292 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.17439691 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.16042803 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.123543804 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.182928167 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.179135003 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.193169273 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.158537651 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.816760893 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.188060292 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.183021516 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.27673227 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.221592495 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.174852261 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.171916203 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.177177416 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.190616329 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.177856535 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.937823466 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.246850316 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.14575257 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.378214778 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.681582924 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.196000904 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.35310386 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.324962889 seconds)
  done (took 150.47586593 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.144353162 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.62494747 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.333177973 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.176741514 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.534906816 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.37690095 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.939365451 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.21958479 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.155099773 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.376412916 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.322134615 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.296069421 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.17260419 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.220526556 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.172566989 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.240757477 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.343266159 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.229534768 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.158421081 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.156117282 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.184849014 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.39599175 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.295657243 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.163922349 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.198281346 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.381943224 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.221767277 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.30032895 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.567456987 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.162022497 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.238853593 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.179183752 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.170647402 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.167495398 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.218861866 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.289198643 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.270965112 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.178162997 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.849940551 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.16196111 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.76073118 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.352135852 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.272314891 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.273677529 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.308620095 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.363989273 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.849421867 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.153230292 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.895271293 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.316741753 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.379906378 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.35552299 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.265524263 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.15478415 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.601818089 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.164235964 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.162104795 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.406021455 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.318801017 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.279072149 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.157651483 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.169401475 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.1650311 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.385522109 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.160748351 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.270638883 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.154333459 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.148880054 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.26734712 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.288295862 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.322287011 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.427251618 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.210783167 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.125617954 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.445230498 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.347056534 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.177360176 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.406816811 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.174044046 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.158100165 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.269088872 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.632996859 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.318268782 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.389234044 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.442931402 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.172756344 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.67416223 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.204463068 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.397381119 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.332091565 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.501304049 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.334822141 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.235528245 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.076265737 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.180727614 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.057276105 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.262867539 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.174218219 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.058150924 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.590845468 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.322724251 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.125300884 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.074506949 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.528804608 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.160371946 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.058275994 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.667033713 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.055402657 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.271622885 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.099038082 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.05704143 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.055266268 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.237626384 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.019505557 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.054828685 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.437770973 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.116130521 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.057854559 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.211214595 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.059426271 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.31318839 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.775353464 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.291021241 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.058581907 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.08969022 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.230676133 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.199664144 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.059438608 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.3795341 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.295968181 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.151564425 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.366687211 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.058957227 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.056792689 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.34328022 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.059835648 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.056078838 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.219859137 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.764757013 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.213841095 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.059976909 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.404429379 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.079134483 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.110841826 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060070208 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.292274498 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.09296658 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.106626521 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.06175308 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.192281617 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.061342955 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.009074786 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.224714088 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.059736728 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.057463023 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.023377826 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.059009281 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.207975431 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.286644831 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072893588 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.128065219 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.427770881 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.057811605 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165142665 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.083547552 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.511535619 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.598409938 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.215895664 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.061963582 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.058193778 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.057214513 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.291832465 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.333293569 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.063280927 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.060314159 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.837436776 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.324097779 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.058466049 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.23482533 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.752701063 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.240927934 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26600496 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.061227581 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.110761958 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.064642442 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.332514379 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.586358573 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.096659439 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.059173776 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.059464913 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.060221361 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.058416832 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.259198011 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.093532938 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.804505803 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.199612048 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.324844552 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.277687223 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.367918368 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.119660118 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.060905921 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.304235552 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.063423108 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.123391032 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.062975966 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.070160832 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.299702361 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.062860561 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.364944698 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.406229329 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.251991825 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.105156688 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.06304152 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060211301 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.060454441 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.224861508 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.164760948 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.06285458 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.190025187 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.103272051 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178054311 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.282381188 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.15860291 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.008275397 seconds)
  done (took 940.445561492 seconds)
done (took 1294.724737074 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.060004324 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.06319353 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.062337533 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.063606984 seconds)
  done (took 30.238744701 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.062443131 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.063150698 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.062227038 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.065279162 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.062463531 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.0620698 seconds)
  done (took 14.374913326 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.061620021 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.063896491 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.062556314 seconds)
  done (took 23.178429524 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.523220098 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.352797765 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.157409119 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.227426085 seconds)
  done (took 11.254051337 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.068618433 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.062664693 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.062238987 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.063617491 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.063781111 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.062822367 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.066777757 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.064205662 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.065490164 seconds)
  done (took 20.580973085 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.555339815 seconds)
done (took 108.173732175 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.567203208 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.492024047 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.091464241 seconds)
    (4/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.323848659 seconds)
    (5/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.486241665 seconds)
    (6/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.98544091 seconds)
    (7/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.093573578 seconds)
    (8/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.497370282 seconds)
    (9/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.072349374 seconds)
    (10/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.077602338 seconds)
    (11/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 4.798028861 seconds)
    (12/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.312234969 seconds)
    (13/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.231784102 seconds)
    (14/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.574806426 seconds)
    (15/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.44447684 seconds)
    (16/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.081036821 seconds)
    (17/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.06266101 seconds)
    (18/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 8.84370737 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.086808368 seconds)
    (20/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.192984508 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.084874762 seconds)
    (22/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.995097173 seconds)
    (23/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.090639425 seconds)
    (24/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.062314571 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 3.671666127 seconds)
    (26/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.369382112 seconds)
    (27/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.404847033 seconds)
    (28/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.676585339 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.228379677 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.078171773 seconds)
    (31/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.07253623 seconds)
    (32/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.855892865 seconds)
    (33/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.276503079 seconds)
    (34/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.094303858 seconds)
    (35/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.843983082 seconds)
    (36/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.403316469 seconds)
    (37/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.06833395 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 4.600220977 seconds)
    (39/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.947098113 seconds)
    (40/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.243153136 seconds)
    (41/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.272554122 seconds)
    (42/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.07457526 seconds)
    (43/341) benchmarking ("map", identity, Bool, false)...
    done (took 3.254801737 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.198275929 seconds)
    (45/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.076697213 seconds)
    (46/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.548609316 seconds)
    (47/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.288143977 seconds)
    (48/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.553250994 seconds)
    (49/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.262212596 seconds)
    (50/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.224946743 seconds)
    (51/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.114524314 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.38073332 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.545612738 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.202703957 seconds)
    (55/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.064503639 seconds)
    (56/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.070468378 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 5.678911746 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.795762595 seconds)
    (59/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.290762349 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.220092238 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.601141879 seconds)
    (62/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.371204559 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.917855465 seconds)
    (64/341) benchmarking ("sort", Int8, false)...
    done (took 5.733869813 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.07205262 seconds)
    (66/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.409808401 seconds)
    (67/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.586518316 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.3850197 seconds)
    (69/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.330209012 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.473498066 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.445912839 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.580633103 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.489624475 seconds)
    (74/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.615805243 seconds)
    (75/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.072948834 seconds)
    (76/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.601763244 seconds)
    (77/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.352709812 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.469125126 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.859062031 seconds)
    (80/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.274053014 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.081183887 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.373520629 seconds)
    (83/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.494207317 seconds)
    (84/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.094564264 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.538648719 seconds)
    (86/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.514867616 seconds)
    (87/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.838536057 seconds)
    (88/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.421486073 seconds)
    (89/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.07088168 seconds)
    (90/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.425321842 seconds)
    (91/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.189119501 seconds)
    (92/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.075831467 seconds)
    (93/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.471721674 seconds)
    (94/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 4.469087486 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.09161843 seconds)
    (96/341) benchmarking ("map", identity, Float64, true)...
    done (took 4.773273435 seconds)
    (97/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.310184934 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.077918534 seconds)
    (99/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.186266765 seconds)
    (100/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.221279108 seconds)
    (101/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.065610319 seconds)
    (102/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 4.98686694 seconds)
    (103/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.618298542 seconds)
    (104/341) benchmarking ("sort", Float64, false)...
    done (took 7.071418929 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.226039261 seconds)
    (106/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.081408188 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.38162276 seconds)
    (108/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.01155484 seconds)
    (109/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.204265872 seconds)
    (110/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.06986607 seconds)
    (111/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 4.009649441 seconds)
    (112/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.617184899 seconds)
    (113/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.235433322 seconds)
    (114/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.199555032 seconds)
    (115/341) benchmarking ("sort", BigInt, false)...
    done (took 7.069495062 seconds)
    (116/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.230481163 seconds)
    (117/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.224043494 seconds)
    (118/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.084658798 seconds)
    (119/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.40739095 seconds)
    (120/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.517599392 seconds)
    (121/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.077990553 seconds)
    (122/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.097999579 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.16262011 seconds)
    (124/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.368719295 seconds)
    (125/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.088213089 seconds)
    (126/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.069121847 seconds)
    (127/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.20847396 seconds)
    (128/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.611239974 seconds)
    (129/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.195799461 seconds)
    (130/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.422201877 seconds)
    (131/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.270393244 seconds)
    (132/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.280481134 seconds)
    (133/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.382426835 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.489562584 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.424706705 seconds)
    (136/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.480181884 seconds)
    (137/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.132099144 seconds)
    (138/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.532310101 seconds)
    (139/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.617982671 seconds)
    (140/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.431464218 seconds)
    (141/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.061997041 seconds)
    (142/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.085116879 seconds)
    (143/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.302672155 seconds)
    (144/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.960843579 seconds)
    (145/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.190685518 seconds)
    (146/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.102005696 seconds)
    (147/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.086745912 seconds)
    (148/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.070243432 seconds)
    (149/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.405158035 seconds)
    (150/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.085476345 seconds)
    (151/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.362434457 seconds)
    (152/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.077248188 seconds)
    (153/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 4.7111126 seconds)
    (154/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.332313378 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.609395941 seconds)
    (156/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.218258913 seconds)
    (157/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.475157222 seconds)
    (158/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.436579431 seconds)
    (159/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.307835559 seconds)
    (160/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.329472769 seconds)
    (161/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.086655454 seconds)
    (162/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.121345239 seconds)
    (163/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.446274165 seconds)
    (164/341) benchmarking ("sort", Bool, false)...
    done (took 2.319140635 seconds)
    (165/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.093755746 seconds)
    (166/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.690634852 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.227373418 seconds)
    (168/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.470608676 seconds)
    (169/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.089048815 seconds)
    (170/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.249550178 seconds)
    (171/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.382327132 seconds)
    (172/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.246407393 seconds)
    (173/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.094079604 seconds)
    (174/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.087811208 seconds)
    (175/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.074136766 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.387452466 seconds)
    (177/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.004303924 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 6.929290818 seconds)
    (179/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.373972019 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.548931598 seconds)
    (181/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.600599575 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.461373337 seconds)
    (183/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.172596302 seconds)
    (184/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.092919978 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.235579672 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.249136878 seconds)
    (187/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.450146247 seconds)
    (188/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.298177363 seconds)
    (189/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.195447693 seconds)
    (190/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.323097054 seconds)
    (191/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.091273982 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.259449053 seconds)
    (193/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.675325643 seconds)
    (194/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.079124568 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 5.903882522 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.620526256 seconds)
    (197/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.490785165 seconds)
    (198/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.636689088 seconds)
    (199/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 4.032366618 seconds)
    (200/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.894604125 seconds)
    (201/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 3.465243431 seconds)
    (202/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.468407843 seconds)
    (203/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.626833576 seconds)
    (204/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.626954176 seconds)
    (205/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.593271215 seconds)
    (206/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.702671989 seconds)
    (207/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.483782709 seconds)
    (208/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 9.088600485 seconds)
    (209/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.572709928 seconds)
    (210/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.477476231 seconds)
    (211/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.699748744 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.479819611 seconds)
    (213/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.630319651 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.481254021 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 8.908384651 seconds)
    (216/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 3.020907544 seconds)
    (217/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.524364828 seconds)
    (218/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.474107288 seconds)
    (219/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.584544578 seconds)
    (220/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.478551416 seconds)
    (221/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.961654305 seconds)
    (222/341) benchmarking ("map", identity, Float64, false)...
    done (took 4.073301396 seconds)
    (223/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.630848195 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.487275249 seconds)
    (225/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.60843028 seconds)
    (226/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.514667925 seconds)
    (227/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.481632784 seconds)
    (228/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.674527727 seconds)
    (229/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.609957813 seconds)
    (230/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.47961543 seconds)
    (231/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.706652622 seconds)
    (232/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.638078313 seconds)
    (233/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.488616125 seconds)
    (234/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.637850462 seconds)
    (235/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.479976387 seconds)
    (236/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.495348633 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.859775585 seconds)
    (238/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.627368222 seconds)
    (239/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.889830018 seconds)
    (240/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.658487724 seconds)
    (241/341) benchmarking ("sort", Float32, false)...
    done (took 7.142742332 seconds)
    (242/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 4.067162348 seconds)
    (243/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.490590147 seconds)
    (244/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 3.175693392 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 4.021380494 seconds)
    (246/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 3.074397165 seconds)
    (247/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.477129194 seconds)
    (248/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.26446158 seconds)
    (249/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.309913063 seconds)
    (250/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.544863406 seconds)
    (251/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.803071772 seconds)
    (252/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.446122752 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.367063875 seconds)
    (254/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 4.351332075 seconds)
    (255/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.72337863 seconds)
    (256/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.468569655 seconds)
    (257/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.568502013 seconds)
    (258/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.184566891 seconds)
    (259/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.586562017 seconds)
    (260/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.836367027 seconds)
    (261/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.465756527 seconds)
    (262/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.393734588 seconds)
    (263/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.396103057 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.333023329 seconds)
    (265/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.757174869 seconds)
    (266/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.435792101 seconds)
    (267/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.522604027 seconds)
    (268/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.390611146 seconds)
    (269/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.507221361 seconds)
    (270/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.950529629 seconds)
    (271/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.427033359 seconds)
    (272/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.480425445 seconds)
    (273/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.882280615 seconds)
    (274/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.488261275 seconds)
    (275/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.967262673 seconds)
    (276/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.433330017 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.779659511 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.558089999 seconds)
    (279/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.957422111 seconds)
    (280/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.547243797 seconds)
    (281/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.519635725 seconds)
    (282/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.622142154 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.398878656 seconds)
    (284/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 3.198911699 seconds)
    (285/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.528902916 seconds)
    (286/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.60183005 seconds)
    (287/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.713056446 seconds)
    (288/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.560509299 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.388271191 seconds)
    (290/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.617050593 seconds)
    (291/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.808198467 seconds)
    (292/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.515970603 seconds)
    (293/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.773149592 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.43915573 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.837475348 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.472205437 seconds)
    (297/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 5.126816637 seconds)
    (298/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 4.059600259 seconds)
    (299/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.539932077 seconds)
    (300/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.516655826 seconds)
    (301/341) benchmarking ("map", abs, Float64, false)...
    done (took 4.542225384 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.567330128 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.395996281 seconds)
    (304/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.532697702 seconds)
    (305/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.542933321 seconds)
    (306/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.687500548 seconds)
    (307/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.391827468 seconds)
    (308/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.434116849 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.516979679 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 4.497439785 seconds)
    (311/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.401601631 seconds)
    (312/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.51642083 seconds)
    (313/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.437529429 seconds)
    (314/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.743101497 seconds)
    (315/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.708712218 seconds)
    (316/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.837758591 seconds)
    (317/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.528685997 seconds)
    (318/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.85337202 seconds)
    (319/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.472545551 seconds)
    (320/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.425156614 seconds)
    (321/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.547017355 seconds)
    (322/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.837868608 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.605489666 seconds)
    (324/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.456909071 seconds)
    (325/341) benchmarking ("map", abs, BigInt, false)...
    done (took 9.421022233 seconds)
    (326/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 3.409056739 seconds)
    (327/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.375335248 seconds)
    (328/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.683071448 seconds)
    (329/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.953275606 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.631502897 seconds)
    (331/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.396939396 seconds)
    (332/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.784145934 seconds)
    (333/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.713591978 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.870647704 seconds)
    (335/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.38501525 seconds)
    (336/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.513278722 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.828280784 seconds)
    (338/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.672767877 seconds)
    (339/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.955076978 seconds)
    (340/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.551133125 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.56696578 seconds)
  done (took 1258.953166515 seconds)
done (took 1261.337156023 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.426179997 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.425642161 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 3.01012383 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.439649424 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.400256271 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.444164658 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.977509225 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.454671674 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.448674354 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.982517563 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.422140003 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.421573002 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.440926855 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.462679593 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.428459096 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.411609277 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.444282732 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.450552513 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.431933293 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.423421042 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.500013865 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.434587094 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.426701805 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.45142769 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.428651885 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.449747984 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.420643807 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.496589354 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.48180458 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.421675742 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.457579223 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.81671456 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.459992969 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.427091468 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.456555692 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.448942213 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.418162094 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.421227751 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.409178966 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.453027274 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.434866256 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.431324258 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.441344166 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.422780707 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.42975351 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.421427136 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.412908953 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.533380005 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.447761414 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.827120723 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.489305928 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.434663995 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.473749981 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.425132961 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.418705671 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.42750619 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.517523816 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.421531761 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.443008143 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.833055798 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.544426083 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.463416675 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.839895314 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.518012959 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.408417689 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.417725347 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.45524566 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.426781418 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.804392202 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 3.039026331 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.484958435 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.461362506 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.418795392 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.41415161 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.443136156 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 3.013857672 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.428530857 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 3.105536336 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.4857294 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.434974179 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.418581917 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.411104861 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.453680596 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.463345628 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.440461606 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.392759349 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.412561456 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.44810623 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.447908869 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.834776727 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.478663381 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 3.004061658 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.461455086 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.444824054 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.422218229 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 3.106748933 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.456625877 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.4330759 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.444379619 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.838022006 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.471976709 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.445849869 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.41598622 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.439546654 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.519370337 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.414072625 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.45948478 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.423699104 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.457955912 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.429457405 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.406998098 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.448350372 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.453235038 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.443803517 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.455158684 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.435670555 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.421697281 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.448520552 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.441098301 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.425656866 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.45193302 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.425868224 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.441412175 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.497201104 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.433944536 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.42319638 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.534800667 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.449609601 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.518048145 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.454020522 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.422079994 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.425370585 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.865553278 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.473188408 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.446705948 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.454229979 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.45896426 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.425994555 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.444789993 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.44861703 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.465541865 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.418810745 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.458097084 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.412641585 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.467757218 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.494820727 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.453021659 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.414100627 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.43475287 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.449376124 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.462052615 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.45357035 seconds)
done (took 381.815653304 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.463592957 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.836048611 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.472160399 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.389464479 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.445663997 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.380385528 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.298605957 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.275791884 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.251552532 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.703682026 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.239246775 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.235398951 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.575802211 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.188385143 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.260648783 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.21190515 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.177319801 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.423323973 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.16706738 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.197383326 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.156699792 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.162417511 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.138714841 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.582411717 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.163007645 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.167493509 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.214289302 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.444149123 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.828943669 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.525222276 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.502316867 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.725393471 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.453735937 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.371057445 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.366685551 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.382364951 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.451820238 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.365464933 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.455349097 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.39953002 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.45579473 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.380569781 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.40129252 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.404273963 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.40981003 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.367907391 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.358122908 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.415577298 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.343268286 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.361448825 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.647901203 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.389184899 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.370675188 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.384733137 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.371592125 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.298725112 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.249556209 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.273411802 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.330944014 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.247671678 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.343435485 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.709702209 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.728789141 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.242685023 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.289798727 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.272654995 seconds)
  done (took 180.447127928 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.357933361 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.346994945 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.291522579 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.164691798 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.218523816 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.228096353 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.163276593 seconds)
  done (took 17.943000109 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.136539184 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.159817528 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.183665998 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.121817406 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.09299267 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.316468283 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.106597256 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.140723339 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.124784276 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.093524826 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.453042735 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.121649888 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.093758568 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.100698686 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.105712558 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.135183091 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.096219399 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.092378916 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.200298312 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.168493924 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.093608658 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.093656891 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.127379359 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.104912713 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.093107873 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.093439714 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.093181721 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.100275548 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.09270414 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.092658298 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.092689762 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.108279675 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.093343249 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.083496002 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.093866239 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.093440788 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.092790856 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.093067835 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.093778317 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.480548025 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.093365839 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.093205537 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.093544257 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.093590801 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.093856199 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.119396067 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.093599031 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.093457953 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.094261148 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.094666439 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.128822392 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.094401294 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.094106942 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.094872239 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.129884285 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.095164263 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.094934245 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.093217217 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.094652193 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.094828044 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.094810778 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.170418512 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.123717087 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.095540393 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.123560327 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.134761232 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.095011013 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.094311037 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.095002682 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.126776505 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.094892594 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.129647517 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.095266579 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.1873821 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.09512112 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.265852047 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.120963959 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.099250233 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.09882752 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.046813302 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.103486451 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.095539611 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.097541547 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.103699021 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.096791761 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.095515437 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.095701358 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.097612091 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.162653429 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.141359531 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.148440861 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.099118948 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.184052283 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.577315257 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.497037245 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.604905622 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.530849215 seconds)
  done (took 212.486450236 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.508121511 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.507381807 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.517374948 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.503968776 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.502667584 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.507368958 seconds)
  done (took 17.470684941 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.504122539 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.509312373 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.500841721 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.500362776 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.504256426 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.505219352 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.504018805 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.509212175 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.508738549 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.500822746 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.507050072 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.505435987 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.503906765 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.502495663 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.500886597 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.498713432 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.502693264 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.506541699 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.499439469 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.497746397 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.70286966 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.502789815 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.503568031 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.513249507 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.51110953 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.503218125 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.513480985 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.503687713 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.502226388 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.515337705 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.510189638 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.50488266 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.517099435 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.518324855 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.513289337 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.514780204 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.508828816 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.504219745 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.506168434 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.505874692 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.50151578 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.504228506 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.502851296 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.501633411 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.511584639 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.519680246 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.513768705 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.519988799 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.506664062 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.508579628 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.505706742 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.510368243 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.50543741 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.503383801 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.517755014 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.51804444 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.517192706 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.508819781 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.508651828 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.516931633 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.512225074 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.506056487 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.510484972 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.512849165 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.506550582 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.503238549 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.515663031 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.512345488 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.506904993 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.50980272 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.507670706 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.50944098 seconds)
  done (took 183.19050478 seconds)
done (took 613.854329197 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.52615919 seconds)
  done (took 9.955672866 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.71386012 seconds)
  done (took 10.263239339 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 13.223152757 seconds)
  done (took 15.666041039 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.531941858 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.549209488 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.522112078 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.512075256 seconds)
  done (took 32.56556659 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.648724465 seconds)
  done (took 10.082263905 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.527816199 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.507480665 seconds)
  done (took 17.540988186 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.514046142 seconds)
  done (took 9.944636505 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.669045082 seconds)
  done (took 10.131086482 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.517104194 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.511939839 seconds)
  done (took 17.474726922 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.509052491 seconds)
  done (took 9.938118145 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.818878974 seconds)
  done (took 12.323853651 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.512001983 seconds)
  done (took 9.964328155 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.58753055 seconds)
  done (took 10.017825392 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.41178242 seconds)
  done (took 10.839494213 seconds)
done (took 189.141368034 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.522913084 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.506035744 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.500792566 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.505936776 seconds)
  done (took 32.468013205 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.543598331 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.54867624 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.551145593 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.557283412 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.534398198 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.532537408 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.547750613 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.54826073 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.534324239 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.563687344 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.5416952 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.562280975 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.549995496 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.547466901 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.544596713 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.560247961 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.56182573 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.541626908 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.537062988 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.546517214 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.564583174 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.56658593 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.507620544 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.511162613 seconds)
  done (took 63.531522953 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.717567519 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.579739675 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.676285984 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.569800351 seconds)
  done (took 12.975276745 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.504865832 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.580365929 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.566690563 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.569056428 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.564119779 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.675514388 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.568780395 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.715335846 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.659193831 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.685522717 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.514109707 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.524453228 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.526533774 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.568095902 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.673724494 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.508766657 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.510371977 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.683680433 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.585490445 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.70908768 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.511388703 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.570815086 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.570397383 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.570246716 seconds)
  done (took 64.550484335 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.510708396 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.522290353 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.524431923 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.510731975 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.509492014 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.507930826 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.522371046 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.507967629 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.539790803 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.511811447 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.509986787 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.514369027 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.51328417 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.508232754 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.509212014 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.52615376 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.524650368 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.510877426 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.509839542 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.524089065 seconds)
  done (took 52.752346079 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.505036619 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.711449825 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.542641795 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.38560129 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.340468619 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.397418384 seconds)
  done (took 35.311755609 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.427237275 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.468892294 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.462113996 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.518545192 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.489719381 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.444329882 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.516271114 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.603487505 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.442013746 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.521605053 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.464556832 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.464870252 seconds)
  done (took 32.11323642 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.434407645 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.458483942 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.426919478 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.480535616 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.417050967 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.438370757 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.442789667 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.455065756 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.450207484 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.456106691 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.431039265 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.461022439 seconds)
  done (took 51.70866279 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.660615502 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.600013815 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.729302206 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.206681329 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.97269151 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.485432896 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.794207275 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.953692277 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.231916086 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.25159267 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.958442228 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.465717881 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.935531169 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.400826692 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.436488916 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.691621588 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455895687 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.390039695 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.857331147 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.495833169 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452061603 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.456434613 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.435547008 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.995866802 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.779079148 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.430714383 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.626011742 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.470731742 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.437281999 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.651632277 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.443357949 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.543101264 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.601776578 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.747059955 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.978445585 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.522314341 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.541745881 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.614220316 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.480748497 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.456760731 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.452201155 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.492763138 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.426434196 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.440689498 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.707824648 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.465831882 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.44857494 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.041656208 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.402504133 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.611233037 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.614040063 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.083743313 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.465532144 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.387737615 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.588763084 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.708582895 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.44403783 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.591469397 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.538260932 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.551299239 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.593459162 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.557413752 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.616988338 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.39612753 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.974184661 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.640181514 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.432086136 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.447154998 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.725538719 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.717862639 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.506610617 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.591709414 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.219561622 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.406056294 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.443464566 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.380190585 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.531555738 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.425598381 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.17386976 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.949121321 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.378547415 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.573465777 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.001246121 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44902274 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.419497816 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437502346 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.294486451 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.388398096 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.516404562 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.585233653 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.764690878 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.430774757 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.445239253 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.487253487 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456011633 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.436263029 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.179081365 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.517627005 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.392887682 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.012615028 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.450259852 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.473579072 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.448752778 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526185245 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.824374098 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.497208006 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.174002411 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.048908153 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.736458497 seconds)
    (110/608) benchmarking "5d"...
    done (took 4.012857002 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.442401307 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.278196277 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.508197538 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.526979548 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.459517298 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.281180259 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.64706768 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.632561668 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.614967204 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.444947378 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.412027595 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.471298576 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.632492615 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407174774 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.568555079 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.449733677 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.457146315 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.427670532 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.425060962 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.698586306 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.473740252 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.969277803 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.545418555 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.442475209 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.388261265 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.448926263 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.928685832 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.513419066 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.525306482 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.896467394 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 6.022565336 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.953432902 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.401251411 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.323475296 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.906989343 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.52597266 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.535078625 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.029817911 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.602127818 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.507677819 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424123637 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.57467223 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.428315651 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.454285103 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.490397278 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.008453423 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.114200298 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.492693323 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.452837194 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.410102936 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.616563998 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.674840054 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.16317245 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.479871037 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.479846133 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.529434494 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.577174841 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.431592181 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.429720238 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.758281369 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.669878241 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.98096126 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.667533718 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.135141892 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.551175441 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.448307919 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.600533142 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.534460016 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.131808026 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.08483408 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.759408479 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.101471452 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.433796776 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.45475744 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.630094742 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.853735357 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.425595359 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.191099743 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.624814616 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.095232743 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.507985713 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.389082898 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.404682425 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463150254 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.875906661 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.459003696 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.986419035 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.735301292 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.47082621 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.462490172 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.458346112 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.454183425 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.535244159 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.555115918 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.550329887 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.552120968 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.41833813 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.218856738 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.489355699 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.412768528 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.437149746 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.81515657 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.434811078 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.463186821 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423146629 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.533223842 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.326053265 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.164585253 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.477604119 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.44871429 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.947780281 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.464762243 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.460854967 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.45324358 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.384473733 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.462558635 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.583650486 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.575707025 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.032062747 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.557425916 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.503364185 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.419599516 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.461026197 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.708677765 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.487389841 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.716006627 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.919225549 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 6.027457144 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.12010949 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.532493064 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.067238407 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.476277158 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.427987495 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.114508956 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.508249659 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.467757926 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.607664789 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.032045629 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.660257497 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.508219004 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.505998249 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.464310146 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.905697165 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023420539 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.461236966 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.464734873 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.565628306 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.522004495 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.612912798 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.228726063 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.45677762 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410475246 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491777533 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.644487492 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.592242576 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.811661082 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.976979599 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.808843262 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.382750125 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.476991568 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.566029332 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.711729844 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.436752467 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.530233229 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115838218 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.130084559 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.255538617 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.981522499 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.718580206 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.598620515 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.906288526 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.530426585 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.464624288 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.381210466 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.646775682 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.414139351 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.57691566 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.414273092 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.523096351 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.780378163 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.484944331 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.899211286 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.455865261 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.999055933 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.812887591 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.552890739 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.626687625 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.487368952 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.427470042 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.542037549 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.437360602 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.726838656 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.549732312 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.431936528 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.024239224 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.515684832 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505739371 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449498084 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.036662341 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.510052733 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444629184 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.216962116 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.474652645 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.595144926 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.539374823 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.322481163 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.486186565 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.529315813 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.004451462 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.053385123 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.892422999 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.543421869 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.022824221 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.516385812 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.212677979 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.458358983 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.633950021 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.445640515 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.242391092 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.533628394 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.811693295 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.459346768 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.676196712 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.742577338 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.511313445 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.464984247 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.429464517 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.004316598 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.564156208 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.931593465 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.468780023 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.198552718 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.979631368 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.696468759 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.038134476 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.383957666 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.472972772 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.808357432 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.17203286 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.305238665 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.501541152 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463161007 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.711721781 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.646351488 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.601823037 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.145244108 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.482679991 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.462988706 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.614024058 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.599678171 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.427444879 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.998791815 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.227449109 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.720396459 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.47639191 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.633692811 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.661120969 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.838388919 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.513710292 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.498084529 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.168349375 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.93799353 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.565346739 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.404253766 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.451858462 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.141297511 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.584996561 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.54141532 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.760861255 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.890497528 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.479208418 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.494167617 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.720960593 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.057039335 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.197049926 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.133758473 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.792394322 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.955447426 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.041444021 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.180583059 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.197811285 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.632775032 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.576341815 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.844828056 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.35421685 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.827894481 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.751612229 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.477245603 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.402039931 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.636857005 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.492509965 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.519231886 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.195059174 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.72247845 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.563688072 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.576858095 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047535223 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.691961564 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.486239917 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.675646157 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.486182239 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.498161781 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.458743588 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.973935406 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.848612668 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.479846866 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.439500905 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.193552962 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.421384404 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.642638653 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.647963146 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.509805025 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.320394442 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.598705283 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.639912029 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.021982219 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.751735441 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.509014992 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.45022055 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.273578157 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.469288475 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.186909714 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.237646941 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.504663297 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.462547733 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.65006364 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.43909813 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.514199445 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.487006389 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.757069333 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.720863218 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.926148458 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.637853542 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.830652165 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.744084405 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.993036743 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.59537665 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.692337324 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.393888451 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.472360485 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.54117837 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.51360296 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.520640339 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.497592641 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.448282044 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.715356398 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.659603529 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.605533466 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.568555479 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.536191241 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.459825147 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.669247794 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.60973106 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.483949556 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.441567962 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.463147441 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.668115963 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.468207651 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.441544446 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.449266654 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.379937769 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.644674606 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.308469192 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.121525769 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.246878774 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.837683472 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.712612503 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086517069 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.558236729 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.702238618 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.625785388 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.535823558 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.995818114 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.201819702 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.716374683 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.814409508 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.598593937 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.776581681 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.567853278 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.445321583 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.420919979 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.002805746 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.812709483 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.42853186 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.898124892 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.485760183 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.430858503 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.148653494 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.900849673 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.421671677 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.550050191 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.428390106 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.905012404 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.667240353 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.450692594 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.526084441 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.440381889 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.372613062 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.49070634 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.439366005 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.929741175 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.438964848 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.913437475 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.620193838 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.531856193 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.419974851 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.41903846 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.40894233 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.57571012 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.018777424 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374263704 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.574987669 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.473576676 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.308041812 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.840690622 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.988301518 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.488175964 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.359928156 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.403863029 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.643656189 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.056188083 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.391907136 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.838536364 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.445615368 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.310484498 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.538539029 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.552286983 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.285825759 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.503839879 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.286687359 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.640434839 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.445317826 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.753121663 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.303777642 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.25446243 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.398226375 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.189238318 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.7260307 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.650922954 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282301068 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.200386666 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.225877857 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.206640298 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.300692856 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.723720672 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351846799 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.385570145 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.421084777 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.663416776 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.143400414 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.089504067 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136823972 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164366425 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.139865043 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.087582644 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.215228441 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.992312161 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.321183838 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.46196226 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.087769202 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314021076 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.126349891 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.091586143 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.616462428 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.137969706 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.444648934 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.089692453 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.141780395 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.091225604 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.271675388 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.370886157 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.414203202 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.137475804 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.830385576 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.161122172 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.216648245 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.349486316 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.54064631 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.306229437 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.554115322 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.751508753 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.579379066 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.456742316 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125992709 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.419391474 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.296368666 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363388605 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.14043808 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.904773968 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.5033456 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.492195386 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.448878735 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.285605547 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.839506641 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34646183 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.038322752 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.347274914 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.339038686 seconds)
  done (took 2620.472141587 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.35654081 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.443931337 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.380718897 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.35085526 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.488237357 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.457223808 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.355691272 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.326812629 seconds)
  done (took 61.407554537 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.31835136 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.390111904 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.349149506 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.332117366 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.318618349 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.372869822 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.583816245 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.358059548 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.310538776 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.347993603 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.318680042 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.33401893 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.338824707 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.348488159 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.333422041 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.623524811 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.360974489 seconds)
  done (took 85.643523909 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.382893914 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.066176702 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.326270455 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.598254448 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.401661809 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.519563123 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.327842749 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.333763461 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.354210647 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.016180965 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.365884595 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.345034066 seconds)
  done (took 93.330070637 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.317789498 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.322511443 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.324690145 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.327526815 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.35945219 seconds)
  done (took 13.919795305 seconds)
done (took 3222.740261913 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.549341201 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.472458685 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.432098817 seconds)
  done (took 7.158196296 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.43262937 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.440771318 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.527442522 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.459891078 seconds)
  done (took 12.152734204 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.614095372 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.815139179 seconds)
  done (took 7.706130617 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.766496225 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.339203856 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.867546467 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.3377909 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.325610329 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.317194405 seconds)
  done (took 24.24129324 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.34123913 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.317726062 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.341447355 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.32148597 seconds)
  done (took 11.575532466 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.343534933 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.358648139 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.340881881 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.371634859 seconds)
  done (took 23.658832248 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.682515242 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.578317185 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.092186964 seconds)
  done (took 10.606255087 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.131486647 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.697238038 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.126030275 seconds)
  done (took 11.219358541 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.288732458 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.249020653 seconds)
  done (took 8.792986076 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.48715661 seconds)
  done (took 4.762765884 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.828039905 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.844859136 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.184718198 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.197388939 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.34939998 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.638994153 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.702904974 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.728729773 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.989835155 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.838860012 seconds)
  done (took 31.566311897 seconds)
done (took 171.201749524 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.159634545 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.740537647 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.558741574 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.018731405 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.514752209 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.489570467 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.416443782 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.798026171 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.907201779 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.935424586 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.010117682 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.498019248 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.407251179 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.732799543 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.437857697 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.694265682 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.789590633 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.16962312 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.517431147 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.216554365 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.398096626 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.588990117 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.685639524 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.604222143 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.746407648 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.449123315 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.426043404 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.675509538 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.824501656 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.411869811 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.465572316 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.503254669 seconds)
  done (took 191.047760073 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.348097627 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.340732313 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.326358371 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.326577953 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.20718889 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.330613049 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.330160731 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.335399997 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.136171239 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.141654888 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.330193773 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.190321079 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.350271696 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.344377491 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.325455569 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.33557272 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.252504257 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.367503831 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.340889973 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.339025505 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.328480018 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.907568664 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.32055633 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.894894113 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.303876794 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.332690638 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.339032461 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.330066207 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.349872476 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.348355048 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.388177273 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.329378849 seconds)
  done (took 227.433177817 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.329435082 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.350206549 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.331767984 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.332747294 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.339734817 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.349968985 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.348123275 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.31893686 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.331550625 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.325834256 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.334601305 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.322077683 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.336482028 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.315790738 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.315023299 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.326022722 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.317754381 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.320239583 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.322652441 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.341076781 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.312365766 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.330688123 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.328435042 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.334639949 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.31685975 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.318369836 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.326705048 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.323739718 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.330755237 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.317108828 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.307911382 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.311454493 seconds)
  done (took 236.736538039 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.627762196 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.318820708 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.319985328 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.71900095 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.32922637 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.301215133 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.663766128 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.627172754 seconds)
  done (took 24.146956435 seconds)
done (took 681.643429414 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.955743181 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.162280896 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.474211642 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.322716982 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.96195183 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.412128528 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.338973543 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.439476525 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.094361407 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.423973291 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.804935629 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.303726963 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.148157202 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.361919118 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.458123397 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.394316816 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.744450205 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.063452949 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.456721755 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.043026115 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.459354598 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.191716482 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.337807087 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.020171693 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.695719437 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.223770716 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.320526884 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.690515264 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.202213542 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.483238395 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.293731706 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.679794109 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.308946973 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.310615681 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.411616787 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.386977286 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.635549801 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.36944422 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.466943221 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.076149392 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.153952598 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.976888898 seconds)
  done (took 120.282896086 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.302984582 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.282613696 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.273373783 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.272299476 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.274444221 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.27520247 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.296714151 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.31495936 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.308994185 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.2321242 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.221096979 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.229120633 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.182285424 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.164867109 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.159512255 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.15978628 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.159071747 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.159709951 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.15835655 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.159354506 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.158416029 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.159112461 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.152876157 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.159619047 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.159475533 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.159368778 seconds)
  done (took 59.780963271 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.153813758 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.365286763 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.496632964 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.193885207 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.154130965 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.15685074 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.194907739 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.165116311 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.157277187 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.156340904 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.258797776 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.160283961 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.170722985 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.489066166 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.191302753 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.154221806 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.153723992 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.154605517 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.380720421 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.176610207 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.197960738 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.165201973 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.195196946 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.17607641 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.157758407 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.156129867 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.158883028 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.640639653 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.169725702 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.260196811 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.205978368 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.20254707 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.565697569 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.500560131 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.233961883 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.167919063 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.156353576 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.309815276 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.172173358 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.156062611 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.195892233 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.168233884 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.491239684 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.74169664 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.180112769 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.156143473 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.63517397 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.322409404 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.243090533 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.173169758 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.499823318 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.194885198 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.157767086 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.158237766 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.199951048 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.167493006 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.157395019 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.46170768 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.174938598 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.198121815 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.168027963 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.15871823 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.382444587 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.171243536 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.373245417 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.171994682 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.165186709 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.159459958 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.49743027 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.214733178 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.777191338 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.199461053 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.15699498 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.265031599 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.380274834 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.676080674 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.178114065 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.383630289 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.593025431 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.209991698 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.173437908 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.624684244 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.213744166 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.173155173 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.157973633 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.158405823 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.1586635 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.207027083 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.197939962 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.657084604 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.743530674 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.487862624 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.212891789 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.176366098 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.159344584 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.4629401 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.17179492 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.158614807 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.487629641 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.760884083 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.181968608 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.168869967 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.719735016 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.183501376 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.200733375 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.175556156 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.50536701 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.195968465 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.208099307 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.159096386 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.168388459 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.16352095 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.200905036 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.174357635 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.159287596 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.711070553 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.335658309 seconds)
  done (took 268.629755516 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.163367712 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.161320977 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.158501665 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.161636425 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.15933381 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.161085158 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.159253691 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.159224872 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.160607205 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.159321979 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.158356922 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.163109105 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.161212696 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.163411934 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.193093134 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.161773431 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.954623406 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.159921258 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.160445174 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.164652593 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.871480362 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.166614621 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.160448465 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.164908119 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.161906561 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.160626595 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.167458598 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.190430959 seconds)
  done (took 176.181965642 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.161420169 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.230916547 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.174845712 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.230546005 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.175364666 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.161409363 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.193281325 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.185706472 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.171175428 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.161134502 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.160910985 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.200835625 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.173127898 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.266604764 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.207689431 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.205551825 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.274365 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.174501289 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.1622523 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.162958009 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.230554862 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.182999716 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.202540558 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.242175252 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.177102725 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.231679142 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.182710981 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.161894924 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.163140039 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.288723457 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.186911931 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.202940901 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.212787868 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.190361724 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.296372884 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.29253741 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.279934615 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.205313206 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.17045251 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.162958193 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.162942774 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.169223194 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.232424086 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.178445355 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.165057228 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.298253562 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.188947485 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.164678153 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.186475951 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.163999812 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.181250786 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.189756806 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.212799406 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.303785726 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.231798664 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.192680649 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.196119028 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.185704365 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.16522676 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.269713862 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.181210976 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.290068067 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.190887295 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.170777494 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.165583102 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.170130209 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.234036475 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.210445417 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.277503016 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.177058497 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.269781736 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.246000976 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.179482743 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.165370075 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.164977053 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.235987847 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.286811391 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.247086134 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.2494282 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.214193642 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.183047087 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.165217759 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.171466324 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.204389105 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.176162379 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.291118703 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.294135377 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.177160465 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.165570069 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.16584858 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.165554845 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.20036349 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.247646916 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.219183478 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.289348055 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.21592557 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.216252436 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.176201182 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.183305837 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.174426036 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.208906404 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.177529279 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.183412921 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.519053555 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.219810737 seconds)
  done (took 233.946241657 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.569215508 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.231080897 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.251149386 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.441077583 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.580706587 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.456671949 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.217380146 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.236061796 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.233158007 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.374819234 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.274051141 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.281242914 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.217437272 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.199098685 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.227401143 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.228093309 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.262338259 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.606663256 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.341885004 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.19118921 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.223865662 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.510646609 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.545168045 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.60447466 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.286895039 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.710225711 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.875543916 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.335414269 seconds)
  done (took 71.616163079 seconds)
done (took 932.65495119 seconds)
SAVING RESULT...
DONE!
