cset: moving following pidspec: 2096496
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.975674923 seconds)
loading group "shootout"... done (took 1.270531969 seconds)
loading group "string"... done (took 0.747871519 seconds)
loading group "linalg"... done (took 9.541854478 seconds)
loading group "parallel"... done (took 0.189156394 seconds)
loading group "find"... done (took 3.361617204 seconds)
loading group "tuple"... done (took 2.35486239 seconds)
loading group "union"... done (took 16.355169656 seconds)
loading group "dates"... done (took 1.60025791 seconds)
loading group "micro"... done (took 0.239813176 seconds)
loading group "simd"... done (took 5.288618687 seconds)
loading group "io"... done (took 1.462860023 seconds)
loading group "random"... done (took 10.830025849 seconds)
loading group "problem"... done (took 1.732774661 seconds)
loading group "array"... done (took 28.218372955 seconds)
loading group "misc"... done (took 2.042722894 seconds)
loading group "scalar"... done (took 48.275014611 seconds)
loading group "sort"... done (took 3.66544157 seconds)
loading group "sparse"... done (took 14.337258507 seconds)
loading group "collection"... done (took 21.125050117 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.482199485 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.128589161 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.177294193 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.126207898 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.244819539 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.133742139 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.138706881 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.093797602 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.116197511 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.14942577 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.147937275 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.449647474 seconds)
done (took 5.992790892 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.320908124 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.264318989 seconds)
    (2/2) benchmarking "String"...
    done (took 0.179716092 seconds)
  done (took 1.756407855 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.097973931 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06614724 seconds)
    (3/3) benchmarking "different"...
    done (took 0.072892051 seconds)
  done (took 1.539490423 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.071834196 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.151739444 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.074762929 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.071678752 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.073217171 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.078047124 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.075065597 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.07439279 seconds)
  done (took 1.919257845 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.081143434 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.076359646 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.074636764 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.075860261 seconds)
  done (took 1.620264817 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.073931904 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.137939524 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.074347629 seconds)
    (4/4) benchmarking "different"...
    done (took 0.074644793 seconds)
  done (took 1.688420628 seconds)
done (took 10.233475389 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.177045909 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.822549139 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.944009112 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.157982271 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.339677427 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.362002727 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.136359459 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.22184804 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.130326755 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.085100409 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.177431549 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.089669076 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.526335286 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.517685748 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.078367145 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.209253893 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.65174825 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.091414301 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.124762222 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.289589385 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.088382216 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.091859513 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.099981581 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.081046468 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.202461556 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.192410744 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.6652601 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.104632201 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.078636246 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.208427183 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.080578235 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.087363275 seconds)
  done (took 11.448550303 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.123539754 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.121539302 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.078188341 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.114816331 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.104465803 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.079063359 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.083374854 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.076392196 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.098603765 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.14624374 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.098074202 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.134046387 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.073781998 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.076696699 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.11043583 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.174904631 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.089366163 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.092079214 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.075772417 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.092951152 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107687183 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.088541441 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.087499522 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.087078918 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.122378789 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.14316076 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09723582 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.119544619 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.07591627 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.089611197 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.109203876 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.114841646 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.073587772 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.073656821 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119313177 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093561839 seconds)
  done (took 5.001845588 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.107079842 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.152424387 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.10648146 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.124068123 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110269611 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.118087797 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.102580774 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.157226852 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.132643845 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.110081135 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078017669 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.201286097 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.739326758 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.224486428 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.081479945 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.161895656 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.395718197 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.971321806 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.078755573 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076878079 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.106998999 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078723441 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.1522957 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.074685512 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.194784325 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.690178456 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.209161269 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081121852 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.110131966 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.073971208 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.075464096 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.152870447 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.107443864 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.080903814 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.626798768 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.075023109 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.073805228 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.098362635 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.108129116 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.074176849 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.076016141 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.088448733 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.070570435 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.127817824 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08805855 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.583000096 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.079968026 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.676757284 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.359440489 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.084035898 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.082933161 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.112817253 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.072576088 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.07780905 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.757949631 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.162228926 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.074618807 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.315570189 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077232611 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.077454416 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.080245701 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.114070783 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.077334498 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079410757 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.081312779 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.092228547 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.106728118 seconds)
    (67/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.073845569 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.166310124 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097565667 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.078425645 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.463501454 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.082562023 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07849531 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080719019 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.107813064 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.149187251 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076285296 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076736566 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.122504243 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.250843072 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.100774223 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.079737116 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.077532961 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.075571112 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.596698605 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.029804731 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.075775655 seconds)
    (88/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.07047501 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.074860282 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.542915221 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.07332756 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.075663113 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078329979 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.100428567 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.076139094 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.074126843 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.074976533 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.11272219 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.076290511 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.609174112 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.07497156 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.653148852 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.07773718 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.114957224 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.137444924 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.079121808 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.117558433 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.078591215 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.07368449 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.08212588 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.07591586 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.07291859 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.076166278 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.074654306 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.075000905 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.076231316 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.077110026 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.075380026 seconds)
  done (took 25.723542193 seconds)
done (took 44.595925094 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.440693929 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.087734934 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.087581588 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.088108529 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.088331024 seconds)
  done (took 2.168879611 seconds)
done (took 3.648525534 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.278100354 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.083406494 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.0731223 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.219318468 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.097789763 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.192972434 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.373363768 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.185925851 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.100475176 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.098889706 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.10003234 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.240758551 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.256161407 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.102825502 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.180883006 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.257192716 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.102953585 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.075935604 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.099468986 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.101236598 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.101267839 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07319856 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.09826724 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.099404213 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.182082646 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.101186702 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.075250061 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.18269498 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.100675634 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.179582262 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.103153034 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.099290473 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.101155067 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.174860937 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.101164323 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.177726874 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.073992766 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.101550583 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.103448475 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.106953906 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.105156186 seconds)
  done (took 7.092686054 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.086188461 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.091190634 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.094995136 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.071649937 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.081289471 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.09203262 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.069048678 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.090712938 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.113300282 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.094607382 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.091327446 seconds)
  done (took 2.464397753 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.080890311 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.097036518 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100598445 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.072483001 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.084732246 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.094361087 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.070535629 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.091032592 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092641893 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.092303209 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.092681408 seconds)
  done (took 2.397804934 seconds)
done (took 13.347579413 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.208817316 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.100851149 seconds)
  done (took 1.722667794 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.285760233 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.536759944 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.45247923 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.130671555 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.112951387 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.130603329 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.238677902 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.106611238 seconds)
  done (took 7.61245832 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.140158122 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.07476971 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.077556463 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.07702933 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.079137824 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.078364942 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.077338564 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.075735385 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.073911634 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.075868699 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.076982066 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.075817768 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.07556242 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.077087567 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.077742117 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.077243051 seconds)
  done (took 2.853887272 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.112194131 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.077262205 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.111056296 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.070784942 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.082749669 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.071424459 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.079217047 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.078955043 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.078451106 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.078906828 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.079211686 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.078652144 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.077613291 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.079414966 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.0809993 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.081197108 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.084834674 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.082910604 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.08435337 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.08178666 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.079783585 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.081860342 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.083799546 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.081613337 seconds)
  done (took 3.538494126 seconds)
done (took 17.15930417 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.193759101 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.08397962 seconds)
  done (took 1.703319372 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.099426853 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.101030016 seconds)
  done (took 1.649141198 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.080044043 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.067021839 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.084566679 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.077759328 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.068113828 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.067213095 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.082248865 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.067554941 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.067723398 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.067691107 seconds)
  done (took 2.186399813 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.070239409 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.075113536 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.073104907 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.070846195 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.072414757 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.069842535 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.071103812 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.069365768 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.075855366 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.067318804 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.07392506 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.094642602 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.073622763 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.0926514 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.072968576 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.072793861 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.074190873 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.07331804 seconds)
  done (took 2.785348011 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.068949658 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.069830689 seconds)
  done (took 1.603431811 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.072184217 seconds)
    (2/7) benchmarking "second"...
    done (took 0.069387127 seconds)
    (3/7) benchmarking "month"...
    done (took 0.072067742 seconds)
    (4/7) benchmarking "year"...
    done (took 0.073333749 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.070833037 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.070563021 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.071834895 seconds)
  done (took 1.958957805 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.471851219 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.213452047 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.475248392 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.077803391 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.092061471 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.289538109 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.072768392 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.078717285 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.079032946 seconds)
  done (took 3.337183309 seconds)
done (took 16.684040724 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.09210815 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.195076734 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.120697465 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.464274246 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.087461666 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.074287384 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.104775225 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.223701256 seconds)
done (took 2.826697473 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.299838743 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.303520105 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.289094084 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.165224008 seconds)
  done (took 3.202910711 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.456622609 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.186204541 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.084841908 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.074914397 seconds)
  done (took 2.256261345 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.072448593 seconds)
    (2/2) benchmarking "read"...
    done (took 0.079973394 seconds)
  done (took 1.604302316 seconds)
done (took 8.822853718 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.081542406 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.069777423 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.07466572 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.103703376 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.071525473 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.06877611 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.069041962 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.067368431 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.066751871 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.07023953 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.071461161 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069056407 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.074998057 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069586312 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069458683 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068649181 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.068242794 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069862256 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.068195711 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.067845204 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071625717 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071275714 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.071807145 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.073023246 seconds)
  done (took 3.215973414 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.086418662 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.073314274 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.071707132 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.074559018 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.073964822 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.074686994 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.075973757 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.072830935 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.074964338 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.073514468 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.073777783 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.072881247 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.071033007 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.074304446 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073587054 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.07340458 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.07480947 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072225044 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070758512 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.07285164 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.074986209 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075278912 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.077728072 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076388801 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.076940443 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.075367307 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.072681018 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.072280222 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.073453535 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.074729234 seconds)
  done (took 3.71746664 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.074874467 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.067929639 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.0696131 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.081380667 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.068680382 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.067653661 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.067726217 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.067067233 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.066593518 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.070010485 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.068704427 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.066614314 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.069034761 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.064922659 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.066751942 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.067151812 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.072261309 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.090637565 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.068761945 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.068718323 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.073912207 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.069096928 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.069606581 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06748485 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06843652 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.067550313 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.068559902 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.069423145 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06943624 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.070505217 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.069990693 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.078721265 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.075709751 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06864592 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.081702932 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.075834418 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.069378954 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.076730534 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.069791857 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.068129531 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06863446 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.067841953 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.067785039 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.067620916 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.078525588 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.068817965 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.069718533 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.068665084 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.065971547 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.066933795 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.069135327 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.071652918 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.077402354 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.070391335 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.068621424 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.070960641 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.067903088 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.067283581 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.066429517 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.066825532 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.068386598 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.072786371 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.070042223 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.068936009 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.090676968 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06898191 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.078743127 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.068693818 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.068537672 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.072855707 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.069079958 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.08966118 seconds)
  done (took 6.5808589 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.080107715 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.078371182 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.086479049 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.077350281 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071842368 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06860163 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072088969 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06883651 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.078691912 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.072109898 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06907565 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.072152305 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.078520911 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072379973 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069831919 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07903606 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.072154074 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072966175 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.069806088 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.073519979 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069068732 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072117827 seconds)
  done (took 3.124080855 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.157749627 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.076945974 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.121310747 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.079180538 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.077703459 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.08007456 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.074262112 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.073666449 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.075241764 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.075600604 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.077179785 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.076096233 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.076175767 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074613433 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.076361458 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.074911794 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.075162124 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.07495487 seconds)
  done (took 2.981375871 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.088571068 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.075866486 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.105640378 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.075737304 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.076160532 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.075789524 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.080560685 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.080046165 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.074608902 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.074581767 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.079490564 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.075996352 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.073632451 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074382431 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074935081 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07494438 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.07531869 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074617254 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079319663 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07945272 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.080684951 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.081019272 seconds)
  done (took 3.20906463 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.089251595 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073825681 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.091147665 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.074449248 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.065881711 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.067017033 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.074739412 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.074299252 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.074765775 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.071998298 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072131914 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.066938866 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.075622367 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073072162 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.076089846 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073709536 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074325148 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.07441954 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074791327 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.067970477 seconds)
  done (took 2.981176641 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.106144166 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070722886 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069737904 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075211361 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070130598 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.067030229 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073986473 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069636951 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.081257527 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.095743156 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070032098 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071566412 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076977507 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07400802 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07219071 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074708564 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075348974 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075889076 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074227606 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072119213 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098647733 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072699458 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076496261 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070812425 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072024429 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072552133 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071823261 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074699377 seconds)
  done (took 3.624675541 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073033261 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.071639329 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.072261345 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.070903841 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.071633733 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.070893148 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.072337223 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.072918196 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.072211464 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071282273 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.070398529 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.070480216 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07078778 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.070974109 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.071509644 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.072230019 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071534143 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.073108417 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073362184 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073725149 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.074032291 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074228356 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.073181211 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071953606 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071697698 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.072098471 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072062031 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070384332 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070577739 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069871908 seconds)
  done (took 3.651552743 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.081677576 seconds)
    (2/2) benchmarking "in"...
    done (took 0.0775531 seconds)
  done (took 1.655893856 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.068942931 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.085877863 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.066585285 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.082033958 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.076671107 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.072534775 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.078016705 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.078268417 seconds)
  done (took 2.10892216 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.097977605 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.124992184 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.068850145 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.069787919 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.099049479 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.144273935 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.110038664 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.082895817 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.08588307 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.072451263 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.071715098 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.114348997 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.069972849 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.08486011 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069890361 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.079452528 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.078496634 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.086901356 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.081268202 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.066691401 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.085890486 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.072077011 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.069770442 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.071300267 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.07044368 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.078285936 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.086712722 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.083871398 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080252502 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.067718303 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.090558933 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.068093036 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.067876406 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079083837 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.100258224 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.069524168 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.112460992 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.070163436 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.075338222 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.068983019 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.082893782 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.092205335 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.082977281 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.087645447 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.07098979 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.071814246 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.068579945 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.069216937 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.073249018 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.079221814 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.068656386 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.077691596 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.067599204 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.070312484 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.080457491 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.067997583 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.073844957 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.078558406 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.085173651 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.078366127 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.084165137 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.088985715 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.079711466 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.077737889 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.067741252 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.087916018 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.07013064 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.084297818 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.087314481 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.070587957 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08446161 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.068393671 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.066981159 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.068184458 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.109643138 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.071547164 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06867577 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.068795556 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.070342163 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.072905942 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.082185856 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.076483426 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.078919634 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.072848509 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.090132857 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.082798852 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.071768849 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.079787962 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.091240519 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.074497046 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.069832378 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.089702647 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.075179264 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.069896854 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.090835055 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.083121568 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.073425241 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.071789159 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.076807639 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.086770366 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.072807795 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.069759969 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.082775288 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.073392809 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.267544817 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.072733233 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.076846159 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.069411736 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.085828673 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.07604905 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.071083631 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.067777202 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.073911052 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.069653805 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.068780572 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082515389 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.070350102 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.084859358 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.076785713 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.086936852 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.087768262 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.082264818 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.088889449 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.069355816 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.067736135 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.088569197 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.080282805 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06928475 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.088855193 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.068800024 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.081256339 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.065921327 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06889909 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.081222573 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.068633926 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.072647104 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.069019825 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.074843907 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.070793768 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068865252 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.073758626 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.077756316 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.082290589 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06826629 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.077642571 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.066620086 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.086247008 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.07939773 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.075018992 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.071996419 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.070289983 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.081411477 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.074791675 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.07695317 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.066973428 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.068624134 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.068151919 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.081061174 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079282125 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.069304703 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.075547966 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.072260656 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.069246297 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.069321099 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.070330726 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.073773752 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.071644346 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.070263057 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07846779 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.078895289 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.083431267 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.075848943 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.079633397 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.068940654 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06814112 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.069462084 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.067811786 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.073555005 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.078311387 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.087009066 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.081829868 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.09136528 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06766523 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.079113979 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.071208449 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.087453116 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.083823787 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.069696656 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.073171932 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.067921013 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.07058681 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.079221839 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.081383389 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.085793733 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.08881647 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.076519301 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.077319575 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.069761771 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.08964407 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.071391525 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.082267386 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.082429126 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.077590397 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.072263232 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.073312525 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.081631447 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.074223231 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06927828 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.085670162 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.079542752 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.071281222 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.089129802 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.070821831 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.083786578 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.07076067 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.075517189 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.078212642 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.074072237 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.083794346 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.254322317 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.069922535 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.071669608 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.090400941 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.072908319 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.072411238 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.080907278 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.087526796 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.072928743 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.077375292 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079053175 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.078974834 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.074115124 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.077532855 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.066452757 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.07832832 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.071674578 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.081413043 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.068600616 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.089339448 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.066082768 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.085930977 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.067567712 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.079844938 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.067172238 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.079065997 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.069439001 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.08819749 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.068426056 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06724107 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.081673974 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.06760312 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.078970768 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.068832264 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.075177145 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.073620212 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.076854694 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06745243 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077997292 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.067571801 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.077021561 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.070738064 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.075059852 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.074428362 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.069565442 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.066642942 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.077652662 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083668786 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.077334571 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.070391054 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.069840726 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.069179007 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.078420497 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.070493837 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.070700041 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.080858461 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.076029471 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.077378407 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070191618 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.069210608 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06803151 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077805219 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080504318 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.090348492 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079200423 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.078568885 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.079707038 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.068574513 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.085089628 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.068428329 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.078642164 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06756645 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.07447479 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.080036559 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.070849279 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.092167802 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.069614379 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.076279958 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.083341941 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.078203565 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.070811837 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.088081505 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.070515798 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07830638 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.077362622 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.074416284 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.077632305 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.071205769 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.078623555 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.079904622 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.081034696 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.071642181 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.0804556 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.081207388 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.071793455 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.079754264 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.071608296 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.078627009 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.071704285 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.070393919 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.077243368 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.084446157 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.076195283 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.074919455 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.070394327 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.068675372 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.070760729 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.079250378 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.076659787 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.080602209 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.087083646 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.06841175 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.071127961 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.069470416 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.074543989 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090510194 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.252067956 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.079100917 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.073728469 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.067525422 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.068682572 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06909931 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.067400934 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.068550335 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.064860956 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.065413384 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078403237 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.066603737 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.07043491 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067498869 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.069669259 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.080801495 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.071494477 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.066696787 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.076770482 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.068443183 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.07286286 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.065222067 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.069083601 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.073842732 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.067870588 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.071812876 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.080488626 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.087390858 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.075334314 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.075575775 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.067272007 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.078654674 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.084327065 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.072658592 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06853115 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.080222268 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.068005698 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.090157793 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.079968539 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.078151214 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.080642625 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.070848556 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.087253045 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.071720376 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.078092112 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.087579837 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071280264 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.077463631 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.068690763 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.086649854 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.074192498 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.068811821 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.079296961 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.079089782 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.07799458 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.08296866 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.069287145 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.076635567 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.073083416 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.073959195 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.070886211 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.070919283 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.079511372 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.088869253 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.070555012 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.077037876 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.080633159 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.080671534 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.076339617 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.084104426 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.078818294 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.071084899 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.070510714 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.072100082 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.070921012 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.084878652 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.069932234 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.07193166 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.072259417 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06762534 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.075361886 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.086481598 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.077490881 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078302065 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.067703221 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.068549528 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.08961484 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.075205501 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.0748311 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.084848808 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.082010119 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.084392204 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.08088833 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.090159879 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.070653811 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.078991293 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.086324407 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.072955959 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.069944352 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.077067856 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.072155858 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.082625267 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.082566997 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.078081543 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071725945 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.079899435 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.087704838 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.070749214 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.076186621 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.076994409 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.072086854 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.083079829 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.079061306 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.081704021 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.073615384 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.070692734 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.073884114 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.242190591 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.07879914 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.081314801 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.07129304 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.076229088 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.083866299 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.079607333 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.073638967 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.069686505 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.072888023 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.081532994 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.074347721 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.069115735 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.074324958 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.071220323 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.074969203 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.080514762 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.075495845 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.068624025 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.089439043 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.079301248 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.080526862 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.071057139 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06914139 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.068608026 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.066172254 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078932912 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.065809837 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06857071 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.073199906 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.070885894 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.08932315 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.077202978 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.08660852 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069375492 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.072435632 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.066141091 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075586206 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.070543728 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.068264192 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.081740242 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.067120464 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.084944685 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.081309139 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.076271964 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.068483475 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.074994771 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.078922967 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.086506144 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.081126471 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.078043712 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.071541699 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079206797 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.069177979 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07961755 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.068016413 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.068326465 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.081302187 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079304231 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083987034 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.068539565 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.080872852 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.069962576 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.076510869 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.079604709 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.069790143 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068785269 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.068575051 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076434304 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.072779958 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.080339608 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.075102082 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.087937387 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.068754241 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.08345221 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.08055426 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.081856071 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.08412843 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.082926889 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.078158742 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.069442019 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.078208609 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.077783947 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.070922544 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.076674537 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.074570714 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.098016478 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.073429849 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.072887938 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.088132001 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.076493047 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06915878 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.078481493 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.078252001 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.083285607 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.071337991 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.082440094 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.075523596 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.072038877 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.077125002 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.076411 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.066726231 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.068544641 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.067885579 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079509625 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.072818621 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.071192947 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091981005 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.071772756 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.081479768 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.08401492 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.079579202 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.072441798 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.069592503 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.232926946 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.084688463 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.085369703 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.070203554 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078098227 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.069605372 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.079601202 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.06658518 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.078325665 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.077446417 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.078219674 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.068544797 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.069664341 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.087412377 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.087070542 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.072985547 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.088932557 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.078662038 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.070663449 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091735891 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.077126455 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067380136 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.079108549 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067661615 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.065572375 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.066890904 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.069440698 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.079790529 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.067476064 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.070264668 seconds)
  done (took 47.969375739 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.110453696 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067965944 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065629548 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.067709154 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076441468 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069165514 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066993886 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069767681 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069336154 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069571066 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066807257 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065546886 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072189983 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.081297644 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075361094 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.0731164 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068882158 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070254966 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06921751 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07153547 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07576782 seconds)
  done (took 3.119983 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.073042245 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.072866354 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073095831 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.072329192 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07187516 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.068195374 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.071321331 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066766491 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072948982 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069080924 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073633587 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069036352 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.068358144 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.06974328 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06879276 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068701662 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.072265412 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071048921 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.069198324 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071041601 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067467303 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.071305705 seconds)
  done (took 3.164165337 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.068982333 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.067675516 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.076121678 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.066752504 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.067684627 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.070426867 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.067559443 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.073466641 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.074268837 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.073399706 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.077335664 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.067529731 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06614001 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.075744462 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.067654534 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.068621843 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.117103689 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.067944516 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06882131 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.067426412 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.070778617 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.078128982 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.067649248 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.067128725 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.071695414 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.069441492 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.066684878 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.069591141 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.067168223 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.072039405 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.067742143 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.068071103 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.078696615 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.079543221 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.07423406 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.075012716 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06980981 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.068900124 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.067278591 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.06797815 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.080312347 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.069282072 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.068626185 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.071243625 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.080936991 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.068547204 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.066932305 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.080081857 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06938877 seconds)
  done (took 5.110535446 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.084168089 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.126245055 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.075972449 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.106082016 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.081001899 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.072688737 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.07377115 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.105219716 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.070160686 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.069326872 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.082417566 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.082532393 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.071527259 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.073324722 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.078160956 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.071644027 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.07118319 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.071253508 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.07359197 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.070198918 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.072602958 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.075839073 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.080217347 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.079023479 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.070344076 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.070312734 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.071564654 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.071243539 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.082106724 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.074174723 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.071610285 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.072149132 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.081853473 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.073809894 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.069861217 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.070283827 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.084893692 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.070305244 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.07033747 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.069552635 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.070722178 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.072946262 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.078373541 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.084476385 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.073140821 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.076058858 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.070646912 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.067338502 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.08203356 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.071808754 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.075821382 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.083061377 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.072361788 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.073147857 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.073084258 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.083457737 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.072014894 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.070978705 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.071207031 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.079894636 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.069724561 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.072729274 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.082343795 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.068989665 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.071793671 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.08226231 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.075716468 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.071811141 seconds)
  done (took 6.948911499 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.077966955 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.102795744 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080263702 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.081745076 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076325251 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075554499 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.078456386 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.079533109 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.079820083 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082511339 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.081230094 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.148336309 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.076889537 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080989497 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.080371438 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.080783472 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.080980039 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.080185409 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.078970637 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078535098 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.080556425 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.086205056 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.080058487 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.085912015 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08608802 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.075581354 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.079934944 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.079227428 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.085483397 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.080021496 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085192235 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.081383296 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.080750393 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.084294378 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.084672955 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.078846669 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068855438 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.078181885 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.080505513 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.081166819 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.078972033 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.086927467 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.081484533 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.077907013 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079605947 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.078239737 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.083276188 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.084358666 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.08187889 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082992673 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.081218111 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.084816812 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07814171 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.080793158 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.086917465 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.089423952 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084659854 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083590581 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077580515 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.085958714 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.086325684 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.088948674 seconds)
  done (took 6.766298968 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.082562365 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.0732362 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.088673899 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.066255953 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06611961 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.077892455 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068650514 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06825786 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.073513225 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.073691044 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.075425662 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.079119365 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.080727831 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.075336257 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.077426751 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.080582664 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.078554824 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.077771626 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074349442 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.078605266 seconds)
  done (took 3.150516714 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.067790237 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.072215035 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067619246 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.083797056 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068485292 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.076944703 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067992257 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068520548 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069636617 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068275503 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071288013 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073213996 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069802447 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.076493562 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.07077272 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.075485352 seconds)
  done (took 2.762377656 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.070897275 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.077328885 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.101465056 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.069448067 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.070449495 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.066633605 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.07004907 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.069543259 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.071913187 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.083687043 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.069505333 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.072246326 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.067006724 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.065876294 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.067421762 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.070527734 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.068978079 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.066274847 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064967348 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.102138649 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.080939805 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.069237222 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.07006508 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.069904479 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.07013531 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.077380853 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.069805918 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.070938121 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.068895264 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.071851734 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.070902443 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.082368596 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.072503891 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.071092919 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.069736381 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.07057186 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.070065848 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.071912071 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.07183773 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.067837315 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.069101117 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.072514177 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.069401199 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.069524274 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06992853 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.070930118 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.068813668 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.080660672 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.068554741 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.070944981 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.069842438 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.071552467 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.069961306 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.08152842 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.072327394 seconds)
  done (took 5.597305135 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.088746118 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073131683 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.066705941 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06871403 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.074373306 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.074131599 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.07421221 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.074027869 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074833934 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06635359 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07222591 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070933695 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073102389 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073097567 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.075915398 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.07378225 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.068369506 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.075163515 seconds)
  done (took 2.951705102 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.074707443 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071530414 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.072390632 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.069451986 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.069985927 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073175083 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068780866 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.070326119 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071456322 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.070378837 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068377216 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067048951 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069116864 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.068588678 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072942133 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069545611 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.069040582 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068263293 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069130567 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066860127 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.074696502 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06939795 seconds)
  done (took 3.15242235 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.130314453 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.097637829 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.181573374 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.090446429 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.102817525 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.081812879 seconds)
  done (took 2.32124341 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.106003098 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.109415327 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070711063 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073054681 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077179176 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074037675 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076228478 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075979429 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080315238 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.085276241 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078155369 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081023982 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.08146853 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082671821 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078853822 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079988843 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076422028 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073813989 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070768381 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08213857 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077196014 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083821113 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07934959 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078146038 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078709445 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.082070373 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079526822 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082545463 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075928174 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080405117 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078312852 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078852034 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080905943 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082800106 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07436559 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081689353 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077660293 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.085723677 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077360361 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083087504 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.075032961 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079913063 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080915092 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081203051 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.08211945 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078193852 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082761484 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07950597 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079057836 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.08886092 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081003109 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.087330659 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079985396 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081915873 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082095566 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.090029658 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.085428001 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.085174182 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082343621 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.085027597 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082624166 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079289544 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.081332473 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.084673457 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081342824 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.087838118 seconds)
  done (took 7.015692989 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.114469446 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.075302511 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078048704 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082962846 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.083185892 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07840334 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077099185 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078707773 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080060649 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075646969 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.118549063 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078700001 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083845252 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.084199806 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079408751 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076897353 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07747648 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.08248846 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075195635 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.090308997 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077419768 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.083739466 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083769588 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.08267799 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.08249025 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07756662 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076525557 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076780795 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075978203 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077344646 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.080672132 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077019865 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081091046 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.0741525 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08228828 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077968748 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076586111 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079658729 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076702666 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078540031 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.081579737 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.085829127 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078611245 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077585681 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.084018691 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077693205 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077420455 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076427505 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07784479 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074120549 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083519571 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.084531163 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.083561759 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.08210941 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077719811 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076483481 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076334216 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076781874 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078493233 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079073131 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083065745 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077351697 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.090519997 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080509835 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079445033 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082987535 seconds)
  done (took 6.998412045 seconds)
done (took 145.323708114 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.275033368 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.234365499 seconds)
  done (took 2.145982622 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.082729746 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.294718379 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.085017965 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.083973322 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.146253807 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.14253868 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.116587021 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.080008406 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.083080292 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.082496919 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.181030827 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.113628563 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.079350968 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.368279644 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.081686139 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.081043634 seconds)
  done (took 3.724170175 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.156522445 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.234405832 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.09218863 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.078265312 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.168830852 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.087798294 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.081956731 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.084591411 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.087086095 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.080002577 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.130252329 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.091961127 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.082748619 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.085396249 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.079834637 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.083250848 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.083271243 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.083889039 seconds)
  done (took 3.535740643 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.114110533 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.122790586 seconds)
  done (took 1.889297807 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.174598909 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.118043197 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.159964438 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.383864613 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.150893038 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.155917769 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.157548922 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.149381103 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.121621073 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.149120711 seconds)
  done (took 3.36797109 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.117600027 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.116541378 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.336515649 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.113716082 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.091674973 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.084545712 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.082668556 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.088131365 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.082812274 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.085076708 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.136215634 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.084144135 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.08207178 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.139161807 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.110331185 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.122104456 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.079447476 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.087909783 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.089651952 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.080754169 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.085524175 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.089923921 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.194928292 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.087707857 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.110208025 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.084138829 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.085057964 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.08381514 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.083855199 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.0873566 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.088400069 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.112394599 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.088379733 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.095315809 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.086728693 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.110241833 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.080930998 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.111013557 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.082651043 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.080979116 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.085586104 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.089128333 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.082859864 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.08944726 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.085130564 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.087794695 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.092067914 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.081625322 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.083803609 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.083963389 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.082108574 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.087750875 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.088168018 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.087338836 seconds)
  done (took 7.016573129 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.134152163 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.123436412 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.078968829 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.130377686 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.122173631 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076747423 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.13462384 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.115742893 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.13373188 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.077710248 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.078907387 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.079012051 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.08640702 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.089694994 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.132620366 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.128046499 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.082431767 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.079956706 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.126211064 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.126098374 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.075509187 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.135535075 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.12922789 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.124496974 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.077463826 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.079797297 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.078196997 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.077610964 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.086819183 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.085833915 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.078507496 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.088545437 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.089068914 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.085388219 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.077191125 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.079006278 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078224382 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.084026573 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.086050811 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.086179254 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.08528758 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.078436079 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.078071234 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.078832758 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0798897 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.078288169 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.089733682 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.087215416 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.088877375 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.079121997 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.077167115 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.079072579 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.078388213 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.084404534 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.084162598 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.083566236 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.089108907 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.077702624 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.076183641 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.078155758 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.088549374 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.083764951 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.085746186 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.077407772 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.085928739 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.076951906 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.088020181 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.091858332 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.07779196 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07713678 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.076889926 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07736125 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.077882114 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.084584982 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.084508366 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077134185 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.079289676 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.078418486 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.088773234 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.087439317 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078999009 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.089230054 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07812274 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.077356642 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07982889 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.080605479 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.09011887 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.087535629 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07920229 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.081117889 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.081582917 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.081841991 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.081666556 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.092338984 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.247289599 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.088146 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.088885626 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.078719575 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.087503179 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.087620417 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.079053944 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.083627422 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.077026265 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.078378989 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077337882 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.084193401 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.083660922 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08577243 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07719798 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.076948159 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.084265114 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.088972865 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.076945531 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.082784467 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.085059244 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.084328245 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.07588988 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.086503784 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077200502 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.08648605 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076700664 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.085990265 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079381643 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.082590796 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.075766978 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.074388814 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.07801388 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.087850188 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.077908402 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.075321066 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07540215 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.08004812 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.082482486 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.084025475 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.074625986 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.08545368 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.082993841 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.075505812 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.087399715 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.079108055 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.087678685 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.079293819 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.080749256 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078113005 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086838848 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.07483308 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.077852858 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.079441273 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.087534302 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.076695625 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.087502374 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.084449799 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.075013142 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086931991 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.087828802 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.08332825 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.086396504 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.076647627 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.075521623 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.074504608 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075341078 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.087184944 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.088869256 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077649765 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.077588724 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.082701695 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.086606806 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.076244496 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.082842447 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.084084442 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.086262318 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.079152717 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.077683015 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.088308118 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.089175231 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.088359087 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.090873833 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.086362561 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.079443175 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.087506228 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.090867391 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.078651562 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.094801849 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.081384189 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.092287365 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.0910214 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.088091239 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.091502848 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.253594951 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.086464098 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.084832083 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.088470681 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.079062205 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.078303793 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.084310968 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.078794112 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.079869431 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.083491136 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.077723459 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.077826681 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.088731573 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.078387299 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.086373978 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.076212055 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.083978057 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.076373382 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.075428724 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.088294486 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.0754986 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.076628543 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.085020674 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.078731008 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.084217749 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.087578405 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.085415842 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.077401944 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077864189 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.085829514 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.086293277 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.078167571 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.076946495 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.078305735 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.086998172 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.087484952 seconds)
  done (took 21.088911695 seconds)
done (took 44.453589051 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.188465011 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.125529472 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.252470292 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.231206924 seconds)
  done (took 2.577918916 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.112564559 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.073920357 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.118169269 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.129233921 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.075672856 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.112583138 seconds)
  done (took 2.322941121 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.215186503 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.189304423 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.269715041 seconds)
  done (took 2.368490686 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.411257355 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.167423652 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.287612783 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.554617952 seconds)
  done (took 3.249088142 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.152213684 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.145355739 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.087175338 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.157442791 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.093677387 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.071431054 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.158904583 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.079341695 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.107241445 seconds)
  done (took 2.809424407 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.155831521 seconds)
done (took 15.183764921 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.385502794 seconds)
    (2/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.163871258 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.353205164 seconds)
    (4/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.121018712 seconds)
    (5/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.084580834 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.173385604 seconds)
    (7/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.119016395 seconds)
    (8/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.351861617 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.319891599 seconds)
    (10/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.321426837 seconds)
    (11/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.299826287 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.172032759 seconds)
    (13/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.084957316 seconds)
    (14/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.199580757 seconds)
    (15/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.222174001 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.102993842 seconds)
    (17/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.152423141 seconds)
    (18/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075156618 seconds)
    (19/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.259354864 seconds)
    (20/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.11837664 seconds)
    (21/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.235392874 seconds)
    (22/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.085595033 seconds)
    (23/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.08031409 seconds)
    (24/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.285268023 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.090973038 seconds)
    (26/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.078064964 seconds)
    (27/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.225495591 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.113261101 seconds)
    (29/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.25363911 seconds)
    (30/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.087886489 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.138724816 seconds)
    (32/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.321777844 seconds)
    (33/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.085660228 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.208587327 seconds)
    (35/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.081447363 seconds)
    (36/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.091312608 seconds)
    (37/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.100441127 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.336272665 seconds)
    (39/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.086325095 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.140351451 seconds)
    (41/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.164472555 seconds)
    (42/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.15510472 seconds)
    (43/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.087921709 seconds)
    (44/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.231950469 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.108076434 seconds)
    (46/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.085992531 seconds)
    (47/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075038616 seconds)
    (48/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.171521674 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.219447827 seconds)
    (50/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.075750431 seconds)
    (51/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.206771805 seconds)
    (52/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.26932936 seconds)
    (53/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.216145254 seconds)
    (54/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.097422062 seconds)
    (55/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.091058308 seconds)
    (56/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.083279905 seconds)
    (57/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.16818369 seconds)
    (58/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.076981536 seconds)
    (59/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.288955027 seconds)
    (60/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.261968087 seconds)
    (61/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.449609726 seconds)
    (62/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.236240739 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.076605352 seconds)
    (64/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.096766375 seconds)
    (65/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.262996012 seconds)
    (66/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.276870602 seconds)
    (67/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.095691302 seconds)
    (68/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.247669711 seconds)
    (69/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.076614491 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.228671266 seconds)
    (71/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.226258675 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.237560402 seconds)
    (73/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.085918093 seconds)
    (74/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.236118961 seconds)
    (75/341) benchmarking ("sort", Int8, false)...
    done (took 0.167241161 seconds)
    (76/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.16157082 seconds)
    (77/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.085232448 seconds)
    (78/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.093503961 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.077540155 seconds)
    (80/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.094577121 seconds)
    (81/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.075734548 seconds)
    (82/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.07473931 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.094388045 seconds)
    (84/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.189007535 seconds)
    (85/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.176233232 seconds)
    (86/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.094322037 seconds)
    (87/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.164842241 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.234357304 seconds)
    (89/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.083438181 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.147293131 seconds)
    (91/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.073369279 seconds)
    (92/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.080472116 seconds)
    (93/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.094441129 seconds)
    (94/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.230649516 seconds)
    (95/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.102593976 seconds)
    (96/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.079982331 seconds)
    (97/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.085793392 seconds)
    (98/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.085690803 seconds)
    (99/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.07456507 seconds)
    (100/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.098499137 seconds)
    (101/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.207248158 seconds)
    (102/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.100860965 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.103233689 seconds)
    (104/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.191529312 seconds)
    (105/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.093427925 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.082852971 seconds)
    (107/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.085457952 seconds)
    (108/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.198978628 seconds)
    (109/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.076085992 seconds)
    (110/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.083703266 seconds)
    (111/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.191828908 seconds)
    (112/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.165216326 seconds)
    (113/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.075204769 seconds)
    (114/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.271775108 seconds)
    (115/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.104811965 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.082297005 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.10110005 seconds)
    (118/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.20548008 seconds)
    (119/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.083589607 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.130096012 seconds)
    (121/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.084811696 seconds)
    (122/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.088172346 seconds)
    (123/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.074183148 seconds)
    (124/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.088745828 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.099255603 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.074189121 seconds)
    (127/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.079002745 seconds)
    (128/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.156487268 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.08640324 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.081024875 seconds)
    (131/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.144272791 seconds)
    (132/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.07684715 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.099339149 seconds)
    (134/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.077005481 seconds)
    (135/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.077137113 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.072564384 seconds)
    (137/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.081541334 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.274204144 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.084132225 seconds)
    (140/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.078488917 seconds)
    (141/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.08518063 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.140116982 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.08186614 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.085745912 seconds)
    (145/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.075576706 seconds)
    (146/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.085950033 seconds)
    (147/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.076353738 seconds)
    (148/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.101194734 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.170831432 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.317064309 seconds)
    (151/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.106733683 seconds)
    (152/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.07547969 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.085158958 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 0.159977151 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.151382714 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.168790488 seconds)
    (157/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.085285416 seconds)
    (158/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.084459182 seconds)
    (159/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.077019156 seconds)
    (160/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.105302859 seconds)
    (161/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.161807266 seconds)
    (162/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.095293483 seconds)
    (163/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.076645364 seconds)
    (164/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.191226427 seconds)
    (165/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.083203018 seconds)
    (166/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.163868062 seconds)
    (167/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.195300124 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.082844201 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.084774463 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.160103288 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 0.07676424 seconds)
    (172/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.077089675 seconds)
    (173/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.232187255 seconds)
    (174/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.081758074 seconds)
    (175/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.074554872 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.073411346 seconds)
    (177/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.079352628 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.162769175 seconds)
    (179/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.074960397 seconds)
    (180/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.079917371 seconds)
    (181/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.077657215 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.074917188 seconds)
    (183/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.116268305 seconds)
    (184/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.094776845 seconds)
    (185/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.074348244 seconds)
    (186/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.077814823 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.176761792 seconds)
    (188/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.071161789 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.096095063 seconds)
    (190/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.077106073 seconds)
    (191/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.083497235 seconds)
    (192/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.073946981 seconds)
    (193/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.073798025 seconds)
    (194/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.073868243 seconds)
    (195/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.194809471 seconds)
    (196/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.075935278 seconds)
    (197/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.081899417 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.174996753 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.081256406 seconds)
    (200/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.078319067 seconds)
    (201/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.074121604 seconds)
    (202/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.075418138 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.096766537 seconds)
    (204/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.219488231 seconds)
    (205/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.168843692 seconds)
    (206/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.075513391 seconds)
    (207/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.095851898 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.172312523 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.075291734 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.101398496 seconds)
    (211/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.077884301 seconds)
    (212/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07676726 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.074874358 seconds)
    (214/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.158224644 seconds)
    (215/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.075615448 seconds)
    (216/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.245359956 seconds)
    (217/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.0834279 seconds)
    (218/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.090902105 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.081753168 seconds)
    (220/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.073801377 seconds)
    (221/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.075261247 seconds)
    (222/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.075399981 seconds)
    (223/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.080000189 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.080244764 seconds)
    (225/341) benchmarking ("sort", Float32, false)...
    done (took 0.156003672 seconds)
    (226/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.072745664 seconds)
    (227/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.073422166 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.080496671 seconds)
    (229/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.074099945 seconds)
    (230/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.089614562 seconds)
    (231/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.077993789 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.23051773 seconds)
    (233/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.074851901 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.078401896 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.107673379 seconds)
    (236/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.079498442 seconds)
    (237/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.077833246 seconds)
    (238/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.182267514 seconds)
    (239/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.094135622 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.098130195 seconds)
    (241/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.075726734 seconds)
    (242/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.075312374 seconds)
    (243/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.077737553 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.084600664 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.088024448 seconds)
    (246/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.155874404 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.210513941 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.077177766 seconds)
    (249/341) benchmarking ("sort", BigInt, false)...
    done (took 0.300893185 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.095278595 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.095868875 seconds)
    (252/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.083558499 seconds)
    (253/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.076899361 seconds)
    (254/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.27763031 seconds)
    (255/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.090470073 seconds)
    (256/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.076915495 seconds)
    (257/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.077483763 seconds)
    (258/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.075803775 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.083400232 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.082410123 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.076321545 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074725988 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.082181933 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.073435171 seconds)
    (265/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.074966937 seconds)
    (266/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.076618992 seconds)
    (267/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.075431127 seconds)
    (268/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.078031469 seconds)
    (269/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.161645858 seconds)
    (270/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.073845173 seconds)
    (271/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.10676328 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.074965158 seconds)
    (273/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.074801689 seconds)
    (274/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.081921418 seconds)
    (275/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.165995627 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.134792036 seconds)
    (277/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.074277648 seconds)
    (278/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.087522751 seconds)
    (279/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.073747515 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.103087348 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.094326187 seconds)
    (282/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.219273169 seconds)
    (283/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.073670308 seconds)
    (284/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.076860297 seconds)
    (285/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.078177613 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.083385383 seconds)
    (287/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.090525302 seconds)
    (288/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.076457545 seconds)
    (289/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.076343201 seconds)
    (290/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.073252048 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.099380483 seconds)
    (292/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.073324937 seconds)
    (293/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.079362526 seconds)
    (294/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.087356347 seconds)
    (295/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.079831022 seconds)
    (296/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.07989372 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.176832648 seconds)
    (298/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.157964123 seconds)
    (299/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.07441486 seconds)
    (300/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.075428502 seconds)
    (301/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.083037332 seconds)
    (302/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.080334735 seconds)
    (303/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075755047 seconds)
    (304/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.078638754 seconds)
    (305/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.166697718 seconds)
    (306/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.162861624 seconds)
    (307/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.076343782 seconds)
    (308/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.083678943 seconds)
    (309/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.074202585 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.073148287 seconds)
    (311/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.074504747 seconds)
    (312/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.076219584 seconds)
    (313/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.079952037 seconds)
    (314/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.076260114 seconds)
    (315/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.074956818 seconds)
    (316/341) benchmarking ("sort", Float64, false)...
    done (took 0.153177224 seconds)
    (317/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.223265396 seconds)
    (318/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.078666964 seconds)
    (319/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.075311612 seconds)
    (320/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.077299329 seconds)
    (321/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.074612066 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.075145688 seconds)
    (323/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.076157818 seconds)
    (324/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074045673 seconds)
    (325/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.073727151 seconds)
    (326/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.07936762 seconds)
    (327/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.087081564 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.087377849 seconds)
    (329/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.081922294 seconds)
    (330/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.0780752 seconds)
    (331/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.078939772 seconds)
    (332/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.075647017 seconds)
    (333/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.085168097 seconds)
    (334/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.085876706 seconds)
    (335/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.078038158 seconds)
    (336/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.076140386 seconds)
    (337/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.089985107 seconds)
    (338/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.082178668 seconds)
    (339/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075291026 seconds)
    (340/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.07661162 seconds)
    (341/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.080669566 seconds)
  done (took 43.595210446 seconds)
done (took 45.328286403 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.141510545 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.089621209 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.087747568 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.085417479 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.08947819 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.088926684 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.088815581 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.084823737 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.08870531 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.086349881 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.119565009 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.071654321 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.080093694 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.090552819 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.084778016 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.092749038 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.088481303 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.09145572 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.074488467 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.090644033 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.102893103 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.089527983 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.084573729 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.092016436 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.077103867 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.085374599 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.13440719 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.098019842 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.080065362 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.086971711 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.084957284 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.091978655 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.083637626 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.082783816 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.085199653 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.07909209 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.08638835 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.081294593 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.134189496 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.082027525 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.075423269 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.087512844 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.081341762 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.082144696 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.082537923 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.087957279 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.078976513 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.088973873 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.072322958 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.085311503 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.132430343 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.080545415 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.080562817 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.08485619 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.079632503 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.083877939 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07894227 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.086503974 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.078135715 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.085218209 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.083205998 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.083883569 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.075974066 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.085185746 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.083796246 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.08029777 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.072372993 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.078945427 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.073020574 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.072153799 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.072656295 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.083857904 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.08180685 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.082000271 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.074768055 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.07561837 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.073581099 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.08698395 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.081456132 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.083774964 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.074305621 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.079795975 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.079276165 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.074275254 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.079378743 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.085729752 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.073826772 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.074345009 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.071779649 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.091056243 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.083562998 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.076283783 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.088243634 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.082102348 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.080776965 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.07380293 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.075603603 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.081220074 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.084684966 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.076795263 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.073750629 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.082286172 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.082110746 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.086295841 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.076318227 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.081758736 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.082524891 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.075434842 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.087425551 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.08518548 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.084847047 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.089585108 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.08632727 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.092289461 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.078171755 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.075998001 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.086642925 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.24454225 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.078607858 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.079834777 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.078199887 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.082767319 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.074628858 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.074151634 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.081652817 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.081277201 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.075165047 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.075537333 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.075045932 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.0860161 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.084255605 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.073631082 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.074862837 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.086330536 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.08561616 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.074533418 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.075313868 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.085127925 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.076209094 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.081608111 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.079302908 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.082041642 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.072355267 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.075699138 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.075134986 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.075944785 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.074388846 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.080603794 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.080407273 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.075374858 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.084721757 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.080987376 seconds)
done (took 14.709927034 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.075492597 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.121485023 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.126129534 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.122188791 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.089649104 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.078174381 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.077743745 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.096185563 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.078026436 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.102510051 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.10478841 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.102388952 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.144217945 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.075183691 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.075289944 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.074770815 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.072776323 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.088621425 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.129361528 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.104118829 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.118844378 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.076746685 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.091224737 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.097186143 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.08949448 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.095203678 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.077290388 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.075341178 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.07854175 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.095304109 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.107492564 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.076135702 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.078567362 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.09854888 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.095023185 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.0870635 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.077848338 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.082437145 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.077017403 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.076047537 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.077190697 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.094054164 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.081710016 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.080548554 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.07379974 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.073426248 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.073155163 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.08144986 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.087972911 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07775635 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.085650837 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.089792564 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.074003399 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.072766019 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.070846358 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.082242987 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.074608182 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.075559234 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.076859549 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.07571765 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.074888578 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.076116013 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.080069382 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.088166476 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.080385452 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.082704876 seconds)
  done (took 7.527077406 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.092093533 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.106279778 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.091134301 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.091030114 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.077087318 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.077764192 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.077303836 seconds)
  done (took 2.494610832 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.076046944 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119316416 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.122284467 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.121622497 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.131839036 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.120684894 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.074814471 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.109071077 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.0738493 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.116619052 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.133834368 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.125024934 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.077305345 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.087630445 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.076924591 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.126587202 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.075320338 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.082599551 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.122421853 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.127768379 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.081285075 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.110961261 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.091173478 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.077455297 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.124279601 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.115517288 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.07714065 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.075741362 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.07719836 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.076209812 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.076158035 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.101509749 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.117687561 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.090759026 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.076941096 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.07482781 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.118207528 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.077766207 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.11497603 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.082475529 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.115094486 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.077204767 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.076620866 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.076717757 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.077458157 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.120053932 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.073362689 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.075656083 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.077118958 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.120820915 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.075195633 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.118109635 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.078178512 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.080131478 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.085091291 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.084005121 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.083955403 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.076377476 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.121609115 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.087741937 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.076841955 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.132662818 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.130443937 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.114810408 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.128072587 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.084270482 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.120572267 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.118515011 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.076105804 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.076999909 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.078295044 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.131085525 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.07995948 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.077994018 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.081422673 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.085488445 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.123162047 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.13768331 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.137993241 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.091043756 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.080818827 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.077249766 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.255956604 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.133781851 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.081509474 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.077340997 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.076441478 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.075307295 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.080886143 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.080413298 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.080351264 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.074811396 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.087758042 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.079652797 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.077963688 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.123451962 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.074651932 seconds)
  done (took 11.255677651 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.0777491 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.078454932 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.076605476 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.074798981 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.076121084 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07750977 seconds)
  done (took 2.351762998 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.102275835 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.076400686 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.089534702 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.076152078 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.099118197 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.120593759 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.11968639 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076791028 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.09150885 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.086786024 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.118821693 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.122250698 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.122002712 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.077038408 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.121936719 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.078640087 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.120641867 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.078189228 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.085777616 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.076525776 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.090910567 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.078187039 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.077195364 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.129668537 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.079271526 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.077971702 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.077880368 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.096493083 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.087831269 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.077353261 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.074104843 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.078743973 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.085673398 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.078650061 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.123976956 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.086726009 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078155474 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.083059087 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.080376956 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07940312 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.124179054 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.079065097 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.081917127 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.082922381 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.079056005 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.085935851 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.081737997 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.081892267 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.123037629 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.083174529 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.080958804 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.077474995 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.078886912 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.080784569 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.086579143 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.076974974 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.082244654 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.121269508 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.077451714 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.084682242 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.074977214 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.077803303 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.076317117 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.080121031 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.083825809 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.083065151 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.087634211 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.079009176 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07776515 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.07527701 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.078874041 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.076515172 seconds)
  done (took 8.209564336 seconds)
done (took 33.669226159 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.563908985 seconds)
  done (took 2.421214908 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.036134798 seconds)
  done (took 2.905673139 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.432348684 seconds)
  done (took 12.315728368 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.411091347 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.500253804 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.828535996 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.152701771 seconds)
  done (took 3.833655247 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.914153432 seconds)
  done (took 2.841482323 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.261170223 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.246239858 seconds)
  done (took 2.39200438 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.479834702 seconds)
  done (took 2.356550754 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.463348849 seconds)
  done (took 3.373736556 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.254887727 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.179317451 seconds)
  done (took 2.358813271 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.688717335 seconds)
  done (took 2.596713496 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.153754038 seconds)
  done (took 7.041519181 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.376765898 seconds)
  done (took 2.336527546 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.256295604 seconds)
  done (took 2.172795636 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.731562453 seconds)
  done (took 4.630406838 seconds)
done (took 55.469894273 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.096186746 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.097572856 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.095660732 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.089744999 seconds)
  done (took 2.264261223 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.083025766 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.080615268 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.082801465 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.083568399 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.082028028 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.081258817 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.081911612 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.078349899 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.078280241 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.076700235 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.077400503 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07893109 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.081633333 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.080245067 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.079538403 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.082558124 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07900393 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.078610662 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.083082513 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.076605664 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.081539802 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.079029559 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.077720418 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.078786099 seconds)
  done (took 3.797711122 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.087791454 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.081831286 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.085827168 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.079740687 seconds)
  done (took 2.248794835 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.082713914 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.083700702 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.091442304 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.097432109 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.084030678 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.086580274 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.092878119 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.093971214 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.075264288 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.095569412 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.075236862 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.075713334 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.07366672 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.094866756 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.094130651 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.072287888 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.072967137 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.087847527 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.090968105 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.090210777 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.079468169 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.075695716 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.083876942 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.085235361 seconds)
  done (took 3.931272789 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.093420613 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.073924735 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.091703196 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.100229874 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.103894601 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.07418573 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.091710499 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.106640971 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.145575712 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.075707426 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.08055972 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.072882858 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.113192592 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.072756107 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.089095541 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.122807472 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.127844297 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.079153697 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.110080956 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.072387756 seconds)
  done (took 3.819647077 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.088059274 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.079507171 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.081045885 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.075652316 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.087398803 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.081357734 seconds)
  done (took 2.431466833 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.076596095 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.073802866 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.075153724 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.081958747 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.077441587 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.077844222 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.076486311 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.074498592 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.074035897 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.074557028 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.073745912 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.075606219 seconds)
  done (took 2.824486102 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.23998927 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.082860645 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.084047556 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.075352658 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.077530688 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.076071671 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.091365284 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.078897302 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.101231567 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.07686848 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.078137849 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.080268499 seconds)
  done (took 3.070503961 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.113519324 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119816693 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154895349 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126302361 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12906686 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105447292 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.178304863 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.103957837 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.174385457 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.149192451 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131684986 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104325458 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09911715 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.078861999 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112101183 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133581979 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158315151 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083903459 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129966381 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.229331659 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148060801 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.15275127 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159306092 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133535323 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101355305 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.161964005 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107803707 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113601917 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138495389 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141755646 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131543539 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.110129481 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.080989114 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.079383625 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165753766 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.12036353 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132710608 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.103784221 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11798527 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102568595 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124580654 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.080531115 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.096830874 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.128333442 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098537711 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151559262 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.10567658 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130170691 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094569127 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.335189586 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137852929 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146917355 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095782168 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117650137 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146997674 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123029877 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147706027 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119480837 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092463162 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.128872781 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.1151619 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108016368 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117874624 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090401659 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.19068961 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100608772 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.125489297 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123361597 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.10635519 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105916517 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.116220725 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.151189078 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14121359 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.142492788 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154053157 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104212459 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134123742 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.111868717 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.142204038 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117557537 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.084012956 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.138807739 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.145999933 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111179238 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11343606 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147709977 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105604715 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085575791 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.113244211 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.134879589 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093096774 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.130635557 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091149668 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.122968494 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151984751 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109467763 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12756645 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139887192 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091575546 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.350664231 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124178609 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088387166 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.127924532 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123249573 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170840824 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105399111 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.086299658 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.109915957 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112399982 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.168665424 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119932755 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089951795 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121729278 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152013304 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107038081 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.235979466 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109084578 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.154654598 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122007083 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099465344 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085120609 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.102559972 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128804529 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123214162 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127213454 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106094375 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.095987684 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100795182 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131713789 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105021382 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089386047 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124686149 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.110333294 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.083631362 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098129881 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.088747639 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159263013 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.088848406 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152380437 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143440244 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.088874325 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119516915 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107149946 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119129322 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.111128999 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134152274 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154574247 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.129274604 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102651204 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.107768113 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120952478 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.166110464 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.145558998 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.291383344 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.086999169 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111379047 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122564084 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106584509 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136230737 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106079449 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1193308 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116724606 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.155264644 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.155256367 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110326105 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112794225 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11781327 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.135223202 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085902337 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173001487 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117850697 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135334606 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10023108 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.155855973 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.126189174 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100913558 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098342019 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114497803 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.119307273 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12157327 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159908079 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.108875295 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.08297816 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105727935 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.162682044 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089127701 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124399072 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.105328933 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.103970051 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131958665 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.104534877 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091707504 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.078837832 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144079731 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.179935339 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.081851855 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127617291 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.122942231 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116953963 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.138484681 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.080373493 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134617388 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.156133826 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135674689 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166549533 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.369390001 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12944996 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129864186 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.122718965 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.118476862 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09181786 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.13975437 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.148436886 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10592636 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106884041 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148480245 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134105398 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.15199964 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.129482331 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130772164 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.118005645 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118993374 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114064731 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.115425145 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.157559893 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137272169 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.139134845 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09196231 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115657933 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128820547 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147625931 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090847572 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.151374565 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.093604625 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129156736 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.089693976 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138970911 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.085306299 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.118720697 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086960987 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11261305 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.081105356 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.085747293 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.161393467 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.129506318 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118435572 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110688429 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.154807075 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.155066532 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.091950178 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124607298 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13123318 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.116874373 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132743391 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123296306 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.101503208 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.293745344 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122966612 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094517312 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.091841521 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128656719 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103240419 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135216763 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091811476 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083998741 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150873258 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116196065 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103710442 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084154691 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118550778 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.133650763 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104224194 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096813886 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127121747 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117834623 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15355104 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.099122419 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.107726731 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.133501488 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088013901 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.105020642 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.078771164 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.093892639 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.084788941 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.138752958 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083297611 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125714645 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.075863834 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.143182669 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094801527 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.105450841 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11583335 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122017571 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142918319 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107158327 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.155728621 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100556187 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135402795 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121097818 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105725883 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097145866 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11460548 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111069584 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133667332 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.107893791 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137945381 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16354566 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118957538 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.161241849 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101470693 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139456275 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126618132 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147151184 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.306848314 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.183253055 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154481989 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12203224 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120726316 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085143585 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107814234 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117967876 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.124540127 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.188605825 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136592307 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.081069391 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114292731 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104855545 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119830926 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111502317 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091084432 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157621515 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112994417 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.099714108 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122732266 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.100992721 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11353955 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08340284 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11163151 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.118314097 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106629377 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109396741 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128349585 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140976247 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124421636 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.155030553 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.112763508 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.104664303 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.134273193 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128273858 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127571916 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097948855 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097966113 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.155227732 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.135003343 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.138756334 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.11290468 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121396339 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125603875 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113900108 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1424471 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122405569 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.145203251 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091937804 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.090247481 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.080870673 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.083217672 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.319128382 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118267641 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123660335 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111276504 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.081529892 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114899485 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116228329 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082497507 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097574658 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103181812 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106994946 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.099636512 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117148717 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.124933581 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.102497898 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.114437849 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10779868 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158043556 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.111010012 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0962696 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159121409 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161647522 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098745852 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104310003 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.082871552 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089257132 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121896475 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162524388 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16553093 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.090027491 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099268701 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.097264365 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099228591 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.082280416 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.101143417 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.100701463 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121149335 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110808685 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.125632591 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119351184 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084816179 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116862155 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110397528 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104031506 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.120264406 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136830969 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142909538 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.157062425 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128422598 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122771549 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086549608 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.093415093 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088040148 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088208921 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113647351 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.089707923 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086814422 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.163483309 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.289499269 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120351444 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120554472 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09903337 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085425963 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149834111 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.080006906 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148938982 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.080982423 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093374728 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.094729565 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08988486 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104056439 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149919066 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120357572 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123424255 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121670777 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117565901 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17291242 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170165573 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08954266 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.15506438 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084660177 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087037313 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087311354 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123567126 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099288109 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125856639 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155565234 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103315518 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112886614 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086040235 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.156667824 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.111503434 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.117159341 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097637649 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091421159 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159743053 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088791724 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.089158675 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099236403 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123767626 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.082861496 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117567057 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098086953 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092469223 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.184091676 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.727694763 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104279604 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.088754049 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110116151 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.158174093 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.151201589 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112216235 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124737245 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.138366472 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118741812 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110457088 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124789708 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.20700996 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086343659 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1110054 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.12231514 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11460614 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119491005 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.116176828 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.104457181 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.10731242 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.100199068 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092255191 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123168374 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101205133 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111754265 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123592432 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097046593 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.103150372 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.153106933 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.120487075 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.097031073 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102841272 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.129824923 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104190031 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123057164 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.083670061 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131189259 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103571391 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139920843 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.114923774 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126451415 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143760564 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109084032 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.160545392 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.126970198 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.141244902 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103348804 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.093738454 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150378166 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.105757965 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092814194 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173617043 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.113991571 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.105179193 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120558764 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.111749781 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132680242 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140087305 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132980368 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11342059 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091981848 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118332383 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.119079843 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098902676 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091756601 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.44899989 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.088816597 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121658732 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098981256 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102282808 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131958222 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100672228 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116494075 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.119063872 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138425557 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103035781 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118605724 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127183072 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104060059 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12564183 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.119240912 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.146478466 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.197049201 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141810284 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.147670478 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153469741 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.091337922 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.087373214 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.080327603 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133631323 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095529082 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.106406558 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092116638 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.152986381 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.095002175 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124876022 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.265657644 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091455182 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108479242 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11005787 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.079517894 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092480132 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118741628 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098189909 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091022623 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132531084 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094740047 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.140764161 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123156401 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112542215 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108665856 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090814336 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124504472 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.118105328 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.148207133 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109143277 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.087085855 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138997351 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.118300667 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153849727 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.082807943 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090644297 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.144740222 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119419799 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.330511345 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088348646 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163373352 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.158982958 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114734099 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148575401 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081000042 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101188624 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102590062 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.141842138 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092530034 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12145609 seconds)
  done (took 77.050473981 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.191241208 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.184871298 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.128204994 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.144223254 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299327792 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.310074 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.162488308 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.131558085 seconds)
  done (took 3.675717816 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.081131448 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.091590114 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.090459995 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.275777136 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.114522055 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.076349874 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.081696828 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.095111992 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.080941904 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.0787826 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.120077215 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.075368638 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.080116 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.586061636 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.074045999 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.081830389 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.079242433 seconds)
  done (took 4.270900269 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.376405276 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.699814083 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.450503934 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.757378834 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.174687009 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.737461891 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.084191775 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.09397952 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.818280169 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.433020531 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.168145029 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.100563593 seconds)
  done (took 22.010817983 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.087369387 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.130690932 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.131686236 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.085948655 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.085250514 seconds)
  done (took 2.59892932 seconds)
done (took 135.935300481 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.096849659 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.190761492 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.078048388 seconds)
  done (took 2.432759037 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.132111666 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.133325011 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.133507721 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.133651805 seconds)
  done (took 2.659978156 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.087076243 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.088160844 seconds)
  done (took 2.330474912 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.248846013 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.232162374 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.098553711 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.094706044 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.090184277 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.090470907 seconds)
  done (took 2.419795734 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.08125781 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.080123563 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.080382946 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.079503178 seconds)
  done (took 2.457374554 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.185873614 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.074985274 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.079976416 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.081623649 seconds)
  done (took 2.530968926 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.096191046 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.098079605 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.129112789 seconds)
  done (took 2.450710329 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.09265023 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.093441181 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.088899723 seconds)
  done (took 2.369664066 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.120820484 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.108913761 seconds)
  done (took 2.37451923 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.087711631 seconds)
  done (took 2.206815112 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.103773418 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.110608835 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.200020089 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.165952804 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.205346961 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.189689002 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.088446612 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.088346362 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.083963269 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.081565151 seconds)
  done (took 3.425217702 seconds)
done (took 30.492080898 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.095091494 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.208977642 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.328726647 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.099349159 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.667173125 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.325664283 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.750155721 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.101952743 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114733799 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07828176 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.09723093 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.643088045 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.748390054 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.158199103 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.727018086 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.148056239 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.573092583 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.082042479 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.079765139 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.080710002 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.731762205 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.077218086 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.078331682 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07834787 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.569299919 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.344717026 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07952184 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.148777915 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.078432052 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.080876957 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.325328253 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.078011776 seconds)
  done (took 14.863096843 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086923909 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.183133167 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.082638257 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.094020189 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.081391612 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.081323937 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.080505982 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.076703693 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.127199812 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.076319193 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.096549305 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.075804091 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.083428362 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.079520757 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.098877743 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.077714435 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.080068775 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.08017811 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.079112781 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.079294376 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.10020553 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.079724153 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.079523907 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.076349351 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.077595476 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.092807568 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.078861606 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.076151432 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.075550271 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.080985133 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.081874582 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.077286004 seconds)
  done (took 4.909785394 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.139489759 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.143378378 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.080783539 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.118031623 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.130499159 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.079231712 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.171106769 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.106083832 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.132785642 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.077973431 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.096015817 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.077283859 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.116470064 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.079622775 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.098711585 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.076207533 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.078870876 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077900071 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.078391264 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.077960553 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.098823919 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.077865479 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.078321326 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.078017388 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.077903669 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.094256046 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.077296789 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.077381204 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07610658 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.080907083 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.082617679 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.080950096 seconds)
  done (took 5.14982491 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07802418 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.081448805 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.088536411 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.089109876 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.075355095 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.077638065 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.079242582 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.077926157 seconds)
  done (took 2.775995782 seconds)
done (took 29.856586399 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.090622304 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.077274639 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.080603054 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.096016675 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.083350813 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.122527618 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.074541468 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.085100539 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.081586412 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.081030782 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.081530868 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.074413253 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.080643118 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.075139528 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.080783822 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.074453354 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.122379391 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.076334059 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.119098726 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.123893963 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.07476086 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.081457412 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.082266099 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.123697137 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.122740748 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.123546039 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.08384252 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.081547299 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.076195075 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.079262551 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.189127649 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.205004246 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.085801028 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.129910187 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.072681701 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.074576776 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.079676033 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.07814119 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.125856956 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.085731734 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.077293524 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.083930133 seconds)
  done (took 6.13587931 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.20943237 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.21242228 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.206514395 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.091394009 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.104623543 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.092577172 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.215737136 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.086613851 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.083624116 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.207632209 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.080127699 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.086221286 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.090029509 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080621762 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.085558986 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.0796605 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.086974634 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.079543471 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083694953 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.085053605 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.213191945 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.081737984 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.089392866 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.086054584 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.080667732 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.087483592 seconds)
  done (took 5.142980536 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.082416823 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09824152 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.104149795 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.164417657 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.12412656 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.095064213 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.094131629 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.103747303 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.113511484 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.076508286 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.081463116 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.106229664 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.107929169 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.085038067 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.118585483 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.095729874 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.092260832 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.081144187 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.085925316 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.116312163 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.10156765 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.0971579 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.11441055 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.102368512 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.078157653 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.089948796 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.085941301 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.096350193 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.084968776 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.091044852 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.081752435 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.083335981 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.079885457 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.092576497 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.082622836 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.076619272 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.100823834 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.09260451 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.093491244 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.120084214 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.088580452 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.078915296 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.106785821 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.205524173 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.074680473 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.078745097 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.081197076 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.090705787 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.079004265 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.111795665 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.097694036 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.077558546 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.099756283 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.08114644 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.081257304 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.098351169 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.078147448 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.078084914 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.089387515 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.083819068 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.099475444 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.082841029 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.100317501 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.076697378 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.088463745 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.079220689 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.080149747 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.075256718 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.114224006 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085551319 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.134225442 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.079701425 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.07430551 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.091954882 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.088526603 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.083044103 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.073576688 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.096926314 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.092825615 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.08228359 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08853411 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.079335355 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.082561939 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.116611039 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.076017609 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.075532379 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.075077202 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.080152107 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.082229647 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.0797385 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093996813 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.07799371 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.08095031 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.095904419 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.079426695 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.07911241 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.081008811 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.077835861 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.077000124 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087953306 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.080979967 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.079866042 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.092626748 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.079826136 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.080532768 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.096365137 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.090462882 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.078714065 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.077732225 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.079198666 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.077765152 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.082221342 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.08225064 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.080209156 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.082606898 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.085628338 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.085197557 seconds)
  done (took 12.762779804 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.224168837 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.214300016 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.077859532 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.20936048 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.088763358 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.138121631 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.214897595 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.14547305 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.078258845 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.076824619 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.075955607 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.15517349 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.145112235 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.159818873 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.127327228 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.079483684 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.106626404 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.158981986 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.216933142 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.211442904 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.106365067 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.0876046 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.081765983 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.080620033 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07945754 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.088444612 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.096457731 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.08740853 seconds)
  done (took 5.849658866 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.085881639 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.097655445 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.083873996 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.106534528 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.096271164 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.077200833 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.078308954 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.08066019 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.095503803 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.081791753 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.076858198 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.081295945 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.082424419 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.080227906 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.07926475 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.085779967 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.086033499 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.075047035 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.081336333 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.079519831 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.088195228 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.170133172 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.081838305 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.079150223 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.081261097 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.078712413 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.083663126 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.083769488 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.076722011 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.111583903 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.074404282 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.083617043 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.095489802 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.079312388 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.077991196 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.079148028 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.07622806 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.075512608 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.0778824 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.076546435 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.075652342 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.084936788 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.076637099 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.082677977 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.093315517 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.088386678 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.079815527 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.079203218 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.079331485 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.074232482 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.081078288 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.079430424 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.079290577 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.085925535 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.07902465 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07806363 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.075343744 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.107815204 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.081171456 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.075811617 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.076482184 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.074471737 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.078447169 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.086275315 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.09661083 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.079393208 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.075604309 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.077491369 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.084920405 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.092187076 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.077589987 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.083062761 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.073877859 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.078001253 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.079187647 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.080176234 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.081268805 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.077160793 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.078737448 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.078970992 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.0797624 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.077900397 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.078306036 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.080549836 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.07640266 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.077031178 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.08042014 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.080059031 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.083029432 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.076322759 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.081009697 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.080932975 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.07495471 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.082260145 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.084626681 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.079530903 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.097857684 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.086532421 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.076173057 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.075798802 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.093328744 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.079599798 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.076442664 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.081768992 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.082564538 seconds)
  done (took 10.897456826 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.110219267 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.081501573 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.099801564 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.114624851 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.088910848 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.081436548 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.092507309 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.079291264 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.09916321 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.074064292 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.085571732 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.073735184 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.094744462 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.089157197 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.080843853 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.089649028 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.079267342 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.098499007 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.091009472 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.072795711 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.082420477 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.679087152 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.088328608 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.093675045 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.094724661 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.098595793 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.089258253 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.081839156 seconds)
  done (took 5.31562416 seconds)
done (took 48.264665455 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.242572535 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.527142885 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.234102474 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.811243369 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.309830275 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.454389938 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.284114627 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.230120704 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.025053243 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.322441158 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 4.039734211 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.902669637 seconds)
done (took 73.67001692 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.274627818 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.471478425 seconds)
    (2/2) benchmarking "String"...
    done (took 2.569119261 seconds)
  done (took 7.25153777 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.689242636 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.248534439 seconds)
    (3/3) benchmarking "different"...
    done (took 2.289837085 seconds)
  done (took 9.396542012 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.522382968 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.862298749 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.503857887 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.21406167 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.237462974 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.754901268 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.444119417 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.890692669 seconds)
  done (took 36.092259029 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.278697658 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.520675485 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.637561827 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.71437644 seconds)
  done (took 23.411239677 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.690389214 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.629262342 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.622035809 seconds)
    (4/4) benchmarking "different"...
    done (took 2.953414429 seconds)
  done (took 13.174246149 seconds)
done (took 102.502858938 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.220905674 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.769397497 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.304092206 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.439563025 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.316074276 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.342817096 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.257152512 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.266373973 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.245972582 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.224784512 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.242684227 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.269249467 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.333115428 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.271781844 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.256769893 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.257138553 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.694817679 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.248260814 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.280052788 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.345484777 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.604402903 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.280479412 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.257801102 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.302880257 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.824077013 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.275731886 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.633590067 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.314036213 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 3.344932335 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.243522602 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.237998733 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.25929156 seconds)
  done (took 221.317032402 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.264244787 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 5.034860719 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 5.045407941 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.233440586 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.646713733 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.58688015 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.104896253 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.643959732 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.252572456 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.277389478 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.226371574 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.24179741 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.250446354 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.757486705 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.267103434 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.314748725 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.130071974 seconds)
    (18/36) benchmarking "symv"...
    done (took 4.049432073 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.29358646 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.149270617 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.237877318 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.675584439 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.695384379 seconds)
    (24/36) benchmarking "symv!"...
    done (took 4.070025018 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.230321007 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.244253762 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.238141636 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.260004259 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.737050401 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 4.106932483 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.20672255 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.279798026 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.684646415 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.451226836 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.255191215 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.222055236 seconds)
  done (took 194.527760741 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.454395505 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.25836005 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.215891618 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.257024732 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.368824726 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.324378733 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.166099599 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.270349785 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.214681376 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.23989141 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.250866951 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.23698215 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.34531719 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.576072389 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.270084415 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.244736368 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.224459821 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.407194958 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.237511433 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.23247981 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.236187991 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.351616145 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.619580358 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.359113115 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.249246043 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.283957166 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.394332849 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.250017799 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.259207141 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.238872898 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.343851381 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.240468004 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.378114349 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.348184931 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.231889799 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.280538316 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.242070013 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.608993648 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.247394392 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.265526701 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.293294959 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.294640266 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.27662337 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.516114933 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.339581243 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.238809571 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.258766879 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.685585864 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.821534431 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.246644359 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.245140077 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.258137398 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.228156297 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.231629171 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.43257776 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.240760861 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.275082348 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 12.162349838 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.245195281 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.250950458 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.241927491 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.242632047 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.262730953 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.235137401 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.306479286 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.969120524 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.873370566 seconds)
    (67/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.227917401 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.65067672 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.063262581 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.254713163 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 13.616480779 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.299870882 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.289277029 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.417689195 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.229261605 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.230079965 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.212386428 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.238929697 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.256035598 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.143937835 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.242271948 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.350561026 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.287599 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.255031298 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.74994331 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.386236017 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.44995883 seconds)
    (88/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.21477114 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.236069376 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.317025184 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.263746326 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.249765766 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.295704334 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.475193495 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.236908759 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.252326916 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.238525924 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 6.134009117 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.254894504 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.608084983 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.59828178 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.356981172 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.673699236 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.250623576 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.276256696 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.264457551 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.275439634 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.246481554 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.232428471 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.268947205 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.255829293 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.272966731 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.243522187 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.25596788 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.266928095 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.234296258 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.249083021 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.27255301 seconds)
  done (took 465.761541144 seconds)
done (took 886.355339736 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.948346373 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 3.060387032 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.875584314 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.92495709 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.87322314 seconds)
  done (took 16.875242383 seconds)
done (took 19.114425043 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.270838301 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.30234063 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.304107858 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.311940018 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.284588735 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.270006464 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.322722395 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.296307203 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.282992032 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.258533947 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.274298048 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.258572109 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.264499495 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.29273756 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.285463017 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.278300706 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.260417195 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.2861089 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.264547832 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.282962423 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.266782621 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.280162848 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.250705411 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.264760685 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.297488376 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.260776339 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.270621427 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.280381838 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.315076916 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.299326304 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.31235336 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.285354477 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.289723097 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.250553234 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.295538241 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.274911558 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.31630153 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.315147215 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.28074194 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.304769651 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.274701838 seconds)
  done (took 95.837203497 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.308734875 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.475787751 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.56482276 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.357750763 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.318395483 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.592464009 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.381424777 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.430375626 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.469432144 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.593817723 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.611662263 seconds)
  done (took 29.33626004 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.337931741 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.526798705 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.634212354 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.360730265 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.328201052 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.611396012 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.353517332 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.481405889 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.477977232 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.629890476 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.627735136 seconds)
  done (took 29.578578338 seconds)
done (took 156.93373514 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.842807123 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.321702337 seconds)
  done (took 7.375433165 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.272870894 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.268712719 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.469597638 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.28877108 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.244566044 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.260331678 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.234257912 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.281233768 seconds)
  done (took 20.510624025 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.249836507 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.25755038 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.281453111 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.252119369 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.257484522 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.266476296 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.270792246 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.230452612 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.279813929 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.274784933 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.244218167 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.296611435 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.245211911 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.236369552 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.270599971 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.262864709 seconds)
  done (took 38.38465137 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.268645985 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.271950768 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.262864102 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.239211472 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.263708044 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.226670604 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.266530843 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.248576481 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.257301391 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.288666521 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.245757747 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.259532974 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.248559099 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.254271209 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.247368302 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.256084535 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.25377356 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.263954808 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.246902813 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.271198264 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.236036032 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.249211681 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.274969868 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.280901011 seconds)
  done (took 56.359012005 seconds)
done (took 124.8461844 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.868425837 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.282921829 seconds)
  done (took 10.357904095 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.223031323 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.248643632 seconds)
  done (took 6.726450678 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.242651393 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.27183354 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.269064344 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.290691215 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.286967193 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.271665372 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.261263617 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.255889905 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.276069356 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.276618097 seconds)
  done (took 24.854209152 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.258445446 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.275459776 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.266787528 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.260674414 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.263358238 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.231207881 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.26620492 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.235287383 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.263108569 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.260408031 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.235546248 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.267724875 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.244026865 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.231629823 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.250455976 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.248725438 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.257201431 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.291233263 seconds)
  done (took 42.801835758 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.272109998 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.252774793 seconds)
  done (took 6.729717264 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.254885194 seconds)
    (2/7) benchmarking "second"...
    done (took 2.210675898 seconds)
    (3/7) benchmarking "month"...
    done (took 2.284533709 seconds)
    (4/7) benchmarking "year"...
    done (took 2.219883442 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.289346915 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.253301867 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.197977834 seconds)
  done (took 17.896578562 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.249560943 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.448804906 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.486436478 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.756484735 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.24935706 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.235585735 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.863284937 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.25867541 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.223576378 seconds)
  done (took 24.001767367 seconds)
done (took 135.600707717 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 6.077409364 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.293120909 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.885191879 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.370122199 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.292134229 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.590618364 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.280348824 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.846697318 seconds)
done (took 47.866940269 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.32996539 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.323856913 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.377260122 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.388285331 seconds)
  done (took 24.278861413 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.317185203 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 4.015782439 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.360857675 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.428001481 seconds)
  done (took 25.393043716 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.785411181 seconds)
    (2/2) benchmarking "read"...
    done (took 2.769707166 seconds)
  done (took 7.763141063 seconds)
done (took 67.01695731 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.270068943 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.266487323 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.248938915 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.25515032 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.267174464 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.299799974 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.280602098 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.265768564 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.276981311 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.250309104 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.252090061 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.267252796 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.239884794 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.286793829 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.264881378 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.280977007 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.278851072 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.2800968 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.288555011 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.273424659 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.266959464 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.250972343 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.291997532 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.257856126 seconds)
  done (took 56.6477064 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.301721526 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.25968171 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.272973912 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.239960642 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.249493093 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.304913942 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.309136781 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.286689933 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.259808227 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.266668605 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.306347567 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.269086814 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.277913045 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.281998423 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.273613854 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.309047565 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.288752688 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.262911319 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.241356709 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.250285917 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.277280525 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.290752933 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.273007676 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.273818378 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.272237333 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.247048821 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.281713798 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.247541436 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.239912073 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.270646598 seconds)
  done (took 70.38606577 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.240107331 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.266398006 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.296622309 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.319479071 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.265570468 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.264548425 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.246051075 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.25768809 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.289392771 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.29876424 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.271008833 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.263470834 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.276502328 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.296514799 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.262880963 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.276580714 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.295919596 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.295060999 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.314704185 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.276871235 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.261315671 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.280678575 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.258879196 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.278971021 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.241107982 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.252386317 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.265805962 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.261669451 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.302260584 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.26835157 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.278657499 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.278878336 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.302156911 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.310520629 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.219103047 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.292152015 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.280917874 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.270779157 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.32180806 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.298164155 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.277929819 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.273619572 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.285176502 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.283326217 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.266191784 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.274127347 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.271344652 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.284325924 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.277005545 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.250256832 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.271182075 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.282481335 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.27750797 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.284123522 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.276396657 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.26522317 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.26627152 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.256883748 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.270436849 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.294018216 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.25228178 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.289782861 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.306428683 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.253012696 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.285408405 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.26973562 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.290056792 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.293293498 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.259564911 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.28486188 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.283406617 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.292324698 seconds)
  done (took 166.120445127 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.281481421 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.277122393 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.267211062 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.280732663 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.2785472 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.25903964 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.293623551 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.268221723 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.317379166 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.280100887 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.275088406 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.328585532 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.261262876 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.285474893 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.275775309 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.273995428 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.267161896 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.260817435 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.280932596 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.292213286 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.268295054 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.291602927 seconds)
  done (took 52.341520949 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.272534467 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.28196383 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.278276464 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.233380527 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.259337029 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.277027166 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.261431411 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.257200734 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.277036019 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.26490408 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.305371113 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.311561895 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.316502426 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.308861959 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.268088911 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.284449902 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.293787587 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.307721968 seconds)
  done (took 43.271102532 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.247527468 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.287183217 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.275293738 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.299892693 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.283410664 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.262851932 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.28477421 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.268015334 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.302133833 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.259043499 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.284530018 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.262538013 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.267418369 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.276328672 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.29155402 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.274501304 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.270574214 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.279394427 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.264959409 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.313260353 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.296140178 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.318185511 seconds)
  done (took 52.406895633 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.27317404 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.278241645 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.30356474 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.300971925 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.312078112 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.290888071 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.274761908 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.286099655 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.29209657 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.275263384 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.283427787 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.304309115 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.279860951 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.293159617 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.241473702 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.240161466 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.229319842 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.214385877 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.227864117 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.207099373 seconds)
  done (took 47.636189612 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.264439819 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.275099041 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.261806584 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.250847944 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.253267756 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.243669423 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.270544911 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.258709167 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.244683743 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.241175566 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.255901065 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.270766057 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.242482493 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.257042649 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.243932221 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.24806846 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.265884335 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.248323007 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.241900289 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.254006092 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.252715425 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.27339506 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.236182717 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.234398615 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.245880668 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.246004255 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.233643331 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.265770739 seconds)
  done (took 65.257261014 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.241897207 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.251968955 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.252678156 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.25927738 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.25292755 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.248090591 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.248208338 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.253213513 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.255771978 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.264954495 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.232600729 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.264329175 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.25864842 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.24409373 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.253653032 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.242772609 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.247219342 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.261090593 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.242016667 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.230722756 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.226262864 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.232910976 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.250020098 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.221701642 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.246237394 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.257718774 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.278415107 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.260366548 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.266188642 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.259953581 seconds)
  done (took 69.701156509 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.279913656 seconds)
    (2/2) benchmarking "in"...
    done (took 2.285170801 seconds)
  done (took 6.746132642 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.258834928 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.249788451 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.255907846 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.257451283 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.245040306 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.267935835 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.264993917 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.232322547 seconds)
  done (took 20.197215653 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.244743116 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.291160134 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.258984598 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.259416311 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.282508308 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.268880465 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.253698434 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.253533758 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.292056241 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.287343735 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.314453895 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.270239656 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.279019758 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.256104578 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.290713324 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.281068562 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.271490825 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.280401852 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.277996252 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.248001224 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.275210085 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.263659279 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.258225359 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.267528652 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.273242835 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.253544794 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.273563157 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.265525313 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.265074219 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.243395021 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.266009151 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.254437362 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.25149874 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.260359137 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.274245587 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.301770273 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.308890855 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.262949385 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.271182185 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.273758099 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.278798879 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.301003787 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.294345844 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.289323585 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.280070644 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.274922432 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.290696686 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.278334154 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.289502862 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.286879013 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.280428453 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.286217938 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.279221277 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.26877983 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.261912916 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.287961607 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.290813997 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.243607822 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.251528005 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.252390328 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.282676447 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.312920256 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.315552641 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.29196937 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.274855288 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.275311184 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.307745866 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.292437734 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.285229828 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.270004181 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.292889838 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.25484646 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.278378666 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.280827488 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.303602436 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.275501492 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.280518283 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.274509434 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.283260927 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.258305303 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.28605708 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.268803589 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.283576693 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.270688448 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.293741261 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.299288985 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.253428653 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.283627445 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.288381606 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.275899733 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.293848988 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.29202857 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.26670136 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.284641892 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.277416654 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.261598034 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.28063472 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.277188056 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.271436435 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.302837937 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.273891 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.267847284 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.283366386 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.284516964 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.261976111 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.268093862 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.292270202 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.283991311 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.277384822 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.27982897 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.272641258 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.264143861 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.272743394 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.274705034 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.274502026 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.295377824 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.288678352 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.267924158 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.272729866 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.297278229 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.271670296 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.271404942 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.29116799 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.303729905 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.298698353 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.27896005 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.263805186 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.299389537 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.25118512 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.27040532 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.275208668 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.271696258 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.258624733 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.276305865 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.289877806 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.246097899 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.254127362 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.283687046 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.27433189 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.258260065 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.279677992 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.296972825 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.285715948 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.273515025 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.281109326 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.26543949 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.274934425 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.299714982 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.311214103 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.293687679 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.287516462 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.29363083 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.284823688 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.295599051 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.269630134 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.278084665 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.286789889 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.28414025 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.282920621 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.290084053 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.249484331 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.251790588 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.266635156 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.273996462 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.28845531 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.26541402 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.269836894 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.30591784 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.319574517 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.270334791 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.303471233 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.272105617 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.292322287 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.287140437 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.283239769 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.282556539 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.276400899 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.285729358 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.291821012 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.311802578 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.2624468 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.296565461 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.292096204 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.271433945 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.27658677 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.28490154 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.277318451 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.268921789 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.293536931 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.280161371 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.237955992 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.274903709 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.304809059 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.335791153 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.290629601 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.279099329 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.293593291 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.276351157 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.302810992 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.302316756 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.310061319 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.291875994 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.259213651 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.282334013 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.269726968 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.301995761 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.285660781 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.285504037 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.286061941 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.289055709 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.283795029 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.27366676 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.268764189 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.27998376 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.28176211 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.266118662 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.265649242 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.264708539 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.298068392 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.313588571 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.318593199 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.287330941 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.28338061 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.309554169 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.281740823 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.288439129 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.306716084 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.27899385 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.296175071 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.307553452 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.292922204 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.285851776 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.285029782 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.267071726 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.280648395 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.290597621 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.308371381 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.297740256 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.275673441 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.283955808 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.288148689 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.266613426 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.268141205 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.266065856 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.291904748 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.288162633 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.314299078 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.319225816 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.282435006 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.280932622 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.304327114 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.284398194 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.290150345 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.299099448 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.295588757 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.288105092 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.286483613 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.308440813 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.286993405 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.296789636 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.286282256 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.292650073 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.255879863 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.295779343 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.276479851 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.295627627 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.293870782 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.297842062 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.272833191 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.26289686 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.272344985 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.314685963 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.291043866 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.278329442 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.307963737 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.282625195 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.291735157 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.314426329 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.292696883 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.299545807 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.302908499 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.315799103 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.302023079 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.263183975 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.277381311 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.272042087 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.313409578 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.305586048 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.301527315 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.265210739 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.303633018 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.277252541 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.303513253 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.27405976 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.279260656 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.279035858 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.294509534 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.324733751 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.298111738 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.309719481 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.303092927 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.311146099 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.30240506 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.31462823 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.291098585 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.260467991 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.288863844 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.29268326 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.306519242 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.294192746 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.29394897 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.29961363 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.299918259 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.30875354 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.287224675 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.278788773 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.299210497 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.270830595 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.283722499 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.262510752 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.275803004 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.278436261 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.2988516 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.296008635 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.313389065 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.321730899 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.296222234 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.33592436 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.293359811 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.320133691 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.28632602 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.267971426 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.294781307 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.30656789 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.31304328 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.286668922 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.292846065 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.268532052 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.29459446 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.283261549 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.309950856 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.285727438 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.282660645 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.296689209 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.293574035 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.29464109 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.258910477 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.278815821 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.279017975 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.270798444 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.319696199 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.307763187 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.294640431 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.308104901 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.312108425 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.298084029 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.290572186 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.289921803 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.304211288 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.257919232 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.315726171 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.318894133 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.30115307 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.323128031 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.297483363 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.305672212 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.291970774 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.301631174 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.306958653 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.290113712 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.303286083 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.268188548 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.27954754 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.276936624 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.281520483 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.319334527 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.313266395 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.298288459 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.301730341 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.30183842 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.340130621 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.290678415 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.302413974 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.310871975 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.304656087 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.298682024 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.319495127 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.312640348 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.28542292 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.28613576 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.320214206 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.290883202 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.301440736 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.300222043 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.289626344 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.29402655 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.294192762 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.305950983 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.283745968 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.294267294 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.280741419 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.285141031 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.298517733 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.302046779 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.314099131 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.315493393 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.30357466 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.304689622 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.299560219 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.299397345 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.308275892 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.294157384 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.311755759 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.298590861 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.287259063 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.289015222 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.321562808 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.320394376 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.297834891 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.289080274 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.294187809 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.327773106 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.296527915 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.292789451 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.27382522 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.28967157 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.290691483 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.312921204 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.332586752 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.320082971 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.300090645 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.306211295 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.281279908 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.306609743 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.28661659 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.314174487 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.325982904 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.317422365 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.309393506 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.295898676 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.320681166 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.313028542 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.316705662 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.296001874 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.300356613 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.304966055 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.292682162 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.298131539 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.312391525 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.279387127 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.291260307 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.288367614 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.248647839 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.279486679 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.319808971 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.32065375 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.339396842 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.304236858 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.303867587 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.291632492 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.309053251 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.291300714 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.301048598 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.291822479 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.303184752 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.302995746 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.300519107 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.300656361 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.313028739 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.295847225 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.308289048 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.332639906 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.279220749 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.307781303 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.27891665 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.303717398 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.288559563 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.27381497 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.282279956 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.280790684 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.320544695 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.269997912 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.286708456 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.331674503 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.299048776 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.319537805 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.302694134 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.321714534 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.307637064 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.296660132 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.337802373 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.323041753 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.337885722 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.328022696 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.314142342 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.296419746 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.288438984 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.292529756 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.289134165 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.287974286 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.316910225 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.304510088 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.295411051 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.26495194 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.309437123 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.278102983 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.282916982 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.335614803 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.297646831 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.319103869 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.315912752 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.30399712 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.334434597 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.323958743 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.334422202 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.289001208 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.323650618 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.28595851 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.319190942 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.317490942 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.288557825 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.300833416 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.327829327 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.308284468 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.296702172 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.295984793 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.297006631 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.330376817 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.287509559 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.271345759 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.35535868 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.29055805 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.327747959 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.319983011 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.310568698 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.320306632 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.311012761 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.321715299 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.312218385 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.303611606 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.29025405 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.29634349 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.308890402 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.309013629 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.302354263 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.317926981 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.320782585 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.322195249 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.315417047 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.330480066 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.311341657 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.321031775 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.308805009 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.281582662 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.290512495 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.284364027 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.277930571 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.28329361 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.334189136 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.359093218 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.338054083 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.339960396 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.29157623 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.326403045 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.339657994 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.303298645 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.313967734 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.3351496 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.309141899 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.303853001 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.321772565 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.316350449 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.309138169 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.305679615 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.304794907 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.282070539 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.298593229 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.310154614 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.300414996 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.308568099 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.309288221 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.269309107 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.296599272 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.301775091 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.330670069 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.363838958 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.331210516 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.317777125 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.331511235 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.26111806 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.309829062 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.321611898 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.289049924 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.322521283 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.332283825 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.312504176 seconds)
  done (took 1368.540432072 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.312697872 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.301019946 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.327618649 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.291750173 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.320495624 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.28334798 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.292435064 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.303694422 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.291388696 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.260474787 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.27931376 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.303567637 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.274137134 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.324746153 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.346151419 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.313965656 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.331765711 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.319514646 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.326578269 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.28737614 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.31661546 seconds)
  done (took 50.649895351 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.305547713 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.324517712 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.296531414 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.31869888 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.288625295 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.321564302 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.323157804 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.303037045 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.311126156 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.302265554 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.318238521 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.309940823 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.314426353 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.258638881 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.299642584 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.280078232 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.287648017 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.305656939 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.310492005 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.347325723 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.294654708 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.31289316 seconds)
  done (took 52.993167066 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.326101825 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.342358969 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.324831817 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.305129734 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.318316927 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.311668734 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.315743595 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.340245673 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.277379019 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.355040756 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.329217661 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.328703899 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.344741226 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.329359624 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.313013298 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.311117158 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.411262692 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.318828945 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.303080321 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.29913295 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.334769926 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.329121814 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.339007467 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.333345908 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.306653873 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.330187573 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.318238423 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.322248785 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.314221896 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.30809922 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.337809944 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.321308808 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.30408189 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.321222599 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.309988124 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.33460175 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.32654053 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.294047583 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.299215046 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.313536963 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.351139916 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.328128658 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.303451505 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.30009283 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.33392324 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.27741106 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.335882896 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.340532528 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.338505001 seconds)
  done (took 116.037830413 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.310490439 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.304469323 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.316992663 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.297045182 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.32390341 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.301915318 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.311957428 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.324073195 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.333075043 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.290716754 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.310825415 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.336185772 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.298144026 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.295191531 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.294104685 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.309293173 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.329695539 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.317461957 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.28147737 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.282554144 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.275152702 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.309554841 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.322080473 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.340880962 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.342238216 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.328802882 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.316359481 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.30874198 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.312195838 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.358620129 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.30488163 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.299326577 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.311334723 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.318486022 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.334319952 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.332414101 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.320344634 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.301055126 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.322073923 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.338408783 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.308429882 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.32931843 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.283948784 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.282884473 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.306111742 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.326005397 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.283945027 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.298435144 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.316998479 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.329654086 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.313370365 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.335481989 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.313405931 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.346067093 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.328668795 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.334066548 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.305895053 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.316581603 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.305699997 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.320402613 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.313557462 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.332932968 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.299596898 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.332539225 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.287373266 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.299982565 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.311897231 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.320452222 seconds)
  done (took 159.603412065 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.296390481 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.316118623 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.298329073 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.300550411 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.308739745 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.350290816 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.310147079 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.33623779 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.315879852 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.316969958 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.314596005 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.313680852 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.311012437 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.327956137 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.325348369 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.336972961 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.297100004 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.295549392 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.326207878 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.340414369 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.302816395 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.321818854 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.308242724 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.335731705 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.329062379 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.311047925 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.311035307 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.320500463 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.324103725 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.316306176 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.326996069 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.346139458 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.348385928 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.346468268 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.322402141 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.316968009 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.322304279 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.325430895 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.324920601 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.335263491 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.349835873 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.305976702 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.340503367 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.33638258 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.329562536 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.312236672 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.319159385 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.305944307 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.319412866 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.310734642 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.327406002 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.297604618 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.313825025 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.300314896 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.278583738 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.328199891 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.333853806 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.358184516 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.320735223 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.30737323 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.328916165 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.305894805 seconds)
  done (took 146.135751689 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.334543638 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.315673611 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.32371509 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.361658457 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.324295345 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.318816848 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.353010746 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.317048891 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.319265233 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.315850035 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.337582535 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.326876321 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.313204713 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.318150741 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.31845869 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.285590298 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.306849951 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.301040184 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.334074126 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.330487976 seconds)
  done (took 48.720046545 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.350726018 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.326083771 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.34818885 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.344845293 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.333369567 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.338923928 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.317288997 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.344851675 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.360904606 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.306163602 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.339885685 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.329570289 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.310020266 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.345442487 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.328107253 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.333441475 seconds)
  done (took 39.639451835 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.313021267 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.31528989 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.315280696 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.334158891 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.308167457 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.313440227 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.312545828 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.358671109 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.331131149 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.351813947 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.348451824 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.338098583 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.334993183 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.325127483 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.353003169 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.324842034 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.334436601 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.32443193 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.328705958 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.318579804 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.308942405 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.334553099 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.359426109 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.310222027 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.323823393 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.342462459 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.338412005 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.289558621 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.337344245 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.302158184 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.318788118 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.318255895 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.320317729 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.340601038 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.320007003 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.369645909 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.329895044 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.328543544 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.347537334 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.302891805 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.321751164 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.354829041 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.316713205 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.359379786 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.350506627 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.318238922 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.340748386 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.324686165 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.316259311 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.321615804 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.319374609 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.318234516 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.330642065 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.316610183 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.333896888 seconds)
  done (took 130.319118957 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.314140815 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.316418428 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.319484036 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.345090545 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.362276926 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.325053205 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.36008937 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.319976894 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.341288199 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.337382518 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.32324576 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.351461936 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.348457385 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.318057467 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.340804781 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.343148722 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.342380716 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.333207213 seconds)
  done (took 44.292611076 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.323484911 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.310490447 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.343033398 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.325480751 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.315950322 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.32943492 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.313370175 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.296332571 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.326203682 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.353336715 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.343246843 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.347519306 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.32820723 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.338243536 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.351755097 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.320666518 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.334644265 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.362739429 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.330888204 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.329806288 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.352638863 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.326898189 seconds)
  done (took 53.571814308 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.333210183 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.354260629 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.344473738 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.374978278 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.382939212 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.364947985 seconds)
  done (took 16.406667542 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.317929274 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.319261408 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.304231766 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.31768474 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.314152651 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.369917567 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.351371665 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.354509901 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.336424108 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.342699974 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.354330657 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.346574864 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.328428685 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.320976053 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.325971237 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.337349368 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.356622617 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.330843852 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.355691808 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.33119699 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.325551635 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.333273775 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.324437347 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.347455818 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.343466294 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.324813154 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.34816173 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.338686885 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.344865226 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.314088634 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.358801574 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.373714556 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.347625689 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.346227693 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.365076513 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.331547089 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.338262197 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.342359359 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.320986764 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.329308826 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.346761041 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.368990396 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.329485676 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.344079565 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.340500775 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.332676526 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.322157847 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.347959477 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.324717934 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.32075563 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.344883968 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.321972166 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.318216764 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.316966542 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.316466987 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.322093114 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.332836526 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.342594785 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.352174745 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.31000188 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.332726632 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.335295528 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.312732329 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.328343099 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.357044364 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.358204473 seconds)
  done (took 156.463095576 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.354979033 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.306348845 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.360800318 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.35992591 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.329418935 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.348440507 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.370751262 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.327457727 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.354920232 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.369167613 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.341135105 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.310609766 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.33148179 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.331888118 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.30119794 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.348039421 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.322834775 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.356960758 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.338149212 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.302672861 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.326145588 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.367919033 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.355201715 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.349853887 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.381052191 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.339213479 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.346975439 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.339247475 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.343313887 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.334686551 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.346942498 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.353668626 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.351434468 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.362898673 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.357115071 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.342149262 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.321326086 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.332677237 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.335211739 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.322876639 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.330552099 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.384799733 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.352869065 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.342367283 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.354429598 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.350666954 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.34245932 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.338124401 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.366169534 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.321566657 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.347777951 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.352245452 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.344068661 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.346147653 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.382699933 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.37212478 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.351511614 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.353976438 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.3263477 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.316217706 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.342911732 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.367573667 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.329466657 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.343936022 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.358954601 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.359038104 seconds)
  done (took 157.025466196 seconds)
done (took 3193.324607007 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.581380657 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.482480367 seconds)
  done (took 17.36595439 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.491459872 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.47362785 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.506332918 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.453523659 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.382737688 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.383528353 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.34057238 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.351867275 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.411743311 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.350182687 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.4068322 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.359116547 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.377298579 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.354807982 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.329517265 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.342896899 seconds)
  done (took 60.625846867 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.336388149 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.342509568 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.351177361 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.356114698 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.37485047 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.433320715 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.376968919 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.399294809 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.344128865 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.382852114 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.38487207 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.338750889 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.345827607 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.326111151 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.454713472 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.414923681 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.438424625 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.476107371 seconds)
  done (took 45.170986517 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.44061336 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.378136285 seconds)
  done (took 12.116680935 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.364827346 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.351373457 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.370187812 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.370374281 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.37380238 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.386050872 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.403283407 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.404311093 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.353736552 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.373413072 seconds)
  done (took 76.038184621 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.357048529 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.338295392 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.642271269 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.37777729 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.372252516 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.383410551 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.341608119 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.342562496 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.360706769 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.331800004 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.364096605 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.677046083 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.36364308 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.372025809 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.809712384 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.403334137 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.382938975 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.373544816 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.397492071 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.365466263 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.343210691 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.365954585 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.614649959 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.113377729 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.345045182 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.359176838 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.328865525 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.360912521 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.333272719 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.356696675 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.38026329 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.410524815 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.395027228 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.386802565 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.390883818 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.362332005 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.001526513 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.417841848 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.382006265 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.477897286 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.436303742 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.362004495 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.392509606 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.399878735 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.370060722 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.36879254 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.123719163 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.447472808 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.392687069 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.575148538 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.955834388 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.396490694 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.529353954 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.536482907 seconds)
  done (took 161.039602911 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.361389275 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.83101459 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.55955377 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.356932091 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.74676115 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.577865473 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.158648216 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.392839271 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.370837263 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.564276115 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.549481515 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.519440897 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.399006374 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.345496999 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.390222943 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.361700493 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.521830029 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.424519126 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.378866446 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.363445905 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.357462984 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.606057782 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.5100638 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.393922019 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.397538958 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.58851862 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.417738608 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.492795216 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.751066993 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.361875713 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.440776011 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.338747022 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.350547805 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.373751345 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.402934898 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.461898383 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.467777977 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.400926182 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.078406346 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.382378539 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.967900905 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.570390058 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.485073908 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.479574766 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.50364028 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.589552932 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 3.040049323 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.340427569 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 3.107492063 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.523129188 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.574618333 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.591525733 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.47768497 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.393031906 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.861915744 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.376131692 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.362673568 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.621091637 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.522149164 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.471770413 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.346642726 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.36253186 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.317067536 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.636175739 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.374327353 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.495142998 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.35746415 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.359369874 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.490235851 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.488750133 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.4923354 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.626577602 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.38539417 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.319283828 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.659553655 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.533812149 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.429530249 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.61171613 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.384509759 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.34953859 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.449874668 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.820551871 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.519356269 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.605930876 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.704737113 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.381148494 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.912158356 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.2470288 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.26212759 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.194008536 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.345762315 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.190574403 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.099933375 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.909480715 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.035325225 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.029869762 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.979576398 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.150523062 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.033114459 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.572254232 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.266992947 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.765373271 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.046355796 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.50217582 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.133615332 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.031639905 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.670970052 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.04729517 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.244049401 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.07177544 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.029110868 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.028273782 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.171731501 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.950169143 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.028747839 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.341560272 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.088493423 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.032727636 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.183495787 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.03138222 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.283293283 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.739275715 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.26377959 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.031372295 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.068285547 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.200527785 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.171882574 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.054498023 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.355835059 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.272828273 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.123533603 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.3372711 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.030828671 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.028857141 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.314679851 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.030926459 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.070564183 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.255374832 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.05517809 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.211808802 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.137467571 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.418205566 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.104736355 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.137110761 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.050487232 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.305193241 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.099411009 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.122641029 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.054397395 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.168948279 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.032289426 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.990085074 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.208613159 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.045516487 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.048298664 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.084943842 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.141882238 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.253581651 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.300830175 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.127266502 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.508055925 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.835723844 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.439733925 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.566452926 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.479331123 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.902807631 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.003137153 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.318645421 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.104566713 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.092375838 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.033831457 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.306592463 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.3486516 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.073521293 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.034172777 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.824747892 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.442738037 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.061303718 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.248766531 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.861345315 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.453905699 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.535242622 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.333264027 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.24885718 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.303562515 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.664285504 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 4.021269041 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.801838222 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.4790767 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.349983169 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.220507218 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.204225478 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.650907903 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.431054221 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.053527508 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.574021493 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.49889635 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.589272331 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.623877816 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.31966754 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.048731726 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.645394114 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.38374916 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.27570292 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.13972237 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.142084419 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.375666804 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.216104604 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.761446512 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.796649517 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.641240963 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.507368293 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.432498467 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.462410087 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.453123752 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.626115406 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.558641308 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.462462677 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.671459764 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.500891268 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.589129434 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.691005256 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.734912782 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.429036183 seconds)
  done (took 973.14572241 seconds)
done (took 1347.833569502 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.459023999 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.463602655 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.458543043 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.508040212 seconds)
  done (took 32.279074061 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.444640262 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.451746912 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.454637908 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.456200898 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.470025078 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.462281477 seconds)
  done (took 17.127721772 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.478050633 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.236935686 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.202713105 seconds)
  done (took 24.312037308 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.761265753 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.607916024 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.334155491 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.435439988 seconds)
  done (took 12.335673056 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.176880455 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.221539388 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.138575189 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.130274977 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.147100622 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.140690096 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.190237426 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.125942257 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.178024436 seconds)
  done (took 21.643917198 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.678359594 seconds)
done (took 116.80109323 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.421383018 seconds)
    (2/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.394730501 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.89291507 seconds)
    (4/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.119970702 seconds)
    (5/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.412230983 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.607150743 seconds)
    (7/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.781264025 seconds)
    (8/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.691498239 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.605683594 seconds)
    (10/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.52365432 seconds)
    (11/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.303351301 seconds)
    (12/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.166003875 seconds)
    (13/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.564445744 seconds)
    (14/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.529201538 seconds)
    (15/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.86210403 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.781737772 seconds)
    (17/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.647360198 seconds)
    (18/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.740975046 seconds)
    (19/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 3.02645037 seconds)
    (20/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.588384599 seconds)
    (21/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.619024801 seconds)
    (22/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.451716974 seconds)
    (23/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.491201869 seconds)
    (24/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 4.348198671 seconds)
    (25/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.451124556 seconds)
    (26/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.48292282 seconds)
    (27/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 3.150447426 seconds)
    (28/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.458436242 seconds)
    (29/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.935354556 seconds)
    (30/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.446244018 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.890846362 seconds)
    (32/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.958698639 seconds)
    (33/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.445892309 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.462075923 seconds)
    (35/341) benchmarking ("perf_sum", Float64, true)...
    done (took 5.069610652 seconds)
    (36/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.831407403 seconds)
    (37/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.436857866 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.965679793 seconds)
    (39/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.344095794 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.896479768 seconds)
    (41/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.708533007 seconds)
    (42/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.648259168 seconds)
    (43/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.423460748 seconds)
    (44/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 3.089888873 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.375761993 seconds)
    (46/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.471837105 seconds)
    (47/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.411011442 seconds)
    (48/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.509449968 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.478491373 seconds)
    (50/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.741012046 seconds)
    (51/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 4.233980265 seconds)
    (52/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.61523326 seconds)
    (53/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.633842718 seconds)
    (54/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.494808891 seconds)
    (55/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.467968429 seconds)
    (56/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.72280535 seconds)
    (57/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 3.102134453 seconds)
    (58/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.560640332 seconds)
    (59/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 3.004729546 seconds)
    (60/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.702690661 seconds)
    (61/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.70996314 seconds)
    (62/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.972140467 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.834639767 seconds)
    (64/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 3.128358591 seconds)
    (65/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.475786007 seconds)
    (66/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 9.009614637 seconds)
    (67/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.945389166 seconds)
    (68/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.887371491 seconds)
    (69/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.842013584 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.403894278 seconds)
    (71/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.808955709 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.503752319 seconds)
    (73/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.725215117 seconds)
    (74/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.820586254 seconds)
    (75/341) benchmarking ("sort", Int8, false)...
    done (took 6.089087633 seconds)
    (76/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.808066142 seconds)
    (77/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.437263059 seconds)
    (78/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.79543296 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.92974472 seconds)
    (80/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.628844741 seconds)
    (81/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.505051603 seconds)
    (82/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.840515497 seconds)
    (83/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 4.104006144 seconds)
    (84/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.701628324 seconds)
    (85/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 3.304467831 seconds)
    (86/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.716522399 seconds)
    (87/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.711064151 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.437000722 seconds)
    (89/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.454669767 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.58270622 seconds)
    (91/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.761333903 seconds)
    (92/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.452897088 seconds)
    (93/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 3.208173605 seconds)
    (94/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.435887604 seconds)
    (95/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.439283394 seconds)
    (96/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.669935589 seconds)
    (97/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.46840597 seconds)
    (98/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.42387628 seconds)
    (99/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.847794511 seconds)
    (100/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.442033195 seconds)
    (101/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 9.087492505 seconds)
    (102/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.545099341 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 3.341150462 seconds)
    (104/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 4.096718641 seconds)
    (105/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 3.171549749 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.478694279 seconds)
    (107/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.446630985 seconds)
    (108/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.801083625 seconds)
    (109/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.694743123 seconds)
    (110/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.447831595 seconds)
    (111/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.828707977 seconds)
    (112/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.77247722 seconds)
    (113/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.423052603 seconds)
    (114/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.750888408 seconds)
    (115/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.554707453 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.561392285 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.61080759 seconds)
    (118/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.515175182 seconds)
    (119/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 4.164161382 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.633112919 seconds)
    (121/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.499052876 seconds)
    (122/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.40436256 seconds)
    (123/341) benchmarking ("map", identity, Float64, true)...
    done (took 5.545235424 seconds)
    (124/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.741321888 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.772842564 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.806668575 seconds)
    (127/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.809493668 seconds)
    (128/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.588537653 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.83784449 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.791351175 seconds)
    (131/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.727804976 seconds)
    (132/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.41237014 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 6.577234408 seconds)
    (134/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.51046477 seconds)
    (135/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.782846989 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.731533245 seconds)
    (137/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.951818131 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.646288864 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.436085786 seconds)
    (140/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.482997089 seconds)
    (141/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 3.381391181 seconds)
    (142/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.428902097 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 4.841322841 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.528820673 seconds)
    (145/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.635064806 seconds)
    (146/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.13929382 seconds)
    (147/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.273685413 seconds)
    (148/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.408907932 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.134344147 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.37767835 seconds)
    (151/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.226383908 seconds)
    (152/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.536072677 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.709587963 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 2.568854579 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.381722236 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.174685048 seconds)
    (157/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.473167376 seconds)
    (158/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.221996266 seconds)
    (159/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 3.044174393 seconds)
    (160/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.134766835 seconds)
    (161/341) benchmarking ("map", abs, BigInt, true)...
    done (took 9.76837603 seconds)
    (162/341) benchmarking ("collect", "all", Int8, true)...
    done (took 3.826454093 seconds)
    (163/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.419474661 seconds)
    (164/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.44247166 seconds)
    (165/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.343197281 seconds)
    (166/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.420813748 seconds)
    (167/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.620891872 seconds)
    (168/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.370631371 seconds)
    (169/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.308850472 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.419771816 seconds)
    (171/341) benchmarking ("sort", Int64, false)...
    done (took 7.139282123 seconds)
    (172/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.61280187 seconds)
    (173/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.752211619 seconds)
    (174/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.575110529 seconds)
    (175/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.538814626 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.831806372 seconds)
    (177/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.39499608 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.34563645 seconds)
    (179/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.436269699 seconds)
    (180/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.359588762 seconds)
    (181/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.252469614 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.332031661 seconds)
    (183/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.507628705 seconds)
    (184/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.348211225 seconds)
    (185/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.175095687 seconds)
    (186/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.261212289 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.123440502 seconds)
    (188/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.127144502 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.562449284 seconds)
    (190/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.470922048 seconds)
    (191/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.12097041 seconds)
    (192/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.515168895 seconds)
    (193/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.504288279 seconds)
    (194/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.335129574 seconds)
    (195/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.348552064 seconds)
    (196/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.470690313 seconds)
    (197/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.336270702 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.126757971 seconds)
    (199/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.319785019 seconds)
    (200/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.362236808 seconds)
    (201/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.550022932 seconds)
    (202/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.30256011 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.44111284 seconds)
    (204/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.509237837 seconds)
    (205/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.597063872 seconds)
    (206/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.383644453 seconds)
    (207/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.706464151 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.129402572 seconds)
    (209/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.783233516 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.216189181 seconds)
    (211/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.783263418 seconds)
    (212/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.233045458 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.675986514 seconds)
    (214/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.156709614 seconds)
    (215/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.566654464 seconds)
    (216/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.104762539 seconds)
    (217/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.062081194 seconds)
    (218/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 4.908466149 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.152557981 seconds)
    (220/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.656770516 seconds)
    (221/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.107231171 seconds)
    (222/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.541261259 seconds)
    (223/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.267749281 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.225190887 seconds)
    (225/341) benchmarking ("sort", Float32, false)...
    done (took 6.826586737 seconds)
    (226/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 3.00853417 seconds)
    (227/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.133253969 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 3.902096022 seconds)
    (229/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.875135377 seconds)
    (230/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.198344931 seconds)
    (231/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.620275251 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.55324247 seconds)
    (233/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.59034977 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.818150244 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.214096877 seconds)
    (236/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.193974049 seconds)
    (237/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.431762517 seconds)
    (238/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.105383204 seconds)
    (239/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.705697195 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.814567025 seconds)
    (241/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.515906142 seconds)
    (242/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.10737093 seconds)
    (243/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.333543371 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 3.534439924 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.028639399 seconds)
    (246/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.130484277 seconds)
    (247/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.308770606 seconds)
    (248/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.118139608 seconds)
    (249/341) benchmarking ("sort", BigInt, false)...
    done (took 7.137328221 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.222552378 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.42503894 seconds)
    (252/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.155413395 seconds)
    (253/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.170763969 seconds)
    (254/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 3.775459848 seconds)
    (255/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.967443567 seconds)
    (256/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.515664707 seconds)
    (257/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.647255374 seconds)
    (258/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.715676966 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.360654413 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.529060427 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.75322145 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.685763934 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.420572123 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.79170454 seconds)
    (265/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.340315195 seconds)
    (266/341) benchmarking ("perf_sum", Float32, false)...
    done (took 4.302627773 seconds)
    (267/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.446519629 seconds)
    (268/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.388599649 seconds)
    (269/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.712022845 seconds)
    (270/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.596188545 seconds)
    (271/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.096403235 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.481526936 seconds)
    (273/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.389087149 seconds)
    (274/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.070911726 seconds)
    (275/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.100121221 seconds)
    (276/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.057671864 seconds)
    (277/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.513109579 seconds)
    (278/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.254610585 seconds)
    (279/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.164569804 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.994711624 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.331820384 seconds)
    (282/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.933161902 seconds)
    (283/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.807121755 seconds)
    (284/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.442837991 seconds)
    (285/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.319411184 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.244991526 seconds)
    (287/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.611050531 seconds)
    (288/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.365981622 seconds)
    (289/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.685031851 seconds)
    (290/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.668169163 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.631484484 seconds)
    (292/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.735607578 seconds)
    (293/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 3.221495802 seconds)
    (294/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.465846491 seconds)
    (295/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.595481988 seconds)
    (296/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.465132424 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.257601335 seconds)
    (298/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.483204987 seconds)
    (299/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.234404668 seconds)
    (300/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.527196 seconds)
    (301/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.595806704 seconds)
    (302/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.513408572 seconds)
    (303/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.284944254 seconds)
    (304/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 5.083515548 seconds)
    (305/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.334289733 seconds)
    (306/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.679280718 seconds)
    (307/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.908805856 seconds)
    (308/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.425589386 seconds)
    (309/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.530527754 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.583359815 seconds)
    (311/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.438813789 seconds)
    (312/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.75262324 seconds)
    (313/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.257130944 seconds)
    (314/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.3331912 seconds)
    (315/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.72363989 seconds)
    (316/341) benchmarking ("sort", Float64, false)...
    done (took 7.171339885 seconds)
    (317/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.260811743 seconds)
    (318/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.654543743 seconds)
    (319/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 3.079668794 seconds)
    (320/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 3.375409802 seconds)
    (321/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.763828879 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.827975636 seconds)
    (323/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.874233651 seconds)
    (324/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.541656946 seconds)
    (325/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 3.025898289 seconds)
    (326/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.846975006 seconds)
    (327/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.606636453 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 6.616962341 seconds)
    (329/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.524760854 seconds)
    (330/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.599375351 seconds)
    (331/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 5.138696134 seconds)
    (332/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.606330497 seconds)
    (333/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.498770754 seconds)
    (334/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.504257434 seconds)
    (335/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.646604452 seconds)
    (336/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.72895457 seconds)
    (337/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.532895393 seconds)
    (338/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.69130428 seconds)
    (339/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.471621361 seconds)
    (340/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 9.645736646 seconds)
    (341/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.460198882 seconds)
  done (took 1297.275473585 seconds)
done (took 1299.580885096 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.256909818 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.252969296 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.889100523 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.362082887 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.331742359 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.336313131 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.839736164 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.275776187 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.240444735 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.771828877 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.185062732 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.150180946 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.176530863 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.177961965 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.22647039 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.163827817 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.203555962 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.230331178 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.155700409 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.177061909 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.320918714 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.151011372 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.115696267 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.368219507 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.322595743 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.297193116 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.160850291 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.334738718 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.244266624 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.1861225 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.452210283 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.843570709 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.508858783 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.442194001 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.43839641 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.142140306 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.18008739 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.441649623 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.468679705 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.195558656 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.195644421 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.311864894 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.300542943 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.300458534 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.294431037 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.313648393 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.360477919 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.539168162 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.453513127 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.855135643 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.497075007 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.449188034 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.458311191 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.244383851 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.361805138 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.270922478 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.285568596 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.172864489 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.159027772 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.557275743 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.274323753 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.172405629 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.567181679 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.233901597 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.17347191 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.17848706 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.165414239 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.162619918 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.547142397 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.763709696 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.200390879 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.180476625 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.163291601 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.165162795 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.181284344 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.708935127 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.160173472 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.845563981 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.237272179 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.158537593 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.164057133 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.144921193 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.140967976 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.175723958 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.170718 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.17616203 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.339889339 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.39844546 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.426563489 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.737284834 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.268529644 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.80439465 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.320579599 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.232639608 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.197966999 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.862673025 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.295652714 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.1689616 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.378912286 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.796924805 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.322294901 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.357200764 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.17108318 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.283189683 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.323350903 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.144947162 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.233146181 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.159427383 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.172377171 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.150039031 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.146248029 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.16587079 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.155187404 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.237863781 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.19219206 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.360195589 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.454676821 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.397941961 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.317873611 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.200653424 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.191173887 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.370882754 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.226022976 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.269384333 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.157813599 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.276704003 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.344112467 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.159527245 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.466490345 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.403822053 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.35363855 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.320222498 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.590134075 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.343756841 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.255625721 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.123787078 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.217813304 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.208100992 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.158592184 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.163702421 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.145919089 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.141277514 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.212723353 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.208269413 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.150983209 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.427147376 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.405552853 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.427198903 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.341687472 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.235093479 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.252239049 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.346540287 seconds)
done (took 354.041002629 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.210542978 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.641947806 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.345791917 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.401595672 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.517129771 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.337262602 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.227720879 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.251309928 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.237956159 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.606769401 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.215338299 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.276098225 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.694375696 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.265256498 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.290449869 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.235152159 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.319417952 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.699019376 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.43851439 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.495663764 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.416361268 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.404341911 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.407417522 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.741696349 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.290508763 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.156127282 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.18685166 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.126567352 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.397091174 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.118570451 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.139828692 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.405561109 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.264188527 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.104186167 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.156806617 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.141306353 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.194533581 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.135158663 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.19487991 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.179478971 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.192739366 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.131175164 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.122543699 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.149170999 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.13238135 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.183678099 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.13090258 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.15881552 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.21260542 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.221818663 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.459499713 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.169348725 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.156125316 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.145241286 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.142106648 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.15210564 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.148494391 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.137910865 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.188024361 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.128171638 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.176159744 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.554067536 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.576559983 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.162649351 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.321147615 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.233426892 seconds)
  done (took 173.482120558 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.226987097 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.253110541 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.433613207 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.272246869 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.213387463 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.236585541 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.133277769 seconds)
  done (took 17.899963231 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.132002158 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.12292792 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.15257855 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.147309975 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.124057508 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.296409221 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.201968626 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.17875933 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.106319677 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.140295074 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.507368842 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.158447346 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.121878959 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.191340615 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.137125701 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.169102528 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.128978238 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.123724821 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.230475323 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.199460743 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.125691653 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.169370253 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.245442927 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.090765328 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.125241851 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.202497768 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.143203774 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.425716797 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.233394734 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.201547056 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.132655661 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.384577061 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.262365259 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.132886817 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.147534158 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.130019513 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.130544367 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.126746974 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.124803517 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.511080175 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.125168432 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.130468086 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.193639531 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.143246695 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.141897452 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.169269238 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.132135536 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.119505606 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.151246819 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.129560669 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.165473344 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.125650683 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.124871064 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.12399605 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.159270545 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.126738638 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.157278689 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.202119788 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.120580502 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.203874759 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.150355594 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.244445356 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.185592739 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.14966938 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.180982011 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.189201761 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.144576212 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.150867633 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.145907892 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.185938836 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.141623364 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.168015482 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.238579639 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.430987889 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.345787434 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.537113483 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.377766555 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.309441409 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.214305322 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.071497291 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.091589275 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.077549991 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.071709177 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.107536105 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.120436153 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.082801197 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.076693383 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.119499456 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.090233305 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.105782046 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.128201697 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.119112972 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.102704077 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.209318864 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.116924519 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.239857864 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.131826636 seconds)
  done (took 216.171160723 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.079985854 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.072573317 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.093705655 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.073232469 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.073037336 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.077555905 seconds)
  done (took 14.466734015 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.085140717 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.08516885 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.083828439 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.079645848 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.084424952 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.080273003 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.080248113 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.085956049 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.093477495 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.126089486 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.139307496 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.15040106 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.176371718 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.182384305 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.161507659 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.183368155 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.179030328 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.18253892 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.13867292 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.136017572 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.348633575 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.117546783 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.124016318 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.444415565 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.501266889 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.492121552 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.503285741 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.494074758 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.503182606 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.511642743 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.510124209 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.509381055 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.515092571 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.519249102 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.508702387 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.512168879 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.501948968 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.496400677 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.498270389 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.496204083 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.497903266 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.507262486 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.500272023 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.507662544 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.505942822 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.508277307 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.507677642 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.512618784 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.496583695 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.501822704 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.506280812 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.502032455 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.496356295 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.499771823 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.511394753 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.511838151 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.51394656 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.503912869 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.496921806 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.508607753 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.509641275 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.500201198 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.506867638 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.507751917 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.500949207 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.503958485 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.512367412 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.511440509 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.509416921 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.505058929 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.498743065 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.501596459 seconds)
  done (took 173.787186505 seconds)
done (took 597.990101578 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.631443553 seconds)
  done (took 10.056920103 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.671186866 seconds)
  done (took 10.225250389 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 13.255328212 seconds)
  done (took 15.699898558 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.533840269 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.516948636 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.513485624 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.507822234 seconds)
  done (took 32.514909312 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.777921565 seconds)
  done (took 10.198529481 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.58790602 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.571618306 seconds)
  done (took 17.668450185 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.555841819 seconds)
  done (took 9.976995709 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.888609256 seconds)
  done (took 10.342845795 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.518999889 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.503341479 seconds)
  done (took 17.464266599 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.56731472 seconds)
  done (took 10.005349753 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 10.004347783 seconds)
  done (took 12.508649667 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.519647472 seconds)
  done (took 9.979234673 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.532860613 seconds)
  done (took 9.960609991 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.484036651 seconds)
  done (took 10.908937015 seconds)
done (took 189.969830381 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.513699604 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.495562391 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.499956661 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.487188608 seconds)
  done (took 32.417748678 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.538166804 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.534937261 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.535696985 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.54109005 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.518027546 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.518569165 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.536321384 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.538806398 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.526667072 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.544482972 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.546843482 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.548971227 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.560828484 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.544013581 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.547540466 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.535168063 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.551056703 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.540793167 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.538245104 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.552484346 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.554145705 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.543292224 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.492170654 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.506468648 seconds)
  done (took 63.323279039 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.724458515 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.597136264 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.654588402 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.557705456 seconds)
  done (took 12.962860608 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.512089555 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.590916002 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.575488838 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.593357327 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.579164356 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.679500364 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.576135338 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.703557625 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.673889507 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.638047769 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.503371598 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.530564752 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.538470349 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.573111655 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.677316057 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.507196037 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.510494353 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.648337619 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.585257052 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.758277205 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.507810689 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.569473357 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.569890492 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.57348472 seconds)
  done (took 64.606059854 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.517122396 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.524522599 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.524886583 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.526014211 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.526523733 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.51635509 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.524694195 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.505172043 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.541922007 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.513741208 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.51169535 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.516863818 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.508319409 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.513151825 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.508988401 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.529413762 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.53833976 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.522364558 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.516779036 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.520512207 seconds)
  done (took 52.845783707 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.512328015 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.754687645 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.738036817 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.675844823 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.507295798 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.504963579 seconds)
  done (took 36.133537606 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.528254472 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.534640035 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.519308544 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.540952551 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.574249525 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.518396388 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.591931021 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.723382743 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.51954328 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.594727647 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.529070822 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.524315397 seconds)
  done (took 33.152195654 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.506981081 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.501844344 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.516887018 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.53115219 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.53702643 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.542045629 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.539230242 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.534268457 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.536907254 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.541350453 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.519621887 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.523443031 seconds)
  done (took 52.771753287 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.715028018 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.678417297 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.833480946 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.388860498 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.023903517 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.581330687 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.915073148 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.077961571 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.593770156 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.628151562 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.996913835 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.575761666 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039790862 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.468167986 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.511059258 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.793769458 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.508659803 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.992010079 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.934746436 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.587514789 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.524059203 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.514283575 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.523448051 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.300245354 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.815082481 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.514098002 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.690938215 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.545684571 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.509988789 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.726550171 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.537339503 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.627600114 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.698289311 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.809552923 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.03254005 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.606191734 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.592416586 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.747967703 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.562575123 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.546339508 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.519441898 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.538507246 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.575164596 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.588515164 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.755264859 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.512915097 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.519069946 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.132462204 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.490909373 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.676171031 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.698020484 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.123530514 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.560018959 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.465596634 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652691613 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.798293438 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.532026721 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.753596934 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.603501259 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.625411666 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.712379494 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.611076327 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.737199462 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.486507928 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.064365998 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.72668694 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.530402805 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.539815967 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.79628359 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.80569623 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.615362647 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.700617565 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.288925017 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.536248031 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.537143665 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.438007553 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.694685437 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.526687508 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.275980023 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062519837 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.491630418 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.621268011 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.198245769 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.531384287 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.510878786 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.533169294 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.108324182 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.48987952 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.611785157 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.622140001 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.887431552 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.527131533 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.531731051 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.553839253 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.532950058 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.546659041 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410834365 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.615534084 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.493262677 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.080667468 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.527639341 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.576325955 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.523281341 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.620732606 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.909335138 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.564680572 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.274394359 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.149122904 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.807074814 seconds)
    (110/608) benchmarking "5d"...
    done (took 4.167785968 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.532339045 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.522805578 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.609881159 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.604640879 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.528561234 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.220891847 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.777156869 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.667067514 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.704381195 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.532231119 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.492633318 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.539088355 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.716381046 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.530383108 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.641427418 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.528871888 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.546465179 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.535357627 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.528629039 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.565586205 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.563066187 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.04524491 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.710296347 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.536400556 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.497754848 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.539475469 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.038346396 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.612774333 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.604028315 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.953090225 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 6.188345475 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.038034814 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.514243705 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412224574 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.986791354 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.639223964 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.618401012 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.199210989 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.687111776 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.614844945 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.545485788 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.67994056 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.534893834 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.530181107 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.532705475 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.260305153 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.220843935 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.581369082 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.536626645 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.508760217 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.771385939 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.76483791 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.242209184 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.56938248 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.539357977 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.622175264 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.698789488 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.533728161 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.487118746 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.915228334 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.763617607 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.04788308 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.771139552 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.24308196 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.688590923 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.556430974 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.716653358 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.619323396 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.23014675 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.789546723 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.855991167 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.188114228 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.541309153 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.53706486 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.645664377 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.927950731 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.556446622 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.303513757 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.814445604 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.226747027 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.569996774 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.10888977 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.49360377 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.545412749 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.006257012 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.575674519 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.136433507 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.687584703 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.756716146 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.546335929 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.537505508 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.543864885 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.626825828 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.658156611 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.606703988 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.61147972 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.505019695 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.145872477 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.583297393 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.543683712 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.567582445 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.795230117 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.507533921 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.595508951 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.559527723 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.637544254 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.412729128 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.25748402 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.53356661 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.529936309 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 5.061130939 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.540731601 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.531992584 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.54131348 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.456675998 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.59030176 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.653871268 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.678303945 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.30366965 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.640371421 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.635501357 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.563140271 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.534396024 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.797582813 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.559542484 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.81566642 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.038778841 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 6.208471412 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.274601627 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.637459135 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.138962586 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.552711836 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.525052485 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.220615833 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.569757378 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.529281908 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.69827164 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.293673718 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.638958481 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.403657876 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.460140214 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.391118477 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.849658969 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000731749 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.375699251 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.402929112 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.512733731 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.38556225 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.612541138 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.134202244 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.391165174 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39825846 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385255684 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.573224672 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.553877438 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.767360381 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.886507432 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.73379933 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.334762253 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.386901763 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.57389364 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.672711326 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.384699126 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.408557537 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009978353 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.013433608 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.134347098 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.894028779 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.609711086 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.091617201 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.819916023 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.477230592 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.378316337 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.288494848 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.487786919 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.231142089 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261852951 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.059405785 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.856258593 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394987315 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.120439964 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.546052914 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.139677321 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.607887013 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.453300448 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.148753577 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.20154579 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.197111817 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.102230468 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.203506302 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.148622749 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.248242232 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.225601321 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.100619916 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.485207078 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153151336 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151043171 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113943915 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.752639261 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13445201 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114297821 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.630586939 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.213045371 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339787902 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270470509 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.003662517 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.17175701 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.595839455 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.097875391 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.110802833 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.996876526 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.618324741 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.112787539 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.587471816 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.271974936 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.534897011 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.713049407 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.542609063 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.367064467 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.576745289 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.920191305 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.545429894 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.742390335 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.828495453 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.63870669 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.539054531 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.512938768 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.097003065 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.629394888 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.013402645 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.533717772 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.29899839 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.029743919 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.802428451 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.070614244 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.578388219 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.542487325 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.798573397 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.494619772 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.438485633 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.57809809 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.547093813 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.701417472 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.719920082 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.735694024 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.277054012 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.54022804 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.562617269 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.726276189 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.662517565 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.503445241 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.074809436 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.29968371 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.800325678 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.548925746 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.73693718 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.714091803 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.94327709 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.577826285 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.614404107 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.282509896 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.996772151 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.634753383 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.501594321 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.535453312 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.223983343 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.694628877 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.625067726 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.813675676 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 3.039019721 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.574536086 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.547041461 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.899556464 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.099169263 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.257582301 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.260305536 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.854313911 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.048891725 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.114803941 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.275304897 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.268542667 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.717743666 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.70075975 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.920874236 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.436478038 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.891814872 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.798591763 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.533889576 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.489038282 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.723792301 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.554161341 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.603236953 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.330424271 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.833994941 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.634123833 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.644498178 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199562873 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.856390628 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.587825503 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.775804155 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.569252035 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.55786473 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.536939058 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 3.088464864 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.934200194 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.562620426 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.526227041 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.292278574 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.50803544 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.730320018 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.79299476 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.588781183 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.395231199 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.669618168 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.690390717 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.325209038 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.869173012 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.590857592 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.494561705 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.363659918 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.533981843 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.264389344 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.32047086 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.56967689 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.548203685 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.724861579 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.529326816 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.583315659 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.560632334 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.871046028 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.837397669 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.992586531 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.709447653 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.884291761 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.814449769 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.071776495 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.645299778 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.767715163 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.509060117 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.537245679 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.626350879 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.596031216 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.620144015 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.539540447 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.545732322 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.775713565 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.685406338 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.727176843 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.615195422 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.62169719 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.560983656 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.690875111 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.675229279 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.547021996 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.547525658 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.551884373 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.80513039 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.53832419 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.56549034 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.724255491 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624593511 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.919669164 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.622033757 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.127681877 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.552792318 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.073663074 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.704576281 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086068946 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.545970044 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.355348801 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.608913566 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.540470537 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.003001441 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.279286931 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.731849086 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.237736852 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.541305171 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.865535284 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.596212998 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.552847662 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.54386608 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.172637395 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.925752037 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.559276038 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.002876242 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.618844613 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.562357038 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.329781091 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.031435678 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.550539791 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.65621822 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.564936849 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 5.017933224 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.819565384 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.624841305 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.705127048 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.574125921 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.538213088 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.563920669 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.630531876 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088846998 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.569330184 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.081813775 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.728741677 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.702281929 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.570225125 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.561562915 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.561794554 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.742614035 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.73434869 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.577467652 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.844499409 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.74198413 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.553254809 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 3.091590868 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.301346186 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.982359462 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.6333747 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.803998386 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.9115286 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.38129108 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.880163705 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12723244 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.735584253 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.56281095 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.770199363 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.82420789 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.574171511 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.75531083 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.56498844 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.884365313 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.705844051 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.148691008 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.664647817 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.891872062 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.723402088 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.553203445 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.081147299 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.00680093 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.651129679 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.556094956 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.569513733 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.556586736 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.37326323 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.171925841 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.729344986 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.734304945 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.529184117 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.077582344 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.566135147 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.528681527 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.556428565 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.597621268 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.564140752 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.516328069 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.367702263 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.452193608 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.761820593 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.947672667 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.508484706 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.759286902 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.564292269 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.527447843 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.04826362 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.581139971 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.550961083 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.140930609 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117439677 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.119542389 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.254498516 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.253018472 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.540188398 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.160030076 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.070420814 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.122358814 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.155874115 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.111393522 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.210190867 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.123613324 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.367730222 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.571118343 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.34289892 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.307371979 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986013576 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.259474599 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.130858294 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197523928 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.061953907 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.083651229 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.64863166 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.743838359 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.365341589 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.55161132 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.080565179 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.576244041 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.279769042 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.5477077 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.546581863 seconds)
  done (took 2674.674725687 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.607913136 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.609068179 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.631155926 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.621678242 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.603329805 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.613287941 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.622645567 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.580072667 seconds)
  done (took 63.355149409 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.548191333 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.558624937 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.956737362 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.552756329 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.555341041 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.57709329 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.885844219 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.597793522 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.550565588 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.557196577 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.554274837 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.560444946 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.562931704 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.640238198 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.55509577 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.888873006 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.577777794 seconds)
  done (took 90.190729663 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.676466033 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.6295618 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.55521861 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.980360283 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.654044562 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.868662176 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.627442028 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.561140728 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.577729093 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.377534857 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.614903284 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.638936749 seconds)
  done (took 97.256180091 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.556414817 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.552891633 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.558584996 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.55693892 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.555409764 seconds)
  done (took 15.258128654 seconds)
done (took 3291.543586228 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.768873765 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.752189284 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.708392564 seconds)
  done (took 7.938229044 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.616034043 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.671364408 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.745514191 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.698377964 seconds)
  done (took 13.215814192 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.836108004 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.037136658 seconds)
  done (took 8.346267916 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 3.059621551 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.562564121 seconds)
  (7/15) benchmarking "20517"...
  done (took 3.080440069 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.558358704 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.544029839 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.537969888 seconds)
  done (took 25.117953451 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.549713439 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.551343209 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.557494363 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.555993392 seconds)
  done (took 12.686594054 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.606368782 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.607756044 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.613184863 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.633175734 seconds)
  done (took 24.940896368 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.714757476 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.807999712 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.301843325 seconds)
  done (took 11.29394074 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.371195236 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.931193043 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.359102205 seconds)
  done (took 12.145496503 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.513988989 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.604366452 seconds)
  done (took 9.610621325 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.718332026 seconds)
  done (took 5.208464332 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.038846366 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 3.029491761 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.395930924 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.410898663 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.5826631 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.890899557 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.949691626 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.887593003 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.229753703 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.098224527 seconds)
  done (took 33.995604119 seconds)
done (took 183.479769552 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.429627334 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.983359439 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.744392148 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.762442261 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.67121121 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.746837482 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.651868632 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 4.505725135 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.871256143 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.869406791 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.641654143 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.658868459 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.648513248 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.972226616 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.636017625 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.933482268 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.972111827 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.406826128 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.063211532 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.471056257 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.650348628 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.833565879 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 4.289670539 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.8305587 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.986281001 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.695693077 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.636065012 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.936729791 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.342955679 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.613813564 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.68645228 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.738745451 seconds)
  done (took 200.369358183 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.571759146 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.564448007 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.556717529 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.558357169 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.466727011 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.572399835 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.563728353 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.564308808 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.277450685 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.292849225 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.570829703 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.46934753 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.555790177 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.567811361 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.567344876 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.56751622 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.494634365 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.568249605 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.552542491 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.572824176 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.565912342 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.207441886 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.574702006 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.158406726 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.411816853 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.585944653 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.565321272 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.561141975 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.559972675 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.559522628 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.56569389 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.560351924 seconds)
  done (took 234.835821568 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.558134376 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.567859439 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.560155845 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.562391079 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.554710529 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.558351944 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.567240439 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.566034429 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.566775418 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.576556797 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.564625687 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.564125281 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.565822333 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.555683103 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.555174166 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.567005297 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.558213849 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.578532154 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.571216078 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.553760462 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.561771983 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.586304606 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.562988006 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.554391088 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.372934984 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.541179057 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.490281685 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.529644782 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.502218771 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.371167127 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.367672781 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.392088836 seconds)
  done (took 243.601738523 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.842115919 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.536199571 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.539527819 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 4.337450551 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.552489292 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.549250687 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 4.302916544 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.848420317 seconds)
  done (took 26.984217346 seconds)
done (took 708.34010558 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.210681041 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.441376821 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.797207015 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.625137854 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 4.252845061 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.641942192 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.652223136 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.744184563 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.429061278 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.766253282 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 3.096418797 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.513395215 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.444928798 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.652766694 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.654751356 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.619815557 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.966952634 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.412534647 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.678678481 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.242956848 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.768744987 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.48873396 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.659342787 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.33709293 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 3.038155675 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.583394101 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.658283813 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 3.044806614 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.613567768 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.901293465 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.642209969 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.987987782 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.574990823 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.561847985 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.637305341 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.655178282 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.888652571 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.57112949 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.710385859 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.429240408 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.450721746 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 3.290761281 seconds)
  done (took 132.728892948 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.610869184 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.61130696 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.623957739 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.627467128 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.635513522 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.639154419 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.656366886 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.665670788 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.650027759 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.632127651 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.644017169 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.643436588 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.643779683 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.643476332 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.650975807 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.64874365 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.63052822 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.654538327 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.650344344 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.672645474 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.655292774 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.645241717 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.593550884 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.655117403 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.645207821 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.638632464 seconds)
  done (took 71.161005232 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.569648807 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.776152665 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.952680603 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.640264266 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.577235047 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.576494536 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.626669897 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.5877159 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.58836936 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.584819185 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.718119773 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.579525772 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.559309437 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.789460194 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.552080956 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.450650875 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.286002688 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.205604505 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.437903082 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.255979452 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.33795862 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.391413617 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.462510768 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.438067609 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.418342155 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.407787723 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.420992501 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.905989781 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.424624909 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.52902925 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.513365898 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.466935433 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.890157726 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.810751151 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.516678133 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.440344102 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.421098153 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.6157424 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.466580321 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.44728411 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.46420631 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.430412072 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.779881525 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 3.075917884 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.451957114 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.417639008 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.878507532 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.594071355 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.458908279 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.402570281 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.754037717 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.421661877 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.361316719 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.323081854 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.333440055 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.242254035 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.18735701 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.481549697 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.150467446 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.176952479 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.148434721 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.132635466 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.358066559 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.149646252 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.353149078 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.174250556 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.18771221 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.157535165 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.486169225 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.224266414 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.802472425 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.192232635 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.159305593 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.301288668 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.389359035 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.654516375 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.160194425 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.365484425 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.640060071 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.227740799 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.207584709 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.619414823 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.207068758 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.188805 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.162765203 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.192242194 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.247983653 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.276540186 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.283535954 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.744828291 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.843599566 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.930953182 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.618910255 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.582578829 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.582676311 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.928050707 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.595785023 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.587963562 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.932225508 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.228108485 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.596816076 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.581943944 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 3.200199572 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.604974102 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.626242205 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.604842985 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.949349307 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.619062838 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.633154142 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.583433581 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.591417219 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.585842755 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.62540184 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.600977982 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.583821687 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 3.198279041 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.79017661 seconds)
  done (took 296.729716043 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.588375469 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.587388913 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.583002134 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.582243278 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.583914039 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.595383037 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.581793163 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.580699093 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.58588561 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.583051953 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.583480876 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.599308481 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.606095999 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.594995377 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.595439233 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.591238007 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 4.387055906 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.592434337 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.589164999 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.590083049 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.297309207 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.590411426 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.58040771 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.58410658 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.567211404 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.569248106 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.587573317 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.601123522 seconds)
  done (took 188.470117638 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.587323575 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.657086802 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.612297916 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.672116933 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.617602937 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.61027588 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.644751721 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.641543588 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.610044776 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.598878952 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.60236124 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.644520139 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.605501734 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.712306269 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.649171871 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.63530255 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.713854067 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.621079276 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.610482005 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.61128288 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.677709767 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.686651902 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.641154742 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.689391548 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.610474223 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.690184292 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.69636067 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.597711282 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.598461413 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.725506457 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.621711079 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.65834134 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.656865542 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.620790523 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.735226167 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.728478445 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.716866456 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.641013691 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.602377855 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.619945638 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.610385473 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.665427146 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.660455066 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.604417534 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.594112993 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.795351273 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.618099236 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.611517453 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.607122356 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.588723755 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.613518179 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.613147252 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.633139361 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.744016919 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.663358598 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.630536435 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.635244928 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.683343081 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.600602851 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.703275858 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.666429991 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.722632217 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.604025448 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.721414945 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.598460314 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.594710441 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.660086173 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.63993424 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.708106296 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.60751589 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.702413407 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.679723413 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.607375995 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.605491701 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.595477553 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.669174417 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.723485229 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.65418593 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.669632944 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.650177703 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.679585995 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.587031969 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.666332976 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.631910875 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.595362514 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.724510777 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.731192262 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.603861097 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.593152838 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.623070509 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.600322072 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.621560527 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.674854926 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.642352486 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.782935118 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.639513204 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.640635059 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.604175279 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.611310368 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.605298266 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.641485612 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.606299906 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.614339699 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 3.029857516 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.652753988 seconds)
  done (took 280.748034359 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.057426884 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.727119269 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.682705673 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.873917205 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 3.031484733 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.975504962 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.652666883 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.738030862 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.656663493 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.882197616 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.781906379 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.79198801 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.654634421 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.62463591 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.73576248 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.66750623 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.768229998 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 3.00296281 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.772639855 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.671982148 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.64537779 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.933735339 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.976680874 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 3.100795082 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.69760407 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 3.131406304 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.298288604 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.820807766 seconds)
  done (took 84.894138055 seconds)
done (took 1057.24256233 seconds)
SAVING RESULT...
DONE!
