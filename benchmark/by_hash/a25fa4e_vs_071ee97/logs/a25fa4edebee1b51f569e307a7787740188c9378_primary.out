cset: moving following pidspec: 2082887
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.779911774 seconds)
loading group "shootout"... done (took 1.106194738 seconds)
loading group "string"... done (took 0.639709543 seconds)
loading group "linalg"... done (took 8.529876432 seconds)
loading group "parallel"... done (took 0.161892695 seconds)
loading group "find"... done (took 2.843226644 seconds)
loading group "tuple"... done (took 2.046925229 seconds)
loading group "union"... done (took 14.437733803 seconds)
loading group "dates"... done (took 1.439523128 seconds)
loading group "micro"... done (took 0.212223735 seconds)
loading group "simd"... done (took 4.666570201 seconds)
loading group "io"... done (took 1.36764827 seconds)
loading group "random"... done (took 9.579394205 seconds)
loading group "problem"... done (took 1.58797299 seconds)
loading group "array"... done (took 25.165075658 seconds)
loading group "misc"... done (took 1.775698796 seconds)
loading group "scalar"... done (took 42.263054225 seconds)
loading group "sort"... done (took 3.35749988 seconds)
loading group "sparse"... done (took 12.835243554 seconds)
loading group "collection"... done (took 18.421352265 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.417449672 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.110676231 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.121544371 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.107941536 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.205050683 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122186188 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.124658709 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082377544 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.209810245 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.119025737 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113772965 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.42855472 seconds)
done (took 5.561416396 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.318397576 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.088900579 seconds)
    (2/2) benchmarking "String"...
    done (took 0.078886643 seconds)
  done (took 1.303265259 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069030135 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.055733635 seconds)
    (3/3) benchmarking "different"...
    done (took 0.062016664 seconds)
  done (took 1.314932379 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.060427902 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134298335 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.061610781 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.062181198 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064729371 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.061410537 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.061351003 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.061365245 seconds)
  done (took 1.637784874 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.069589406 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.062826555 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.060814384 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.062454394 seconds)
  done (took 1.387103005 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063441617 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.117382568 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.060043875 seconds)
    (4/4) benchmarking "different"...
    done (took 0.059848418 seconds)
  done (took 1.429024566 seconds)
done (took 8.596465261 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.135012753 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.703307394 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.767385316 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.119038999 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.283603623 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.365713794 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.117312133 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.173792332 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.086022768 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.071815064 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.119774369 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077080654 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.401191317 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.363188266 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.068037503 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.180797974 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.615474076 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.082545974 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.110453295 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.236418353 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.07868505 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.079663 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084606841 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.068464152 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.117064873 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.176976059 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.619184984 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100463293 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.065153881 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.091049622 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068239569 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07304205 seconds)
  done (took 9.863377763 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091005334 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.085040902 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.063590537 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.099431705 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.090763876 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.06529057 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.070580199 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.064011023 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08320504 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128525771 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.086842679 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.09511385 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.063789487 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.064397763 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.069889042 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.154528385 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078940229 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.077574047 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.063846772 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.076920101 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.090900854 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.075845023 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.073847437 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.073527294 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.109248106 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.130369501 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.084441331 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.107632566 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.063770138 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077975725 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.092984905 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.104413262 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.064325808 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.062085657 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.105078336 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.081741554 seconds)
  done (took 4.255310821 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024420836 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.090894123 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078459621 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069060007 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106560993 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092646384 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.119227639 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.118496368 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.096074816 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.064623523 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.151622036 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.671219541 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.01337186 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071166672 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.116107249 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35613352 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.871737937 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070112041 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064555273 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067158048 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066299076 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.109285602 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.062256736 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173759656 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.61536104 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068644547 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06567469 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09360309 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.062127607 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141854448 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095033218 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069864974 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.577295524 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063683077 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.061294741 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.090567051 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.203822101 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.082647677 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063187201 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.089145716 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.063796533 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07425046 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.062013361 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112963062 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.076916769 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.550686243 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066491181 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.613376042 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229840083 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.068800385 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.066770812 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.097351149 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.060057267 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.063331685 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.681434897 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.146216006 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.063942958 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.282441952 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06742822 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064616467 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.065393543 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.096839109 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.063983559 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065083621 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069395752 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.081975973 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.009373594 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090378077 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082802154 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.064888508 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.420826358 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073417281 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.066203155 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067029207 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.065569026 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.104667813 seconds)
    (76/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.060864593 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063076742 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.062710725 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107749674 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.090511613 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086790292 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.06673761 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.063666504 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.062772552 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.581627777 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.975816966 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067618288 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065282753 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.50203243 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062376572 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063618893 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.19416889 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087579304 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.063625507 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.060475819 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.061159249 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097731901 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065561525 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.591183193 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.064352262 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.474711926 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.065739052 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097307664 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.117734505 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063139592 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098750036 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.063406131 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.060588126 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069169746 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06158187 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.060393699 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.065090205 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.061664404 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.060926414 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.062511973 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06520909 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.064648136 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063575081 seconds)
  done (took 22.470802796 seconds)
done (took 38.745074421 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.368071307 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.075402781 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.074439277 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07440342 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.074220678 seconds)
  done (took 1.840658686 seconds)
done (took 3.106958051 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.129351975 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.071128971 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.060030914 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.096835633 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.064384492 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.098068414 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.103571583 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.100757774 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.064654573 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.064459702 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.064436331 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.098683936 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.101336982 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.064545186 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.09423088 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.100428022 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.186598339 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064196064 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.064884802 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.064577367 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.064452368 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.060095526 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.064838057 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.064937546 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.096393974 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.065191272 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.0606245 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.095803463 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.065259061 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.095531746 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.065115658 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.065116886 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.064941384 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.096727926 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.065134457 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.096017992 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.060542773 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.064941285 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.065077498 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.064970821 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06485433 seconds)
  done (took 4.483225516 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.06947833 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.076679006 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.07759863 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.057521985 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066598158 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.076696599 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.057444615 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.076447773 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082574972 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.077078897 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.076902455 seconds)
  done (took 2.013741032 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068371324 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.07780425 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081184663 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.057404378 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068345333 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.077716531 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.057370226 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.07729581 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.079888922 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.078100686 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.078026694 seconds)
  done (took 2.001378063 seconds)
done (took 9.690855792 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095683949 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.061112753 seconds)
  done (took 1.338909986 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.222710352 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.486127694 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.940905301 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.095195637 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071575387 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085838354 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.208626215 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067113943 seconds)
  done (took 8.550681731 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.095983366 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.063139512 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.063353711 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.063679051 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.064560858 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.063195728 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066376854 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.06483695 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.063331228 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.064933096 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06394507 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.064026759 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.063543601 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.063234938 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.062934188 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06293837 seconds)
  done (took 2.365842094 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.098141331 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.064577661 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.093408928 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.057428473 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.067155256 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.058630989 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.065882681 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.067755598 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.065152213 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.066392613 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.066942083 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.06626917 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.066419547 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.066290691 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.067588054 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.068083439 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.068735498 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.065403096 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.067525918 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.068614905 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.066903729 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.068924866 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.070014467 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.067306931 seconds)
  done (took 2.962254521 seconds)
done (took 16.41659993 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174022781 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070471041 seconds)
  done (took 1.434829518 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065964621 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.063982717 seconds)
  done (took 1.340230609 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.070595028 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.056337086 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.072922085 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.065316006 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.056855653 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.056502056 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.072108688 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.056748834 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.056815342 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.056898569 seconds)
  done (took 1.829726584 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06102589 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06331329 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.061371528 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.059551432 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.061997969 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.057776495 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.060118402 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.05785424 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.063875271 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.056798438 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.060604166 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.077859151 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.060434085 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.07820131 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06020227 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06087292 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.062335285 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06051868 seconds)
  done (took 2.338411668 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059511759 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.05709032 seconds)
  done (took 1.331408502 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062252338 seconds)
    (2/7) benchmarking "second"...
    done (took 0.057142175 seconds)
    (3/7) benchmarking "month"...
    done (took 0.058990949 seconds)
    (4/7) benchmarking "year"...
    done (took 0.058871632 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.056765989 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.056508741 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.057009915 seconds)
  done (took 1.616380383 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.41755166 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.119409612 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.334868946 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.064863101 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.072231029 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256409842 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.059950612 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.064165217 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.063987491 seconds)
  done (took 2.711045232 seconds)
done (took 13.820037369 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080772067 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.178313196 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.082901137 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.418164676 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.074989429 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.062947416 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.092898275 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177569474 seconds)
done (took 2.398103173 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.271610852 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.208902384 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.314854524 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.143422937 seconds)
  done (took 2.888180008 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336689813 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.074212429 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074700735 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.062322271 seconds)
  done (took 1.777476848 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063455469 seconds)
    (2/2) benchmarking "read"...
    done (took 0.066698145 seconds)
  done (took 1.357166661 seconds)
done (took 7.524286426 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069508701 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.057208734 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.085882298 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.062245587 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.059070506 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.058936272 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.058366444 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063931095 seconds)
    (9/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.058203088 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.057157825 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.059247538 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.057023251 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.059121044 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.05913705 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059037431 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.058897695 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058708626 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059155227 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.05882874 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058866608 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.059034712 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.059994815 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.059017595 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.059517974 seconds)
  done (took 2.706384702 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077317762 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06094409 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.061649479 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.061484064 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.062005923 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.061672577 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.061911782 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.060836687 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.061967043 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.060802178 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062334489 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.062353056 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.060623885 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.062348884 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060653068 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.062401053 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.061990414 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061078375 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060667836 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.062278089 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.061714661 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060928513 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.062169967 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0618522 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.062551784 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062763163 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.061280315 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.061631235 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062657383 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.062956785 seconds)
  done (took 3.108289223 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064491558 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.055524726 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.055764578 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.065140202 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.055424214 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.055799017 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.05592273 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.05546976 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.055878387 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.056814485 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.056116194 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.0555962 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.056347851 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.055436871 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.055550121 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.056135758 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.060216941 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.074655808 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.05569067 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.055473501 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.059768224 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.055676593 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.055578414 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.055564666 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.055935579 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.055471955 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.055368203 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.055798377 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.055541335 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.05618189 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.056007908 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.060230832 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.061120569 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.056141384 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.065920008 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06101927 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.056225499 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.060183289 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.057069058 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.055990281 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.055884216 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.055878496 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.056189643 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.056338012 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.066225301 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.056483747 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.057147435 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.056683387 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.056441758 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.056018209 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.056119936 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060702582 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.061516789 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.05744049 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.05606493 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.057181375 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.056004914 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.056804288 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.056223286 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.056140433 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.056019706 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.059715904 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.057735362 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.056894565 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.076130153 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.057663713 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.066294221 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.05633233 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.057011325 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.060062619 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.056741082 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.074326556 seconds)
  done (took 5.42876535 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069593239 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066970455 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.073996453 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065154496 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059556136 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.056740069 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.060068274 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.056839185 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065691756 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.060435672 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.056720194 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.060001466 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065555247 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.060439074 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.057969551 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065392019 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.060305096 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059468336 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.056620528 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.060307635 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.05798879 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.060388177 seconds)
  done (took 2.612808145 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137163318 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061746433 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.101154067 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065087803 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063880399 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06566282 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.061774237 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061703728 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061782115 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062293006 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062259279 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061707602 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063756789 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062257312 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062200067 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.061971221 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061789441 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062084 seconds)
  done (took 2.481504207 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074621219 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.061285228 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.084943965 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.060989632 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.061085334 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061010144 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064632339 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.065086467 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.061042956 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.061504425 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.064955152 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06104109 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.061016358 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061315571 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061015938 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.061218039 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.060933323 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061306729 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064819307 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064387447 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.064540181 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064741029 seconds)
  done (took 2.651117965 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075882287 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.060532995 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.077624697 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062196717 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.055933026 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.055948431 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.061828319 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.060848149 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.061670426 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06031819 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060844804 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.056288937 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.062510569 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.060893251 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06275927 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.060811947 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.060464079 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.060869849 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.060423471 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.056126526 seconds)
  done (took 2.479145491 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069846325 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.058804718 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058479976 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063065368 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058383368 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.058722457 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063497381 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.058664149 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.058627212 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.080422445 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.058862494 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.058791936 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063526017 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073062762 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.058695728 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063339711 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063368771 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063437694 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.058758924 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058680059 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.080851126 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.059166257 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064036868 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059334485 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059301722 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.059341263 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059335203 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.062434678 seconds)
  done (took 2.99791425 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062852705 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.059153368 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.059242696 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.059203802 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.059097086 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.059062459 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.059206777 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.059065588 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059078713 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.059457341 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.059120581 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.059096602 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061967113 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.059069861 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.059077219 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.059171437 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059051366 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.059369115 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.059412894 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059325405 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.059103426 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058935983 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.05894357 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.059300537 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059318189 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.058891429 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.059237065 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.059259599 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.058954338 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.059399821 seconds)
  done (took 3.033184779 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071266295 seconds)
    (2/2) benchmarking "in"...
    done (took 0.066657183 seconds)
  done (took 1.389141585 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06017406 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072749133 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.055422968 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067995213 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.063581132 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.059388866 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.064273649 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063883776 seconds)
  done (took 1.751968444 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064941025 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.086262778 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.057707653 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.057825911 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.060554336 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.123622082 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.070408327 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07073232 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071384523 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.060269373 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.05806639 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.069560366 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.05723914 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.070951622 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059045456 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.066839949 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06494971 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075635662 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.070677408 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.056083079 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070395565 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058303174 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.056288278 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.058501362 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.057519767 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.064744528 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07385984 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.070381549 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.066478379 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05597325 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07705606 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.056826363 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.058015695 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.066677242 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.061660366 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.057014659 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.094492082 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.057460206 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.062164786 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.056955905 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.069457688 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078253142 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.071539183 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.075297488 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.0587471 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.058957737 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.056620499 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.058958011 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.060764947 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.066484373 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.056891197 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.064605532 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.056322841 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.058517682 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.067867244 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.057624505 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.062378115 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.066534865 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071091954 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.067683937 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.06954994 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.072791977 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.06607528 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.064673096 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.057904537 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.077130608 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.058742003 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.070569099 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072049174 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.058207656 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070665223 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.056693431 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.05599736 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.056939918 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.091404772 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.058707942 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.058247896 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.057274055 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.05704263 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.058573763 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.066944344 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062299628 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.064790641 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060569045 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073356734 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.06658842 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.057304179 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.064029356 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.076016244 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.061176934 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.057710588 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.075659506 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.061945701 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.057983117 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.076952268 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.06841952 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.060446302 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.059605934 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.062122793 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072540346 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.059966586 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057208256 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067115702 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060364586 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.061348015 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063760166 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06693608 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058558214 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068929996 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063970186 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060586668 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057416585 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063390745 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060128345 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057795192 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069087541 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059490901 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075257708 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066022687 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07429211 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074929126 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070473824 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076228719 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059505415 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058128982 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078651277 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069200215 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061023325 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07848422 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058952322 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073043631 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.213690939 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.05874806 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.066645562 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.05617796 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.058534493 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.05689267 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.061435506 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.05811035 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.058277738 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.062474106 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.065507897 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.068872209 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.05777308 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.065669471 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.056948256 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.072411926 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.066734955 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.061267803 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059437777 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.056944547 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.06819411 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.063071815 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.065693338 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.055917039 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.056944429 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.056474816 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.067156218 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.065951686 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.057817399 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.062685249 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.060969602 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.056989108 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.056676261 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.057456932 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.060141781 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059425903 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.056985641 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06442016 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.065223351 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.070139466 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063034304 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.065416212 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.055452464 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.055881479 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.057810331 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05580325 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.060978791 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.065732901 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071978902 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.067936024 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.078231398 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.057144365 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.066825661 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.058465199 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.074075275 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.070529297 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.058377483 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061968083 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.056161676 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.058911936 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.066731169 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.068849054 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.071391471 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072349123 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.061877019 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.061799689 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.056864623 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.072467452 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.05758737 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.065844325 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.066720666 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.061594708 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.057427792 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.058947436 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.066638297 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.061891874 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.057255172 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.073193756 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.063102398 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.056858578 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.071714664 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.057552031 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.068053909 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.056789148 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06083933 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.062537685 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.05910803 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.066922127 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072896073 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05623738 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.057819735 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073160072 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059187287 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.058837252 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.065734282 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.072995221 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.062213422 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.065534063 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068602181 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068086149 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063156399 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068634716 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059697319 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068145236 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062369913 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07086455 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058604384 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077482981 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057627674 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074145534 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.05893458 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069901413 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059308793 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068495601 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059772257 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076435268 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060697846 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059826497 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071118148 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.0576237 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.06876334 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059003309 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064380149 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065998891 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068986625 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061606841 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069176988 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061365825 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068311894 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064112884 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068214924 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069141174 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063942887 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059210128 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067813895 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071244222 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.22640998 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.059144445 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.058422069 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.057517596 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.06641554 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.058209913 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.058010382 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.065189152 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.061584807 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.062606679 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.058080172 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.058304678 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.058085265 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.065197998 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.066130548 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.074675977 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.065262553 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.064148154 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.065813797 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.056116574 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072183555 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.056607711 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.066892707 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.05533969 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.061436823 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.065699838 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.056463483 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075444764 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.057733402 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.064370407 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068573219 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.064931837 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.060185124 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.074428394 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.059344268 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.064980608 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.064499788 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.061064747 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.063153133 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.058025415 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.064962559 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06607965 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.067056459 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.057308857 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.064079662 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.065528346 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.057780796 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.063192791 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.057912175 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.065067773 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.057962955 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.056030495 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.061830252 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.068686138 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.062004555 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.062190998 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.057501343 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.056094447 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.057584995 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.063541747 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.061968065 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.065972429 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072937039 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.056335782 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.058311505 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.057045793 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.061018271 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07583875 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.067207603 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.065453449 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06211567 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.056617064 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059047121 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059213182 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.057722193 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.060743029 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.056469839 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.056897657 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06806787 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059047636 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.061857934 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.057564836 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.05834298 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.06712181 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.061979562 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.057958411 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.064057836 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057018827 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.062495643 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.056489176 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.058897531 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.061924152 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.056739782 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.061016161 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.06783907 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.074057646 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.064038674 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.066579097 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.058606507 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.065702269 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073412596 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064845811 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058790611 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067103182 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057074158 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077838025 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068339356 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067481881 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068856604 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059770003 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076088265 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063227045 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068799778 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074680608 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060001352 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066423014 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.05854913 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07514138 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063333646 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058500731 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067167159 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066830218 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064696005 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071811683 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060404809 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067981031 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06592616 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062865584 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061607475 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061457143 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068570703 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07629211 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060700666 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064788729 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067726906 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067995111 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.226412551 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070297136 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.065498222 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058248046 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.058611611 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.060705432 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.057613505 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.068760566 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.057150736 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.061381703 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.061247836 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.056147231 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.063302177 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073024107 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.066045076 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.066142433 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.055966107 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.055660368 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.074330506 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.060365525 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.059504889 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.064620785 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.066552212 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.068571407 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.065735547 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.073386219 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.056980286 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.062352037 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.068723944 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.057195029 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.056409467 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.060405866 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.057809176 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.065572473 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.066222389 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.063991715 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058324127 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.063182199 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.070009279 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.057653276 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.061378039 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.0608518 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.057195009 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.066973596 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.064617479 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.068083294 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.057779067 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.05614732 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.060083551 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.065472977 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.064170966 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.06547487 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.057228487 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.062596412 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.070994211 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.064710333 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060212643 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.056760336 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06020762 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.066363307 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06118486 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.056751668 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.061856829 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.060866156 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063464856 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.066624573 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.061795241 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.056703646 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.074354427 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.065654161 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.066742676 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059173001 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059360087 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057954622 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057014266 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.06869162 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.056980538 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059024228 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06218882 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059061953 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.075466351 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.065775125 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073507881 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058429526 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.062093862 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057075053 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067000288 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.061914951 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.057598319 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.068028326 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.056689126 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072856689 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.069212995 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.062519616 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.056955971 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06248793 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.065640593 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.072619949 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067126926 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.066520011 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.061169017 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.067530244 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.059704443 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.069013912 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.057569953 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.056755734 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.068044268 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066558392 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071877937 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058418176 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069193472 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060929202 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067228366 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067172703 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060721091 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060673962 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06087103 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06875996 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063673625 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.0687119 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.063933257 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076729448 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060257561 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070606877 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068496213 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070530736 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074023807 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072937913 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068278635 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060415286 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067369212 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068164462 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061218032 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064640497 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063683645 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083353752 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.221593007 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.05939757 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071509054 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.062755059 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057052245 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.062671203 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.061677201 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.066894578 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.057593069 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.067209878 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.060338289 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.057575975 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06164509 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06157221 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.055575609 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.056242887 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.056528695 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.066339907 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.060971804 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.056816504 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.075534547 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.057999107 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.065304347 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.067528944 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.063367576 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.05800435 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.055484822 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.057560668 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.069897863 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072024573 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.060002971 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06526202 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.057911063 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.065921303 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.055651798 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.065469777 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.064690552 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06541918 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.056201901 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.056921536 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07178086 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072504122 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.061576487 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.066064209 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.065844443 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.058033718 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078339742 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.065620964 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.057645627 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.067476654 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058636016 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.055827454 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05563333 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.058480264 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.068824191 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.056938165 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.059844024 seconds)
  done (took 39.948465325 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098605612 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.057839352 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.056208045 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.056296745 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063343319 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.057463777 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.056376373 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.05752765 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.057510933 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.058743864 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05651945 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059216553 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.062296021 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.06929346 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064613183 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060402431 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.056622505 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.058327747 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.056601622 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.057645609 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.062595119 seconds)
  done (took 2.641437923 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.063126064 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.060428272 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.060005052 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06017456 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059462038 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.056590478 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.060320011 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.056743183 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.060727929 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.057149187 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.060736151 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.056744699 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.057121027 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.057098365 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.057027398 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05804624 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.0606895 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.059831768 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.05666824 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.060266107 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058108534 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.060140745 seconds)
  done (took 2.634107844 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.061120333 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.057250139 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.065342771 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.05584398 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.055855097 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.059008774 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.055886813 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.060822666 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.061351663 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.060845872 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.065592135 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.057165941 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.056095771 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.062386098 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.056224903 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.05727845 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.101191422 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.057757823 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.057664605 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.056141896 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.059187033 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.066165933 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.056367061 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.056546202 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.060963907 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.059540339 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.056345357 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.059291614 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.057377035 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.061373628 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.057811801 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.056396572 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.065893462 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.065221954 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.061068538 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.061125165 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.058384427 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.057569361 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.056474042 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.056522012 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.065341568 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.058029132 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.056775757 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.058122964 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.065965317 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.056613963 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.056364771 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.066087216 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.056455915 seconds)
  done (took 4.290585753 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069408957 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.10704579 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.062084537 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.088709841 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.068415137 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.061872544 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.062077314 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.089829011 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.057571909 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.057901076 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.069164453 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.069109579 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.059097184 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.060321566 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.063404425 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.058955931 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.059494113 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.058213833 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.061541796 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.058908957 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.061939593 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.063593137 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.068763144 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.069029295 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.060291876 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.058684921 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.058916966 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06056936 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.068895765 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.062215765 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.060766656 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.061368503 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.069291108 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.064198671 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.058999719 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.059235654 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.069981279 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.059636429 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.059382941 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.058159748 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.059431148 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.061028222 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.063998958 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.070818953 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.05993243 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.064368638 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.059805029 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.057814134 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.06968346 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.059507537 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.063364198 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.070639033 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.060726678 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.060004092 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.061006351 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.069570382 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.059881258 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.058444163 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.059818272 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.069230547 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.057939864 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.060510746 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072943574 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.059228563 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.063243794 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.070439404 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.064471792 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.061733969 seconds)
  done (took 5.847276222 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069136092 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.091275098 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070745071 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07052123 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066375939 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.06659745 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066470913 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.066529968 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.066454414 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069518179 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066541921 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.101867368 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.063481355 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.068015924 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.066569249 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.066589627 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.06655348 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066592864 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06682076 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066736676 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.066942426 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071791902 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.066988989 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071738597 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.069504302 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063571336 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06682638 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.066971911 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072074597 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.066878669 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.069552705 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.067063911 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.067078228 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071946497 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.069553704 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.066833906 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.057981282 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066889275 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.067019795 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.067085793 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063925012 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072613826 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067294593 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.063895405 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067479536 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.067357638 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073102373 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.070131598 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069149275 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.070562331 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.068110524 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072604753 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067331462 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.067424321 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072602187 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.074695109 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072642533 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072588411 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067439396 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072386729 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072438533 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.074911176 seconds)
  done (took 5.678576591 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072409649 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062267303 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.074680683 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.056277838 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.056226584 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065293325 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.056440426 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.056433475 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063411809 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.062674307 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06412186 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065295636 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067220097 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064170346 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065192853 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067112717 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065165305 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065116356 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062597341 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065444138 seconds)
  done (took 2.653727084 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074490524 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.074848535 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.061853975 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06473702 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.061656006 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065170481 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.061208793 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061928672 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06228657 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061863746 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066035851 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066238827 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062231226 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065337936 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066157766 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065107437 seconds)
  done (took 2.39910802 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062737618 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.064028735 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.062739805 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.057665554 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.059065985 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.057049359 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.057756547 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05635473 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.059059773 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.071090246 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.05765224 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.059935698 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.057779385 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.056885724 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.057088367 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.059768926 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.059015613 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.05747528 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.057684518 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06178677 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.065297696 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.058173338 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.059760477 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.057452672 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.059831638 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.065735681 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.059101842 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.059727847 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.057629189 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.060291738 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.059847753 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.064028598 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.059765666 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.05809933 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.056845232 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.057677562 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.058068406 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.060239553 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06036344 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.058211248 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059485546 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.060009271 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.0582026 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.058539659 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.059315595 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.060280522 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.05939829 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.063424018 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.058064927 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.059963081 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.058199078 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.059532553 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.058642408 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.065250355 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.060394171 seconds)
  done (took 4.645462292 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076673411 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.061695564 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.056155955 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.055977141 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.061124605 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.061789678 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.061474688 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.061802631 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062178954 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05632577 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.062112604 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.061194068 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062202906 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.061797924 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062122449 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061744149 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.056335352 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.061870116 seconds)
  done (took 2.478651865 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065622301 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061763675 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.060715219 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.057932264 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.057814897 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062520993 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.056733094 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.057968609 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.057925654 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.058382652 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058358805 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.057860554 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.057832265 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.057834772 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061900799 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058197335 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.057820472 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.056849664 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.058253406 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.056615793 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062488474 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.056805574 seconds)
  done (took 2.662503984 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086647164 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.079566587 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.123758272 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.075846036 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.084341973 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.067565714 seconds)
  done (took 1.882818351 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093527187 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.094157218 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061395417 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.061218715 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065369561 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063841368 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064115154 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064213133 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067396883 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068133396 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064372862 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067596081 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067361392 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069244971 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06588336 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065869256 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064207451 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064006865 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.061479191 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071980059 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064916977 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068148308 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064906561 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064574689 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064748567 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069759498 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068198867 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068723515 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06467278 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068254871 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066407402 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064835784 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068384772 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068825406 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.062058825 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068134999 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064953695 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072328365 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066504496 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069929492 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062021451 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066959483 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068766846 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068447714 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068916883 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065494054 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068527072 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065304425 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065439163 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074487587 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067281037 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070430799 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06713027 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06889573 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068645709 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074534243 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069497158 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070622831 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067168419 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069408047 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070393905 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067041577 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070360754 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069443762 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067220656 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070653969 seconds)
  done (took 5.857134396 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103180205 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062069141 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064101804 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067810853 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068895847 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064528614 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064527687 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064472521 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064570373 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06221371 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100076256 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064823054 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072033969 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069329563 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064500565 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064383702 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064448927 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069254364 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.062244439 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073628605 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064879754 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069831257 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069759688 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069684536 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068681935 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066559024 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064841185 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064838104 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064689711 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064770709 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067823124 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064947305 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069670264 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062378353 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069736348 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064974514 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064834761 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067842112 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064837006 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066648325 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069954134 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072863526 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065227145 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065196244 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069420065 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065310936 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065303318 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.062699908 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065265729 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.062766802 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06936535 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069323612 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069288044 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070336354 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065594986 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065427147 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065259111 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065373168 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065362854 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067543595 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070392329 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065410156 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074460011 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065360497 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065531433 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070580593 seconds)
  done (took 5.866394936 seconds)
done (took 121.34648274 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.25706621 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.221193466 seconds)
  done (took 1.830292305 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.07296481 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.236350488 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.073824031 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.070390378 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.130133042 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.129580775 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.075383533 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.068353419 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.070502499 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.067882386 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168796698 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.075658608 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.068316342 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.067917468 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.067765734 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.067673083 seconds)
  done (took 2.892879329 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.119049395 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.177939817 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.077604634 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.088933761 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.14781861 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07364523 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.068846432 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.072381358 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.073399395 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.066538777 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.11460472 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.080671048 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.071277566 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.072501331 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.068694006 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07137828 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.072276122 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.073362676 seconds)
  done (took 2.97017378 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.102025226 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.11039489 seconds)
  done (took 1.595046352 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159956754 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105257226 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.143529636 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.348882565 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137409094 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.139392396 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.143611004 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.138789515 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111112368 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.136156251 seconds)
  done (took 2.942411259 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.104870505 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.100912552 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30401504 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.098738158 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.077868466 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.072853559 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.070585244 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.075621215 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.070872449 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.072273198 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119186423 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.070862265 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.068235734 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121032139 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.095987539 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.102725311 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.066888667 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.074043152 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.075817197 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.066688078 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.071854894 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.075837376 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17641195 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.074876256 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.098211646 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.071072412 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.073277438 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.070232281 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.070219491 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.074744432 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.075359381 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.097760137 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.074503579 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080497071 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07282878 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.094192789 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.067875087 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097153285 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.070506512 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.068561549 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.070885736 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.075686429 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.068384915 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.074760869 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07132586 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.073365295 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.076228671 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.066913575 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.071307034 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.070788872 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.068666831 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.072909636 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.072452255 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.073617668 seconds)
  done (took 5.964533967 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.119541091 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109103132 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.065798666 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113302154 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105285521 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066175774 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.120277693 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100743315 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.118962426 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065574156 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065727511 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.064929252 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072358156 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076202356 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115805759 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109231708 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067281595 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.065753893 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107804416 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108678315 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.064854861 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.120881908 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.111816602 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107876454 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.064647923 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065950004 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.064559658 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.065012208 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073145833 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.072673113 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.065015395 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075198443 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.076585233 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0716881 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.064341552 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.064589326 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.064495398 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.072823248 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074646407 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074556118 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071146763 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064321041 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.064619081 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.065198265 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065601946 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.064265177 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074156802 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.072790421 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074248903 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065665709 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.065131354 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.064563396 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066096461 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072052912 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071266297 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07258372 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075531755 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065780103 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065073955 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.066582994 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076319831 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.073246892 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.072764501 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066236922 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074463435 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065176086 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075350377 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077592957 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06505748 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06553011 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.065202063 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065156605 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.065495188 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071514253 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.071682573 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.065595466 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.065949665 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064977308 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.073330444 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.071849471 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065322763 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074494858 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.064789124 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.065573214 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065955362 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067745699 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075666394 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.074235813 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067219716 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067195995 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06647129 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066461858 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.065861592 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076246191 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07465636 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074837153 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.077454287 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067340386 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078424326 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07635937 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067841867 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075441544 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067490075 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067863952 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06771885 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075441478 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074820891 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076848639 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067444463 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067093989 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.227583722 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074680183 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065103237 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070707974 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073558373 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.07110608 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.064293843 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074024278 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064719016 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.073571027 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0646167 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072839664 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064746026 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.070771814 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.064448992 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.063700534 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.064426108 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073511924 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.065510145 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.064261455 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.064688851 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.064387581 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07067865 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074746253 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.064994932 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07089809 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.070849916 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.064694371 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.072482584 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.064243578 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.072944478 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.064440809 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.064509151 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.063675002 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075241431 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.064421166 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065218828 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.064390151 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.072884606 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.064427824 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07263789 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.070033662 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06382175 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.073589977 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.072698664 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.070072135 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.073178522 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.064922117 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.064584493 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067341629 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06501116 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073574994 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07497974 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066171719 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.064996646 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07043584 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074263766 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.064622242 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07107265 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071119803 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071650643 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.332288816 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066599258 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074846005 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076635207 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.071552355 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074369578 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072379644 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065005294 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.071239164 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074385569 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.064906577 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077542475 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065026566 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.075212557 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075182691 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.070986236 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.074657734 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.075923407 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074331965 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.073760204 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075935615 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.064647467 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.064909585 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072115298 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.0653487 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.065485714 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071917324 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.065804512 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067081657 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080603794 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067024171 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077454907 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066127918 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07431151 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065762043 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066866071 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078959263 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06646175 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067131497 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075158792 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066905691 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074457439 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078017518 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074948973 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067298472 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067735212 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.079301724 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.079489599 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067298487 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067043057 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.224835196 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073890014 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072839822 seconds)
  done (took 18.187583475 seconds)
done (took 37.776800749 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170860544 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111266105 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.22430216 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.201125189 seconds)
  done (took 2.190495945 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.099457102 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06128048 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.076125832 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.085008922 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.061487396 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.071406231 seconds)
  done (took 1.880859228 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203618723 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176624535 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.25433894 seconds)
  done (took 2.054140862 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.381511022 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.152432273 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214699744 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.516364071 seconds)
  done (took 2.790588751 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107780177 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.098155835 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.074069926 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.109747812 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082213632 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.059216328 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132660709 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.065866007 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.095107611 seconds)
  done (took 2.329327703 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.138987534 seconds)
done (took 12.798605939 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.285802369 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.180623136 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.217473598 seconds)
    (4/341) benchmarking ("sort", Float64, false)...
    done (took 0.164092232 seconds)
    (5/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.10701654 seconds)
    (6/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.096527732 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143226293 seconds)
    (8/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.252610607 seconds)
    (9/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.191874377 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15205406 seconds)
    (11/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.213748342 seconds)
    (12/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.232903211 seconds)
    (13/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.215036838 seconds)
    (14/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.177523281 seconds)
    (15/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.158327403 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.119747425 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089072244 seconds)
    (18/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.08761335 seconds)
    (19/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.190093489 seconds)
    (20/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073843871 seconds)
    (21/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.214115831 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073335275 seconds)
    (23/341) benchmarking ("sort", Int8, false)...
    done (took 0.151140104 seconds)
    (24/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089306139 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074063233 seconds)
    (26/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064887029 seconds)
    (27/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.25207102 seconds)
    (28/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.142094184 seconds)
    (29/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.220496842 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.076004614 seconds)
    (31/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074651827 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085078255 seconds)
    (33/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.192931531 seconds)
    (34/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071991364 seconds)
    (35/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.063364298 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089417419 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.071004552 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.063704334 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.174943635 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082879428 seconds)
    (41/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.241392829 seconds)
    (42/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.197513916 seconds)
    (43/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.191507219 seconds)
    (44/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.189862118 seconds)
    (45/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073135202 seconds)
    (46/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.13056123 seconds)
    (47/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074800967 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077173694 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073235307 seconds)
    (50/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.065151148 seconds)
    (51/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.222659675 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.085722373 seconds)
    (53/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.167091251 seconds)
    (54/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.141498448 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.233709784 seconds)
    (56/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065884545 seconds)
    (57/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154376862 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.180624693 seconds)
    (59/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.063613971 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.075328619 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.120368364 seconds)
    (62/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073931518 seconds)
    (63/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076458377 seconds)
    (64/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.158869438 seconds)
    (65/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.087569812 seconds)
    (66/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087923418 seconds)
    (67/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.230841993 seconds)
    (68/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.078942408 seconds)
    (69/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079374528 seconds)
    (70/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.084933865 seconds)
    (71/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134085698 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.241965894 seconds)
    (73/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074490161 seconds)
    (74/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.427507653 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175267213 seconds)
    (76/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.149124355 seconds)
    (77/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.079612162 seconds)
    (78/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.082565489 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.087758293 seconds)
    (80/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.079271735 seconds)
    (81/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.141165288 seconds)
    (82/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.154519045 seconds)
    (83/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.139045449 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145471219 seconds)
    (85/341) benchmarking ("sort", BigInt, false)...
    done (took 0.259346559 seconds)
    (86/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066918118 seconds)
    (87/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.201322997 seconds)
    (88/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.081807313 seconds)
    (89/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.065588684 seconds)
    (90/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.064055409 seconds)
    (91/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063540131 seconds)
    (92/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.075886639 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069833504 seconds)
    (94/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.169979512 seconds)
    (95/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.070081587 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.138940292 seconds)
    (97/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.069174041 seconds)
    (98/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.217364153 seconds)
    (99/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.069815245 seconds)
    (100/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.072319958 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068798528 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114103801 seconds)
    (103/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138697456 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.081000349 seconds)
    (105/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.14419032 seconds)
    (106/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.123080287 seconds)
    (107/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.139534294 seconds)
    (108/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.192390471 seconds)
    (109/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.064729126 seconds)
    (110/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.062221025 seconds)
    (111/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.062194799 seconds)
    (112/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.065323941 seconds)
    (113/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.162403965 seconds)
    (114/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.070007896 seconds)
    (115/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.070427961 seconds)
    (116/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.062047067 seconds)
    (117/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.069974046 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.062899972 seconds)
    (119/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.134497677 seconds)
    (120/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066341454 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13006552 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.085605555 seconds)
    (123/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.064163792 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.061706486 seconds)
    (125/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.069334228 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.122777664 seconds)
    (127/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.062464196 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124791352 seconds)
    (129/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07412204 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.061818577 seconds)
    (131/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.063532277 seconds)
    (132/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.061393809 seconds)
    (133/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.072825606 seconds)
    (134/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.077261229 seconds)
    (135/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06241773 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091231202 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.072102161 seconds)
    (138/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.065970252 seconds)
    (139/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.063501692 seconds)
    (140/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.200723096 seconds)
    (141/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.062948897 seconds)
    (142/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.0625384 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.062036311 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083277512 seconds)
    (145/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.06270686 seconds)
    (146/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.068347437 seconds)
    (147/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.062699259 seconds)
    (148/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.079735288 seconds)
    (149/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.061886562 seconds)
    (150/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.060998285 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085369415 seconds)
    (152/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.071481164 seconds)
    (153/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191929456 seconds)
    (154/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.066806584 seconds)
    (155/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069214441 seconds)
    (156/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071935329 seconds)
    (157/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165280931 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071290358 seconds)
    (159/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.069930148 seconds)
    (160/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.072610384 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.09110566 seconds)
    (162/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072274012 seconds)
    (163/341) benchmarking ("sort", Bool, false)...
    done (took 0.140807385 seconds)
    (164/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.071510293 seconds)
    (165/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.063731039 seconds)
    (166/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169604325 seconds)
    (167/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.167064412 seconds)
    (168/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.069296955 seconds)
    (169/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.166663572 seconds)
    (170/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070268995 seconds)
    (171/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072773042 seconds)
    (172/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063604229 seconds)
    (173/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.065667472 seconds)
    (174/341) benchmarking ("sort", Int64, false)...
    done (took 0.064641357 seconds)
    (175/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071641378 seconds)
    (176/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087827862 seconds)
    (177/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067319974 seconds)
    (178/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065038904 seconds)
    (179/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.187911745 seconds)
    (180/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069230396 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.159683673 seconds)
    (182/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072891842 seconds)
    (183/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.064920699 seconds)
    (184/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.360503512 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06320499 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080848568 seconds)
    (187/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.079481181 seconds)
    (188/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.163943406 seconds)
    (189/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.078802874 seconds)
    (190/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.227501446 seconds)
    (191/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.063516976 seconds)
    (192/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.060626113 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.071318188 seconds)
    (194/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.064653666 seconds)
    (195/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.065205295 seconds)
    (196/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.080128 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.060250037 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.127791052 seconds)
    (199/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.091451824 seconds)
    (200/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.199724926 seconds)
    (201/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.062870778 seconds)
    (202/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.062710646 seconds)
    (203/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.062147198 seconds)
    (204/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.061860361 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.062241475 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.076632209 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.15272143 seconds)
    (208/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.129084096 seconds)
    (209/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089245928 seconds)
    (210/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.061671548 seconds)
    (211/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.151698059 seconds)
    (212/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.06656167 seconds)
    (213/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.062025257 seconds)
    (214/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06676449 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.159530431 seconds)
    (216/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.061906658 seconds)
    (217/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.062163332 seconds)
    (218/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.062280571 seconds)
    (219/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.062062272 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.059824326 seconds)
    (221/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.142916787 seconds)
    (222/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.065443829 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.086835285 seconds)
    (224/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.062315011 seconds)
    (225/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.079097949 seconds)
    (226/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.080914183 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.069373179 seconds)
    (228/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.06544303 seconds)
    (229/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.061812768 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.06847089 seconds)
    (231/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.071110161 seconds)
    (232/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.062097547 seconds)
    (233/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.070837677 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.061029815 seconds)
    (235/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.062572383 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.064243751 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.160153203 seconds)
    (238/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.06252848 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06438937 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.064635805 seconds)
    (241/341) benchmarking ("sort", Float32, false)...
    done (took 0.134697297 seconds)
    (242/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.062304904 seconds)
    (243/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.068549825 seconds)
    (244/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.073802489 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.072124743 seconds)
    (246/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.063180785 seconds)
    (247/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.068952544 seconds)
    (248/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.181399632 seconds)
    (249/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.064404056 seconds)
    (250/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.062801445 seconds)
    (251/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.069023065 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113118109 seconds)
    (253/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.140509211 seconds)
    (254/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.063775115 seconds)
    (255/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092255441 seconds)
    (256/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.06286216 seconds)
    (257/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.061877476 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.117950894 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.069056789 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066193763 seconds)
    (261/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.060626095 seconds)
    (262/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.061493155 seconds)
    (263/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.062465612 seconds)
    (264/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.063276624 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.060311095 seconds)
    (266/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.062081537 seconds)
    (267/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.062074617 seconds)
    (268/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.062888723 seconds)
    (269/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169698221 seconds)
    (270/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.069966407 seconds)
    (271/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.070214184 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149186079 seconds)
    (273/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.072652918 seconds)
    (274/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.200557911 seconds)
    (275/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.083877889 seconds)
    (276/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.069605496 seconds)
    (277/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.063515169 seconds)
    (278/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.061765184 seconds)
    (279/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.06488175 seconds)
    (280/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.077189911 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061020097 seconds)
    (282/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.063170489 seconds)
    (283/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.067159444 seconds)
    (284/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.063258833 seconds)
    (285/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077048186 seconds)
    (286/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07457776 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.158132319 seconds)
    (288/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063499623 seconds)
    (289/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.06348189 seconds)
    (290/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064082128 seconds)
    (291/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141376608 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08214609 seconds)
    (293/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.082496981 seconds)
    (294/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.063331544 seconds)
    (295/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.063223962 seconds)
    (296/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.067484798 seconds)
    (297/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06354608 seconds)
    (298/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.063469444 seconds)
    (299/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.063196721 seconds)
    (300/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.06305429 seconds)
    (301/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.063486547 seconds)
    (302/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.063534457 seconds)
    (303/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063450028 seconds)
    (304/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.066265787 seconds)
    (305/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.064581119 seconds)
    (306/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064628204 seconds)
    (307/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066561727 seconds)
    (308/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.072574919 seconds)
    (309/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065081377 seconds)
    (310/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065653557 seconds)
    (311/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064844295 seconds)
    (312/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.068256169 seconds)
    (313/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.063094024 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124015286 seconds)
    (315/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.072516405 seconds)
    (316/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.082615253 seconds)
    (317/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.167617637 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06456156 seconds)
    (319/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.064152789 seconds)
    (320/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068926885 seconds)
    (321/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062710244 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076029762 seconds)
    (323/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06676959 seconds)
    (324/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06302002 seconds)
    (325/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064715839 seconds)
    (326/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064183795 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.06419182 seconds)
    (328/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065227321 seconds)
    (329/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.064802426 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064236617 seconds)
    (331/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064776614 seconds)
    (332/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064505974 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064073438 seconds)
    (334/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094135717 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088917566 seconds)
    (336/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064867602 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089648367 seconds)
    (338/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080377652 seconds)
    (339/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072381854 seconds)
    (340/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180843084 seconds)
    (341/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067491788 seconds)
  done (took 35.944241281 seconds)
done (took 37.38124099 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.099687076 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.07650832 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07411444 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.071149787 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.074613307 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.074028342 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.074585171 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07229582 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076705726 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.073351494 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.073261838 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.061433597 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.069209558 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078751144 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.070622863 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.077390299 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.074081285 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.076726068 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.062381973 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.0769078 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.090345013 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07446982 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.070255082 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.0761382 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.062133225 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.070315203 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.085325418 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083601674 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069154188 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.071616665 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.069244418 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080501208 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.069420757 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.068897075 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.071519364 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.066864552 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.071739822 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.068114013 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0857714 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.066866512 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.062314747 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07378041 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.068945671 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.070443556 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071447213 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.074475843 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.06725055 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077632596 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.061597714 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.073052076 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.085518909 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067289251 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.06929567 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.070412112 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.066998097 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07153174 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069051159 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.073413754 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.06686646 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.073387859 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074075152 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.069958206 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.061922494 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.070946431 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.069239039 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.069443243 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.060683413 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067340457 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.061933298 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.061870927 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.061143472 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.070718087 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.068656575 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.06681869 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.061164466 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.061768714 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.061072762 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.073563898 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069193454 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.071041794 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06228372 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.067042587 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.066701202 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.062425035 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067260082 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.073136885 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.060939261 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.062085695 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.060810688 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.076474969 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.068104319 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06163153 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.073439918 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067355845 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067481829 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.061714196 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06117604 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067154777 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.069915612 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.061858017 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.060672722 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067335995 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.06688697 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.070976265 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.062346314 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067311176 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067220101 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.060779414 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.070988712 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.069080762 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.070961278 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.074733167 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.071193537 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075459157 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.062662975 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.061003151 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.071715323 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.062464611 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067577243 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.069902683 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.067336848 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070404093 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.062662336 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.061376649 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067422295 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.067781083 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.062517483 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.0625938 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.062577505 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071569185 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.069640314 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061145354 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.062177202 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07158176 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072253095 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062330104 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062046455 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072232366 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063585987 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068958202 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068515962 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072808558 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063013709 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06374433 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063226441 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062963747 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062539209 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068818382 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069155831 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.223522825 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070775099 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.068745766 seconds)
done (took 12.313922011 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.066012565 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.104837484 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.075410223 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.077591605 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.074618795 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.062916937 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.065679934 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.081241457 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.065368855 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08676896 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.087330015 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.083538298 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.090861993 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.060490479 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.061834205 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.062523357 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.060198043 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.073904974 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.078762684 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.085355452 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.097996849 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.061553331 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.077244475 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.082354985 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.074600122 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.080775496 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.063565648 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.062930052 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.0652577 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.079359219 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.08853368 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.062153529 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.063368048 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080768501 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.077841727 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.070628943 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.063166241 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071170244 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.063133403 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.062196697 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.064186564 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080229885 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.068770081 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.068988814 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.063277046 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.063210024 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.062566672 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069559102 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.075903343 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.068017274 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074751432 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081411365 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.064218875 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.062616485 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.060914786 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.069841297 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.062489782 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.063160457 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.063005363 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.062344251 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.063053648 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.065189289 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067929195 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068463141 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.066172872 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.068802634 seconds)
  done (took 6.215030404 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.081411948 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.088540653 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.076152672 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.076238932 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.061485244 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.061990808 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.062137623 seconds)
  done (took 2.066498103 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.066048355 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.070046685 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074179482 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073811558 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.08352665 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.071444745 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.062792564 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.094584368 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.061635343 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.070606728 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.080877338 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.075413438 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.065511574 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.074627714 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.062878013 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.074076522 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.062856194 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.069523708 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.069962175 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07529403 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.066450163 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.094616549 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.076014975 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.063287288 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.076239599 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.069804439 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.064808273 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063349818 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06498282 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06233621 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.062323384 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.085020509 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.069045689 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.069303798 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063021719 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.061767437 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.067003599 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063267262 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.066686472 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.069646349 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.066111265 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.064499596 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06485567 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.062416858 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.063661528 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.06722807 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.063310588 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.06248169 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06190331 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.069942846 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.061890539 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.068980195 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.064944532 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.067459603 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.069597918 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068613277 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.069700348 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.062863481 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.069938091 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072138523 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064036283 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075139565 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074057931 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.066147552 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074078074 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.071318008 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.069163893 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.066170056 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.062047486 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.061964172 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.062817045 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074155911 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.065723644 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.064889729 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.067510881 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.069800829 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.066597876 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.078083463 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.078158227 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.076347791 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.065271995 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.062564607 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.066597892 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.078119604 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.067529383 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.062428381 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.063372212 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.062089243 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.067483353 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064525521 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.067486273 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.062570585 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073272151 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.065499899 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.065127825 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070837252 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.062982807 seconds)
  done (took 8.195298122 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068409408 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.064857404 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.063330955 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.063202791 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.063217827 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.063050851 seconds)
  done (took 1.976919828 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.088350697 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.062470214 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.073783522 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.062157234 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.084008923 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.068587144 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.068979386 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.064583504 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.078598828 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.073046179 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.069034228 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.071470267 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.071548257 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.064317943 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.068728467 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.063533266 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.068672459 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.065458807 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.072357842 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067441372 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.076014433 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.064251367 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.064382467 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.074584495 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.065554037 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06360751 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06410254 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.073237439 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.072822972 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.064752985 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.064405541 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.065938977 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.071649076 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.064740212 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.069357174 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.071547793 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.062798526 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.068315398 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065304344 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.065874855 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.071385343 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.064837169 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.065174631 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.068320787 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.06478235 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.071661363 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.068475448 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.06706254 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.069208438 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.068224298 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075831932 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.063342994 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.065785343 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.068306274 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.071824704 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064627014 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.068324212 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.069059404 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.064394981 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.071688358 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06285412 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.065878835 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.064866707 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.06645657 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.068105806 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.068438207 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.071840106 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.064865032 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.064965644 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.062873149 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.068368412 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.062924298 seconds)
  done (took 6.465501541 seconds)
done (took 26.462173265 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.565317138 seconds)
  done (took 2.098606821 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.631010097 seconds)
  done (took 2.208494583 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.283998239 seconds)
  done (took 12.85713806 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.401946682 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.482086007 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.761948704 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133248651 seconds)
  done (took 3.386760287 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.869175185 seconds)
  done (took 2.451039456 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238145369 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223957429 seconds)
  done (took 2.062116384 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.39937798 seconds)
  done (took 1.970669387 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.1874416 seconds)
  done (took 2.759286748 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23749797 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.166513685 seconds)
  done (took 1.987929142 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.53181485 seconds)
  done (took 2.108243034 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.678244599 seconds)
  done (took 6.260196271 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.245395625 seconds)
  done (took 1.8788106 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23628348 seconds)
  done (took 1.817068445 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.617623555 seconds)
  done (took 4.192351706 seconds)
done (took 49.616563556 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.083994345 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.081439695 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.081154401 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.076816799 seconds)
  done (took 1.876729354 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.072773681 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.065787167 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.069452367 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.068922554 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.066559541 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.067421872 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.067973288 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.06506977 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.066731775 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.065531592 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.064178234 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.065622965 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.068227563 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.065453418 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.068061046 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.069270761 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.065661154 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.065486886 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.067826556 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.065448083 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.068148544 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.065432325 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.063776601 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.065269507 seconds)
  done (took 3.182018069 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076976346 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.067766086 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.070640037 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.066387348 seconds)
  done (took 1.866526186 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.075606685 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.072326771 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.080809662 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.085505139 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.071403153 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07248543 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.079053316 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.079862641 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.061361905 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.082786788 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.063641804 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.062399698 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.062320043 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.081202624 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.078723751 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.058137691 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.059642786 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07252373 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.071750004 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.074620263 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06399047 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.061105216 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.071760445 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.072699099 seconds)
  done (took 3.30130053 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081399915 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.061577743 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.07723711 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08662113 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.087383386 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.060946248 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.075202811 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.08808297 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.123624184 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.061570359 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.067218973 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.061312692 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.099963158 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06144093 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.077225242 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.104976133 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.107955129 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.065459349 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.094666976 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.061498414 seconds)
  done (took 3.199247434 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.074760886 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.065676798 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.066080606 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.061175003 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.071974205 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.068304907 seconds)
  done (took 2.003512457 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.067194111 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06688637 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.062570578 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067906744 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.063604084 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.063510137 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.062867561 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.061683715 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.061650697 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.062476036 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.062613437 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.063193099 seconds)
  done (took 2.355123644 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158255835 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.06845263 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.06600336 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.061747276 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.063356147 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.062335178 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.077330759 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.064574153 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.080573911 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.062854473 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.062746079 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.065027577 seconds)
  done (took 2.483786372 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104466915 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107643791 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140507834 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112460109 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112262617 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091661071 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12528579 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09243104 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156396795 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13329065 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113204519 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090105986 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082468494 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.065364316 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096683194 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117148122 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135976736 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068836725 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109838427 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164723206 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130650937 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134171669 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145495804 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11377341 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088310012 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145375033 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093286376 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099674916 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121365068 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125461172 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116566862 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.094412248 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.067710518 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.066827528 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147414758 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104513265 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12071623 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090118205 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10392031 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085520967 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106065104 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06625521 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084248234 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113264603 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082338245 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132619266 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.090597119 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113888435 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078241543 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138851873 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131051037 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100289411 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084379891 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106763604 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.30416622 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109213201 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130916678 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102502367 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077962475 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.113873993 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101584375 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09532444 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103796414 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07546439 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.171996153 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084275128 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.107230856 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107920365 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.090081065 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091358052 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101983939 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13143104 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122525232 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122592048 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134975527 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091132042 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116927486 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.098385776 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.126315588 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101817158 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.069269804 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.120833352 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.127186448 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097019199 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098625689 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129357794 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089932057 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074297152 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.098595175 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.116944351 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077152481 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.114009634 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078685414 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.108475934 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138869271 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09732552 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110396668 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11808146 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075522388 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157015191 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107697127 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070429136 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117375727 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114761364 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162888269 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.26743554 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073092378 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096949614 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099055021 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147397685 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103777074 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075464425 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104803652 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135155104 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08954089 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.167376286 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091085739 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13522281 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10602806 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082213934 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070473304 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.085475597 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108410469 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102278389 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106677766 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089347883 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.079381636 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08177853 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109813383 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088698693 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076253097 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108871122 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098137648 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.070836565 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084292336 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075585524 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13936074 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.074670501 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135011933 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12297088 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.075969113 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104526391 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094928024 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105855223 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.094330951 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116304798 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139199684 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11505493 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088294459 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.093267505 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106616409 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144648818 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126986959 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090261833 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074115929 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099340414 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111381266 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.096639937 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128447096 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094359031 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107374751 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103770016 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145203309 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152467517 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.277295735 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098333053 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104158537 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118153435 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072551577 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151465747 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099518201 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113623573 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079963058 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136380493 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.110793296 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085089528 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08256871 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095388692 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.09898665 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102764513 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138365834 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.091093458 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.06820409 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087830724 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138450947 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07160495 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104467182 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.086505997 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.088149776 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113670448 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090003843 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077003967 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.064301303 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125202485 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156905609 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.06675714 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111776441 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110662825 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100267296 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121326017 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066077907 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116434648 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137456698 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115008319 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141170679 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167376515 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120883528 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117649211 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.113654421 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104823605 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07653273 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.124944563 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135521285 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095231317 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090923482 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141532509 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120967308 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.142563272 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.294708353 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116344213 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101431772 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105138233 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102275521 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100118575 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139434382 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118053438 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.119973322 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081642774 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101181079 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115057413 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13102219 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077422845 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1361981 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079500538 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115218021 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07261434 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118947681 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.075782615 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.106658964 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07485923 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096475516 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.06512951 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.06929649 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137170142 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.108407094 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103496396 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098029112 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136072233 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134777995 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078612777 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104822482 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114195462 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09849763 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115188055 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106205891 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086258897 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092567739 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106265276 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082922755 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079176756 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114041545 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093225339 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125994046 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081618572 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072073693 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141142974 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103823034 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094295643 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075560668 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109086987 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120827432 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091530637 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084402079 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115392842 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105674067 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145745308 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091365991 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.272031936 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122333693 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076663359 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.088139342 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.065391604 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08115038 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.071871434 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.122512952 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071499065 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111237982 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.064514238 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125540718 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081296326 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.088240861 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097468748 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108222057 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122652335 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090009219 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135071036 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08468149 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115124316 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102612899 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089827474 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084257749 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098886202 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096145755 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11857604 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.091518425 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119039739 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140297735 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100715908 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140349807 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087979045 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121063857 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104915832 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124588081 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109807288 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166334028 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138528987 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109653969 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109679716 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071944387 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093319284 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103700334 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11211023 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176594774 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128467374 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.069720639 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107574688 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091958588 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108926661 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10415069 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080835836 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14941418 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105682581 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087544932 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.287222219 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.087560954 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100166601 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072155934 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095493036 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100278432 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090249776 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093331915 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112710184 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123699076 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108102144 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138436377 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.095925363 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.087943268 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.113619893 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105700663 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105215303 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081421609 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081646607 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132828154 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116333151 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125151878 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.096936142 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103987827 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108817992 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095463782 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119854266 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10410095 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123508557 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076708898 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.071984342 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06469588 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.068320362 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121501184 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1057241 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110618024 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095827644 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.06880471 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100703461 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103685333 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068620994 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084617363 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091407915 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092414421 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089866883 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105963399 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112603346 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088905287 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102615821 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097672651 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149115069 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100250412 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087217848 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145203689 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152429553 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087123999 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093266226 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069158535 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076883802 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11404382 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.327603088 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148437888 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.073701889 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082902983 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081746169 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08215242 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.06738069 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084025612 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.084650971 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101270496 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096854328 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.108733525 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101403056 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071058502 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098014514 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093990663 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087663893 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102586711 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115548868 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121782 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.136423208 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109867882 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103491262 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071956296 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.075805255 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071515833 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075152749 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097267444 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.075337127 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071983857 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138430675 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.088907755 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100958204 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104879617 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084765179 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072128297 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132365582 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.06610915 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133646005 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.067968126 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078993596 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079706077 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075560497 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090993224 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13731529 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109828552 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110980625 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106176038 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102932602 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161945218 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159583433 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078834503 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144329965 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073338005 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072638351 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076002523 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110362932 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088683864 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114202516 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145321854 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090350922 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104449074 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.249920859 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140365165 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.093052838 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099771145 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082541907 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075094683 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138339049 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07524123 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.07533219 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085288903 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106565905 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.068344158 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099681487 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080188669 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075131691 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158461324 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.706219462 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086019208 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.070990424 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091287038 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137990498 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128307135 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092413487 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103416692 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.114212018 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095966563 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091663845 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103249846 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18508238 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070469601 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091010434 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100623262 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094683832 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099078943 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096682577 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090450836 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089846536 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.083619154 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075873526 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105052859 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08541046 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094924355 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10843316 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079786504 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085693841 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130036787 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102267647 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079143338 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085925941 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10492223 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085243862 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102944887 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.066974454 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112850886 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089189244 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119949726 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098005474 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106162815 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128756555 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093069192 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141543934 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.285581255 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119724584 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083675925 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.074181891 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121707669 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.084272198 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073217824 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139109244 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.089611044 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.08939061 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098880963 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.092527848 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108117828 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112142241 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108535302 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092718887 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074348351 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096235512 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.097596962 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080867417 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073640008 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.070046499 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.072004465 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102440356 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080444952 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078776471 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110145155 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084691841 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099160705 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100257361 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120095535 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08385608 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098766936 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108198126 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088816525 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107243173 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098785951 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126703281 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173855809 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123651404 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127717409 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133160392 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.073738209 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.072692395 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.065223368 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113936805 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076652792 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087152273 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078591792 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134598912 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.079292405 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112185469 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.241184009 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078428206 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093755712 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09565271 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.06709384 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080921933 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106825252 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085251573 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078091061 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123777233 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082906325 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.134068009 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.284834912 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096339254 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091400032 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076878632 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109687578 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103457078 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.125787874 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090621819 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.070976018 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118143238 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09863181 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132898376 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.06887733 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076163541 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12470517 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098933575 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126188064 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075505641 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14504569 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138983099 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095961475 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129675587 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066947269 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083521727 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08573934 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122402535 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081109146 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111316025 seconds)
  done (took 66.631088256 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.143421413 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.171518929 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.118961127 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.129911062 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.287135682 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.295696907 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.149774278 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124139772 seconds)
  done (took 3.165032508 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.06776819 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.079541092 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.076935606 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.199378112 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.10830772 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.06349222 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.069242743 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.077971106 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.063356296 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.063134583 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.098062091 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.063324387 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.063526358 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.47212578 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.063126283 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.068583365 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.063401357 seconds)
  done (took 3.49692921 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.354520625 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.908924422 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.314990396 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.994617433 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140531943 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.516660266 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.072352925 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.077689806 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.604395563 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.39091484 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.13272635 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086377349 seconds)
  done (took 17.326776884 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.075599106 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.074308621 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.073748384 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.070462805 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07007948 seconds)
  done (took 2.090133724 seconds)
done (took 114.58368103 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083337228 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.16857532 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.064857698 seconds)
  done (took 1.998206443 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.081444868 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.077107835 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.076555856 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.07702974 seconds)
  done (took 2.046527815 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.074093733 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.072813718 seconds)
  done (took 1.874661532 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.226763143 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.171030526 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.087547763 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082225479 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.076997724 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.077029661 seconds)
  done (took 1.976000581 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.070785469 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.067365602 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.067542457 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.067644828 seconds)
  done (took 2.000143586 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067804894 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.062990932 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.065323079 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.067269022 seconds)
  done (took 1.9917465 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085190863 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084146394 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112718587 seconds)
  done (took 2.012095022 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.082179576 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081353474 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.074541444 seconds)
  done (took 1.974247702 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.108807122 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09281472 seconds)
  done (took 1.931089192 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.07873497 seconds)
  done (took 1.81307986 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09127905 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.094350598 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.138794551 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.10410264 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140418815 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.126023823 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.072897803 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.073331977 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.069014481 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.068024427 seconds)
  done (took 2.707547123 seconds)
done (took 24.616888632 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.083082541 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.189155145 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.312789044 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082548224 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.650567614 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.310936266 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.728864682 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.086081066 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.096178596 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06474686 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08106572 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.629280423 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.728860384 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.142830993 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.71441034 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.133329264 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.557875938 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.064843722 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.063692761 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.064375708 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.713682934 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.064158464 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.064343698 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.064734624 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.556057661 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.327602648 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.065100665 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.135970636 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.063996442 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.06827364 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.310822735 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.065470221 seconds)
  done (took 13.991042727 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.074510365 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.122749369 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.069477903 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.079968328 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.066429902 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.066373228 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.068290948 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.064781071 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.107149893 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065108019 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.081924357 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.064118143 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.06912804 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.065744324 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.084682344 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.064512293 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069740261 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.065448912 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.064566225 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.065166239 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.083436503 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.064245569 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.065146963 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.065026733 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.064850295 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.078874492 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066076626 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.064537061 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.064669062 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.068868499 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.069970763 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.066032289 seconds)
  done (took 4.046685387 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.126481942 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126515724 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.069809059 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.104192597 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11306649 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.066753151 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.146834015 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.087148907 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110575294 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065326249 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082074324 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.064534717 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.100574645 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.0662582 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085658202 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.064925242 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.067278212 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06526803 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.064639036 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.065352947 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084368862 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.064804109 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.065228219 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.065184169 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.065276057 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080679218 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.066020529 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.064780388 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.064540572 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.068718713 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070630927 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.065955921 seconds)
  done (took 4.319790114 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.068742101 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.067492063 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.073250542 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.076191819 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.062353917 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.064532432 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.06555278 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.062508873 seconds)
  done (took 2.293196755 seconds)
done (took 26.393793221 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.078295841 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.064044431 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.066568453 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.083278604 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.069739216 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.065914251 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.060327794 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.070158328 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.06694146 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.067343457 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.068764907 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.063067777 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.065905724 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.060632917 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.067643972 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.061876878 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.068666763 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.065968871 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.066867414 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.068032395 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.064151999 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.067381035 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.070438322 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.06670687 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.066742755 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.066570107 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.070641721 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.067599093 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.062119603 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.064767429 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.064642296 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.077624938 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.068534136 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.068504973 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.062038212 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.061854295 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.066132971 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.064588869 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.068415133 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.070858376 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.064074195 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.070733583 seconds)
  done (took 4.541422811 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.088383057 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.090377662 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.082456546 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.077777979 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.103584976 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.077706418 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.086666998 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07516566 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074242056 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.086401671 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.069460773 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074896384 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076539672 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071265815 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074153269 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07049356 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075883803 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.06950169 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074183376 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074195002 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.087642228 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067612661 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.074672205 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075855873 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070016038 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075986859 seconds)
  done (took 3.787056291 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071780228 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.084855054 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.088590007 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.14245043 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.106335262 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.079472405 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.077822985 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.089604183 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.097540626 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.064394215 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.06811852 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.091531813 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.092732028 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.071161486 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10349275 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.082486745 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.076526596 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.06580392 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07087965 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.098485037 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.087498699 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.082874003 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.097095452 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.084263532 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.063366422 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.073304585 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.071183888 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.080057644 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.071460693 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.076416329 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.068021089 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.067507031 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.064692033 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078760902 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.068019468 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.061826034 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.086316944 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076776421 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.078784438 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.103265149 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.074238305 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.065719393 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.091571552 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.129517374 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.063942358 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.066567226 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.068236349 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.076903102 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.065555139 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094470426 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08015537 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.064043277 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.083207212 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.065568755 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06547872 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080504782 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.065950991 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.066143549 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.076055099 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.122555787 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.085059647 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.069487335 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085453673 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.063909225 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07559719 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.065491553 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.065653619 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.062622651 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.098440284 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.071840163 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.115197118 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.065518151 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.062048525 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.076272874 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.075534976 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.071040413 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.063690995 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083651676 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076480801 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.067963124 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.075103404 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.066970478 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.06722484 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100558154 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.063085757 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.062077288 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.061944284 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.06615867 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.067408902 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.064823174 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.077247223 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.063789183 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.06744217 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.079297863 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.064169242 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.064737579 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.066403625 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.065163139 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.063608626 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.074804389 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.067980573 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.065796163 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.076908097 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.065180696 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.067336534 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.07910827 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.073668427 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.063794038 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.065441848 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.066553149 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.066231513 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.068894871 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.067686821 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.066301969 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07170007 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.072312565 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071063094 seconds)
  done (took 10.653124223 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.163749314 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.150487755 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.065231856 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.144392855 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.072564925 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.068499105 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.147017137 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.084661467 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.064630415 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.065481983 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.063923329 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.091304676 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.08740838 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.097672804 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.068955616 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.065122324 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.089886401 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.096868595 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.149618084 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.143613054 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.087830434 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.072281854 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.066762156 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.065709422 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.065676436 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.072790402 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.079926408 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.073045907 seconds)
  done (took 4.369508812 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073670613 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.080397028 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.068144539 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.088760044 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.081482352 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.064283592 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.066139454 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.065400991 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08117455 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.069987045 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.064134933 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.068458417 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.067484095 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.064829588 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06509403 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.070691132 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.070883283 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.062940498 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.067608285 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.068500792 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.074845656 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.08989161 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.068345975 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.064287491 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.066524061 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.064275147 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.070717214 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.072703774 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.063948558 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.095039304 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06136139 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.06856466 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.078662251 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.065358851 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.064106248 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.064810263 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.064336862 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.064278977 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.064612462 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.062178617 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.062248924 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.069996055 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.063167703 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.069668017 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.078912953 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.072988967 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068400145 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.06699619 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.066985088 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.061571021 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.067811445 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.067774375 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.06728185 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07315926 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.068197926 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.066724912 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.066016614 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096132819 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.070462381 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.064028162 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.064302723 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.062979857 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.066111516 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.072443276 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.081481963 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.066305729 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.062980437 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.064681073 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.069635418 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.07887602 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.064126811 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07000399 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.061509326 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.064674538 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.066788983 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.067578072 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.065966849 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06289331 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06436562 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.064748949 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.065426847 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.06435576 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.064680974 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.067275838 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.062384329 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.062930982 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.065266164 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.065742269 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.070166831 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.063318545 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.067264393 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.065962934 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.063399872 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.067422221 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.070548077 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.067635474 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.084817482 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.072641897 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.065237969 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.062388066 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.079476022 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.066413047 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.063763973 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.070978884 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.069436098 seconds)
  done (took 9.010997583 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.090367733 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.065962986 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.0844465 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.090726806 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.074285415 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.069445959 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.0781332 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.064643991 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.080209178 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.063187136 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07308104 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.062275629 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.077645004 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.073543331 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.065802252 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.074543804 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.066663953 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.085147626 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.078845645 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.062667558 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.073323948 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.076218054 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.076637751 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.082149921 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.081860022 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08301591 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.076342468 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.066627692 seconds)
  done (took 3.908707565 seconds)
done (took 38.009578696 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.808520261 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.067347144 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.821303645 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.334975265 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.898089975 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.839107793 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.89510458 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.806412688 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.932818081 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.894244283 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.668906814 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.451674406 seconds)
done (took 68.285431498 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.832654906 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.000479828 seconds)
    (2/2) benchmarking "String"...
    done (took 2.073634249 seconds)
  done (took 5.848855784 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.258188454 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.815924819 seconds)
    (3/3) benchmarking "different"...
    done (took 1.858140615 seconds)
  done (took 7.675619313 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.095222972 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.815411535 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.174372942 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.815481707 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.822595785 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.741075138 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.994743298 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.469915737 seconds)
  done (took 33.586176613 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.828026647 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.103439404 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.198620835 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.271912908 seconds)
  done (took 21.226491447 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.259305239 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.163167141 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.163080476 seconds)
    (4/4) benchmarking "different"...
    done (took 2.269382006 seconds)
  done (took 10.696807471 seconds)
done (took 90.906045822 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.812445508 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.230573177 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.85978749 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.983430826 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.857240776 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.928684066 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.81739719 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.839532383 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.814589532 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.814262479 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.817124278 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.818088198 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.826271767 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.855926561 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.813680862 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.871415701 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.158042097 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.815883831 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.852573181 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.749166363 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.140911011 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.813991334 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.822960309 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.869871138 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.977210002 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.851562999 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.200462731 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.830421735 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.406878308 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.825459216 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.817442804 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.820622459 seconds)
  done (took 205.659079194 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.817598601 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.56094465 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.56127104 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.843583044 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.100419688 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.162473986 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.618065348 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.121998392 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.823421682 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.844359254 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.718668834 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.820256635 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.772365298 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.481621629 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.844309321 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.87083587 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.657784255 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.573850883 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.849805117 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.685455551 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.831724302 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.257324698 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.211633689 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.574441623 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.830698484 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.952153559 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.834257869 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.84149246 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.190152924 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.640401708 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.834602651 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.822572827 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.307692339 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.049919984 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.826091277 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.830506634 seconds)
  done (took 179.320148203 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.040923809 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.847096168 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.864990032 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.932060905 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.693923423 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.660429716 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.823403548 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.81948984 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.819210799 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.825638725 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.814998956 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.886352358 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.107863083 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.842132284 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.815042 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.820110336 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.11464359 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.81952105 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.820142035 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.819263196 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.917126414 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.164188897 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.930238605 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.823393586 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.824965001 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.92895245 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.830114918 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.820589704 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.928382138 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.823755911 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.946077738 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.932020481 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.825763714 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.877686183 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.831035804 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.820558689 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.968782613 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.82585223 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.820931344 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.819806676 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.821439125 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.861678635 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.824550754 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.659924211 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.92472581 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.823675922 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.838820847 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.269679036 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.42522831 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.826639074 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.821153125 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.820634191 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.820709937 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.821239171 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.914484754 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.824985806 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.856689439 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.920102526 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.824666479 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.821712561 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.815362729 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.820912254 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.82182438 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.827428431 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.852722845 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.434881595 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.475754616 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.190548075 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.471945404 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.825904454 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.181925155 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.877054752 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.818453061 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.984092634 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.825405333 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.821971058 seconds)
    (76/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.821323305 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.821027039 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.822899117 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.730945479 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.737127471 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.826305267 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.93082058 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.826447651 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.822561763 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.09488791 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.138146214 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.826852835 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.840975826 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.874413961 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.824428916 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.821722962 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.828975358 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.743476402 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.828101059 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.822969977 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.821859154 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.059071018 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.828031623 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.132790341 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.19211089 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.914107378 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.225540903 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.721413271 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.823073459 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.823931542 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.842652033 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.825781921 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.823781116 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.827857192 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.823835003 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.824128512 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.818376111 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.824147984 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.823509272 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.823233318 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.819097154 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.842369219 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.825283467 seconds)
  done (took 410.626994951 seconds)
done (took 799.518225291 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.464725569 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.602648583 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.425051811 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.486653857 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.437605591 seconds)
  done (took 14.170000394 seconds)
done (took 15.96991967 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.864507381 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.847503142 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.833683356 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.913179789 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.852197441 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.839142283 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.863005832 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.885387276 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.863579137 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.837447045 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.911494953 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.845571844 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.867134955 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.870353061 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.949460995 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.877006125 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.844901066 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.835624809 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.917650572 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.845564772 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.846852914 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.843062743 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.840025853 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.915666752 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.966722409 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.855414253 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.84099922 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.902564523 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.853673808 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.904323588 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.892512463 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.872089148 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.86471546 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.947175399 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.922311214 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.955422784 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.855516912 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.934546089 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.851735161 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.924533035 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.91961203 seconds)
  done (took 78.828365873 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.846247164 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.025544842 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.107606219 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.885370596 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.844371949 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.113209503 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.911909759 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.99771905 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.007185929 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.12817224 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.123170516 seconds)
  done (took 23.752707304 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.845374853 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.006370616 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.117627027 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.888563692 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.846664274 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.113064373 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.918403476 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.996371406 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.00803787 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.117097611 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.137870498 seconds)
  done (took 23.767115735 seconds)
done (took 128.150997766 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.347757004 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.870727615 seconds)
  done (took 5.975121355 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.825647211 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.844205859 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.010347457 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.823727157 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.824215859 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.824366966 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.824800264 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.825099116 seconds)
  done (took 16.559745683 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.830671396 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.83103014 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.830864601 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.831074977 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.830668955 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.83143989 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.83126615 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.831162579 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.830689713 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.831527847 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.831492812 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.831932184 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.831552876 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.8312572 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.83203889 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.831352132 seconds)
  done (took 31.058376024 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.831407467 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.831357244 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.830524368 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.831616324 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.830797917 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.831667372 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.833962126 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.832098129 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.831329162 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.831439843 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.832246234 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.831468767 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.831724172 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.831786944 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.832120769 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.831756019 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.831884866 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.83230147 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.834064508 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.832233689 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.832215976 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.832738167 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.840916211 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.832546868 seconds)
  done (took 45.735013391 seconds)
done (took 101.147341431 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.429554735 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.044032412 seconds)
  done (took 9.233129366 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.838293391 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.833642741 seconds)
  done (took 5.539401038 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.833415647 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.833891435 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.833989511 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.833718107 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.833504009 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.833702601 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.833803639 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.83443221 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.834600758 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.833802399 seconds)
  done (took 20.09885951 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.833520249 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.833698679 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.834460708 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.834294327 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.834070076 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.83410643 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.834247629 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.834790912 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.834267599 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.835011063 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.834104956 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.835322788 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.834526099 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.834569616 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.834273537 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.834651076 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.834364131 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.834307695 seconds)
  done (took 34.779446601 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.834329213 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.835079221 seconds)
  done (took 5.430864786 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.834455621 seconds)
    (2/7) benchmarking "second"...
    done (took 1.835018646 seconds)
    (3/7) benchmarking "month"...
    done (took 1.834947317 seconds)
    (4/7) benchmarking "year"...
    done (took 1.834920593 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.834915009 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.834902 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.834646301 seconds)
  done (took 14.605135244 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.835972059 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.983446753 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.027560114 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.437945214 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.83609922 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.838478118 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.789688651 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.838155542 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.839561421 seconds)
  done (took 20.188288813 seconds)
done (took 111.681149318 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.676653868 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.83326612 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.446410282 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.943196883 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.909845249 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.184474005 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.851654715 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.408505768 seconds)
done (took 44.062927818 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.836885462 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.841576396 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.883363584 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.884095944 seconds)
  done (took 22.372117717 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.851480246 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.473071256 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.882094141 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.01157143 seconds)
  done (took 23.07422037 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.346053982 seconds)
    (2/2) benchmarking "read"...
    done (took 2.355659816 seconds)
  done (took 6.476880343 seconds)
done (took 60.571569125 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.836630986 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.837030414 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.836771509 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.836142904 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.836138136 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.836510847 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.83627117 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.836281623 seconds)
    (9/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.836784729 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.836673917 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.836176281 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.8375581 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.83689587 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.837258403 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.836958298 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.837617645 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.83732764 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.83744335 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.837645212 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.837961382 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.837503888 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.837474967 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.837923103 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.838004936 seconds)
  done (took 45.852127997 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.838092893 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.838617015 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.837970877 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.83870422 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.838241295 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.837851848 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.838583829 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.838045224 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.839054933 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.838242591 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.83840595 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.839219735 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.838579159 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.839209824 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.838821774 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.838761273 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.838693537 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.839190713 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.839402572 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.838700511 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.839562638 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.839116402 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.839731437 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.839612902 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.83978964 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.839439627 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.839397278 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.839784713 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.839049744 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.8395624 seconds)
  done (took 56.932914808 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.839394513 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.839668019 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.839857452 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.840054576 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.840030313 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.839876895 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.84060743 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.839667509 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.840659059 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.840724959 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.840098742 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.840900974 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.840370053 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.840519805 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.843642611 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.840988518 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.840352272 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.840653015 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.840523816 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.840448219 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.841005863 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.841233449 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.840828333 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.842243185 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.840589002 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.840776764 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.841194392 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.84165631 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.840641129 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.841894518 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.841063715 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.8414111 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.840784658 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.841635878 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.841861905 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.842095052 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.841184306 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.84163731 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.842082444 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.84202937 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.842056252 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.842015159 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.841590926 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.842031986 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.841821717 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.84204827 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.8418411 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.842150742 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.842632772 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.842074917 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.841866652 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.842468139 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.842174164 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.842419049 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.842826248 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.842372147 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.842942408 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.842678491 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.842005475 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.842584907 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.842514205 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.843140854 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.843013014 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.843234312 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.842955758 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.842511624 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.842664959 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.842800934 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.845716239 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.842437441 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.843060124 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.843580266 seconds)
  done (took 134.36694757 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.84288826 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.842962433 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.843150697 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.843261917 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.843229721 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.842942775 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.844230551 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.844392889 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.843890546 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.843369692 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.843421664 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.843938928 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.8439301 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.843749954 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.844453281 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.843715799 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.843527191 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.844114403 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.843878935 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.843929573 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.84415463 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.844026108 seconds)
  done (took 42.331149342 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.843965427 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.844191246 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.84399064 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.844631075 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.844732151 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.843674505 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.844442808 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.844816368 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.844430306 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.845025106 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.845103957 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.844731419 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.845374521 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.844504393 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.844833013 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.845101033 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.844710617 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.845255899 seconds)
  done (took 34.973639636 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.845081711 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.844408155 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.844739869 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.845287228 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.845637859 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.845656072 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.845598435 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.845531904 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.844981881 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.845329493 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.845719402 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.845498913 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.845681744 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.84606688 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.846950369 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.846160694 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.846069817 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.846303332 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.845916825 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.846560947 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.846168074 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.846547821 seconds)
  done (took 42.377099612 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.846358328 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.846248875 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.846821218 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.846136684 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.846146663 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.846588257 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.845912772 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.846463192 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.846580838 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.846854192 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.846412222 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.846474129 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.846672244 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.847412762 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.847208998 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.846644646 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.846958767 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.846445187 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.847329462 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.846694197 seconds)
  done (took 38.704173301 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.840466648 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.841515222 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.841821706 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.841624352 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.841358834 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.841434993 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.84151461 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.841703465 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.841427941 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.841746016 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.841656344 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.8419075 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.841705316 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.841533233 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.841436035 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.841362776 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.842107264 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.841684397 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.842185263 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.841896396 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.842033278 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.841744415 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.842431313 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.842589072 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.842583346 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.841994634 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.842526239 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.842145111 seconds)
  done (took 53.343398537 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.848286703 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.849137537 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.847520313 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.848414467 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.84870428 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.849042707 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.848564752 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.8497828 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.848436223 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.848601587 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.848579378 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.848730236 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.849193821 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.848731499 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.848808214 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.84922017 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.848504749 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.848716119 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.849905493 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.84969659 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.849416955 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.849168527 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.849684408 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.85011232 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.849617799 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.849341372 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.849729772 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.849641376 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.849122473 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.849499153 seconds)
  done (took 57.246840411 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.873017678 seconds)
    (2/2) benchmarking "in"...
    done (took 1.871287669 seconds)
  done (took 5.519159062 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.850288862 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.850375797 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.849711125 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.850140217 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.85002539 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.850000904 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.850842631 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.849820271 seconds)
  done (took 16.577146 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.850184763 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.847349295 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.851385984 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.850436734 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.845171946 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.852048931 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.8517908 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.845490073 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.846762661 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.85261149 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.850257315 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.849858048 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.855040666 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.849565632 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.851986614 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.852413471 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.845994535 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.847629304 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.846950763 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.851239337 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.847657893 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.845999743 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.851402902 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.845565392 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.851185009 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.848341931 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.856476699 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.846750067 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.847275998 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.851469137 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.853131386 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.85216479 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.845896437 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.847780456 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.846480293 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.852620164 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.852827408 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.846136056 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.846261282 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.852763315 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.848803022 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.848783291 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.850016808 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.854150771 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.847649636 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.852795165 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.852576775 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.846657292 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.853214131 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.851794934 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.863500713 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.847666572 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.853343658 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.852760471 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.849858495 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.847473456 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.847303858 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.849875109 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.85424738 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.853936128 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.851619794 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.871558442 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.857720654 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.848167719 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.847785808 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.859761963 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.877876424 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.848850284 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.858726671 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.853735109 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.856279732 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.853641092 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.853761352 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.853243731 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.862416125 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.858048739 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.847873831 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.854755291 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.854276447 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.848530251 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.849602309 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.848140732 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.848488856 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.849089228 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.86072017 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.879264898 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.849067655 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.848902718 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.850938229 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.856820741 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.85351556 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.851647281 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.855575334 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.854716595 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.850224368 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.858059106 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.849856263 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.849464195 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.855319394 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.858737452 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.855472059 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.85580624 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.853541226 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.859526492 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.854731275 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.849651549 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.85028499 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.850360801 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.857539113 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.850696901 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.849049658 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.855903469 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.856986097 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.854712458 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.855657809 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.854127072 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.860517952 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.858088978 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.857344858 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.85470228 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.854349149 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.852950898 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.86256818 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.88105685 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.855933729 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.854331354 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.856950334 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.865649624 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.854583901 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.857064252 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.853220041 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.856992023 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.85713532 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.853087707 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.857128116 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.850679072 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.856862353 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.851167668 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.857063978 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.850853731 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.859937361 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.853217294 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.853974004 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.851947077 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.855318117 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.85147048 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.854122247 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.858562446 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.859054836 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.85146615 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.857788368 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.853850534 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.859415982 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.852126056 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.857784214 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.857997437 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.852227374 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.859241379 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.854325139 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.851689794 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.858381339 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.860453128 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.863045153 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.852797039 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.852879322 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.859219378 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.852500445 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.852687977 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.85363128 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.853423716 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.854850761 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.852905563 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.857466495 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.858454789 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.858984034 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.853307433 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.858912263 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.8588998 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.857551212 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.86601539 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.857836117 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.864826515 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.85930425 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.860607818 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.859612158 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.854656771 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.854404285 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.853781913 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.852843684 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.859391205 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.859446643 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.858528089 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.878589779 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.865779289 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.856253552 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.862636662 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.867520041 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.8648729 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.859954886 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.860186576 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.855322269 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.856695855 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.854527805 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.854472002 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.86055226 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.858049499 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.861518684 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.860494826 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.859052387 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.854662527 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.860426754 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.855214928 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.860973406 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.857336295 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.860829075 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.860891784 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.864346177 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.861534105 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.86286745 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.857059434 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.861318776 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.855434265 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.857058896 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.855400335 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.861465441 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.856761969 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.858766406 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.861498338 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.857089126 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.863237544 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.863235924 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.862458044 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.861656051 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.862066701 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.85784604 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.862098168 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.85940135 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.871638557 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.8593839 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.862417642 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.860634334 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.86186425 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.858189014 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.856504474 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.857639531 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.856979646 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.85782195 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.856384916 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.862805612 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.863157041 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.86287671 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.85716139 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.863133863 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.866615083 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.864472596 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.858549781 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.856768102 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.860763364 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.866912603 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.862882152 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.865416131 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.867033835 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.85961128 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.865387385 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.867707083 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.857636422 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.871983312 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.868811501 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.863963913 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.863758551 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.858115128 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.860383733 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.864181256 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.858085479 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.865863091 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.865075438 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.865752301 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.869715805 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.857934161 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.85799513 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.86438468 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.859476154 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.861537086 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.859920033 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.859148504 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.859291511 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.864188893 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.860377871 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.859245575 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.86019515 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.869861192 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.864794694 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.859505256 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.865279151 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.867051574 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.865124028 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.859521496 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.866137559 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.860471392 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.865702738 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.860011004 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.865669617 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.859866615 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.860158017 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.865924687 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.867617373 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.859208861 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.863868965 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.872812588 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.864079724 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.869727341 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.86145608 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.871359797 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.859740589 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.866076154 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.860019862 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.864993726 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.869290773 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.866413146 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.866539586 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.868557846 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.867842912 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.86817939 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.86549856 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.866397288 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.86078861 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.861341776 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.869221295 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.866050806 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.864329185 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.866590167 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.860706939 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.867176759 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.866994099 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.86456309 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.863331732 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.861901113 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.868983846 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.867084985 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.861126717 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.862241361 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.861098608 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.860535587 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.867263572 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.867165075 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.868935521 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.862260947 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.869560167 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.866492619 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.868295721 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.871202717 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.86260701 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.862591476 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.869557894 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.868562123 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.872148673 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.86825433 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.863753671 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.870246334 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.868709576 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.870363341 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.874647352 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.870338447 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.872897653 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.863420283 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.862879983 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.863610149 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.875033332 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.899115159 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.862424579 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.866128533 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.874043161 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.869486049 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.865308634 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.870075154 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.868184314 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.873344924 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.865051005 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.869342223 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.867208259 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.878649837 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.862779185 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.86999375 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.869449263 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.868821008 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.872615857 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.869884903 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.871605441 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.86710601 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.872426252 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.876434754 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.870800253 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.872145285 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.863859875 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.870063994 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.864211419 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.870592145 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.865931495 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.865483383 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.864742883 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.86432625 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.866714624 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.869788771 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.871014829 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.869685601 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.875938052 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.864454063 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.864375084 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.873189053 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.86503149 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.866502031 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.864627091 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.870037629 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.873159534 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.870447869 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.871979322 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.869325563 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.875910289 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.866956137 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.871432867 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.871390125 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.868964397 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.871911615 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.866025707 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.867324693 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.874749462 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.870825095 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.87928598 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.87701255 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.865328726 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.873552987 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.875393462 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.875333914 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.865282387 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.871803221 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.865304228 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.869000378 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.867840468 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.866226174 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.86619334 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.873852112 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.872728399 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.872970613 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.873171355 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.866189822 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.872793027 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.868060017 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.868753566 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.872854114 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.872655203 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.872590482 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.872234943 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.867435425 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.867647165 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.869463215 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.866817646 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.873438829 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.869467214 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.868772523 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.877527121 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.872895882 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.874094255 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.868267556 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.87365543 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.873284581 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.873692225 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.874365437 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.873650954 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.872148201 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.883967297 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.873552317 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.868384498 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.875522703 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.871968772 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.867719571 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.867913489 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.868003852 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.874187169 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.875513059 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.874045105 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.867920853 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.875023768 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.874153885 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.873228096 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.869982964 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.873010222 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.868196569 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.875290462 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.874291278 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.873590158 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.886763482 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.873522783 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.872040361 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.884148941 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.873237416 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.87085547 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.874840439 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.874241486 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.875341487 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.876861047 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.873291985 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.870730939 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.872491613 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.868909284 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.87141844 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.868780008 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.871351381 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.875190869 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.875090308 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.874150485 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.88120061 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.878233669 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.875853022 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.871396205 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.869297192 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.873848056 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.889954041 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.870132171 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.870012429 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.870123454 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.871137163 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.878788944 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.879534341 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.887420731 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.8741644 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.870772639 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.876820204 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.891363661 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.872503276 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.882612556 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.908651495 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.878325431 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.87103519 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.870662393 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.87835768 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.870738526 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.880309418 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.871318626 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.877968639 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.871485485 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.877818522 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.878487023 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.877842784 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.877617206 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.871765958 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.879958926 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.877734751 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.871211104 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.878375385 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.871386553 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.877166869 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.878397832 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.881069045 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.877412651 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.878682299 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.877501964 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.873434892 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.877039149 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.870963568 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.881028843 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.871912507 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.873400297 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.887035471 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.892528606 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.871838979 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.878159466 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.872114447 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.877178773 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.874794888 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.878144846 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.876014992 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.888475409 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.87622405 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.887739506 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.872960136 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.873260955 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.873479853 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.878365014 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.872215797 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.885656784 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.885032402 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.879847965 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.880583395 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.881218426 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.879391541 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.87991651 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.882017246 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.873669038 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.875393568 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.87364946 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.879176315 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.880210423 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.880073851 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.878637944 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.888994236 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.874443424 seconds)
  done (took 1112.899352868 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.880038754 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.880149257 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.879714153 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.879668551 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.880404935 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.880015014 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.880305382 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.879728932 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.879884419 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.880594091 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.880580041 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.881049902 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.880718592 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.880706892 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.880910415 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.880563571 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.881202377 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.881026936 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.881101835 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.880655539 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.88122805 seconds)
  done (took 41.294564858 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.881635575 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.881168667 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.880651501 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.880860124 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.881073139 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.880885528 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.88106024 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.880729634 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.880887441 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.881651546 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.881422008 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.881091939 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.880838658 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.8815276 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.880980674 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.881087592 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.881027908 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.881368606 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.881107898 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.881775596 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.881431121 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.881280214 seconds)
  done (took 43.191165357 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.876016782 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.87625333 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.876361597 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.881848227 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.881619162 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.875808116 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.882288317 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.884037803 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.881591311 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.88446342 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.885082579 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.892696947 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.881905978 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.885882118 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.882803242 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.876209615 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.002351973 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.87676164 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.876391269 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.882985383 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.876463593 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.883311603 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.882752147 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.883022564 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.883291014 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.877072599 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.883215606 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.883831252 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.883642534 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.885220032 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.881963501 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.882630372 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.877582605 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.880255382 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.884026248 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.884976989 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.882531856 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.877316646 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.883395247 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.88410611 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.889772375 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.915064267 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.883919244 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.877922389 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.885284545 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.884065201 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.883197497 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.882121129 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.89430478 seconds)
  done (took 94.186501697 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.884045484 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.884289494 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.883791499 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.884739512 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.883629248 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.884817238 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.883937061 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.884275789 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.884239274 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.884320424 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.884729763 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.884784602 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.884438389 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.884163112 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.884406263 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.884610171 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.883533958 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.883766675 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.884936958 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.885096517 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.884287852 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.884732063 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.884627267 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.885186957 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.885312404 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.885348607 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.8852043 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.885280025 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.88497927 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.885346912 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.884970569 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.886331621 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.884846411 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.885891899 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.88571645 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.885906156 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.886337471 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.886375364 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.885361947 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.885578794 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.885930916 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.885559926 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.885384821 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.886590692 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.885687012 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.886640613 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.886236857 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.885949847 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.887210802 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.88701172 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.887032481 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.887190506 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.886894297 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.886606692 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.886434381 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.88732306 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.887328633 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.887212166 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.887311724 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.88702159 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.887329548 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.887592348 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.887902692 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.887527728 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.887489083 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.887523071 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.887639474 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.887053892 seconds)
  done (took 130.037619048 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.881634338 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.882096358 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.882264844 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.881687478 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.881723283 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.882268201 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.88196257 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.882119921 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.881498126 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.881834979 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.882453555 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.888238276 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.881990892 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.888265401 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.881301466 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.881902966 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.881875296 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.882183333 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.88197147 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.888486461 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.883797175 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.882177721 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.912469902 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.916862462 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.893933322 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.914981644 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.903581779 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.914751112 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.900457344 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.909078943 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.913560399 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.895830736 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.912212199 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.915263402 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.963035463 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.893081761 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.938584337 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.948661664 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.931511518 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.910383002 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.916675532 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.903271147 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.904304201 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.910385731 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.926027624 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.004663449 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.918891991 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.969014393 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.9609007 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.89592305 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.88320948 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.884400579 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.887129391 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.883502298 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.467153533 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.890848361 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.883372076 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.883666808 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.88686124 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.883452384 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.883802267 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.891486444 seconds)
  done (took 120.244827033 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.890019855 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.890969642 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.889802662 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.889188037 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.88951488 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.889832338 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.890123634 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.890076986 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.889266558 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.889300497 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.891230047 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.890250773 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.890994432 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.890823019 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.890356481 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.891556637 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.890496701 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.890405705 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.890302034 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.891075085 seconds)
  done (took 39.619280993 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.892000943 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.908944465 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.891391195 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.891495382 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.89169907 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.988249047 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.95283334 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.917260217 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.895283952 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.906299143 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.899575112 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.897867142 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.894141191 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.897749298 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.893472438 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.89274865 seconds)
  done (took 32.325914186 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.895238102 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.892711471 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.887033164 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.887431958 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.893724692 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.897634689 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.893292165 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.8938192 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.894024437 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.896047013 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.895194611 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.962198018 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.932014711 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.934014853 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.940638437 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.939101005 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.955013303 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.999562728 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.076391552 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.02385121 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.03354201 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.027679176 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.030546514 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.954673227 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.932751811 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.963791876 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.939705456 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.956275594 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.947645452 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.944366735 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.948808931 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.923798178 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.947088592 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.921771924 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.919976334 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.919852439 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.920022257 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.959225216 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.947483655 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.927182559 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.907641293 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.919913065 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.92576584 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.926149348 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.913930208 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.910948608 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.918943043 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.919417921 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.911506355 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.923942773 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.915824667 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.921934306 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.945745881 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.958248415 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.923214494 seconds)
  done (took 108.315972144 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.956744424 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.979992665 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.998659565 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.980635285 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.943004271 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.998004423 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.957475793 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.965283043 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.998133408 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.000091373 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.011694432 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.006806418 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.957667391 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.013544312 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.034152206 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.904901147 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.901681631 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.938853943 seconds)
  done (took 37.390025549 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.01044522 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.903652379 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.901935387 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.946586397 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.012982591 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.012722262 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986334802 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.975495662 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980165052 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.903205342 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.900343894 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.946643312 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95731103 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.002150102 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.990582946 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001967197 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.955871724 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.987528876 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.925414569 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.048551181 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.031895744 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.021049948 seconds)
  done (took 45.314230148 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.012885819 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.938279342 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.920677512 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.928781295 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.931883254 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.949657027 seconds)
  done (took 13.598775737 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972702379 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.903885595 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.902490965 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.937581674 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074752424 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.940971593 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.93932526 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.01756683 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168647176 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.910704648 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.920230497 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.008014723 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006478505 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047608658 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033005977 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.927067788 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000914475 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974285593 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960065251 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008761589 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.914833695 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.904723342 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.909003985 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.909108598 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.911132424 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.911863456 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.909535331 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.90940383 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.914376028 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.91097264 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.912402811 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.905952227 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.909563864 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.908674203 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.906964424 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.911883499 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.909026772 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.00096832 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.92647033 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.90810009 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.910087115 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.907162007 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.907791992 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.013339134 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971154577 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979789312 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976012994 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.911554793 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.909636679 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.915160018 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.91173289 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.906550788 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.906268171 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.908904046 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.930420301 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.951040027 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.90974525 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.907513074 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.908479066 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.911664406 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.908905332 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.906518137 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.90789755 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.909863885 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.907621253 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.910148091 seconds)
  done (took 129.812866999 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.906763365 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.909772004 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.945173637 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.909038158 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.908715889 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.954607451 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.933036548 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.912254349 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.908300215 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.907162666 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.907276941 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.907703832 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.90922292 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.91022749 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.909504091 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.909123242 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.907332127 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.909561133 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.908152529 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.910431148 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.931854893 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.90915338 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.90959794 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975962164 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.953530008 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.909316746 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.90701879 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.906113471 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.908551227 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.908819556 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.912431432 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.919496024 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.921236673 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.912862982 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.909621103 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.907220981 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.908902174 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.908909606 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.912872791 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.909536099 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.911512076 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.9723981 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.917802747 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.91229413 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.909668058 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.907492961 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.907770415 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.907811386 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.906401242 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.909570909 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.909924153 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.909688288 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.907914561 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.00358515 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053728754 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.018943991 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958361268 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.02899434 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957537134 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.942787213 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.941723979 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008309213 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.003954906 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010845554 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.155472299 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.054395644 seconds)
  done (took 129.492923767 seconds)
done (took 2607.759515929 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.013678225 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.053510117 seconds)
  done (took 15.925145915 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.134157721 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.007156239 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.079157289 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.040680046 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.953085733 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.971468743 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.938420903 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.944111711 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.043809813 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.005088727 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.941544507 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.929467372 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.931176683 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.947845502 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.924659811 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.961955866 seconds)
  done (took 53.706278169 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.925687339 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.941948724 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.919560924 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.93021037 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.947481591 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.054769036 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.968986025 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.986773376 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.951605114 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.980212693 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.005991742 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.942193222 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.950662487 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.940860391 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.024797508 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.052680819 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.026266121 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.024652038 seconds)
  done (took 37.442246153 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.04087388 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.954364164 seconds)
  done (took 10.883995747 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.019713168 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.928188463 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.960681514 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.944364213 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.982957849 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.930516418 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.97397769 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.941235502 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.94888841 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.938683061 seconds)
  done (took 71.59475704 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.94005754 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.925439488 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.288730312 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.926771294 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.940384043 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.947391258 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.950732175 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.969950527 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.934751278 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.92090602 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.977986205 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.266768961 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.993830189 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.92999748 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.359793094 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.961181352 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.947104557 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.947921967 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.965184037 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.945630549 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.924768061 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.029862642 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.247847613 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.694448347 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.914941682 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.93391219 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.974956496 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.950304931 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.928402686 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.911891455 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.923237338 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.917471893 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.934039786 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.923182478 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.961047878 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.937595024 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.583398251 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.93799744 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.974159735 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.059584004 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.99533981 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.917685088 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.909832084 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.922270483 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.927851074 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.927643576 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.645849831 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.986573963 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.930051011 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.079201513 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.517350175 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.959894916 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.115450738 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.075637003 seconds)
  done (took 137.473037982 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.917074941 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.398005952 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.077104394 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.922632985 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.279520448 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.133432101 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.723561351 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.025373346 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.059332197 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.135169896 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.090022691 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.044214657 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.931351634 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.922966229 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.931661548 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.927470151 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.092802783 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.992743309 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.962076656 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.918534014 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.975020676 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.166781235 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.057889191 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.994257141 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.940614079 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.14154429 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.970599176 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.048790875 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.315419716 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.929293762 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.993003826 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.922764361 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.982924323 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.919083543 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.96011768 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.038397145 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.085892313 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.938430711 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.593721482 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.97181132 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.523771893 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.119546102 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.05978749 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.053232721 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.175180169 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.140790671 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.609290245 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.928167581 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.676262228 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.086085355 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.198327027 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.146726695 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.025333686 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.92224073 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.372441059 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.922901741 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.926077314 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.196255682 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.106868302 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.044276812 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.927062367 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.922987772 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.922155263 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.15293196 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.930829114 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.074712173 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.937309957 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.152860244 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.046100573 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.056485402 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.081548817 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.150078764 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.959331261 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.140274885 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.893011847 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.123080795 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.981239817 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.160121891 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.926577714 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.917995745 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.007496275 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.359152871 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.0667554 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.160203032 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.22328764 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.020305149 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.442207039 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.915220858 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.138587632 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.066133715 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.13398355 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.169998332 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.970747322 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.762589939 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.918098902 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.922391883 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.20324048 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.04208854 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.920801761 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.481182937 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.162402226 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.505144105 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.941372428 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.346462383 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.163648813 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.109597054 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.520602263 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.917884798 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.131325111 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.962225776 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.917895952 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.919396621 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.11404467 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.651588717 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.954976101 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.967494577 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.981641105 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.923913317 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.076897959 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.922013451 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.212031223 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.70006971 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.156810296 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.919875335 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.952791197 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.087685504 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.167499019 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.922589744 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.246232513 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.237612889 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.035649904 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.132953947 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.442284813 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.921771622 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.241460687 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.987171368 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.919723464 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.094492118 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.818034654 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.085318414 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.941079935 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.217375669 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.941091526 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.971724815 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.927128253 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.158333452 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.01865101 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.973701813 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.922460485 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.049316077 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.920232073 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.968721512 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.079377872 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.922072085 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.923125679 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.784086369 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.925412988 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.076769328 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.185976471 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.93426179 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.991447357 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.311461393 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.919395694 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.050183533 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.944133412 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.336315044 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.429000561 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.080930986 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.549115334 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.173901906 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.923450707 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.160088328 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.094362903 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.933247109 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.922753536 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.712741863 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.368569865 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.921491378 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.132313189 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.170505687 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.285785204 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.129384805 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.927338138 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.974074241 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.923467625 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.16774291 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.47457797 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.208316245 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.924503027 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.92398205 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.921232558 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.941768187 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.119203347 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.954928337 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.558223329 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.063413968 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.199616942 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.144485429 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.22924728 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.979706734 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.928483423 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.234790915 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.963924885 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.994581898 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.923117742 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.934806555 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.160331594 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.925820468 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.130780185 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.271835392 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.002386298 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.017119891 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.938767418 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.923204758 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.907355388 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.096640767 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.035737296 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.931301651 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.242451373 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.96763222 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.045929329 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.113980239 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.20082164 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.886979472 seconds)
  done (took 900.176175858 seconds)
done (took 1229.119540198 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.931096456 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.925128928 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.924787876 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.934949986 seconds)
  done (took 29.561433857 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.923781721 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.925395049 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.921033711 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.920501569 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.925602162 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.917710136 seconds)
  done (took 13.39268454 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.923657513 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.924377727 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.927033694 seconds)
  done (took 22.620807918 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.31247094 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.207414631 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.007170544 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.074965712 seconds)
  done (took 10.456261135 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.921167393 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.965519033 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.938909209 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.936633075 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.936511099 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.92125567 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.920162882 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.935833636 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.921226478 seconds)
  done (took 19.253519996 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.375096199 seconds)
done (took 103.560020316 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.45240566 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 1.963997222 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.436697369 seconds)
    (4/341) benchmarking ("sort", Float64, false)...
    done (took 6.958803017 seconds)
    (5/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.982559419 seconds)
    (6/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.941644544 seconds)
    (7/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.088097849 seconds)
    (8/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.82570186 seconds)
    (9/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.927734905 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.928039002 seconds)
    (11/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.409933464 seconds)
    (12/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.200954164 seconds)
    (13/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.051511341 seconds)
    (14/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.268017619 seconds)
    (15/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.838171526 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.343010396 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.089059579 seconds)
    (18/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.934242303 seconds)
    (19/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 4.053303615 seconds)
    (20/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.226954616 seconds)
    (21/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.055378361 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 1.958282703 seconds)
    (23/341) benchmarking ("sort", Int8, false)...
    done (took 5.507562111 seconds)
    (24/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.205601604 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.948969053 seconds)
    (26/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.452834435 seconds)
    (27/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.962962486 seconds)
    (28/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.50067898 seconds)
    (29/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.201137887 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 1.955642378 seconds)
    (31/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.767051935 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.68408892 seconds)
    (33/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.148621837 seconds)
    (34/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.936246541 seconds)
    (35/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.324553093 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.88028136 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.955690827 seconds)
    (38/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.364244271 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.046792689 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.055094497 seconds)
    (41/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.953597027 seconds)
    (42/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.317892553 seconds)
    (43/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.865872695 seconds)
    (44/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.026575538 seconds)
    (45/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.382908685 seconds)
    (46/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.090238631 seconds)
    (47/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.089942376 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.982461264 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.241461788 seconds)
    (50/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.562662791 seconds)
    (51/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.427348923 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.41630261 seconds)
    (53/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.291051343 seconds)
    (54/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.04115434 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.249358936 seconds)
    (56/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.80144202 seconds)
    (57/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.138981612 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.95799878 seconds)
    (59/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.190773896 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.253837978 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.096755047 seconds)
    (62/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.993144651 seconds)
    (63/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.975648753 seconds)
    (64/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.374869192 seconds)
    (65/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.30211433 seconds)
    (66/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.472326038 seconds)
    (67/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.215919596 seconds)
    (68/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.954596003 seconds)
    (69/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.076751386 seconds)
    (70/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.080762592 seconds)
    (71/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.083136231 seconds)
    (72/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.933338704 seconds)
    (73/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.697043675 seconds)
    (74/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.514758582 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.933465051 seconds)
    (76/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.062976766 seconds)
    (77/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.928433008 seconds)
    (78/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.775156777 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.345521629 seconds)
    (80/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.246064481 seconds)
    (81/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.268210054 seconds)
    (82/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.929886033 seconds)
    (83/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.057504856 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 1.952394644 seconds)
    (85/341) benchmarking ("sort", BigInt, false)...
    done (took 6.925334615 seconds)
    (86/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.996524562 seconds)
    (87/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.849725784 seconds)
    (88/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.047548065 seconds)
    (89/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.812143341 seconds)
    (90/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.901299054 seconds)
    (91/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.57608421 seconds)
    (92/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.749712679 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.066347886 seconds)
    (94/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.502905573 seconds)
    (95/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.94728686 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.071539891 seconds)
    (97/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.074056543 seconds)
    (98/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.93582964 seconds)
    (99/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 3.766850304 seconds)
    (100/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.948984024 seconds)
    (101/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.303669381 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.075033704 seconds)
    (103/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.408652377 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.249708889 seconds)
    (105/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.950721783 seconds)
    (106/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.897525731 seconds)
    (107/341) benchmarking ("collect", "all", Int8, true)...
    done (took 4.744079296 seconds)
    (108/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.946966511 seconds)
    (109/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.94881073 seconds)
    (110/341) benchmarking ("map", identity, Float32, true)...
    done (took 4.027630444 seconds)
    (111/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.245547028 seconds)
    (112/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.190902702 seconds)
    (113/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.071978232 seconds)
    (114/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.941465513 seconds)
    (115/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.076067928 seconds)
    (116/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.437014119 seconds)
    (117/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 1.935149765 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.926708115 seconds)
    (119/341) benchmarking ("map", identity, Bool, true)...
    done (took 3.964565299 seconds)
    (120/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.089887076 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.076854434 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.340410439 seconds)
    (123/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.055826828 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.400951193 seconds)
    (125/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.952467157 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.942660907 seconds)
    (127/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.622744672 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.868626996 seconds)
    (129/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.120299486 seconds)
    (130/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.40803301 seconds)
    (131/341) benchmarking ("map", abs, BigInt, true)...
    done (took 6.944078232 seconds)
    (132/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 4.105278239 seconds)
    (133/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 6.935230796 seconds)
    (134/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 5.659383306 seconds)
    (135/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.415082319 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.872056117 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.364835179 seconds)
    (138/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.279684343 seconds)
    (139/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.942969563 seconds)
    (140/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.332238349 seconds)
    (141/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.94120861 seconds)
    (142/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.316382756 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.368083692 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.4296569 seconds)
    (145/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.576609254 seconds)
    (146/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.936430883 seconds)
    (147/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.093667759 seconds)
    (148/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.068708322 seconds)
    (149/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.12235306 seconds)
    (150/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.078616747 seconds)
    (151/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.868689358 seconds)
    (152/341) benchmarking ("perf_sum", Int64, false)...
    done (took 1.948345879 seconds)
    (153/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.928932073 seconds)
    (154/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.049611414 seconds)
    (155/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.067838198 seconds)
    (156/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 1.944727826 seconds)
    (157/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.893230026 seconds)
    (158/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.054218941 seconds)
    (159/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.25985941 seconds)
    (160/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.252311712 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.092411681 seconds)
    (162/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.25899751 seconds)
    (163/341) benchmarking ("sort", Bool, false)...
    done (took 2.154016496 seconds)
    (164/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 1.94702216 seconds)
    (165/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.277695511 seconds)
    (166/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.934043093 seconds)
    (167/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.091422961 seconds)
    (168/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.942712913 seconds)
    (169/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.094740197 seconds)
    (170/341) benchmarking ("perf_sum", Int64, true)...
    done (took 1.949965206 seconds)
    (171/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 1.9485819 seconds)
    (172/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.929786115 seconds)
    (173/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.322652733 seconds)
    (174/341) benchmarking ("sort", Int64, false)...
    done (took 6.939572665 seconds)
    (175/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.120045262 seconds)
    (176/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 1.941349011 seconds)
    (177/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.939992011 seconds)
    (178/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 4.066631829 seconds)
    (179/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.158416944 seconds)
    (180/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.047262487 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.134557587 seconds)
    (182/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.9604751 seconds)
    (183/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.278970639 seconds)
    (184/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.085580363 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.165192489 seconds)
    (186/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.116455836 seconds)
    (187/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.070938417 seconds)
    (188/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.189867145 seconds)
    (189/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.041880359 seconds)
    (190/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.46018796 seconds)
    (191/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.935644587 seconds)
    (192/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.229719741 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 1.945858555 seconds)
    (194/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.117797226 seconds)
    (195/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.020382387 seconds)
    (196/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.68887724 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.093017062 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.082456171 seconds)
    (199/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 1.961917304 seconds)
    (200/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.459074004 seconds)
    (201/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.167888278 seconds)
    (202/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.290534123 seconds)
    (203/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.165709615 seconds)
    (204/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.185569874 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.112622708 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.268462061 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.940623088 seconds)
    (208/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.942271088 seconds)
    (209/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 1.952753429 seconds)
    (210/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.206904147 seconds)
    (211/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.391225388 seconds)
    (212/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.10087694 seconds)
    (213/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.863337731 seconds)
    (214/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.097470106 seconds)
    (215/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 8.855956383 seconds)
    (216/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.938264872 seconds)
    (217/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.388258043 seconds)
    (218/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.937849255 seconds)
    (219/341) benchmarking ("map", identity, Int8, true)...
    done (took 4.019331282 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 1.962136203 seconds)
    (221/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.13385741 seconds)
    (222/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.058744711 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.973416547 seconds)
    (224/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.38091733 seconds)
    (225/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.062093835 seconds)
    (226/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.399429414 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.063799761 seconds)
    (228/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.028100106 seconds)
    (229/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.366724116 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 1.966050787 seconds)
    (231/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.811415951 seconds)
    (232/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.550407718 seconds)
    (233/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 1.948294983 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.050967472 seconds)
    (235/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.237463228 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.606147669 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.944923061 seconds)
    (238/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.888654838 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.958579606 seconds)
    (240/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.022850338 seconds)
    (241/341) benchmarking ("sort", Float32, false)...
    done (took 6.933817649 seconds)
    (242/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.777792547 seconds)
    (243/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 1.949687036 seconds)
    (244/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.685237848 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.360205056 seconds)
    (246/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.468689441 seconds)
    (247/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.949250897 seconds)
    (248/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.154595432 seconds)
    (249/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.08621135 seconds)
    (250/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.364918475 seconds)
    (251/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 1.966349107 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.075135669 seconds)
    (253/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.048643501 seconds)
    (254/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.949230762 seconds)
    (255/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.085058475 seconds)
    (256/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.491567901 seconds)
    (257/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.281533542 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.943563452 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.058236169 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.029705823 seconds)
    (261/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.023308911 seconds)
    (262/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.365641002 seconds)
    (263/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.86087075 seconds)
    (264/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.94919747 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 3.038887865 seconds)
    (266/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.95737393 seconds)
    (267/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.194540464 seconds)
    (268/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.938637506 seconds)
    (269/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.826383067 seconds)
    (270/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.963419495 seconds)
    (271/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 1.95022258 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 1.956971085 seconds)
    (273/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.123585028 seconds)
    (274/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.447534171 seconds)
    (275/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 1.95247897 seconds)
    (276/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 1.949911548 seconds)
    (277/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.259973904 seconds)
    (278/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 1.991904353 seconds)
    (279/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.868935843 seconds)
    (280/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.003187838 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 1.963406619 seconds)
    (282/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.390212895 seconds)
    (283/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 1.955340709 seconds)
    (284/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.288712074 seconds)
    (285/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.054094193 seconds)
    (286/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.74181505 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 6.94850235 seconds)
    (288/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.290598547 seconds)
    (289/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.258858266 seconds)
    (290/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.949604286 seconds)
    (291/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.088564875 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.546563912 seconds)
    (293/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.142992944 seconds)
    (294/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.508970514 seconds)
    (295/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.036245258 seconds)
    (296/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.513907074 seconds)
    (297/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.270132041 seconds)
    (298/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.156282623 seconds)
    (299/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.46656628 seconds)
    (300/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.049911504 seconds)
    (301/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.191559739 seconds)
    (302/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.309019212 seconds)
    (303/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 1.998601339 seconds)
    (304/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.097223421 seconds)
    (305/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.872900534 seconds)
    (306/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.505894724 seconds)
    (307/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.011736834 seconds)
    (308/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.086460988 seconds)
    (309/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.222435673 seconds)
    (310/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.949465834 seconds)
    (311/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.433464888 seconds)
    (312/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.304472724 seconds)
    (313/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.097987658 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 6.937532753 seconds)
    (315/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 4.539694361 seconds)
    (316/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.25415357 seconds)
    (317/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.154349027 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.44774834 seconds)
    (319/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.134103973 seconds)
    (320/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.392670651 seconds)
    (321/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.092257401 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.111786321 seconds)
    (323/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.948659001 seconds)
    (324/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.088726018 seconds)
    (325/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.362151897 seconds)
    (326/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.792143768 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.281932854 seconds)
    (328/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.488054411 seconds)
    (329/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.144063685 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.357310729 seconds)
    (331/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.151016839 seconds)
    (332/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.080466111 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.427043152 seconds)
    (334/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.399883087 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.140357117 seconds)
    (336/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.380880648 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.070240602 seconds)
    (338/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.010632422 seconds)
    (339/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.967161429 seconds)
    (340/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.939357125 seconds)
    (341/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.386425998 seconds)
  done (took 1160.741316279 seconds)
done (took 1162.782473064 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.96307833 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.934924341 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.508080111 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.951885754 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.934793448 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.93730168 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.484567945 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.973263158 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.944352448 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.484364284 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.951468892 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.935547304 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.943729795 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.952422494 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.943471384 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.94777953 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 1.941735156 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.960738285 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.953672562 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.93966083 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.011411246 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.9396979 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.934847369 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.982654061 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.935970551 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.943949724 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.96028977 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.000404782 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.999614668 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.939580788 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 1.942542743 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.33528779 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.999022121 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.941723182 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.944546459 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.943656538 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.94121726 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.944887587 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.960932949 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.943762666 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.936700938 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.947381017 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.941401326 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.939279237 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.935846535 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.935719215 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.938670412 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.032211372 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.949069536 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.342891387 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.008801346 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.961175167 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.001654416 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 1.939361603 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.939634807 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.939657319 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.000834823 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.941658085 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.942227067 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.344822649 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.067122694 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.945809815 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.345452545 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.014112764 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.948539201 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.948299322 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.937117632 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.961215627 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.335418462 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.539914399 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.976821204 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.960596143 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 1.939046682 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 1.939933 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.949769047 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.487734336 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.955507738 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.613248377 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.975571864 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.947387713 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.943830404 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.941656531 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.939581282 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.946871218 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.962599449 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.938050888 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.942948175 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.944267685 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.94884894 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.338794489 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.994901826 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.509676864 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.953484907 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.96391536 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.963456233 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.613431345 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.977004627 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.957547671 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.941718188 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.336165292 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.99134065 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.963625946 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 1.941707472 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.947342775 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.03567506 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.963203213 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.964516101 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.938707692 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.963519823 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 1.946542567 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 1.939930498 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.951868978 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.962503339 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.956550254 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.948502053 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.938589825 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.950826731 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.945203296 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.958581002 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.950756937 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 1.947184693 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.948353869 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 1.940852079 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.987180878 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.964661128 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.948366898 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.036009623 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.945093552 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.035844508 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.949096737 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 1.947763484 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.940114534 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.346732315 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.996837111 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.964236056 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.94634727 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.965272191 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.96447687 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.949359409 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.943646983 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.949227541 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.944193872 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.988216507 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.941511786 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.96646315 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.988622499 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.951886127 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 1.947565537 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.95919777 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.959188508 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.96517795 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.94613157 seconds)
done (took 307.165464366 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.000145993 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.305523171 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.033187129 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.947645303 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.030432174 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.008817004 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.947682089 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.947723643 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.947482144 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.38099578 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.94734129 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.948339542 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.40647791 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.947976117 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.00446789 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.948304418 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.948018486 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.217993566 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.943002144 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.008590383 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.983744924 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.948194349 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.948250221 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.404894182 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.947038751 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.960063388 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.009066659 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.948174563 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.227384161 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.963484509 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.965398343 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.226045441 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.008519565 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.950663025 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.951486437 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.949254544 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.033127774 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.954931725 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.002102497 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.002290646 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.032836051 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.948864294 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.965617038 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.989551262 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.954763917 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.944223716 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.949543935 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.954614571 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.948267082 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.952016151 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.220209125 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.951436603 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.951519564 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.951310309 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.95108159 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.948024582 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.950863053 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.94558564 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.011192298 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.94511064 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.003999016 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.390428377 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.384225906 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.951218129 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.968016281 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.95135953 seconds)
  done (took 156.240514531 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.035885296 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.050377542 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.038031745 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.957754924 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.014585415 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.030947807 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.958430116 seconds)
  done (took 15.95826222 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.959552209 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.951852164 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.983017848 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.978134753 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.945191719 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.124871746 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.965211614 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.952859796 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.982218158 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.946152996 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.317058394 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.978551039 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.953057961 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.958178698 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.965099995 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.987038668 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.955113786 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.947237785 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.059945914 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.028201398 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.953249417 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.953760118 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.987321943 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.965658771 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.952959132 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.947105179 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.947160087 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.961070016 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.953355345 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.952315281 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.95250247 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.968976714 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.95349009 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.981301372 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.953185652 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.953547978 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.946655362 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.953720223 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.954043731 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.340851905 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.953764491 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.953527394 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.953950263 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.954060867 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.953248964 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.979417586 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.953169614 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.953890003 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.953001453 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.954334711 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.988957972 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.954736711 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.953844911 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.95464001 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.989795189 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.955145181 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.948071234 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.953765833 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.954420866 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.95490781 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.956909765 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.029593807 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.987171519 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.954864195 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.985859735 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.997534312 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.954464033 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.954115285 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.954786347 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.986532378 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.954762288 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.983618289 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.955149384 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.045770424 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.955147565 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.133367929 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.980745595 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.959087003 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.959648352 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.914787813 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.963679818 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.955352187 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.958259006 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.962683054 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.956653375 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.955689668 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.955420607 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.957374704 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.963837334 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.955575316 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.00825282 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.955725947 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.949224829 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.050882931 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.956178875 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.062966678 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.984713042 seconds)
  done (took 196.672978575 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.96203831 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.957681856 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.972690766 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.957391015 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.956522953 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.961287623 seconds)
  done (took 13.643676788 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.959302209 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.960588942 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.95579592 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.955721685 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.950490024 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.949982072 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.956839288 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.961777373 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.955242501 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.956636066 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.950734777 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.950498139 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.950454799 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.950697774 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.957145167 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.956383434 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.95741805 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.957225572 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.956738745 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.951434217 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.159163508 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.951012364 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.950970008 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.954951747 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.956307598 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.957769403 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.967271194 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.957297472 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.957121157 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.966840424 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.956764048 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.952094535 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.955087451 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.966139239 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.963539954 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.955365412 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.962544399 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.95212589 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.958300755 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.951317827 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.952202827 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.951900614 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.95838513 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.953020678 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.960759488 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.960424929 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.957544899 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.968139198 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.958750001 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.953341961 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.952822817 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.95846973 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.95302695 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.953251417 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.95865923 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.966978814 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.958426747 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.958572192 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.952885492 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.956545777 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.965027982 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.953437042 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.962226993 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.964837191 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.959874546 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.952912784 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.956372329 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.957760893 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.955085413 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.959748443 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.954385671 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.960198593 seconds)
  done (took 142.977729952 seconds)
done (took 527.411721068 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.292042896 seconds)
  done (took 9.172726346 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.099796885 seconds)
  done (took 9.117179935 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.329214083 seconds)
  done (took 14.220756091 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.976603999 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.996727172 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.959245109 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.965624993 seconds)
  done (took 29.806457011 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.168710904 seconds)
  done (took 9.05300196 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.988503354 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.971196882 seconds)
  done (took 15.937822366 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.204269715 seconds)
  done (took 9.094400548 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.304858869 seconds)
  done (took 9.201631791 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.982187213 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.991211619 seconds)
  done (took 15.891402453 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.974768669 seconds)
  done (took 8.855643601 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.569435479 seconds)
  done (took 10.545716338 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.979860101 seconds)
  done (took 8.897989912 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.028335505 seconds)
  done (took 8.910484175 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.750430107 seconds)
  done (took 9.6317489 seconds)
done (took 170.267527977 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.976198075 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.962943111 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.96040407 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.960753559 seconds)
  done (took 29.742084324 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.000999598 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.002093422 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.003985544 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.020498088 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.991097037 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.991170217 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.001882887 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.001892088 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.991329079 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.007606329 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.002252793 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.007317798 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.020926277 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.004543427 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.004613562 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.007594388 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.008848383 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.001468491 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.991337749 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.005054103 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.007674306 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.008701044 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.962947431 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.962132211 seconds)
  done (took 49.89417663 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.171784521 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.051215411 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.115149632 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.007447624 seconds)
  done (took 10.228651641 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.961805987 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.037382656 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.020899333 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.021482702 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.021142446 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.129219859 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.021652029 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.140410102 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.110193005 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.099912355 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.9674636 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.979364166 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.980523543 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.021761133 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.128631848 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.962772803 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.963061605 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.099969178 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.038046188 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.207752396 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.963078362 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.022701557 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.0222726 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.02270769 seconds)
  done (took 50.828169556 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.965308637 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.976207766 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 1.97482756 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.964638851 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.965101651 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.964840074 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 1.975050565 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.965550385 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.993152127 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 1.967547945 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.965087867 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.965717494 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.965030562 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.965201875 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.964411831 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.981809222 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.981869056 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.965018943 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.967335749 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 1.975541792 seconds)
  done (took 41.293537717 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.96209972 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.203309706 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.201058638 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.127830174 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.962526166 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.965790484 seconds)
  done (took 32.307436694 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.980721049 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.986541807 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.973822294 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.002543673 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.033891437 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.979562193 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.053099478 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.176938728 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.980272239 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.049753957 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.994293794 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.974429215 seconds)
  done (took 26.076771649 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.964089411 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.966350089 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.966230566 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.981134574 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.978136485 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.975582486 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.977107972 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.964174037 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.982292568 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.989406933 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.975598516 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.982982429 seconds)
  done (took 45.589720918 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.138266234 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.152434544 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29547093 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.613505917 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.477605013 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.031428716 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.367072125 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.486199762 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.9905591 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.025567862 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.456029406 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.000125814 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.472672917 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.917598139 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.965296266 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.245009476 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.968707187 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.894946511 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.388239497 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.038769378 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.970778152 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.967380858 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.974075319 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.486489856 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.283138149 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.966087642 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.14346884 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990892089 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.965944375 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.165823063 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.967434067 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.00594259 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.114625793 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.263025227 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.477337848 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.045619599 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.034388609 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.886484173 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.023149037 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.004179956 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.980074475 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.983926195 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.502638276 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.993823248 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.214684745 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.969490582 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.968760019 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.559572745 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.921566637 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.072595066 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141071773 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.570030911 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.008189219 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.909467162 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101896316 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2463522 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.975407257 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.893155481 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.04489326 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.987393385 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.134847578 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.033283552 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140005347 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.919559991 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.411636779 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153808957 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.97030359 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.975983076 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.249394731 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.251793928 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.049383164 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.057197822 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.70705652 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.970047951 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.971886758 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.396896982 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.085892346 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.969901279 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.695386722 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.477417602 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.923041774 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.069422727 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.632661098 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.97699198 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.968441331 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.98110064 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.819785818 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.920278108 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.053061452 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.996338241 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.315271005 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.97031972 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.970073523 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.998795534 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.972145466 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.956447466 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.56486101 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.046925601 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.920858151 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.521774989 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.96964361 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.942744796 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.970021017 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.99485232 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359367038 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.016192426 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.702703884 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.565317341 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248139853 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.551667225 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.978036836 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.78320557 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.051877514 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.052054205 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.970155018 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.791109823 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.902479246 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.049504356 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.148095248 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.970476787 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.922167176 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.98420843 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.119159095 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.970544688 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.013293464 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.972309793 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 1.978242129 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.970876636 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.976107548 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.005459578 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.998437032 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.474574324 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.093148599 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.97201917 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.913875785 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 1.980105049 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.448239633 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.056644122 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.046119511 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.393909347 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.574979055 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.748276897 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.936578521 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.780700704 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.426481973 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.075030601 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.057349151 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.12048921 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133514234 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.056184625 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.971778132 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.139555512 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.985386853 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.975684285 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.014644397 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.635807326 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.638530826 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.019320514 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.972561419 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.929393453 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.940344273 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.168216691 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.623286912 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.010303378 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.981030675 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.056196899 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.160480854 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.966671581 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.924644898 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328633315 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201867624 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.475371464 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.363061722 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.618134477 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.072597541 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.987365116 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.149291344 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.057529051 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.596938143 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.359213366 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304765427 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.382928667 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.972014167 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.486776936 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.024728812 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.36783198 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.998485047 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.708561586 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.918206288 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.40580778 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.0118962 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.426704507 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.930133625 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.98442502 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.429042867 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.982121874 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.526303717 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.255181427 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.007160918 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.978881662 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.978355984 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.988947168 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.944986828 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.100512357 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.052683392 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.054515217 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.930354517 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.377275997 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.025459522 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.980047404 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.976803081 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.273813399 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.894181415 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.000493311 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.978033798 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.06379562 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.849160723 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.677968349 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.982804689 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.982817744 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.449197678 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.986366818 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.495964095 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.997036122 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.091510875 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.020033689 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.004457513 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.83744602 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.499553323 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.083963878 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.060254128 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.978396686 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.985655929 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.249350558 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.991422148 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.242393689 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.458202185 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.596280049 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.672834182 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.079722451 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.585689417 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.000130729 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.981366851 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.53747957 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.020914072 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.980922899 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127498047 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.673778992 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.086317577 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.151501914 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.065539009 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.980484675 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.431971621 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.569438548 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.981189394 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.965719469 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.087142042 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.979603955 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.206431857 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.733975624 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.982441548 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.979848061 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990333341 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.152532914 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.12729773 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.367423787 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.480539382 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.673553234 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.932733055 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.988037525 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.134465768 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.253437835 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.980058638 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.016611673 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.56812188 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.627836206 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.750189611 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.504543727 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.177932505 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.129810222 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.425307093 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.080471808 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.995580522 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.952103264 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.171352859 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.943150044 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.110932082 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.933312828 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.004257959 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.284007665 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.0058451 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.431339915 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.019881508 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493233262 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.337051876 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.016499106 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.089329325 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.013960591 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.981940791 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.059860417 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.982739664 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.874692464 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.108560368 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.985624288 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.359495066 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.032910383 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.030065567 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.990816842 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.541652113 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.016218934 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.986523061 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.732280936 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.011508048 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.11065766 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.067261034 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.029578048 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.016540422 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.986386798 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.987844222 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.553804075 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.432463168 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.070668323 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.547250722 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049118388 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.715507519 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.983832243 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.160340451 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.991973796 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.561407466 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.040056779 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.369766698 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.990969553 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.156968784 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.292267134 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.07842664 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.992732393 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.937995849 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.557564083 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.04005375 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.464675225 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.988812021 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.737279021 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.449385027 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.962170161 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.493428455 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.976849354 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 1.987615321 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.273033715 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.668553568 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.637731625 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.0272967 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.988509525 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107195993 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.175117871 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.062538272 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.733055392 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.997275072 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.012999691 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161661411 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.113330469 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.926835109 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.513011801 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.734596539 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.253725516 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.002495339 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.134062363 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.09861472 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.08016716 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.030313033 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.062192432 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.71761643 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.435605381 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.088886184 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.938136098 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.985492562 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.240941118 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.456305727 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.070887067 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.268727146 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.439547859 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.038690843 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.011391191 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.989545543 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.452461259 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.656516443 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.685288852 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.312055277 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.488978664 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.564048993 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.986741358 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.718763722 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.164088559 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102591814 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378963438 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.880802109 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.362987124 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.26013224 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 1.995196002 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.938219712 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.13760159 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.998099156 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.043056823 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.76198094 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.269618494 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.032291326 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.814151317 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.567529346 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.942674407 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.019811583 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.573709661 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.014526449 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.010371814 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.988661781 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.511955653 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.372693188 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.005406499 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.944881502 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.739886561 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.939396322 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.164868941 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.937135285 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.034857656 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806094688 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.053903139 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.152447698 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.511130243 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.008501364 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.036090309 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.941044264 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.739279714 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.97501452 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.640397904 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.756320147 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.014727161 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 1.99336029 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137304042 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.972927042 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.036058432 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.997233354 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.296720984 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.247503446 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.447277617 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156132897 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.34437102 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.272401654 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.664475925 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.099948542 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.218056371 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.940955817 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.990374636 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.975935674 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.040562543 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.066089518 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.99064969 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.994960993 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.227796679 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107812337 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.15943436 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.089794523 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.997250576 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.014730513 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.091962706 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.140236052 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.993553185 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.998505944 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.017581507 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.140454495 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.990729738 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.975023577 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.1685571 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.072617721 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.377220949 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.068196798 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.876168759 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.998845786 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.662341809 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.154793338 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.497682358 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.991930064 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.781609057 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.065449411 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.992056728 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.4450103 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.642415529 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.139984527 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.247017044 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.952435322 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.948125446 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.045109623 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 1.996297316 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.996048388 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.583030195 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.369827081 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.99207861 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.441984022 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066337643 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.000656266 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.739490485 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.471826826 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.992666965 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.751691371 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.029897823 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.441680978 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.591732476 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.022155294 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130763658 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.998522663 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.947068454 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.994352308 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.038337859 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.500132186 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.008149033 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.512329161 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.098162052 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130197365 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.998002285 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.996012609 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.99614048 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.169494823 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.174214589 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.019053332 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.260222964 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.1417796 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.002831946 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.519486348 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.684674296 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.035103235 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.04768504 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.942176739 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.353666529 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.674001406 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.945523607 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.536357095 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183387492 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.997061902 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.222376138 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.243966999 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.996276616 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.167848828 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.038946062 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.248713438 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.290576747 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.544925413 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.095300434 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.894567683 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.176485569 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.005115233 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.520048459 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.440304722 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077727296 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.995582623 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.008911583 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.99503914 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.747976501 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.584431474 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169712338 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.100736618 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.889950129 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.511007744 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.999057011 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.949953867 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.996064231 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.023669954 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 1.999962048 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.947269884 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.747237686 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.83261686 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.155535474 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.327525733 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.94834046 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.144956423 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.986878517 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.952372376 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.476138762 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.996904004 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.296578607 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.949568402 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.000835278 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.952097555 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.061820378 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.161860189 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.271208868 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.997333418 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.953657577 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.00598561 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.013529027 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.996952186 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.085213191 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.999406499 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241842089 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.448193699 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.189968254 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.156389463 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.843862887 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.024549681 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.96820105 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.043065069 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.811622451 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.545224201 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.061123408 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.190215749 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.743384555 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.977841618 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.523344071 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.023877928 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.707838626 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.005757312 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.002397346 seconds)
  done (took 2352.171932555 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.032518512 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.091737432 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.045313059 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.074601387 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.011202323 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.019867554 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.059714975 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.027146725 seconds)
  done (took 58.280588203 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.998618987 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.882242997 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.014433819 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.001397188 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.00178305 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.009494667 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.215117823 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.040124204 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.00179834 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.009026363 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.00118009 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.007827034 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.001506875 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.013531423 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.010865994 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.2571695 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.02678616 seconds)
  done (took 79.461178775 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.044490257 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.16908473 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.999471268 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.123121084 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.011976888 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.361038048 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.015446963 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.998070095 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.129873898 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.269642697 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.003691853 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.03008449 seconds)
  done (took 93.085760735 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.00272677 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.002010458 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.002101741 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.001563716 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.002204818 seconds)
  done (took 11.931298645 seconds)
done (took 2882.97049394 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.21179243 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.133297622 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.103083554 seconds)
  done (took 6.157094021 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.062115449 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.125667921 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.193255553 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.140707582 seconds)
  done (took 10.453893214 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.303822167 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.479300627 seconds)
  done (took 6.703779616 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.425912122 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.9987171 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.538432818 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.002451597 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.006320514 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.009168346 seconds)
  done (took 22.954873949 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.003298283 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.002976323 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.002850358 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.003277375 seconds)
  done (took 9.94187447 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.011360073 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.001461253 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.015478323 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.024773621 seconds)
  done (took 21.974104452 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.360034458 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.253415766 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.757689316 seconds)
  done (took 9.293298202 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.807753137 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.376957265 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.814962401 seconds)
  done (took 9.921622758 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.287029848 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.920120584 seconds)
  done (took 8.128611296 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.155516049 seconds)
  done (took 4.076878966 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.477839689 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.482466556 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.835699538 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.852903906 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.993328714 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.310571852 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.356569459 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.388749116 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.671850057 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.499797678 seconds)
  done (took 27.7930475 seconds)
done (took 153.546136675 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.829924246 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.406770322 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.179805882 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.667797149 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.100140069 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.176736173 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.079688813 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.445348567 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.566507516 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.564880098 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.670673377 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.099962139 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.075052428 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.416124206 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.07504018 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.355713161 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.411569194 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.811919499 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.584690025 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.515606855 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.088389322 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.260693083 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.362362189 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.263565236 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.421080557 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.129539615 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.085522755 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.357806289 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.845498028 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.08835916 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.143286708 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.790735023 seconds)
  done (took 179.794631054 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.004776219 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.009772165 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.008753891 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.009535796 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.890727309 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.009606837 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.009653438 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.008389564 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.817756558 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.85102173 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.011115239 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.966635086 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.012388843 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.009203148 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.012107363 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.008715883 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.001901298 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.00942263 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.00990197 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.008883754 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.012561231 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.676027007 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.010712468 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.70467205 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.954681201 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.012349993 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.01017423 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.009895173 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.009092748 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.009654734 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.010378743 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.008811764 seconds)
  done (took 217.035141213 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.00672948 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.00986558 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.011105685 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.011359188 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.016552276 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.039366422 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.059687905 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.010630905 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.074168718 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.010573418 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.009414798 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.009982832 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.010933959 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.065978508 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.077663726 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.219962536 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.180387417 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.196336324 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.083730969 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.062275659 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.060663281 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.04851301 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.045723599 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.094992326 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.012033098 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.011983407 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.147904022 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.326513187 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.205480456 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.107270963 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.147353452 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.084591727 seconds)
  done (took 228.397129683 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.37350293 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.060116766 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.07964329 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.441206544 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.070021186 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.066750129 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.409282294 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.324994851 seconds)
  done (took 21.823550457 seconds)
done (took 649.041074112 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.787487058 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.966420808 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.212426454 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.078027565 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.66373814 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.121367608 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.071120889 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.169694475 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.924096112 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.232356193 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.553335889 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.115068459 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.932649118 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.137957768 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.238289613 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.166536044 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.521281085 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.860363527 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.258897096 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.903397464 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.320889839 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.092945906 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.221967727 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.873176071 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.518282665 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.08851039 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.176038637 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.507731914 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.060277228 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.318568144 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.143440408 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.444853263 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.069255856 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.051532924 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.128965254 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.11308961 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.382738915 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.073336179 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.182890984 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.847353919 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.876942953 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.695269239 seconds)
  done (took 111.063571718 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.041663948 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.038326418 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.039357157 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.039049574 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.047067041 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.03800501 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.052412932 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.04949237 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.03930819 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.044616729 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.042650276 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.047499172 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.036523929 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.067514631 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.038273736 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.032128783 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.03214905 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.041641466 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.033383738 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.043328887 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.036957161 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.041195363 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.018116498 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.044366851 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.045266643 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.039913631 seconds)
  done (took 55.031805807 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.011946465 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.199801439 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.37767057 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.057510133 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.01471287 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.01768808 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.053463861 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.023923169 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.016163047 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.017241743 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.120865268 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.020465577 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.02891945 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.375632154 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.055385927 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.014253473 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.022413383 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.015413005 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.201122894 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.035199024 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.056598585 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.024713607 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.055404392 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.034248182 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.017078048 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.025093672 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.116757073 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.578184137 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.087441267 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.179647332 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.124568485 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.114102769 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.463830828 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.437428365 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.132941444 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.067528199 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.063264579 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.203770167 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.039659287 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.02138726 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.059771051 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.031007929 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.391275201 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.65045156 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.071923918 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.030172232 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.515157066 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.189595775 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.080137015 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.044878008 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.388818286 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.062599882 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.025365255 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.023981422 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.063719627 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.037743137 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.023044467 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.312858646 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.046776977 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.061790389 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.031617091 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.024406889 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.219380854 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.029739895 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.197617189 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.030653064 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.024920694 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.018795861 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.378919225 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.058833302 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.627827401 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.037907436 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.024788181 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.124317583 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.203257632 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.542815908 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.035905135 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.210468769 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.440800056 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.067810682 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.031102966 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.492012774 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.0712195 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.031145921 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.016470485 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.017333479 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.027230412 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.061488318 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.055820008 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.555626563 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.641292039 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.328728814 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.071055117 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.09495884 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.026541453 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.327851059 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.02976819 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.019687973 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.375393515 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.671946962 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.041232056 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.026934033 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.616124527 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.041238911 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.059125863 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.034217507 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.389813892 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.060067178 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.064998943 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.01893047 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.025955431 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.022616202 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.059804688 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.071494748 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.058767343 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.623640107 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.194324505 seconds)
  done (took 253.264813661 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.021362464 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.020086592 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.018269883 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.020571547 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.016940159 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.019560355 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.017335016 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.017143999 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.018722341 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.017302751 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.015319217 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.016373642 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.021543482 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.016832613 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.052899818 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.02029511 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.633329645 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.01866405 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.018994648 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.023122725 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.852139853 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.026087842 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.019216583 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.023937167 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.018593115 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.01852887 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.027794242 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.440577258 seconds)
  done (took 172.399524783 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.019996112 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.219472126 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.02927119 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.089438546 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.036270502 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.020622625 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.05077565 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.06379075 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.028867435 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.020201139 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.020612317 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.059205172 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.0320175 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.38121849 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.087607071 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.063120012 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.133501635 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.03167723 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.020871772 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.020956759 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.090601466 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.050163488 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.061003106 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.102206447 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.037185622 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.090107773 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.050297652 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.020821308 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.021264048 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.214135936 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.047871489 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.062165823 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.071570776 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.049234424 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.154802527 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.155684192 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.139025088 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.063425191 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.029379031 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.022047839 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.022255555 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.034584434 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.091107725 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.037927423 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.024466442 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.159908187 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.04711474 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.022756287 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.047468231 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.022695761 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.039780951 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.047896528 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.070668592 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.160781184 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.087428332 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.054312283 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.054096731 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.060451429 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.016615493 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.133978875 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.04627507 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.14965633 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.050005132 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.035301509 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.024125968 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.027426864 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.091673077 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.069751759 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.13835066 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.035819104 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.12951527 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.102492975 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.040149433 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.024111278 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.024006118 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.093042919 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.14636858 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.107003238 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.108592507 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.075413009 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.048522925 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.023919894 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.036680754 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.063191545 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.034520091 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.150481782 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.158146534 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.036123779 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.024064839 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.02577285 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.025317218 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.058798423 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.105556719 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.080802898 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.154699203 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.076607161 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.074831257 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.03602185 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.043019754 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.033533994 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.067238238 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.036541656 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.042780514 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.497117459 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.080457544 seconds)
  done (took 219.675931813 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.446059778 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.100077585 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.119174688 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.314069953 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.446318115 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.337783185 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.085016233 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.104648016 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.097590493 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.250053181 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.165455087 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.154602164 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.080804922 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.059686023 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.097371725 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.099829177 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.131232444 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.49375968 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.219832464 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.134451885 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.091267884 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.397225848 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.403838214 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.502376759 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.148545516 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.535100074 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.758284587 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.20204046 seconds)
  done (took 67.93305591 seconds)
done (took 881.374984977 seconds)
SAVING RESULT...
DONE!
