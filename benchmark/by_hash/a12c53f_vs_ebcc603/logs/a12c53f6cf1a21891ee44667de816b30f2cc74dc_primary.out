cset: moving following pidspec: 23141
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.865893037 seconds)
loading group "shootout"... done (took 1.141342339 seconds)
loading group "string"... done (took 0.676409907 seconds)
loading group "linalg"... done (took 8.729913641 seconds)
loading group "parallel"... done (took 0.168215921 seconds)
loading group "find"... done (took 3.081254336 seconds)
loading group "tuple"... done (took 2.167326405 seconds)
loading group "union"... done (took 15.142874544 seconds)
loading group "dates"... done (took 1.465866409 seconds)
loading group "micro"... done (took 0.222981427 seconds)
loading group "simd"... done (took 4.834889205 seconds)
loading group "io"... done (took 1.094765186 seconds)
loading group "random"... done (took 9.646007444 seconds)
loading group "problem"... done (took 1.540632682 seconds)
loading group "array"... done (took 25.645598742 seconds)
loading group "misc"... done (took 1.888672745 seconds)
loading group "scalar"... done (took 44.366897432 seconds)
loading group "sort"... done (took 3.365750471 seconds)
loading group "sparse"... done (took 12.932328181 seconds)
loading group "collection"... done (took 19.114551148 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.430503743 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.118762989 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131388313 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118091377 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.191139929 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123331988 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131589452 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086778413 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.873805642 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.1391263 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117643812 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435860941 seconds)
done (took 5.362642821 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169588453 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093566017 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085984497 seconds)
  done (took 1.41587474 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.073908071 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06584063 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069266969 seconds)
  done (took 1.45011796 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067315187 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137845215 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068479228 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068808566 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068893031 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06821824 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068380776 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06834847 seconds)
  done (took 1.790363451 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073782369 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069646652 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06748751 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069563271 seconds)
  done (took 1.519099785 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067032858 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124100014 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067045236 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066469519 seconds)
  done (took 1.560448003 seconds)
done (took 9.234424819 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143104491 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.823246964 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.776234544 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126460878 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.251939078 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.452392345 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.125069373 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.186389289 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092633385 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077271057 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.124541771 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080170901 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.403961362 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.405871495 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073643356 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.179323822 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.647490283 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087799768 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136589193 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.458532875 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074488128 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.090239709 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08744231 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071849764 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.335342625 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153253307 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.656477808 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096962684 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069866249 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09686302 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071037781 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080022156 seconds)
  done (took 10.804747432 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094494054 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093867608 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071391412 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126865461 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095265668 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072669859 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077563413 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070361051 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091944998 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128362146 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093366414 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.102024331 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.07474514 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071198249 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076669195 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200020774 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081092859 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084171903 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070151021 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083763371 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108804448 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079513906 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080953002 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080817178 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.135554842 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170397612 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097392061 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098596279 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066568522 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080553582 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11730916 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128751112 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067358309 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067356664 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123450682 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097674444 seconds)
  done (took 4.755759258 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.894754588 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09829736 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08559086 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077067039 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109838699 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114268496 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125239785 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.125723457 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103916644 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070936327 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.154323178 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.681285159 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.160199927 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.07246791 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.123646505 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.363330337 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.064684643 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070689009 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070237763 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073546104 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072480432 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115503575 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.06813315 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.18008646 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.597688785 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073390043 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072420646 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09897629 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067561568 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.14512322 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095243882 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071894978 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.548319584 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06782909 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065779518 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090513193 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.097572033 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069666667 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070616727 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081615572 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.0688865 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111448911 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083166719 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.529426115 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072509934 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.595622978 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.230032085 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.076195415 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074961713 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10438668 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066404782 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069964956 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.924744111 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.149283329 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069288176 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.278073571 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06819994 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070557652 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071300398 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102438686 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069291905 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070911784 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.078519357 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099218241 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.803330756 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090795255 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098524178 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069490433 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.407287035 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074694605 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071673283 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072065169 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.101181718 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.109524337 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06852741 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068198872 seconds)
    (76/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.114963382 seconds)
    (77/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.098950588 seconds)
    (78/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092319657 seconds)
    (79/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072119772 seconds)
    (80/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069533106 seconds)
    (81/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068363028 seconds)
    (82/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.325606936 seconds)
    (83/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.163077223 seconds)
    (84/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066792608 seconds)
    (85/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068061623 seconds)
    (86/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.480201155 seconds)
    (87/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.0661143 seconds)
    (88/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067973281 seconds)
    (89/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070049576 seconds)
    (90/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.215264738 seconds)
    (91/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068457409 seconds)
    (92/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06669445 seconds)
    (93/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.067674928 seconds)
    (94/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101866168 seconds)
    (95/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.087721954 seconds)
    (96/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069911989 seconds)
    (97/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.338347651 seconds)
    (98/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069396484 seconds)
    (99/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.519459761 seconds)
    (100/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.07218645 seconds)
    (101/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.106467291 seconds)
    (102/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123020854 seconds)
    (103/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070219778 seconds)
    (104/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.067608908 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.105964932 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070735301 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067678586 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076201304 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.068088426 seconds)
    (110/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066745353 seconds)
    (111/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071650634 seconds)
    (112/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.06710508 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067868906 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066974823 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068642043 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071740723 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070913325 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069695428 seconds)
  done (took 23.161237465 seconds)
done (took 40.861934797 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.321065604 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081443349 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081601369 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081640364 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.082326916 seconds)
  done (took 1.943970143 seconds)
done (took 3.345003481 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.136564852 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077476778 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066423903 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103492162 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070996584 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104815964 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111971291 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107511414 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.071126193 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.07088016 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.071030112 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.108199347 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107901028 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.071325613 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.10080273 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.107059573 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.071388099 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066830097 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071342158 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071181168 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071406253 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066346546 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070936356 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.07106915 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101710571 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071253635 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066785476 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101706576 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071287636 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101404644 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.071277067 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071039553 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070881145 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102483158 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071074587 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.10217593 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066673455 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071260091 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071610128 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071404519 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071268271 seconds)
  done (took 4.741249275 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.194873099 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084016307 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08601058 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063794216 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073359765 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084653964 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064066323 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084185426 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.094576845 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085211088 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08467615 seconds)
  done (took 2.341528896 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071596542 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08507238 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086694583 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06407125 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075833208 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085932756 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064458128 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086027093 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088802019 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086201681 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086460699 seconds)
  done (took 2.2013104 seconds)
done (took 10.607793 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097845471 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.067799415 seconds)
  done (took 1.466658092 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.230663733 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.514748464 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.302534282 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093895341 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.075144193 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.088646284 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.208076058 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069591641 seconds)
  done (took 8.079434038 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.101037403 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.07150588 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070172458 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.073430742 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070498664 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071248305 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071409463 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072210752 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071004872 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070466985 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072064894 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069369789 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070186337 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070138801 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070553941 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070729919 seconds)
  done (took 2.59138798 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10626981 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071302467 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.102037594 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063997564 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074575109 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06452541 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072853686 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07480747 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072243839 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073604659 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074867308 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073439541 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073701225 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073570314 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075095978 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075603205 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075533155 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073031875 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075706575 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075989232 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075290691 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.076295227 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076723111 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074086448 seconds)
  done (took 3.261957927 seconds)
done (took 16.726986621 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177515783 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077757929 seconds)
  done (took 1.564428604 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.070797506 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070855028 seconds)
  done (took 1.482394995 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.075844132 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062497747 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081639209 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07296649 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06379493 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063578568 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.080161793 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063746 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063311436 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063862063 seconds)
  done (took 2.032918545 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065465102 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071346489 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068899564 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066883447 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069261818 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064836859 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067515552 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065143181 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.072091067 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064140257 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068565696 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085559572 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067831796 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08644172 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067395328 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068327938 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069705 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067183602 seconds)
  done (took 2.593427672 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062785805 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063588639 seconds)
  done (took 1.46815142 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067565166 seconds)
    (2/7) benchmarking "second"...
    done (took 0.064514358 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066223066 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06628844 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063702769 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063539189 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063807287 seconds)
  done (took 1.790610878 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.431924601 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125365688 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.351121289 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071248349 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079899073 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260094118 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066080545 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071085704 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071249512 seconds)
  done (took 2.908730111 seconds)
done (took 15.189314386 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085313337 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184398402 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090226512 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.412665423 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094692166 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069551466 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115195243 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.184139326 seconds)
done (took 2.602174607 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.282489776 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.272981435 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.415416209 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.128113563 seconds)
  done (took 3.152276919 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.342168111 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.080651812 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078970374 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069557107 seconds)
  done (took 1.926483538 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.068807488 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073644609 seconds)
  done (took 1.489229349 seconds)
done (took 8.215165972 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073184294 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063911883 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.070014862 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066269847 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.066194691 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.076577871 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.09457133 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066627625 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064024924 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065486002 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.067127945 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.066866986 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067124652 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066305718 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066109503 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066516951 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066368187 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066358494 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06545264 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06436081 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066316938 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066730642 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066012684 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066494592 seconds)
  done (took 3.007103514 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081762792 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.068127363 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069255785 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068645035 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069646798 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06949328 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068890613 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068129345 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069625926 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067602014 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069602657 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069394856 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067138979 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069773285 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067650865 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069650742 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069440416 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068297714 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067341401 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069759774 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069155929 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06811477 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069839052 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069408871 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069840096 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069988665 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067765068 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068268672 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069520798 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06961984 seconds)
  done (took 3.447951295 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06805887 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061685499 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062505337 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071949165 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062270826 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062412074 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062484657 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061985768 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.06251395 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063607527 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062740336 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062173908 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063013447 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062181162 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.06232114 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063153894 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067204567 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081868512 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062392102 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062272596 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066736021 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062528731 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062835068 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062963215 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063009301 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062518732 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062023711 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062869773 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062678867 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063126241 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062180531 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066355931 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067532483 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062423514 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072211702 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067105804 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062129697 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066946568 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063562903 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061984437 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062114716 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062112357 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062251996 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062304647 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072290012 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062520554 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063622379 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063191523 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062617133 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062278358 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.063027085 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064406454 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071422139 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063736386 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061864211 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063224457 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061747789 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062791475 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062257277 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061772541 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062076722 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065930794 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06423641 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.06276326 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082153625 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063461994 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072679423 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061881196 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063172889 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065980628 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062605547 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080214323 seconds)
  done (took 6.012193609 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074614835 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07462822 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.082298336 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073122797 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06693789 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063821306 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067764444 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063373505 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073537933 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067832943 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063359442 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067351734 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073284148 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067698333 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064606135 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073405613 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067569443 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066813909 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063774147 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067928114 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06487931 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067628146 seconds)
  done (took 2.895587011 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.143672084 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068490513 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107679129 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.072543833 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071245456 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.072547167 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068761466 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06841537 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068432343 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069186741 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069130798 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069062313 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071298493 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068962233 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069245127 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069359067 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068481981 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069179804 seconds)
  done (took 2.733275667 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07969748 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068450096 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092122044 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067948619 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068317529 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067964344 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072047074 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072496841 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068067064 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068526747 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072518492 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068030714 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067841318 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068176289 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067894468 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068471578 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068140014 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068333004 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072478675 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072126985 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071883954 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072359576 seconds)
  done (took 2.933261996 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080929222 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068710052 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083329944 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068724182 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062542679 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062600434 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068864353 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067528251 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068643164 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066854111 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06778357 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06249103 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069544178 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067632051 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069707028 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067436447 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066806912 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067339993 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067228301 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062679452 seconds)
  done (took 2.740410414 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074907711 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065192113 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065035428 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070771659 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065370147 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06515732 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071256917 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065160875 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065248582 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087329468 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065485865 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06511594 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070952163 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.0689733 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065391447 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071295788 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071514338 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071070505 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06598852 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065815811 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087531078 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065564017 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071090624 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06543996 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065490176 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065288634 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065240247 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069686215 seconds)
  done (took 3.308610257 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066712228 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065361127 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065797686 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065645237 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065775152 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065667156 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066047933 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06577944 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065761151 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065889774 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065562314 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065806893 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069426541 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.066450168 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065787008 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065848585 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065842014 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065948877 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06611686 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066459859 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065595755 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065577517 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065411546 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065857832 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065712598 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065348343 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066074196 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066134824 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06570379 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066098206 seconds)
  done (took 3.361254072 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075492197 seconds)
    (2/2) benchmarking "in"...
    done (took 0.074065245 seconds)
  done (took 1.528478282 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06443474 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080193692 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062016756 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074579771 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070779667 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06631647 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071722928 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071210863 seconds)
  done (took 1.933283626 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.069305867 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092984577 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064405881 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064888633 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067947189 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130440273 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07748863 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076170371 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078334728 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066507388 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065194298 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076767241 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064261749 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077837182 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066137644 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073448667 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07186274 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082490458 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077507667 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062749154 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077130845 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065579584 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062997852 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065506219 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06462001 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071474771 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080422949 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077176537 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073061763 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062267324 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083696795 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063080216 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064581852 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073383372 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067850638 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063627619 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100788928 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063716742 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068779608 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062929075 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075926874 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.085064099 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.078369821 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.08184125 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065595201 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06568661 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062853678 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065394257 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066915382 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073152151 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.063169871 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071260239 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062646882 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064870825 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.074140314 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063687794 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068735191 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073293565 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077329782 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074510332 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072439775 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079340104 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07268848 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071836943 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06460768 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083704668 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065298481 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076714913 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078711892 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064653632 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076959786 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.063053059 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062154348 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.063177096 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097997853 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065291803 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064946006 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.063996208 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063650965 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064914182 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07353148 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068866226 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070985695 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067796519 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079866844 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.073299469 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063545713 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070344895 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081831712 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066905637 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063351875 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.080405684 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066996747 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062377047 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081318955 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073562896 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06527378 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063882565 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066376466 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076647798 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.064245366 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061486438 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071233148 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064536954 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064971605 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067541842 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07104941 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.06253118 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072744384 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06721413 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064255541 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061179119 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066489302 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06327661 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061224538 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07149124 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062419479 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076702203 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068898047 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07695595 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077160146 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.073191642 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.078011273 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061695913 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060471906 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080116333 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071552087 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.203425907 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083603145 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06441171 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.079044086 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064393752 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.066124938 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073892296 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062970034 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065922121 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063383597 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068657511 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.065106022 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065872036 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069364952 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072217461 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075980093 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.065050617 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072434637 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063828895 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079866001 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073425679 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067784325 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066967644 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064046862 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075687121 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.070193509 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073432977 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.063005615 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064133499 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063550946 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.074350264 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073316764 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06560872 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070934619 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067902105 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.064280616 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063802213 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064498391 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066750227 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067160806 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064124502 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071144741 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072075216 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077464608 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070545455 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072033203 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062376342 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062585855 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065234789 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062849793 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067995589 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072721915 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079053194 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075748499 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084802462 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063914684 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073352232 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065179546 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081053233 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07749286 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064875278 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068329089 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062428528 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065072098 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.073240304 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075205887 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077601213 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078934597 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068609559 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067682026 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062998303 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078508053 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063816647 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072220961 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.073030438 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068240188 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063404414 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065197274 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072734602 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067941868 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063515339 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079412172 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069968414 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.063015812 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077991106 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.064076578 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074650911 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.063010636 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067151387 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06848719 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.065385996 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.073416206 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.079489946 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062597546 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.064289732 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079725849 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065898998 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065019524 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071750794 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.079069747 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067964636 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071749318 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074538694 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073628217 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067958873 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.073419419 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064307076 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072760226 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066430215 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074983244 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063285885 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081325518 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.062043869 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078284077 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.06335847 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073778704 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063743276 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072398714 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063469817 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079198796 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064171059 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063342651 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074032881 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060536394 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.07093526 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061412552 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066940955 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068864774 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071682197 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063869128 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071588372 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064020411 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.215078555 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069495727 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073673912 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07409121 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06926352 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063732191 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072535163 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075797213 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072165257 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065199476 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065318004 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064179925 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073079079 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065277853 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06480246 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071947489 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068092725 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069544448 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064783515 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065336569 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064994381 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071972889 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073088187 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081867942 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072190749 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071130565 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.073085936 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063122044 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079560105 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063352092 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073889582 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062558655 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069789134 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072916871 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063473144 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083022718 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064899312 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071205988 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07597632 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072421667 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066800625 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.08210942 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066742767 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072199155 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07171973 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067524033 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06990186 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065166515 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071736762 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072850148 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074550653 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064943914 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071276544 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072672475 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065352306 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071493671 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065625448 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072337518 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065472054 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062620485 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067742786 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07556989 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068286705 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068588325 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063744395 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062393424 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063913604 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070910054 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06848083 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072863027 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079214956 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062491221 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06485967 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.063333776 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067373564 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081923461 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073671087 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.072040504 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068046525 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062941688 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06549428 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06581683 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064169034 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067053812 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062895923 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063342056 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074966949 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06544494 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068476421 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064113712 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064866243 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073625881 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068495257 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064178739 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069996645 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063193429 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068338875 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062669612 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06533044 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067722254 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062998108 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067011497 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074036959 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080392126 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070239445 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072170601 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064986419 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071485877 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079377691 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070641644 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064511421 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072587222 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062490397 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081996879 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073104962 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072172038 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073329966 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06445664 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080253221 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067667868 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.07331173 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078580256 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064338369 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069466073 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062031876 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078029071 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066577993 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06201232 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069993874 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070145632 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067762525 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073889334 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062628981 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069841893 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.217430505 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.069068076 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066643508 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.066201889 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.073699525 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080830774 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064787704 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.068554223 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.072226965 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072591044 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067951512 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076244975 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071872385 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065181547 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065215038 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067191916 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064416383 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075830748 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064136203 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067954652 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067821603 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06318637 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070041735 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079978991 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073595875 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073356899 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062997104 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062555372 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081290456 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066866408 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.067266186 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072169505 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073578255 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076042905 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073487023 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080799311 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06430458 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069007285 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076386307 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064434248 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063524471 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067242632 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06529068 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072899197 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073487794 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071077221 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065949736 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070072782 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077100204 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064613014 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068009215 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068573812 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064561394 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074273525 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071787571 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.075488675 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065253918 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063245847 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066849661 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072354354 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071271146 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.07251862 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064506591 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070496871 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077662722 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071328704 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066866457 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062962449 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067082345 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072901969 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068698278 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063112773 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06790195 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067481005 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.071161012 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07359424 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068374534 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063216905 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080820147 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071890867 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072576607 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065626562 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065701902 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063977222 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062904805 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075178044 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063173465 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065405317 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.06804365 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065583112 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.08177713 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072127315 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07964952 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064594143 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068206477 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063247607 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073370641 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068021128 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063942691 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074556895 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062773687 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079565026 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076228075 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.090562425 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.063107091 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.069340157 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071694417 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078686476 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073150741 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072451362 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066760268 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073122755 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.065268874 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073898543 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063395306 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.062574715 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073747873 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071860715 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075743256 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062886746 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073176604 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.065130477 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07170259 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.071022344 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064501886 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064780292 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064040227 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071850522 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066826231 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.07196578 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06711578 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079223165 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.21021592 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.076028586 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.074611354 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.076148264 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078586656 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077112635 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.072156092 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064693002 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071180887 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071834001 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064966179 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.069127972 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067089898 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085618129 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065538649 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065165623 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078138581 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070760531 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063695874 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070632586 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068413107 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07408456 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064558795 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074465684 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067636685 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.0642402 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067953495 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067923903 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062243527 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063000732 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063519162 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073720124 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067705269 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063570284 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082840769 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065148216 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072359287 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074913368 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070274871 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065361428 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062300303 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064390705 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076854625 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079056074 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06704606 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072248423 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065284724 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.073049761 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062261501 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072428311 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071839005 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071990129 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063162133 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064119764 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078670033 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079149114 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068178547 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072879059 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072631881 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06506912 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085801489 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072702112 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064742719 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074898513 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066127822 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.063191922 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062556073 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.065239465 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075535556 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063240597 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06633896 seconds)
  done (took 43.636938903 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102617888 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063927393 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063118718 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062989396 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071559913 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064377756 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063541103 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064208971 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064278994 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06609014 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063353612 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066648345 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069931532 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077283051 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072957705 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06763198 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063417255 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064341293 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063382887 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064255221 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.070160513 seconds)
  done (took 2.933608631 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067274744 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067271641 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067494107 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067865134 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067046061 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063373028 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067917292 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063560189 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068180779 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06383594 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068309408 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063535525 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063751772 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064121366 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063912361 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065127568 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068016372 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067077581 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063218173 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06757611 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065090251 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067340839 seconds)
  done (took 2.932863295 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065595877 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063553303 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071989331 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062601332 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062434295 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066233101 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062570184 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067306219 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066918946 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067234831 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.07244083 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063703957 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062527449 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068536955 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062495923 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063685154 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107154447 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064372312 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06429477 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062755967 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066380062 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072355051 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062799233 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062644684 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067144031 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066175282 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06288128 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065400301 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063389342 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067238641 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064510342 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062627957 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072044638 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071874446 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067495357 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067549846 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064682067 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063974859 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063029365 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062994251 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071341083 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06423211 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063059401 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064433802 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072333487 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063162345 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062998781 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072530368 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062436067 seconds)
  done (took 4.746511789 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073229281 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116936529 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068964403 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097049456 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076449066 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069501795 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068823065 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098361466 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064776374 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06548102 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077608827 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077419591 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066373234 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067829537 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070435547 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065877152 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066785217 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065460087 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069086523 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065945076 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.069426903 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070581313 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.076714029 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.077114117 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067109831 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065176856 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.0658972 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067786432 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076978002 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069770953 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068145823 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068342565 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077667949 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071304688 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065392885 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066087043 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.077561343 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066333096 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06625098 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064364164 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065780554 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067207827 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070439705 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077955772 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066443376 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.071118736 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066338538 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064053518 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077307676 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066116756 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070592423 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077749582 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067779575 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066538328 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067709373 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076893073 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06618675 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065078649 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06675438 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.077174048 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064308735 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066990253 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.080381922 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065573843 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069802931 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077601836 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070866844 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067466094 seconds)
  done (took 6.470887888 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073349007 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098624591 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.079502115 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.079123541 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074176284 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.074288241 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074043374 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074087817 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073735411 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.077578448 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074575515 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.10974627 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070222976 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075851767 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074026311 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074023719 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074223748 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074152075 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.074057487 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074209846 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074147856 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.079743628 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074322997 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.079602036 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076672065 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070614634 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073820317 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074191148 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.079907453 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07423925 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076647487 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.074292023 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074408722 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.079644915 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076586153 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073881377 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064305111 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073766726 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074273333 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073889147 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070442013 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.079941812 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074166149 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070874064 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074318912 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074458122 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.079995163 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.077141216 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076171189 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.077542801 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074183903 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079961767 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07410515 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073940248 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07974166 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.082416138 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08003569 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.080462875 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074033242 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.079728681 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.079642895 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.082132056 seconds)
  done (took 6.269185112 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077880874 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.070190554 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082937357 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063083755 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062920348 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073165424 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063227864 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063271406 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070482102 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070722786 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.07225829 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072996966 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075243592 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072108691 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07260693 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074958383 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073011118 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072904711 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070637937 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073002893 seconds)
  done (took 2.942098761 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.078854787 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.08249849 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069399789 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073043348 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068740042 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073207513 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068062357 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069000661 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06968985 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069247971 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073923134 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073976421 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069520399 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073206178 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074047065 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073188085 seconds)
  done (took 2.659006367 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067636407 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071615551 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070272633 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064882213 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066470162 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063705796 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064695835 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062807704 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06595906 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.080443074 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064228819 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067277358 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064675289 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063532305 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063881772 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066966537 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066007833 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064074484 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064859336 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068790402 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072883403 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065409571 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067422426 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064239305 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066703276 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.073683578 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066096021 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066960597 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064160467 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067514796 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06657004 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071134841 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066848979 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065203109 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063260945 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064702662 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064939009 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06739332 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067284332 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064623115 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063030562 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.070376083 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06516121 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065095945 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.066121859 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067205714 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065780624 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070184435 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064414946 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067471201 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064870402 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066292461 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064740661 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071798908 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066915365 seconds)
  done (took 5.16960862 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.081178402 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068822483 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062687206 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062869912 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06885268 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069050057 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068748488 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068458592 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070247368 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063036308 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069103859 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068042614 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069205612 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068628427 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069451441 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068917987 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063226704 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068761173 seconds)
  done (took 2.750738734 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.070041722 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069374313 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.068276784 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065183335 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065405491 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070352239 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063358534 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.065021606 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06491859 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065474911 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064958652 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064660384 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064622156 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064642368 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069758854 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065355579 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064723977 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063356468 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065231788 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063026712 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070032704 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063561214 seconds)
  done (took 2.960114817 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.091215368 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086867738 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.131428674 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.0824362 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091918834 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074108323 seconds)
  done (took 2.072604122 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096977557 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.10090587 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.0684 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068075386 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073287902 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071341966 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071814509 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071619156 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075654437 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075649942 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071916321 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075589698 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075258362 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077405687 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073540801 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073816885 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071854444 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071920034 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068671069 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080120935 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072344482 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075883686 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071926498 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071546088 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071735422 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077480757 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075379072 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075902738 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072058723 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075665286 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07379701 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072096237 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07572272 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076042852 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068669375 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075592031 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07189913 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080012571 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073787034 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07718949 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068305784 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073578152 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075376491 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075207251 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075465547 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072363202 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075462968 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072013538 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072358555 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081191405 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0739269 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077791623 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073665957 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076053283 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075766975 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081350668 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075801372 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077571103 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074077131 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076140299 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077582096 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074384111 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077779803 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076354689 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073873659 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07763803 seconds)
  done (took 6.482354741 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108948431 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069209207 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071659936 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075700856 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077416224 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072070046 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072074662 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071717463 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072172704 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06919043 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108480269 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072332512 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077789194 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081015282 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072152783 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072170099 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07213491 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077933223 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069421187 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081114127 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07211031 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077732467 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077522577 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077408219 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076186103 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073553387 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071980738 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071963196 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071835666 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07201596 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075160386 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071967901 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077053121 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069386785 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077656747 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072053728 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071882851 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075070918 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071967791 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073673666 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077830211 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079878394 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071929615 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072008639 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075958808 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072051754 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071819834 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069014045 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071949539 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069181847 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076297473 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076066694 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075803831 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077957787 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072596309 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072148891 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072281252 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071937726 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072394041 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073936596 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077887774 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072146377 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081773372 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072091326 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072075301 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077740486 seconds)
  done (took 6.492117282 seconds)
done (took 133.77792742 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.222172983 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190404746 seconds)
  done (took 1.912033536 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077992997 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.169679408 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075204351 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.077055165 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.11162903 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108190791 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076326238 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07445069 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077625341 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.075069667 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.143094019 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076615126 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07510882 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.074764741 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074877014 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07498384 seconds)
  done (took 2.966539231 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.11149823 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.189364137 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08486983 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072736043 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.155569882 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080108774 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075129582 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.080103955 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.080068017 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.073199027 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110086544 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.086562811 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07866556 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.079873755 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074825075 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.078568469 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079367173 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079879845 seconds)
  done (took 3.203022716 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.107398223 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.096142656 seconds)
  done (took 1.736645177 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.16260443 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105922864 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144879322 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.347329392 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.142438228 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.143184761 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145880535 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.142857767 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.117000319 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.135143913 seconds)
  done (took 3.109112801 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.11024319 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108557384 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.312600313 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106155475 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085637978 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080695208 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078291135 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082792018 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078282373 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079147069 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125860543 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.078530061 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074930104 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127858976 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102933456 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.1097828 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073869955 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081166732 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082424953 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.0735976 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07946577 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.083017353 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182914354 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081757903 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104424621 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.078336192 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080407752 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077404908 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.078197726 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.0817844 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082454604 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.103777483 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081597541 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085817497 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080394674 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.101338527 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074664662 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.103102515 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077814696 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075643368 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.078370111 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082347864 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.075087291 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081815862 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078281387 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080555837 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083406347 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073884467 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.078252725 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077284836 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075160092 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079577534 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079392698 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080308117 seconds)
  done (took 6.494199912 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111958401 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109502277 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073432293 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116930902 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108531849 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073529869 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108532142 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103898419 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112719665 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07295761 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072074382 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072589529 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080054239 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083520261 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116907376 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108290607 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072491131 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072415253 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110906041 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.110652735 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072146633 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105553496 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103235089 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110674146 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.07036253 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072898424 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071595043 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072062699 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077624719 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078545887 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072037691 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079419046 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.089206009 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078389406 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071101043 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071657378 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071584349 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07947913 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079873031 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079793975 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.078046205 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07102742 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071245851 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071904127 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072405724 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071072445 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077961258 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079325738 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077951439 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071728744 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072010413 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071179638 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072028839 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078995469 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077897532 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080203862 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079842329 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071780579 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071774765 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073455069 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080582212 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080507595 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079756244 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072983604 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.08079327 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071685882 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082462527 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084969288 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.072185008 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072455082 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072365669 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07171116 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072650746 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077963962 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077972443 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07223768 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071633035 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071717363 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080461626 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078090568 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071792163 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077301323 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071422628 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071691358 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072053589 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072232565 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07746022 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079079414 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072473341 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071770629 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071850757 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071764059 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070751734 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077561859 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07880482 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078742261 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.077784998 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071699331 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077854544 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078042674 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071897019 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077052385 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071588845 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071340401 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071504999 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07708694 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076112716 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078889354 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071226454 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070764776 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.077034841 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07952973 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.212001367 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.079002165 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.082192775 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.08004174 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.072098119 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082380074 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07292952 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081372007 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070253969 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080741302 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072528281 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07848486 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07224338 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.071288401 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071625261 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078262231 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072056112 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071891072 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072217547 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071825907 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078587148 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.082126224 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072701676 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078841174 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078373146 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072349088 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078395923 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071700486 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079202198 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072010961 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072082206 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071042263 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08146714 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072161246 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.072137392 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071629538 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080860099 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07209341 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080996861 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077805326 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071049044 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.084849608 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078280049 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.078053358 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.081169482 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073059937 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072546507 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071685805 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.074860753 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077951859 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079063756 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072669422 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072008309 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077776494 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081790141 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071480335 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077974986 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077775066 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078180969 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072218686 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.072129809 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081740497 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080426579 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078696028 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.078307714 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079460834 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.072207618 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077619297 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077966765 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071602032 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086065266 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072109175 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.08203732 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078908605 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07760317 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079227625 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.080108326 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.081079215 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080971066 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.082788151 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071783431 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071724931 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078249537 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071957266 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071798615 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.310213067 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071195324 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.0727045 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084043686 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070048802 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079645184 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.071937749 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07937679 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07151549 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071897122 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083353663 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072442717 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072147687 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077882867 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071741463 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077599106 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080975488 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.077793838 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071218882 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071629151 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077746398 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.078143869 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070724098 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070440947 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071047014 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.076164795 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075945326 seconds)
  done (took 19.34688715 seconds)
done (took 40.322397903 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.175764197 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120505704 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.217234652 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.205480704 seconds)
  done (took 2.356004088 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.105553266 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.068271212 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.08472342 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.093987709 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.068659473 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079933921 seconds)
  done (took 2.080527904 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.208105188 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.180981189 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251671216 seconds)
  done (took 2.212503874 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.376596983 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.156409448 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.22140126 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508135108 seconds)
  done (took 2.947385471 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113809725 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104643111 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081576301 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.115959714 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.089665345 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.065681559 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.139010729 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.073291546 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.10469542 seconds)
  done (took 2.530507698 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.144110636 seconds)
done (took 13.883577965 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.244978054 seconds)
    (2/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.224549741 seconds)
    (3/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.212930426 seconds)
    (4/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.258408708 seconds)
    (5/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.113346888 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.095262083 seconds)
    (7/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.226968293 seconds)
    (8/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.078535109 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.168680463 seconds)
    (10/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.078900116 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.191050955 seconds)
    (12/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.226930062 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.095424119 seconds)
    (14/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.194474048 seconds)
    (15/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.071700204 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.096210778 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.095532537 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.079875425 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.081331773 seconds)
    (20/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.068875267 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081426154 seconds)
    (22/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.2236777 seconds)
    (23/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.18161251 seconds)
    (24/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.099471427 seconds)
    (25/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.082101417 seconds)
    (26/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.111215854 seconds)
    (27/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.105684027 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.095023926 seconds)
    (29/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076314497 seconds)
    (30/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.192698839 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068895097 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.077796204 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.127655459 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.180537116 seconds)
    (35/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.167710022 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.139534048 seconds)
    (37/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.196464247 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076853572 seconds)
    (39/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.079312165 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076064366 seconds)
    (41/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.253429198 seconds)
    (42/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068992444 seconds)
    (43/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073681902 seconds)
    (44/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.078802781 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.137440686 seconds)
    (46/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068629259 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.130810331 seconds)
    (48/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09969726 seconds)
    (49/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076429138 seconds)
    (50/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.06923696 seconds)
    (51/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.171233003 seconds)
    (52/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.078721729 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.089836217 seconds)
    (54/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.182421389 seconds)
    (55/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.075963166 seconds)
    (56/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.080004501 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.088266948 seconds)
    (58/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.240771196 seconds)
    (59/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077774015 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.090481294 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078779603 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.214262995 seconds)
    (63/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.200482627 seconds)
    (64/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.069250567 seconds)
    (65/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.071013905 seconds)
    (66/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070878101 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.092404482 seconds)
    (68/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07709225 seconds)
    (69/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.075617714 seconds)
    (70/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.167674202 seconds)
    (71/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.090529243 seconds)
    (72/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.067693879 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.199809872 seconds)
    (74/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079722774 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.068087999 seconds)
    (76/341) benchmarking ("sort", BigInt, false)...
    done (took 0.263943816 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070543728 seconds)
    (78/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073193095 seconds)
    (79/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.145669119 seconds)
    (80/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067842004 seconds)
    (81/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075774165 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078244638 seconds)
    (83/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075826469 seconds)
    (84/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.341350675 seconds)
    (85/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.092267854 seconds)
    (86/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.091695563 seconds)
    (87/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.14911259 seconds)
    (88/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.173627424 seconds)
    (89/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.079143037 seconds)
    (90/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.070984754 seconds)
    (91/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.098617453 seconds)
    (92/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.073824646 seconds)
    (93/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.072364053 seconds)
    (94/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.206313005 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.123305226 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.069191741 seconds)
    (97/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.248536508 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.139308208 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.092169107 seconds)
    (100/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072416679 seconds)
    (101/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.08105707 seconds)
    (102/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076168585 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.175633034 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.187156676 seconds)
    (105/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.069558392 seconds)
    (106/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.068075696 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.069013226 seconds)
    (108/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069509175 seconds)
    (109/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.098107019 seconds)
    (110/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.078173892 seconds)
    (111/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069851048 seconds)
    (112/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.078928623 seconds)
    (113/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.076690425 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068971832 seconds)
    (115/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084758383 seconds)
    (116/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069945025 seconds)
    (117/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08730282 seconds)
    (118/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.154396012 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.198883872 seconds)
    (120/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.2031911 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095625075 seconds)
    (122/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082142831 seconds)
    (123/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.077138594 seconds)
    (124/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.127731636 seconds)
    (125/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077245005 seconds)
    (126/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.19516765 seconds)
    (127/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.076451699 seconds)
    (128/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.070878401 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.070235312 seconds)
    (130/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.1466166 seconds)
    (131/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.069709329 seconds)
    (132/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.086603058 seconds)
    (133/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069230921 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.079507151 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073192797 seconds)
    (136/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.185713806 seconds)
    (137/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.079919279 seconds)
    (138/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.06952356 seconds)
    (139/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.087972055 seconds)
    (140/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.146909457 seconds)
    (141/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.147559959 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078242255 seconds)
    (143/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.077081471 seconds)
    (144/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.087895744 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068924346 seconds)
    (146/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.069193331 seconds)
    (147/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.205505473 seconds)
    (148/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.081083338 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098352221 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077405236 seconds)
    (151/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078886579 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088851244 seconds)
    (153/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.168617158 seconds)
    (154/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.205482744 seconds)
    (155/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.07094319 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.152617681 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078979642 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.151816817 seconds)
    (159/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.157126877 seconds)
    (160/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.069294902 seconds)
    (161/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.073600852 seconds)
    (162/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072050608 seconds)
    (163/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073821259 seconds)
    (164/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067811618 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068579056 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075802109 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.078092805 seconds)
    (168/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076319438 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 0.069973424 seconds)
    (170/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.069247553 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.08951197 seconds)
    (172/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076043133 seconds)
    (173/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.156161332 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090262264 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.159802607 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088575317 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068200697 seconds)
    (178/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.248145117 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.147977071 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120459646 seconds)
    (181/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.068836428 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.146224002 seconds)
    (183/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077343717 seconds)
    (184/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075104869 seconds)
    (185/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.085309271 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066967883 seconds)
    (187/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.075492651 seconds)
    (188/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069000286 seconds)
    (189/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.144613635 seconds)
    (190/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.072198146 seconds)
    (191/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.258043057 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.097205162 seconds)
    (193/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.072051492 seconds)
    (194/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.071493213 seconds)
    (195/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.099079679 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155667631 seconds)
    (197/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.07839074 seconds)
    (198/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.07097805 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.096377744 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.132086766 seconds)
    (201/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.235965204 seconds)
    (202/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.069649595 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156220057 seconds)
    (204/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.079709386 seconds)
    (205/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.073211731 seconds)
    (206/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.086025443 seconds)
    (207/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.068514908 seconds)
    (208/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.070232809 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068936839 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067545921 seconds)
    (211/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.069040341 seconds)
    (212/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142672449 seconds)
    (213/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.207070373 seconds)
    (214/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.20960843 seconds)
    (215/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.070054689 seconds)
    (216/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069531859 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077179421 seconds)
    (218/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06748475 seconds)
    (219/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.178180278 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076886472 seconds)
    (221/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.069107286 seconds)
    (222/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.176873571 seconds)
    (223/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.197531067 seconds)
    (224/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.163959979 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071879702 seconds)
    (226/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.070029668 seconds)
    (227/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.069493669 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.135175227 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.095578679 seconds)
    (230/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.070416311 seconds)
    (231/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069801512 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.098614272 seconds)
    (233/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.073564527 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.156367318 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.070154284 seconds)
    (236/341) benchmarking ("sort", Int8, false)...
    done (took 0.155267387 seconds)
    (237/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.153189546 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.081567494 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.080141609 seconds)
    (240/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069750368 seconds)
    (241/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155068876 seconds)
    (242/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.07720131 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119777857 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.068788218 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089027456 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076472077 seconds)
    (247/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.070069588 seconds)
    (248/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081139907 seconds)
    (249/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.204504529 seconds)
    (250/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069242313 seconds)
    (251/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06979422 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076242896 seconds)
    (253/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081611592 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.073789587 seconds)
    (255/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.068395775 seconds)
    (256/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.070315976 seconds)
    (257/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.225222667 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.069188072 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067572682 seconds)
    (260/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.168291793 seconds)
    (261/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.069707378 seconds)
    (262/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.085609857 seconds)
    (263/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.147001925 seconds)
    (264/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070815478 seconds)
    (265/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077128481 seconds)
    (266/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069652232 seconds)
    (267/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069405374 seconds)
    (268/341) benchmarking ("sort", Float32, false)...
    done (took 0.141601075 seconds)
    (269/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.070184453 seconds)
    (270/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.070383505 seconds)
    (271/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.069127548 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068742349 seconds)
    (273/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071767592 seconds)
    (274/341) benchmarking ("sort", Float64, false)...
    done (took 0.141596369 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.067706387 seconds)
    (276/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.073676465 seconds)
    (277/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175209228 seconds)
    (278/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.070010275 seconds)
    (279/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068908837 seconds)
    (280/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.070302079 seconds)
    (281/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.069815364 seconds)
    (282/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.069296716 seconds)
    (283/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073604486 seconds)
    (284/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.071605481 seconds)
    (285/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.069346741 seconds)
    (286/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.080489778 seconds)
    (287/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.093869477 seconds)
    (288/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069270068 seconds)
    (289/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.06950065 seconds)
    (290/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.077240319 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.15340077 seconds)
    (292/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.069091742 seconds)
    (293/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073501851 seconds)
    (294/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.073423934 seconds)
    (295/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080371368 seconds)
    (296/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.069906357 seconds)
    (297/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079843836 seconds)
    (298/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068064211 seconds)
    (299/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077176703 seconds)
    (300/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067060623 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154444673 seconds)
    (302/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069122804 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125402743 seconds)
    (304/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069256831 seconds)
    (305/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.239460135 seconds)
    (306/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.147730711 seconds)
    (307/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.068233986 seconds)
    (308/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.067674097 seconds)
    (309/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070563086 seconds)
    (310/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.338418996 seconds)
    (311/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.073551769 seconds)
    (312/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.06993951 seconds)
    (313/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.073969477 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.094082387 seconds)
    (315/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070706384 seconds)
    (316/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.072269297 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.151754306 seconds)
    (318/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.070649039 seconds)
    (319/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.070382299 seconds)
    (320/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.069487775 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081780344 seconds)
    (322/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.07128628 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.184913904 seconds)
    (324/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083612574 seconds)
    (325/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.072289053 seconds)
    (326/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071307891 seconds)
    (327/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.072282992 seconds)
    (328/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070988355 seconds)
    (329/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.071563671 seconds)
    (330/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.081342351 seconds)
    (331/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.070240232 seconds)
    (332/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.069547449 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069668066 seconds)
    (334/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.136704821 seconds)
    (335/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.069703286 seconds)
    (336/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069570264 seconds)
    (337/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069732234 seconds)
    (338/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.069834317 seconds)
    (339/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.069985579 seconds)
    (340/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.076223444 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.089161107 seconds)
  done (took 38.211366331 seconds)
done (took 39.815150341 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.097267727 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.083928802 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081830734 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078561831 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.082037089 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.08028008 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081563682 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079355927 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080785455 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080225158 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.081033432 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068878552 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.077592766 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084438415 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.078007392 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.085051618 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.08184941 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.085242093 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069756745 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.083949073 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.09717938 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081331426 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077755529 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083331325 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069550914 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078756337 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.094061617 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.091106512 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076122532 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078810563 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076816861 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.088024507 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077518716 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.076157387 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079145753 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075439623 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078949711 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076416886 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093083384 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075125608 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069127164 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081312333 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076534095 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077058217 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077932644 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080973022 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074550007 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082549667 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068851863 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.080005884 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092721912 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074247091 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.076008436 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077458385 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074033897 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078668103 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.076423258 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080923146 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073897655 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080380691 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080735908 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077763016 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068940286 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077677939 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07631318 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076447712 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067625362 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073908643 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068674539 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068695482 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.068285962 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077609502 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075887561 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073829831 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068382883 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068949459 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06831124 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.081090645 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075045732 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078559017 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06908121 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074573296 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073858264 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.069281322 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074638392 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080683555 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.068036096 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068987395 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068086061 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.0830834 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07531005 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068838256 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080583557 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074157681 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073986112 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.069263627 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068131923 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074001685 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076978742 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068905946 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.068229929 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074254454 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073873025 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077461752 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069162593 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074310009 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074311378 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.068003917 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07787856 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076425724 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077718939 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.08227874 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078209395 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.0810416 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.069460506 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067854351 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078751428 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069369013 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074585605 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07693226 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074191623 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077606327 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.069477673 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068227148 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074475419 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075625364 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068989381 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.069113217 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069011351 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078418744 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075926956 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067655892 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068522976 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077134775 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077601156 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067521525 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067411976 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.077017218 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068560202 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073556918 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073970521 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076631895 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067584633 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068116605 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.218179151 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.069692844 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.069151373 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075623085 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.078797526 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069997156 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077792119 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075630265 seconds)
done (took 13.410843579 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070864361 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.112824078 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.084339097 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.086659896 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082715077 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070539477 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.074169959 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.089476139 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073452498 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.094832095 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.096031304 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.092277862 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.101783186 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.069011042 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.070383492 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.071000125 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068716079 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.082163373 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.08715134 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093268421 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106773926 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069865613 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.086165601 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.089714194 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.084396347 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.088199198 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070893489 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.111964048 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.072670617 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.089216065 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.096008406 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069425323 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070633403 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08828154 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.085627977 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.078738619 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.07104583 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.076917115 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073510838 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069772377 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071440941 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.088364064 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.076712716 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.076826501 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.071192783 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.071141761 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.070674262 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07788648 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.088037959 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.075992645 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.082028528 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.089128806 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071862402 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.070193049 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068122471 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.077045288 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069475883 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070647088 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.070049469 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069775315 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.07056196 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072229273 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.075297133 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.076243458 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073787141 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.077121465 seconds)
  done (took 6.929017273 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086802363 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095914955 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084837633 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085398635 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.069670242 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.070171448 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070172123 seconds)
  done (took 2.276309046 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070939704 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078588808 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082740662 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082566319 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.092288173 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.080376272 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070503595 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102596821 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069383353 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078983293 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086476896 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083766465 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073757203 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082818435 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070670353 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082372962 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070845502 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077743578 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077696312 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083908081 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074258065 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100739885 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083886111 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070625078 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.084254126 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.078238891 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072647807 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070756842 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070659029 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069942797 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06988908 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092751507 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076938824 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.083090991 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070485879 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.069221428 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074798575 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070923789 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.07436469 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.079068846 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.0740919 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069927903 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070814264 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070105372 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.071535151 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074789418 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.071083223 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069605723 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069606064 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077485038 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068973859 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076666031 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072559262 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075188786 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074435514 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074694478 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077775274 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.070392632 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07780411 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076528859 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06990294 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082580475 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.082447555 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073880337 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.082203403 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07852551 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076617081 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074119454 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069792315 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.069308053 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070326572 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081979219 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073278844 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.07244227 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070750475 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07498178 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.074276974 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085772072 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085462478 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.08400577 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072421062 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070448076 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.074012922 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085692307 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075087099 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069905544 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070988841 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069238627 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07519847 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070375919 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074824316 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.070116194 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076875433 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072900594 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072804765 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078361781 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.070281141 seconds)
  done (took 9.083252031 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.073333191 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072664038 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.071207506 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070963971 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071890277 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07186369 seconds)
  done (took 2.178590578 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094707142 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070881901 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08252642 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070735805 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093321436 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077444435 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077528482 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07290835 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087243703 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081472834 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077762762 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.080227165 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.080346495 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072706252 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.077342422 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071638078 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.077235286 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07355648 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080634251 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073483794 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.087449106 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072307825 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072691778 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.083355063 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073779156 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071452062 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071789063 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080846737 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080332665 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072179838 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072186551 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073793668 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079240211 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072160297 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07788639 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07944003 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070719502 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.076140418 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.073494497 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073704263 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079481616 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072551447 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.073076519 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.076207974 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.072397923 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.079762097 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.076501567 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074102676 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.077058579 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.076309126 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.076321567 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.071241119 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073465118 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075928923 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079518272 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072612481 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.076454001 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.077126803 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072366634 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079526033 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070668235 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073808795 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072405278 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073427739 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075426952 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.076084654 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078993081 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072197162 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072575245 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070334282 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07581434 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070401659 seconds)
  done (took 7.189057055 seconds)
done (took 29.359562794 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.554106972 seconds)
  done (took 2.235276519 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.618466943 seconds)
  done (took 2.34711426 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.698384383 seconds)
  done (took 10.428634304 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.359108318 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.419639952 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.746345369 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133982721 seconds)
  done (took 3.42762355 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.763007827 seconds)
  done (took 2.505617322 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.240718841 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.228633719 seconds)
  done (took 2.220228986 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.342822224 seconds)
  done (took 2.080042424 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.164862064 seconds)
  done (took 2.897127908 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.243772032 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.168917745 seconds)
  done (took 2.159035686 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.553892163 seconds)
  done (took 2.294710176 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.341785165 seconds)
  done (took 6.083161428 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.24160741 seconds)
  done (took 2.025797997 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.236400039 seconds)
  done (took 1.977231112 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.100716832 seconds)
  done (took 3.824368933 seconds)
done (took 48.252198051 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088522731 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.091542163 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.091111251 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.086789969 seconds)
  done (took 2.052175699 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.079210764 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.074512069 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.078048741 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.078344486 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075773285 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.077030451 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.077203906 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073895943 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075941067 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.074343414 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072876227 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074148006 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.077069604 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074237942 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076663404 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.078119305 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.074523453 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.074186135 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076911493 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.074036746 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07712197 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.074430343 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072244975 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.074139998 seconds)
  done (took 3.550474188 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08298058 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.076049467 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079833672 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.075130607 seconds)
  done (took 2.064473977 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.08122656 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.080858034 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.090201622 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094961191 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080202456 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.081250544 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088373424 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088724675 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.070005104 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.092075553 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.072535041 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.071148813 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070972217 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090157498 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087565871 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066610162 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.068094017 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.081441819 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.08014286 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083230527 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072527245 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.069723608 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080144532 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.081206356 seconds)
  done (took 3.670624299 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.086950458 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.069189394 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.087194989 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.096233739 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096464134 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069179228 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083814833 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.097499942 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.133170804 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069157555 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075671036 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.070104955 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109169668 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069523899 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084979913 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.113014397 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.117244312 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.074012001 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.103516784 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.07003992 seconds)
  done (took 3.532005203 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.080817627 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.073352898 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.074627601 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.069649901 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.08084666 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07738004 seconds)
  done (took 2.215176383 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.072844126 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.072044342 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.07380663 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.076236041 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071844142 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071795104 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070822804 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069826904 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.070104711 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.071044923 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.071342702 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.071450747 seconds)
  done (took 2.612844109 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.162202245 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.073659836 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.073705061 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06877611 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071794115 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.071042179 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085751318 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072779513 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089627109 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070846 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070853049 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.073355837 seconds)
  done (took 2.741168708 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110749981 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11697863 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151919311 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122740019 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122423508 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101295846 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.131470725 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.100029099 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165802821 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.143069971 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122513381 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098570018 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091606572 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073881085 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104867573 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124036795 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143763046 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077506202 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119051767 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.172418194 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138801024 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.140702622 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.155277078 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122454638 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09527487 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153969889 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102622024 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108168235 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129825435 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132439308 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123623223 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102991157 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075809036 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074894472 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15436873 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.109158187 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126377727 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.098201375 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110768959 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093037959 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112995476 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.074146502 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.091826294 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.118819775 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089717297 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138392814 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.092806467 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120888801 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085523637 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.142430036 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125242948 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10175604 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088633038 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10638645 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.300725164 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11884694 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140775441 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11349688 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088326197 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.124844037 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.108495708 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106012909 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113440127 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085036076 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.182586092 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093896115 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11748741 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117393636 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.099781396 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100012061 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11258074 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.141840252 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13081575 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.13157388 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144625365 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100621283 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127613527 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.104889622 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.134596889 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110550904 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077240319 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12628458 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134403189 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104441593 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106756291 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136311891 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096365926 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081996918 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.104678188 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.12381225 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084851794 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.118677419 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085929041 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.114433662 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140104645 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102472251 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117274758 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122421468 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082475026 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161943896 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113181922 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076580723 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121309042 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116991758 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15811402 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.261326426 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.08132023 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106569721 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109713675 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.153869737 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113678599 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084623751 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116023297 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145793606 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100095917 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.174003871 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100981926 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146469551 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117806578 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091990373 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079541915 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.094710847 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118197745 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113053014 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118152608 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09546066 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.089093523 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091742908 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117785285 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096788331 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085829668 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119458849 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106371935 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079844309 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093571103 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.084249074 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148479934 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.082475038 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14471487 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130637321 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.083048492 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111505414 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103296623 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113635182 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.102257229 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1223914 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145170793 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.121661695 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095439423 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.099550072 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113715178 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149504049 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132848745 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097822528 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.081201666 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105807957 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117594265 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102731441 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.13257412 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105297471 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114401982 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108520687 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145206407 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146919872 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103611436 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.270920677 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113441103 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.128770969 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081792595 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160481611 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10984802 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123417565 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089570489 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145917303 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119234379 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094346135 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091880533 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105795213 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.108728527 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110642892 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148214394 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.100361687 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076226446 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097132313 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149744389 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080478291 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115265286 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.095238937 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097611401 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123279858 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.098549027 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08606424 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.072470609 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135431896 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.165776518 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.074895859 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120478355 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.117834436 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108795476 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.128032234 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.074317539 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124886116 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144167583 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123077925 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147492096 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153308202 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122332657 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124579578 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.11991009 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11077526 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084278942 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130806718 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.140032174 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101285007 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09715566 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139563682 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121981292 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.138665157 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.283943427 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120592462 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.110517821 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113120975 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108293788 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.10795656 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150360023 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126045201 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.129709491 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090144952 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11122704 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122840829 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141200206 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08649653 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148401928 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.088774798 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123313304 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081922668 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128849933 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.084015747 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.116501861 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083983883 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105434077 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.074292886 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078279332 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146765628 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117963568 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113361629 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105880741 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.143823636 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.142891267 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08605096 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113346228 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121335137 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10695501 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122114981 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114628697 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.093572576 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099434788 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113911021 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090098077 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086440997 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.120047438 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099507873 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132363606 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088986027 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079271295 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147769535 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110584524 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101127226 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082617747 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114322368 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12605941 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098312418 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092065584 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120945368 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108390736 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145197803 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09461175 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101663939 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.293878372 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084568397 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09761242 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.074471029 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.090481679 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.080624059 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.132876067 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081029925 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121764698 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072674913 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136010638 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091436787 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097135575 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106965162 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117270835 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133146175 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099781032 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146509804 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094267541 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123293635 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112700086 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09914639 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093238081 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108798432 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106205555 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128310724 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100936449 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129631176 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151093362 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11118607 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.148269679 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096880918 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127708151 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112016453 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.129746941 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117724757 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15301131 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14136484 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117137952 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116679866 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079284529 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099545131 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110353292 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116341235 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.18248987 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132974717 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.076838253 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112379557 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099330171 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113598585 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110608468 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087720706 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151076607 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105344821 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091608622 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114990925 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.259476417 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110783351 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081421987 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101024772 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10587843 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099200095 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103757587 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120830157 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13310662 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118349725 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.148411933 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103180805 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.097240127 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.123321616 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115823438 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115887118 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090970107 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091253307 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143697876 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124547417 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.133673827 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104937335 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115518248 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117048293 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105868475 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132145902 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113345649 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.133475941 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085184355 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080587282 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072403552 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076804782 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129301233 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11415697 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117765318 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103574508 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076573694 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108751277 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111732865 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076199323 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09348716 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099197481 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104286134 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.096333181 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112288649 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.119006031 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.096151064 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109357023 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104431462 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153481719 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.105885608 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094339083 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149225735 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15712019 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093333346 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097369036 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075470615 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083481866 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11742894 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151752586 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.320901623 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.083186808 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091813566 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.090845183 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091126367 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.076212775 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.091313644 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094611918 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10970016 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103879121 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116968403 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110188458 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079879069 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107300145 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104278894 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097077209 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109440001 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123672984 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132560452 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.147278588 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113598635 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111732114 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081153917 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084887632 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080366143 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084092282 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107423431 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.083839029 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080986339 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.150276334 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.097556342 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110687255 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115055587 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094189991 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080416768 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140652588 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.074201376 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14130662 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.076092241 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08728333 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.087350091 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083747077 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099091665 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144569579 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115493122 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118631211 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111178402 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110128176 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146573333 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162280301 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085507042 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149891869 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080852755 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080197047 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080673651 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11851866 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095321966 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120767699 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146257454 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094955207 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106730295 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080420154 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.313782053 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.102532232 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110578131 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092639738 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08423194 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148858362 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084683933 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.085754052 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095525903 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115873519 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076803762 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10915198 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089787059 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084479447 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148610798 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.634743926 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095412861 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080441275 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100767088 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147322351 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133355045 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100523118 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113652607 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123812979 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105186415 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100562982 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113980172 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188390734 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078634118 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099904802 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.109384415 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103645675 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107861825 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.104411446 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.092767547 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.097385296 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.091669565 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084587294 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113215707 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094078497 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102473475 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112528397 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087660166 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.092101623 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135504356 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108501134 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08677918 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093724396 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.110877119 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094119794 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105879125 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.073897755 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118970914 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096084785 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123506659 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.100453112 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113114507 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132746341 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094976705 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144719355 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.111773562 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.293301166 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092656573 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.083831809 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132308926 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.093337685 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082558222 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150379472 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.099769625 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.098870142 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109426133 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.101210273 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118509701 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122652756 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117373676 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102727001 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083678108 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105891769 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.107899575 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090737074 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0827044 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.079402143 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.08078026 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112907537 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090820504 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088426821 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120437766 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094228134 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109076291 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.106327223 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12858833 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088427462 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106723104 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115585864 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097975315 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115417145 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106126509 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134777661 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.182608156 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131251265 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135141855 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139674022 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081764921 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.080558674 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072745342 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1207715 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084064742 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.093999059 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085616362 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140154521 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.086500543 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116704028 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.235749741 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085438256 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099372661 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102332963 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.074435583 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088548564 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113633077 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092473432 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084963377 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122463664 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087047567 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129819586 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.280559134 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105996882 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100701997 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086002869 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119242339 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.110246703 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133562362 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100066869 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.079633345 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11871075 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108488558 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142660485 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075826743 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085529059 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134910214 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109353438 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13839232 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084542149 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155702477 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148570925 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105483915 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139896882 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075538287 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08853304 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093855271 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.13169793 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090381867 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11812952 seconds)
  done (took 71.216397184 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.159573446 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14298054 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082753553 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106381704 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188831663 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19934507 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121418692 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098173824 seconds)
  done (took 3.017773986 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.072541723 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08785508 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.085008003 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.215165893 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113284055 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068946616 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07791606 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08652792 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072149526 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071097721 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10690437 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.070760932 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.072431995 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.3792987 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068991983 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076251658 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.072390729 seconds)
  done (took 3.695241911 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.344279741 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.420125658 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.249296742 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.633841992 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140154798 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.487569266 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078543679 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.087213646 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.572290089 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.37007334 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133085756 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.093789132 seconds)
  done (took 18.521364732 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.081124644 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.083500547 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.083262828 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.079246889 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.079025738 seconds)
  done (took 2.295337704 seconds)
done (took 122.953054862 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.094055017 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.179493177 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072399258 seconds)
  done (took 2.181344263 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08730007 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.085521744 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.085224698 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082901429 seconds)
  done (took 2.24259131 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079620506 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.08078007 seconds)
  done (took 2.053731914 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.230014446 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.182881572 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094191142 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086821164 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.084613985 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.08463416 seconds)
  done (took 2.167905773 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.077130757 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.076015071 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.076250035 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076597097 seconds)
  done (took 2.205760245 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072461387 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070435285 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072855755 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075061158 seconds)
  done (took 2.189129517 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090535202 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.091830751 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.12262623 seconds)
  done (took 2.201534772 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.088087999 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.087749781 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082880964 seconds)
  done (took 2.162650602 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.115564101 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101594162 seconds)
  done (took 2.11639616 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085308395 seconds)
  done (took 1.983482521 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096478564 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.103180905 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.145593591 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.112808916 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145245586 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.132673529 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.081992019 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.083083669 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077756793 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.077023593 seconds)
  done (took 2.950647022 seconds)
done (took 26.958488699 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084227096 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375709064 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364402301 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092977573 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.679680023 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.361318105 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.005594452 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096569538 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.106081889 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073171977 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090685199 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.654680151 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.99904318 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330498404 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.980801065 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329989809 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656606015 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073523812 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072761289 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073731678 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.989901298 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072785423 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073137843 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073600011 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.654620321 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.379192886 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074160509 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.334143182 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072939216 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.077227412 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.362613121 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074480052 seconds)
  done (took 16.598747563 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075750513 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129168186 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077802194 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089567807 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075887099 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074600152 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.076395408 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.074096346 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118487496 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07382084 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091444825 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072797131 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.077303631 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07376832 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.094061831 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073403071 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.075818556 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077207377 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.0733643 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074218044 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092423482 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072852195 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073707987 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073697079 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073500407 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08682058 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074264184 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073031884 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073858101 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.077698531 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.078129135 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074822023 seconds)
  done (took 4.500589375 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127002215 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132820211 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078329885 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.115398 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.124178266 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07495151 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.157115529 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.097426258 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.121495717 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0737943 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090736184 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073597134 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.110086332 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074783687 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.094800579 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073841888 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.076542111 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074169122 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073435122 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074367693 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092867662 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073275846 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.074059409 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07376349 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073965454 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088759707 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074412444 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073115661 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073115719 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.077554916 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.078493343 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074680713 seconds)
  done (took 4.777142863 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074703466 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.076169295 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082686201 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.086050001 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071400349 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073247557 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074395841 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.071432015 seconds)
  done (took 2.539517722 seconds)
done (took 30.335405012 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.084061997 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.072469079 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075607722 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091883502 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078295716 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.075055129 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.069102032 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078924621 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075485511 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075766636 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077618002 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.071362365 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.074744426 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.069290093 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.076846433 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.0704916 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.077007577 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074760929 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074864402 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07662392 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.072744385 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.076130663 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078821288 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.07504322 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.075067461 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.075062002 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079653042 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076494466 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.071111336 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.072936034 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.073019517 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.086157853 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076822831 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.076807827 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070768521 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.070557075 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074783503 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.07268736 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.077441757 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.080313866 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072999383 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079603383 seconds)
  done (took 5.067910614 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09401497 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.099143409 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.092117444 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.087333132 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.112976234 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086792057 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09551122 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083996413 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.082745901 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.095762474 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078312856 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.084396945 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.085923951 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080563594 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.083003716 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.0795502 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.084160188 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078356965 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083107619 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.083562673 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.096698784 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.076213821 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083276847 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084726596 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078404147 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.085247598 seconds)
  done (took 4.178436006 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07793633 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.093095445 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.097099366 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.147659367 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114520694 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.087315589 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.087145654 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098668028 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.105770827 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.07325795 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076859568 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09916894 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101100232 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.079573126 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111039689 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091119903 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084791498 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.074300275 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.079346252 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.107239641 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.094838489 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.091372886 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.105376994 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092658395 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071747121 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081739075 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.080020026 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.089330623 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.080135199 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.085277219 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.0768788 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075995066 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.07315872 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.085306945 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07999977 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.070573703 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.095068992 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086027964 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08729027 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.112628709 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.082680396 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.074409598 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.102259814 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.138208207 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.072134616 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.075072267 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076380446 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08570797 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.07405449 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102545928 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.09181574 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.072247337 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.0917619 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073376063 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073554502 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089684316 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.074081578 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074609524 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.085101378 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078650732 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093418233 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077615874 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.094785354 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.072337128 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.084245644 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073649894 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073578513 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.071056568 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108707961 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08001579 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.126226691 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073672565 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.070300535 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084932954 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.084343791 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.079343409 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071901841 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.093123841 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084528006 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.076186732 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.084188542 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.075118957 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075892735 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.107672251 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.071378383 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.070767607 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.070000966 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074394436 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075775883 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.072722702 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086341847 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071935015 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075447483 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.088452155 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071899163 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.07272243 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074823428 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073903995 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071561996 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083625953 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.076490812 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.074002779 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084610866 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073306231 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07581136 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.087599281 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.08232964 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071384825 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.07375875 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.075113671 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.074595962 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07696441 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075785689 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.074195829 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.079574097 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079745522 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.078624555 seconds)
  done (took 11.759545054 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.170801063 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.160243892 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073548552 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.15434204 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.081211674 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.077477689 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.155739014 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.093112756 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.072746647 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.074018283 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072197708 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.101753467 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096504696 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.109563196 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077309305 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.073325843 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098557913 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106434854 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.158390499 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.153043706 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096436196 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081361772 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.07544388 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.074225855 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07456306 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081834597 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091404228 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081392768 seconds)
  done (took 4.787681795 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.08109983 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.088880517 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.0770088 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.097160072 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.091761308 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.073456575 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.075142749 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.074194009 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.090039359 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.080458288 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.073079777 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.077429018 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07699204 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073579987 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.073380417 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.079607085 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.079516696 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.071664276 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.0763522 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.078050807 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.084028646 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.099290152 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.077270497 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.073072283 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075757159 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.07268181 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.080337848 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.083045016 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.072324774 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103329212 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069981076 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.077781358 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.087391003 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073890555 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072456491 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.073717946 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.072939083 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072930157 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072889158 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.071096103 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070743134 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.078060394 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.071659218 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078713353 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086591019 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080484743 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074284514 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.078555603 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.075793095 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069978251 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.076017618 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.076206668 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.075581247 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.081170333 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076511128 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.075101104 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.07386086 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.104391687 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.079001612 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.072149221 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071916926 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.071138258 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074904213 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.08102388 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.0895885 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.0745272 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.071256448 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072716993 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077667926 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086968413 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.072179002 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.078270746 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069783335 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072935564 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07553756 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.075770333 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073844925 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070817334 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.072748502 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072829643 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.073024064 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.072224359 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.072013678 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.075281834 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.070942544 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.07114928 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07316684 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.074354387 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.079438451 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071598042 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075514706 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.074181803 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071639803 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.075630745 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.078265365 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075955186 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.093502095 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.082086871 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.073708339 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070887682 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087502514 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.075028406 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.072072687 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.07880251 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07679912 seconds)
  done (took 10.073907108 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.096374674 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074794753 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092882864 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099921796 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083467205 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.078212845 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.087160871 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073661103 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089800138 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.072140512 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.082066349 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.07112119 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.086448006 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.082305165 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.074866513 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.083660618 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07573338 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093750666 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.088397572 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.072153701 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.082264949 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.085472103 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085623608 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.091564815 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.09054029 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.092126051 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.085185581 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.075297487 seconds)
  done (took 4.326676983 seconds)
done (took 42.123599462 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.006649297 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.234637563 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.004494995 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.294815764 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.05282554 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.104427461 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.102718474 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.995681847 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.149805933 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.023276772 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.320411426 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.372731907 seconds)
done (took 69.653658397 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.091838007 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.144227317 seconds)
    (2/2) benchmarking "String"...
    done (took 2.214071055 seconds)
  done (took 6.281348364 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.594223389 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.999258445 seconds)
    (3/3) benchmarking "different"...
    done (took 2.045011747 seconds)
  done (took 8.558440896 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.093656975 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.631990199 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.246915318 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.001106115 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.998470158 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.392594961 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.816913241 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.474551511 seconds)
  done (took 33.48686742 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.318816952 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.249398438 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.747971451 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.776192063 seconds)
  done (took 17.066653404 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.602830733 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.26074898 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.258544193 seconds)
    (4/4) benchmarking "different"...
    done (took 2.258369039 seconds)
  done (took 11.361573407 seconds)
done (took 88.967737754 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.998096828 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.332359863 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.026558824 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.149685398 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.077876484 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.031229115 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.007422187 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.008306604 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.996752314 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.002372735 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.417988351 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.011739335 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.006902335 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.037173259 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.998106602 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.038042488 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.359778051 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.013129727 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.996615608 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.61671109 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.507627351 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.011629823 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.008273477 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.054493894 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.075724851 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.022098013 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.582326778 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.002727409 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.611140572 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.01848844 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.155594179 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.997870535 seconds)
  done (took 212.090992775 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.999986461 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.108114919 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.195904112 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.037484159 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.539109459 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.19287486 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.144303663 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.586936493 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.00293417 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.005017685 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.319323558 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.997705299 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.348390313 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.930997328 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.998482088 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.098492049 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.274388796 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.330489477 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.997423647 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.189334018 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.008300957 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.15588158 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.111331279 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.287472971 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.01625227 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.08968073 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.022589669 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.031287597 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.182140529 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.249446519 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.009206293 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.009270898 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.199531804 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.871180346 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.002812449 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.02064048 seconds)
  done (took 179.489365946 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.174164392 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.011202782 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.065744788 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.132164133 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.749461376 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.71611382 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.999770456 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.001924898 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.001001644 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.009237563 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.002854102 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.070018386 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.259545261 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.009725866 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.997610757 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.003817796 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.277017689 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.001478186 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.004674492 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.003962586 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.07090448 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.371875144 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.13339363 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.00244687 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.01515942 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.140774579 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.010324463 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.003862709 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.139303585 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.005381021 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.081245672 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.135103834 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.01279671 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.086233545 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.005475116 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.485600415 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.999367608 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.004403863 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.003859895 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.069601989 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.998951055 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.098464967 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.090791317 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.000584752 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.01965736 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.076747684 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.684559818 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.001998333 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.003900423 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.004541606 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.004096976 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.005277589 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.317137391 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.003579121 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.031518539 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.596937821 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.001033581 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.0061053 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.007022814 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.004594007 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.994452044 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.011403741 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.042997579 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.810624538 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.331617896 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.389979625 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.801400864 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.001312094 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.564686431 seconds)
    (69/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.058595057 seconds)
    (70/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.006907733 seconds)
    (71/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.086885292 seconds)
    (72/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.002029147 seconds)
    (73/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.00429957 seconds)
    (74/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.007548455 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.007154153 seconds)
    (76/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.10186451 seconds)
    (77/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.089022851 seconds)
    (78/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.003026537 seconds)
    (79/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.142544279 seconds)
    (80/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.006456918 seconds)
    (81/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.00748732 seconds)
    (82/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.018471085 seconds)
    (83/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.338044495 seconds)
    (84/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.003249899 seconds)
    (85/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.020090536 seconds)
    (86/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.059790172 seconds)
    (87/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.008085195 seconds)
    (88/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.006534383 seconds)
    (89/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.00134274 seconds)
    (90/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.097132349 seconds)
    (91/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.00326739 seconds)
    (92/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.007330693 seconds)
    (93/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.006079236 seconds)
    (94/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.095399698 seconds)
    (95/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.002072069 seconds)
    (96/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.009847329 seconds)
    (97/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.057747937 seconds)
    (98/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.225047745 seconds)
    (99/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.072663203 seconds)
    (100/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.245304985 seconds)
    (101/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.221054177 seconds)
    (102/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.006958338 seconds)
    (103/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.00705163 seconds)
    (104/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.009565167 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.021977619 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.009570733 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.008243396 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.017847599 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.0075677 seconds)
    (110/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.007183036 seconds)
    (111/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.008072414 seconds)
    (112/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.004774378 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.009052971 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.006000508 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.006335349 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.008384252 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.020686559 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.004590629 seconds)
  done (took 434.133222661 seconds)
done (took 829.863734426 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.661899078 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.836220874 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.586174889 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.655543168 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.610409246 seconds)
  done (took 15.277506812 seconds)
done (took 17.210171131 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.027538035 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.025565477 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.012440983 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.072177365 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.033761955 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.021183047 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.054701938 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.055499778 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.041379802 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.020880602 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.071997312 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.025883885 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.041239111 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.042959797 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.096921923 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.050105156 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.010006392 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.018379923 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.075428625 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.027356871 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.026132349 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.022854936 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.020252845 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.074730947 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.103653183 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.033511207 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.022236924 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.071410285 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.035438164 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.068588588 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.084228307 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.04558992 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.057006186 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.098457297 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.083946614 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.09626397 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.033945668 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.093824415 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.014679028 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.112050856 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.080635974 seconds)
  done (took 86.03656464 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.021772037 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.155932184 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.227290692 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.05212154 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.020385239 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.235770699 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.075059293 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.146114553 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.151020453 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.234497504 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.237864095 seconds)
  done (took 25.496667461 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.019058727 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.156175068 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.211598839 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.055628651 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.02049982 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.240683761 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.083260131 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.150492519 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.157566264 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.23838389 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.246341174 seconds)
  done (took 25.522412293 seconds)
done (took 138.991947114 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.387427971 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.040414883 seconds)
  done (took 6.359596484 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.016221848 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.028942123 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.167807288 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.015672231 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.01653307 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.01691279 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.015459524 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.014710188 seconds)
  done (took 18.226556042 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.015093424 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.014536289 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.01275654 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.014009755 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.0046718 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.016371147 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.016619143 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.016121299 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.015521258 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.015937113 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.014349787 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.014604687 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.014474078 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.014161117 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.005639479 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.014919071 seconds)
  done (took 34.152161224 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.016233164 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.016724231 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.015225959 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.016384695 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.01587723 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.016543949 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.018242793 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.015539726 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.015324201 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.01347697 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.016242104 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.015692913 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.013005909 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.017146333 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.014725268 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.015718072 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.016913594 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.016765947 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.016576008 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.017034867 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.015315327 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.016239671 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.020056312 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.015449818 seconds)
  done (took 50.324085581 seconds)
done (took 111.009146549 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.200305065 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.789033997 seconds)
  done (took 8.923278495 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.01956919 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.015960498 seconds)
  done (took 6.045614699 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.015417878 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.017731965 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.014269471 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.016080188 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.015682656 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.015451627 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.017315671 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.015346035 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.014555499 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.018023103 seconds)
  done (took 22.096873571 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.01469609 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.016258389 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.01210993 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.015783622 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.015448867 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.019284901 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.017564388 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.01856118 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.01726063 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.017539645 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.01584463 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.019442278 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.018792831 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.016802929 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.015229713 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.020645646 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.022112859 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.017605283 seconds)
  done (took 38.248047679 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.017482636 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.019062012 seconds)
  done (took 5.975146296 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.018278521 seconds)
    (2/7) benchmarking "second"...
    done (took 2.022269 seconds)
    (3/7) benchmarking "month"...
    done (took 2.016361184 seconds)
    (4/7) benchmarking "year"...
    done (took 2.02197471 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.019241678 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.017334302 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.021286579 seconds)
  done (took 16.07543154 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.021205799 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.178684958 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.233014851 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.628564913 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.019588404 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.023168913 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.894320006 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.02542432 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.017875264 seconds)
  done (took 21.978887425 seconds)
done (took 121.282938824 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.870240781 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.014948261 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.326450604 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.092163941 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.078905123 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.358202612 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.027946232 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.560236992 seconds)
done (took 44.273846189 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.135239301 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.013298161 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.045155312 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.043410497 seconds)
  done (took 23.039270576 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.019647185 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.344116156 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.03461913 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.019011311 seconds)
  done (took 23.370199778 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.393886322 seconds)
    (2/2) benchmarking "read"...
    done (took 2.372963169 seconds)
  done (took 6.709021377 seconds)
done (took 62.201368795 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.017094945 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.017058263 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.003765546 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.019015161 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.020161077 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.019431749 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.003352045 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.01987228 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.017739259 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.019363162 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.016925402 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.018914405 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02053336 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.019735167 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.020104663 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.017194068 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.01785529 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.020018899 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.019741214 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.02129668 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.019248314 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.020645783 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.018252369 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.01852439 seconds)
  done (took 50.36448887 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.018748691 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.018125599 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.020331081 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.020279985 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.021007305 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.020690866 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.019547477 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.021145269 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.020898041 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.020501313 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.022651643 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.019361366 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.02148505 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.020296958 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.020660725 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.02185077 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.020401173 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.021670959 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.0202223 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.019884478 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.022254286 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022427576 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.022391235 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.021262824 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.020744198 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.022296847 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.023114925 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.021087917 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.022267607 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.021383846 seconds)
  done (took 62.566773486 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.020583416 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.024227227 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.021479763 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.021848637 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.021384353 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.019322665 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.013208236 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.022725782 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.024314906 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.022227449 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.025498877 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.023795533 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.01995148 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.022219136 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.023242322 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.023049717 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.023335632 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.024224094 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.022481818 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.022843267 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.022175316 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.021433041 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.023331471 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.024495284 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.021241671 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.022317881 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.023423742 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.02375906 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.022936332 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.023484814 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.025431885 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.023856684 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.025779344 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.025272561 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.024812407 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.026488868 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.023812517 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.025060377 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.026560917 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.024842375 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.025122683 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.016521753 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.025206662 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.026445832 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.025549365 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.025004013 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.028212119 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.026282697 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.026960684 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.027291536 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.998724527 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.019231507 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.0261962 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.02703988 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.025502121 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.02572377 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.025025181 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.026181484 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.026486619 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.026704804 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.026485541 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.02735564 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.026286722 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.025665696 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.029072357 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.026910387 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.024577939 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.026301264 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.026455225 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.030454968 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.018827143 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.026551426 seconds)
  done (took 147.657922978 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.026488872 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.026822097 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.025805024 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.02631838 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.025956694 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.02797865 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.024832975 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02679972 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.027561611 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.02684697 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028363217 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.026615995 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02803116 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.026857012 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.028068507 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.028333124 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.027172578 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.0302022 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.028641938 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.027170498 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.027657846 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.028497292 seconds)
  done (took 46.547144363 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.029306633 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.029543538 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.02706139 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.02791761 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.028247679 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.028507406 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.027727163 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.02837826 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028689137 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.031017217 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028608183 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028122722 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.029343007 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028580355 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030881836 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.028680044 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.027331572 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.030143412 seconds)
  done (took 38.465649548 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.030543693 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.030510282 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.02906361 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.030475009 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.030104863 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.029003019 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.031762745 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.028314232 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.02875198 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.032070903 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.028995385 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029805778 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.030003495 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031734338 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.03039 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.030487409 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.028583905 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028787794 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.029820577 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.030014052 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.029984993 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.030442802 seconds)
  done (took 46.608349545 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.029762815 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.028375119 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.029049552 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.028891285 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.031831676 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.031234369 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.030887675 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.031096181 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.03080743 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.031042167 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.027701401 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.031680947 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.032527312 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.031868355 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.032909027 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.033000812 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.032018368 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.032633413 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.032266071 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.033327947 seconds)
  done (took 42.572555199 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.032982767 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035265778 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.034912576 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.034507313 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.033737009 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.034077197 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.035979504 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.032967751 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03625243 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.03460682 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.03442374 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.033107994 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035629701 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.032794636 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03411213 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.034281466 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.034030531 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.036442098 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.036483087 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.033042597 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.036527897 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.035792481 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.035565504 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.034774711 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.035723056 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.035037575 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.036500626 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.037237237 seconds)
  done (took 58.928920795 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.032427296 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.032703701 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.032504833 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.032125112 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.034770108 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.032796996 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.033073479 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.035280954 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.033861007 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.034012398 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.033614413 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.034674024 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.033968291 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.034065998 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.036058806 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.03431812 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.032548674 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.035330095 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.033904676 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.03518045 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.027224024 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034619309 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.035538182 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.034858655 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036916354 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.035257328 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035041624 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.035584718 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035802934 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.035344215 seconds)
  done (took 62.976229252 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.053727811 seconds)
    (2/2) benchmarking "in"...
    done (took 2.054751453 seconds)
  done (took 6.047978385 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.036706224 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.036383082 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.033415853 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.034937044 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.036418191 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.035981281 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.035800536 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.035754537 seconds)
  done (took 18.238763754 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.036447967 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.03750863 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.038789791 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.035991703 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.039616255 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.043304864 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.035353445 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.034164052 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.040327841 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.037302881 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.035321308 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.022701958 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.049110433 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.039615065 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036765322 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.037645729 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.038435816 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.033737684 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.039155872 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.038213729 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.03828301 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.041885258 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.037626521 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.042047316 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.026404857 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.039398122 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.049047222 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.040304588 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.034983595 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.039291751 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.042681619 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.037208271 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.03652742 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.039968405 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.041889529 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.038538175 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.04532542 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.041209707 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.040999416 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.038071787 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.040796853 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.040622822 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.041313329 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.047047514 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.040993015 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.038651609 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.038706747 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.041012948 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.039217611 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.043137017 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.048129409 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.039976383 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.040848741 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.039895346 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.041569144 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.041042442 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.041001686 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.042626906 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.046435009 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.046400907 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.043502392 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.062954653 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.050682123 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.041241569 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.043370361 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.05008335 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.070577771 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.041950302 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.041428555 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.040015339 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.046561773 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.041920196 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.040964105 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.040277764 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.05413636 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.053028716 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.042718044 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.040131053 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.04044846 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.042208253 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.041915963 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.043446955 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.041603415 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.042632797 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.052379495 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.071227689 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.043320781 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.04362119 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.041690329 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.041812622 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.048245872 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.042920961 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.042255863 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.042281763 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.043163855 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.04352542 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.043555932 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.044629012 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.042301384 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.049806512 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.041966955 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.041996143 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.044441525 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.055962894 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.043761655 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.044991637 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.042284514 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.033351266 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.051573135 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.046572165 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.041911755 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.043033276 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.044100088 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.052185178 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.042007572 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.047708809 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.056752057 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.050451274 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.045076745 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.035300709 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.048654836 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.046410049 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.054463658 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.072453752 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.042986466 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.045836746 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.049566518 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.06060693 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.047630226 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.042627226 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.045391026 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.043446197 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.043790957 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.04704254 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.044111919 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.047957401 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.045955553 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.047558208 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.044722005 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.048838964 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.046285043 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.046008554 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.046686008 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.046176918 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.046874808 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.046613514 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.044488738 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.051555305 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.043761002 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.047730834 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.045314972 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.045531431 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.047189297 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.043470057 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.045237882 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.04462552 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.048052332 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.046365827 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.047854212 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.047883794 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.042758898 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.020467513 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.045780697 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.048520986 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.04718169 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.04507761 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.049549032 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.047755242 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.0467976 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.047259716 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.047085606 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.047711553 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.047091796 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.046494882 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.046343007 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.048267616 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.045392262 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.047619902 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.049347232 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.061565772 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.050799656 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.056218896 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.046926145 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.052625743 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.048269297 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.048298155 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.047176967 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.049002339 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.050815452 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.044323065 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.049040927 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.051187654 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.070360973 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.059205938 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.050020514 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.050059728 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.052968047 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.052923348 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.054487315 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.049223138 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.047648909 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.049317717 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.051566813 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.051066669 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.049667101 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.051040457 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.048669762 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.047480635 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.052122882 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.05239623 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.049429467 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.049134012 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.049057009 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.050407745 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.048206634 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.049160392 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.050532814 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.050663298 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.055718809 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.051735333 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.049603253 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.051302522 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.048754586 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.051667755 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.049946676 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.050612825 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.051780332 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.048079359 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.050480543 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.056928234 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.051333069 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.04912474 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.049974127 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.04886995 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.050955843 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.049062624 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.053995839 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.059096465 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.050611262 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.050724414 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.055312532 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.052764758 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.043490855 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.053027942 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.05244495 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.053017318 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.052436412 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.053590949 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.049711212 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.056119842 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.05043642 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.051777929 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.052357781 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.052692027 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.053268729 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.051874983 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.05347237 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.054032828 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.065935061 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.057193907 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.053534807 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.055926605 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.053323244 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.053109075 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.05730473 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.052677976 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.063815948 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.062933651 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.05104233 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.052331405 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.05592919 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.054538624 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.051983377 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.055485572 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.058360991 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.051977575 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.054259816 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.057994329 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.054996791 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.053490033 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.056946495 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.053948991 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.055317447 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.053021553 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.054012263 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.053666493 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.054670944 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.054282421 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.055882336 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.054871386 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.057724035 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.040633049 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.053010716 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.054042182 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.062548732 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.054239512 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.055765303 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.060672225 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.054039971 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.054702702 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.055369776 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.052435064 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.05332898 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.055536415 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.054808528 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.05443294 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.058793437 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.059053845 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.067831363 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.058235872 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.066957191 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.055229537 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.064270747 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.057204304 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.054080577 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.058099807 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.057054299 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.066748067 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.053152249 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.054494855 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.062850092 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.055158489 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.054851392 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.064296561 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.056135211 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.058108114 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.05613453 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.055552782 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.06076387 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.059969958 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.055582162 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.058497086 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.055069014 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.05688843 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.058277513 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.05904002 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.056785364 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.057225095 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.055104206 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.059723567 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.060139606 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.058837923 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.061332778 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.05710907 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.05793176 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.0624887 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.059473684 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.059143157 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.06495708 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.058516476 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.064518173 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.059635863 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.059931319 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.056977764 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.058211002 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.058817269 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.056587819 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.061968929 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.058663065 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.057213494 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.058377425 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.070754006 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.063833176 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.061112868 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.060403472 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.060655273 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.059449594 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.068318091 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.086474892 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.060889978 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.060349176 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.064552606 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.063761908 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.060941784 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.06346273 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.062046061 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.0704871 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.059645279 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.059297282 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.060422066 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.073550689 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.060499199 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.059647305 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.060458719 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.063438898 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.059128406 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.059628209 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.060623567 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.062177496 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.060965795 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.071521174 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.059120813 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.060721175 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.063618051 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.059355245 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.061189727 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.062173728 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.060020576 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.06213927 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.062469776 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.063219985 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.060791065 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.067982266 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.060269481 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.064197323 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.07136706 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.061506394 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.063716775 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.06315994 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.062948437 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.062141556 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.065859443 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.061490501 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.062022682 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.06180932 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.062801297 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.064670477 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.072081085 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.064470494 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.063023551 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.060482569 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.063934229 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.061961121 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.066182573 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.06247972 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.069488485 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.06742535 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.07523186 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.072186203 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.066120781 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.062915528 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.070768706 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.074569738 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.062380462 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.061253731 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.06429873 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.0646027 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.06383879 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.061329552 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.064736743 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.064888662 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.069615393 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.059965472 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.064354615 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.063638199 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.063109517 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.065672785 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.064418608 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.06888326 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.06365977 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.048213074 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.061747888 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.063083799 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.052311731 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.06617361 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.065700859 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.064114803 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.065189548 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.063310028 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.07023447 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.063463652 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.064558688 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.063449496 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.063178719 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.05160542 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.043418624 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.063266259 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.065082603 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.067733278 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.071375789 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.064560923 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.064804918 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.066030104 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.068017835 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.066998748 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.065512473 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.068726344 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.064428291 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.071337296 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.064842689 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.065510586 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.063858139 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.065451235 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.070461554 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.066247644 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.068324779 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.067573109 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.063714819 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.063582134 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.069701855 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.07570428 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.07298431 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.069663265 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.075125291 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.070050767 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.068363068 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.065559067 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.065448109 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.067919078 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.067473713 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.069856441 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.06711726 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.068836633 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.068055963 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.067347931 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.068211119 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.057427406 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.065701787 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.067328311 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.051168348 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.075982413 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.074105546 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.066277685 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.06663512 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.068330325 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.069083873 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.079794258 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.068971905 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.069989704 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.070049217 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.068940066 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.068983579 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.075252246 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.078382081 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.072628641 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.069500658 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.072444365 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.086305101 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.070142603 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.078667615 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.103127816 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.069072249 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.071984464 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.066618969 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.069235058 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.071092147 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.071723658 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.070372489 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.063281564 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.072823571 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.067100818 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.076265169 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.067876875 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.073012117 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.068037364 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.066831164 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.073110075 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.069835957 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.07442201 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.068011222 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.064777389 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.063683184 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.066716745 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.06577716 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.064159927 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.062916687 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.064328531 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.065187696 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.066944815 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.071153835 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.066716507 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.065840371 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.077323467 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.078380428 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.065843911 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.063228605 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.065922711 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.069070869 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.067152596 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.064611768 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.066384325 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.074038286 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.067459021 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.073844991 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.065308357 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.064321485 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.063903708 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.064058495 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.066483404 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.076763783 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.077899972 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.065313948 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.068029752 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.069394917 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.061785905 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.066919691 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.065228254 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.072921241 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.062540753 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.063895881 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.060990303 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.060495358 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.06108276 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.065102843 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.069444111 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.063925081 seconds)
  done (took 1227.394795387 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.063125661 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.056629003 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.057424295 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.059161113 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.059381014 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.056361522 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.055152267 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.054554156 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.055897293 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.055840368 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.054679498 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.053893037 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.056682433 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.054902118 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.057129505 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.056327053 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.055306712 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.055460935 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.058038109 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.061475466 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.054759987 seconds)
  done (took 45.171320523 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.054630765 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.055301219 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.054124528 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.049949957 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.050983301 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.049688619 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.049694008 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.050971293 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.05012221 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.049940605 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.050219202 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.050835636 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.052864463 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.050186548 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.050656243 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.05165038 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.050288514 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.053834515 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.052445641 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.05230698 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.051196283 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.052320783 seconds)
  done (took 47.108435617 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.053573397 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.055310014 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.05235485 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.054553803 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.050165105 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.052665545 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.048779324 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.051804142 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.049844256 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.052128543 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.050690324 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.058036824 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.049489844 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.055540675 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.045168844 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.052089744 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.182687607 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.049847187 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.052660233 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.048360665 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.051838864 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.055049358 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.037436027 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.050475729 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.04869356 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.051899386 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.038551162 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.048665396 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.053017195 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.051451658 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.057566064 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.050859739 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.051275426 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.05168161 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.050218724 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.050764594 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.041856787 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.053781523 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.050226253 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.049107755 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.060403167 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.07918368 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.052817878 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.053873648 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.057239175 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.050477142 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.049923888 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.056003473 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.061462292 seconds)
  done (took 102.651842357 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.051170879 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.051586696 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.05612067 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.05119021 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.051911535 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.051440543 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.050280573 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.052178496 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.051975306 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.051632969 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.051184669 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.050789952 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.057720411 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.051508625 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.050613143 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.049609275 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.052950411 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.053432987 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.051368693 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.052034828 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.052058456 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.052038365 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.040172977 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.052425033 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.050783537 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.052009178 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.05112814 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.051668664 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.051876999 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.050777471 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.05059016 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.056017574 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.050243462 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.050298253 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.052143444 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.050615464 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.05158299 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.046654731 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.04717633 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.047151711 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.048064039 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.523337744 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.046011776 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.047152576 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.047319217 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.047935868 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.04783281 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.045305254 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.047955496 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.047947303 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.045876762 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.049811148 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.045137538 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.046671012 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.044629763 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.046809673 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.044575105 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.046515364 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.045346299 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.045740317 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.045030436 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.044271913 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.0444819 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.044251383 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.043670624 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.047358192 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.043783242 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.042481329 seconds)
  done (took 141.785438194 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.04610885 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.046512124 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.044936349 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.045960394 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.043957314 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.044901306 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.048868518 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.044686291 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.044994419 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.043880239 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.046417554 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.043260818 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.044420774 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.040729954 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.0455146 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.04522842 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.048951925 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.042546993 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.043687834 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.044430454 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.043771868 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.044267498 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.045834382 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.044153927 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.037577361 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.043378399 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.045705013 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.04232682 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.044592856 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.042891628 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.044310678 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.031111865 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.043545635 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.043453792 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.043479716 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.044461339 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.045380161 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.04403982 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.041739838 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.043629247 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.044943897 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.041835941 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.043457174 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.042696105 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.042340517 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.042432154 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.041713911 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.040997187 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.039165937 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.0409666 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.043543951 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.040315603 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041453343 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.042587687 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.041231715 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.040804995 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.041236801 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.041883881 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.041152587 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.041637457 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.040216626 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.037025643 seconds)
  done (took 128.636272165 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.038666051 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.035566978 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.038895904 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.03574107 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.036453503 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.037406222 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.036450866 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.042853884 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.034931626 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.036967378 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010108848 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032264144 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.03852867 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036946228 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.036288535 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038649944 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035529215 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.036684112 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035777743 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.036672515 seconds)
  done (took 42.669467023 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.036012384 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.039701577 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.035395686 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.037477033 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.034917118 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.035746392 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.038300895 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035606261 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035982947 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036851093 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.036762155 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.036576344 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036945526 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.036168107 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.034633864 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.038646838 seconds)
  done (took 34.540425051 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.035542923 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.035963721 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.038055778 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.042580955 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.035360079 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.035247605 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.035970567 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.03529526 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.036103015 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.035755387 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.034297891 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.036156419 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.036511521 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.042888433 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.034345742 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.035723323 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.034416442 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.035510211 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.039384696 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.036747869 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.036958712 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.035631596 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.034694138 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.035845225 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.034878021 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.034485199 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.037099321 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.035244631 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.04004092 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.034968996 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.034383211 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.035984263 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.035118809 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.036484749 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.037561174 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.034928925 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.034369505 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.035888573 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.038560678 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.033624123 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.036260482 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.034373734 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.035130878 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.039919531 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.034572758 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.035372766 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.033509738 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.034969787 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.036680353 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.033577762 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.033389371 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.037886914 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.037777769 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.034396321 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.03260219 seconds)
  done (took 113.936476513 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.036472728 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.039576337 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.034923513 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.033518935 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.032973876 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.033625447 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.038011929 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.032904305 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.033022917 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.034348707 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.034217127 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.03474013 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.034040042 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.034602497 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.034591093 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.026761931 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.036764994 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.033370841 seconds)
  done (took 38.572694073 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.033659107 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.034896761 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.040829247 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.033657137 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.035612492 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.033343997 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.034514068 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.037008844 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033400463 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.033568986 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034033136 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.034516889 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.039467395 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.03507632 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.03389496 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.034362249 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.035088635 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039117301 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.035041868 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.034922518 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034841173 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.03476298 seconds)
  done (took 46.728263711 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.036016882 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.034723246 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.047402563 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.054927667 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.055741896 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.070520411 seconds)
  done (took 14.25474766 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035367642 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03583591 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.038820794 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035513439 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035141924 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034402908 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035940614 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034278286 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036455779 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036723468 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036649207 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038329622 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034946703 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.033741835 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03582996 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035899782 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041880668 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0355111 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037410774 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035270886 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034793599 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035959337 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035474653 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036331898 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036338879 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036364263 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038983203 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037450421 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037264646 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036106639 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037058925 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03793556 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037500084 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036793391 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03833682 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022961013 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037962199 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038361456 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038135102 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038435804 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.037809436 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042025918 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039681519 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036909939 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037728864 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.024680055 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037253668 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038925874 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037840835 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038381828 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038446039 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04311006 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038975193 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03891543 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038762509 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038624188 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040519322 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038758362 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038899937 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03745759 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037603725 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038926275 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039166331 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039321891 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039698824 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04034064 seconds)
  done (took 136.408352159 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038312634 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.039430203 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040243511 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041584219 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038751536 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036345205 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038688631 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0383009 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038669425 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03911872 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039970202 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039557611 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039891482 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043196307 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037720237 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040759402 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039775988 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038780597 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042341413 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03817633 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040165406 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026391344 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039439024 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039409345 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040772355 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039459498 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038607713 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04083082 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043130758 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040088973 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04026305 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039130164 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041611188 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.041747753 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041986639 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040657082 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040113522 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042730439 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046352852 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041183603 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041947021 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040973121 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040420569 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045698437 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040419578 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041292537 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04132057 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042889266 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04236122 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043525995 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041127022 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042418187 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044410446 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041809932 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042798495 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.043536856 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043353791 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043665015 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041844595 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042305049 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.042200263 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040241145 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04557793 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043077856 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044143601 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045045679 seconds)
  done (took 136.662203374 seconds)
done (took 2839.446924158 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.145650544 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.100504799 seconds)
  done (took 16.212803124 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.209747293 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.098934182 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.227084259 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.16585889 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.052803919 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.048144405 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.04411323 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.047080453 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.144701977 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.047542529 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.074342375 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.043624134 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.047449679 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.049164117 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.048522236 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.053457857 seconds)
  done (took 55.374063453 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.050687557 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.049600794 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.041765931 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.046159442 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.060109109 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.119848765 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.065006368 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.051761859 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.062450483 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.082616158 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.064829759 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.054214338 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.055153795 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.056317716 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.136904023 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.065215547 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.099826821 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.118205343 seconds)
  done (took 39.245083638 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.126538704 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.050919237 seconds)
  done (took 11.150773256 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.064837494 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.053889153 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.054243838 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.073046686 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.04504378 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.069217392 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.065343076 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.068917916 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.08098858 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.064530797 seconds)
  done (took 72.611111311 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.050705176 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.054147573 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.306099383 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.055854535 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.055727197 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.075222977 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.048188387 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.077738606 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.050982628 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.047672422 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.057947249 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.311195176 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.05591062 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.048588308 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.481676904 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.056638386 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.055655924 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.082309064 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.084878321 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.051676755 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.054570312 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.05720341 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.214983603 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.74295147 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.04922388 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.054192882 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.058898847 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.053478553 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.046339157 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.051998347 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.060156545 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.051788679 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.059441088 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.05522479 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.056399473 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.060490155 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.551492464 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.069190217 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.060887128 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.146859333 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.10020365 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.059943745 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.876217207 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.052314566 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.051877396 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.061101766 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.731266445 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.134880327 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.051184843 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.215337794 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.37433595 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.067717429 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.226650859 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.223244296 seconds)
  done (took 142.860047949 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.054561839 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.282374366 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.20428884 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.049603672 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.303554186 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.257909369 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.047285951 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.096801138 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.047162656 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.250375341 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.3019474 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.151489722 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.047786402 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.048875022 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.046701458 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.044487732 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.193843305 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.1150523 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.046796611 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.045485906 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.071533207 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.251915205 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.167260302 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.056559567 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.072266814 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.254645185 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.170996924 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.154891534 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.855969033 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.054252397 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.108459832 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.048820421 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.049372753 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.046371988 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.202236461 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.141404253 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.132919674 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.047047071 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.044520029 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.054182915 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.723200078 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.253283113 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.140858041 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.169886046 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.294854367 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.268255824 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.66016959 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.048910378 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.6751075 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.213222646 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.254353173 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.259028893 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.171494155 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.052346692 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.604134204 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.037389839 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.049285966 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.270190505 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.266857978 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.148550365 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.048750122 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.051152036 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.047258481 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.288107096 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.054469608 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.139332642 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.055124301 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.047446432 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.146568617 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.147928208 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.272579652 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.275181512 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.078233522 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.39125563 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.546107578 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.253609178 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.113586035 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26708238 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.051066668 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.049031799 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.130741827 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.887361474 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.313292665 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.29290363 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.247159201 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.078809346 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.704835389 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.05319299 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.24462113 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.239570315 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.28288834 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.295541727 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.288796694 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.422884091 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.053025743 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.053712811 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.378443346 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.167240857 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.005515246 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.412511089 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279387379 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.544320377 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.080211145 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.380466982 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.179486205 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.057414518 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.695586515 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.060626884 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.258941597 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.091284213 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.059354917 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.054177911 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.24104011 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.960013663 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.060491642 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.984300783 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.118209811 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.055748602 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.256548245 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.053237291 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.294972817 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.05329029 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295622247 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.683640692 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.084228833 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.282551532 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.299312324 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.694182505 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.295984587 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.293288799 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.164237366 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.327588446 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.058157673 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.056032027 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.319435967 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.056000019 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.044199974 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.225318104 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.059947313 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.198855098 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.062248087 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.329249738 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.07397122 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265343462 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060107465 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.294212501 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.087185485 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.103455459 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.054313445 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.181564688 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.058592313 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.996794501 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.213896512 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.058517913 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.054394487 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.83283072 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.056079703 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.206465551 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.281573758 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.072958867 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.127600585 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.623412269 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.051438601 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.141791519 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.079422992 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.344565279 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.058455342 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.310837919 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.018753628 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.537056114 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.058315004 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.294944635 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.294045275 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.061764903 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.057086767 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.90621187 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.060549025 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.060101663 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.221826334 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.467336585 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.980568743 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.25691918 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064455872 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.186045869 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.064751089 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.130313151 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.403643924 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.058493242 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.061033545 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.062357569 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.06227219 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.067362275 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.319448994 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.080079126 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.49269458 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.19542239 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.310662067 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.363120214 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.258043927 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.096672939 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.063615736 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.28357495 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.061993472 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.124555373 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.061067303 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.083723807 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.289303062 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.055745149 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.268091782 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.293415599 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.060941233 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.108010627 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.06172367 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.06749227 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.016620491 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.207926114 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.14843491 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.063793057 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.066621632 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.176792206 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.182037373 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.241507033 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.884555096 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.168848253 seconds)
  done (took 942.965957223 seconds)
done (took 1282.386307558 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.063474906 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.070614817 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.069331737 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.06554664 seconds)
  done (took 30.254225211 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.066890952 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.055211856 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.067397236 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.068448614 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.066773881 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.07023509 seconds)
  done (took 14.380265603 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.063167309 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.067052553 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.066039572 seconds)
  done (took 23.182131994 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.486985634 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.462109653 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.135696918 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.191828799 seconds)
  done (took 11.262412923 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.072404616 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.068600082 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.070777255 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.070656206 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.068668352 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.071605203 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.070116859 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.068937137 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.070685844 seconds)
  done (took 20.622896539 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.3085145 seconds)
done (took 106.000500267 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.167280401 seconds)
    (2/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.2705428 seconds)
    (3/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.066693709 seconds)
    (4/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.127899446 seconds)
    (5/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.147413383 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.517805444 seconds)
    (7/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.465432556 seconds)
    (8/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.076067062 seconds)
    (9/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.176782 seconds)
    (10/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.929110729 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.19639333 seconds)
    (12/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.413005784 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.466394935 seconds)
    (14/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.266907066 seconds)
    (15/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.087734231 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 3.976648729 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.385786778 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.098182124 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.09572823 seconds)
    (20/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.40452527 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.100556795 seconds)
    (22/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.36400945 seconds)
    (23/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.331724314 seconds)
    (24/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.162709651 seconds)
    (25/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.160430863 seconds)
    (26/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.816112437 seconds)
    (27/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.10057841 seconds)
    (28/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.428775301 seconds)
    (29/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.343698132 seconds)
    (30/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.237108453 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.411237212 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.088042006 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.965494243 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.183095236 seconds)
    (35/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.274489181 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.208917036 seconds)
    (37/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.292578326 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.3101182 seconds)
    (39/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.090618277 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.161331325 seconds)
    (41/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.465641619 seconds)
    (42/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.079542864 seconds)
    (43/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.209046105 seconds)
    (44/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.083563589 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.184141504 seconds)
    (46/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.227923766 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.082769933 seconds)
    (48/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.131410461 seconds)
    (49/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.149317345 seconds)
    (50/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.46043349 seconds)
    (51/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.141820874 seconds)
    (52/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.754931241 seconds)
    (53/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.607250989 seconds)
    (54/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.343772063 seconds)
    (55/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.138466684 seconds)
    (56/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.321920848 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.952844162 seconds)
    (58/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.945533967 seconds)
    (59/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.156961805 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.97680751 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.330441654 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.817738615 seconds)
    (63/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.40039846 seconds)
    (64/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.370674343 seconds)
    (65/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.929200304 seconds)
    (66/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.16370124 seconds)
    (67/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 8.63047327 seconds)
    (68/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 3.717683556 seconds)
    (69/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.263753006 seconds)
    (70/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.173410181 seconds)
    (71/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.711404169 seconds)
    (72/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.216066593 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.274322236 seconds)
    (74/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.217508322 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.383637784 seconds)
    (76/341) benchmarking ("sort", BigInt, false)...
    done (took 7.083721069 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.792548362 seconds)
    (78/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.10428919 seconds)
    (79/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.315720104 seconds)
    (80/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.711718182 seconds)
    (81/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.202366296 seconds)
    (82/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.085187237 seconds)
    (83/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.128321651 seconds)
    (84/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.166970084 seconds)
    (85/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.166782271 seconds)
    (86/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.315964815 seconds)
    (87/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.237406106 seconds)
    (88/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.204057701 seconds)
    (89/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.093302852 seconds)
    (90/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.447315683 seconds)
    (91/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.094932225 seconds)
    (92/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.143597849 seconds)
    (93/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.994055948 seconds)
    (94/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.560816506 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.205323504 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.417380762 seconds)
    (97/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.408484254 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.220480573 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.094686424 seconds)
    (100/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.144381841 seconds)
    (101/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.881635157 seconds)
    (102/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.092234438 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.084421856 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.302448606 seconds)
    (105/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.221179763 seconds)
    (106/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.192699014 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.341360872 seconds)
    (108/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.736298623 seconds)
    (109/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.859417956 seconds)
    (110/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.293895258 seconds)
    (111/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.329268954 seconds)
    (112/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.097416368 seconds)
    (113/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.174535655 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.479407458 seconds)
    (115/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.906222805 seconds)
    (116/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.085524834 seconds)
    (117/341) benchmarking ("map", identity, Float64, false)...
    done (took 3.894606151 seconds)
    (118/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.173272061 seconds)
    (119/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.086440317 seconds)
    (120/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.283179558 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.915771623 seconds)
    (122/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.09111937 seconds)
    (123/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.15476071 seconds)
    (124/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.885398184 seconds)
    (125/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.205504867 seconds)
    (126/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.083828597 seconds)
    (127/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.301143881 seconds)
    (128/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.090967634 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.090893425 seconds)
    (130/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.313226497 seconds)
    (131/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.504376491 seconds)
    (132/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.180037279 seconds)
    (133/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.780305957 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.380339642 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.359935233 seconds)
    (136/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.242082459 seconds)
    (137/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.110800183 seconds)
    (138/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.357411114 seconds)
    (139/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.054646941 seconds)
    (140/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.168632583 seconds)
    (141/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.358587062 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.101837656 seconds)
    (143/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.182513763 seconds)
    (144/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.284038527 seconds)
    (145/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.436479963 seconds)
    (146/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.199636219 seconds)
    (147/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.851848918 seconds)
    (148/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.086142098 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.16682988 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.187373933 seconds)
    (151/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.335420605 seconds)
    (152/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.254983621 seconds)
    (153/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.191823747 seconds)
    (154/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.410742311 seconds)
    (155/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.087756078 seconds)
    (156/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.111275899 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.331814356 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.302218586 seconds)
    (159/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.072897459 seconds)
    (160/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.626518841 seconds)
    (161/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.182318784 seconds)
    (162/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.148134186 seconds)
    (163/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.16475572 seconds)
    (164/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.166472993 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.405470178 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.107422289 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.101424524 seconds)
    (168/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.10092982 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 5.719467265 seconds)
    (170/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.305319055 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.485146945 seconds)
    (172/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.105304556 seconds)
    (173/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.069166782 seconds)
    (174/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.160227101 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.963672523 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.061277017 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.303660787 seconds)
    (178/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.086076204 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.254714127 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.221967491 seconds)
    (181/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.497808534 seconds)
    (182/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.223421394 seconds)
    (183/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.103853176 seconds)
    (184/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.168241926 seconds)
    (185/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.172359918 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.242290071 seconds)
    (187/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.480809075 seconds)
    (188/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.273999511 seconds)
    (189/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.562987527 seconds)
    (190/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.225823636 seconds)
    (191/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.350602114 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.962109561 seconds)
    (193/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.149206243 seconds)
    (194/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.306222367 seconds)
    (195/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.129810596 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.091978432 seconds)
    (197/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.323054429 seconds)
    (198/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.243729028 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.802619133 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.952964749 seconds)
    (201/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.504313308 seconds)
    (202/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.372798621 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.087529265 seconds)
    (204/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.914177547 seconds)
    (205/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.40123457 seconds)
    (206/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.174876318 seconds)
    (207/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.486874217 seconds)
    (208/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.404423505 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.388023135 seconds)
    (210/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.109615864 seconds)
    (211/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.490694968 seconds)
    (212/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.163431964 seconds)
    (213/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.416105955 seconds)
    (214/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.356824392 seconds)
    (215/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.217247485 seconds)
    (216/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.274166956 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.234920454 seconds)
    (218/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.222810899 seconds)
    (219/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.09141604 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.079010659 seconds)
    (221/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.783927433 seconds)
    (222/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.529713018 seconds)
    (223/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.094592279 seconds)
    (224/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.169118213 seconds)
    (225/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.393558628 seconds)
    (226/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.211600223 seconds)
    (227/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.293881699 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.224307985 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.945429333 seconds)
    (230/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.310536707 seconds)
    (231/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.293291118 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.809567083 seconds)
    (233/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.465223949 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.114806468 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.090652606 seconds)
    (236/341) benchmarking ("sort", Int8, false)...
    done (took 5.140766412 seconds)
    (237/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.129163974 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.700420576 seconds)
    (239/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.382220484 seconds)
    (240/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.2907903 seconds)
    (241/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.089886121 seconds)
    (242/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.227154255 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.217935779 seconds)
    (244/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.173252105 seconds)
    (245/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.26462648 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.104322443 seconds)
    (247/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.225399905 seconds)
    (248/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.231940803 seconds)
    (249/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.306069536 seconds)
    (250/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.487744687 seconds)
    (251/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.451000799 seconds)
    (252/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.107101976 seconds)
    (253/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.791508436 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.188877166 seconds)
    (255/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.174044886 seconds)
    (256/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.429945313 seconds)
    (257/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.490589847 seconds)
    (258/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.501235777 seconds)
    (259/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.184464565 seconds)
    (260/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.367851071 seconds)
    (261/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.222103029 seconds)
    (262/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.580394568 seconds)
    (263/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.190809928 seconds)
    (264/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.090786509 seconds)
    (265/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 3.900459851 seconds)
    (266/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.398646198 seconds)
    (267/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.194075753 seconds)
    (268/341) benchmarking ("sort", Float32, false)...
    done (took 5.762978398 seconds)
    (269/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.083969635 seconds)
    (270/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 4.041188443 seconds)
    (271/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.578480829 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.203675993 seconds)
    (273/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.185818177 seconds)
    (274/341) benchmarking ("sort", Float64, false)...
    done (took 5.798872351 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.101243951 seconds)
    (276/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.559199735 seconds)
    (277/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.042830835 seconds)
    (278/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.094162103 seconds)
    (279/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.415270694 seconds)
    (280/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.854288101 seconds)
    (281/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.398597689 seconds)
    (282/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.783615252 seconds)
    (283/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.342090076 seconds)
    (284/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.989734631 seconds)
    (285/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.346090894 seconds)
    (286/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.478924404 seconds)
    (287/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.242039106 seconds)
    (288/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.095293378 seconds)
    (289/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.246394699 seconds)
    (290/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.178161708 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.092253725 seconds)
    (292/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.286223136 seconds)
    (293/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.177389838 seconds)
    (294/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.471891123 seconds)
    (295/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.683579278 seconds)
    (296/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.488362424 seconds)
    (297/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.684912027 seconds)
    (298/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.404955548 seconds)
    (299/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.093916389 seconds)
    (300/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.089903595 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.088988445 seconds)
    (302/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.406765441 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.095187445 seconds)
    (304/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.524073536 seconds)
    (305/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.086903433 seconds)
    (306/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.688979566 seconds)
    (307/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.348430223 seconds)
    (308/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.364840691 seconds)
    (309/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.808445932 seconds)
    (310/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.097984311 seconds)
    (311/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.089766323 seconds)
    (312/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 4.186259228 seconds)
    (313/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.529672175 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.111748624 seconds)
    (315/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.483271465 seconds)
    (316/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.991653253 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.091565269 seconds)
    (318/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.357813008 seconds)
    (319/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.854422905 seconds)
    (320/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.290064174 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.94602618 seconds)
    (322/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.085160668 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.08802961 seconds)
    (324/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.896695583 seconds)
    (325/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.009440463 seconds)
    (326/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.231298942 seconds)
    (327/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.876469168 seconds)
    (328/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.100784556 seconds)
    (329/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.521980473 seconds)
    (330/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.090201781 seconds)
    (331/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.520760526 seconds)
    (332/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.087913791 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.586192912 seconds)
    (334/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.08756146 seconds)
    (335/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.094657983 seconds)
    (336/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.512035182 seconds)
    (337/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.198742841 seconds)
    (338/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.407823931 seconds)
    (339/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.369134941 seconds)
    (340/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.089651297 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.059853954 seconds)
  done (took 1167.610181765 seconds)
done (took 1169.703574014 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.115974356 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.095356283 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.583162721 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.098627062 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.093167207 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.097556456 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.594844863 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.115472665 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.102955695 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.589240678 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.100525737 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.091252356 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.103066855 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.128876105 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.102642125 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.109538506 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.096303636 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.119912832 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.1266944 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.100109865 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.14585877 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.097633049 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.091798408 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.146981473 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.093198026 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.112341223 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.109093179 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.146905496 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.144755899 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.101511929 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.100492942 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.453109356 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.137196422 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.102669461 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.106588469 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.110731426 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.101608683 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.112996734 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.115121543 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.111568338 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.096079154 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.108581423 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.101706917 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.10039735 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.095506738 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.094391543 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.098563071 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.220252683 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.110860703 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.434318791 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.147160477 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.115054277 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.14698459 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.098408758 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.098580576 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.096014149 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.134085635 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.07277199 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.10124046 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.436888091 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.177513425 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.112486325 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.435865229 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.150990083 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.107526744 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.098845439 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.096112374 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.115228278 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.455560441 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.62797528 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.124046416 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.119514086 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.099158075 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.099996712 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.110999316 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.597451699 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.107070571 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.666410841 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.113613038 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.113880689 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.10375558 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.102110814 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.099337273 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.116051576 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.115974688 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.097439389 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.105109332 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.102551869 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.11359952 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.455132432 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.133377032 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.587104403 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.101358395 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.11477667 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.118679152 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.66501679 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.118804971 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.115729766 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.101343892 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.445272048 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.129633818 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.115357808 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.09673412 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.1110176 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.214152739 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.117866635 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.117898612 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.099496139 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.116175095 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.105208034 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.096850968 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.114337572 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.118516211 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.135432167 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.112568361 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.097144577 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.110090931 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.102570473 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.115462323 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.107918327 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.106238314 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.109928576 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.104402679 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.152672736 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.117015464 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.113315954 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.212004912 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.102216809 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.224146855 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.11666289 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.105149075 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.100476513 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.43943703 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.135748404 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.122950538 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.109867116 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.121836655 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.117201112 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.118518189 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.103718398 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.116035848 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.102599967 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.150647281 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.102002271 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.124732011 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.15342067 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.116699203 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.106357684 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.116009727 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.134728148 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.122356182 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.104859369 seconds)
done (took 330.201908754 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.134362038 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.099605799 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.181501019 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.099966414 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.166241037 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.150172808 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.101044523 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.096828628 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.101369337 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.514521801 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.097758611 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.105435125 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.100264208 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.101583678 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.146711235 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.101062464 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.100438942 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.342267065 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.101427806 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.156833576 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.098796376 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.100168361 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.10081233 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.501600121 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.098028339 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.104850423 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.158558041 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.103356362 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.343370523 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.098876423 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.105495734 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.346377051 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.162224429 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.114944937 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.110674166 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.110901824 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.167983015 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.106871251 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.149862759 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.151287008 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.184084725 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.138675083 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.100078614 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.10223255 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.102117447 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.104767959 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.104020648 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.135253459 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.104137828 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.106566724 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.335988764 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.110200657 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.10823464 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.102704297 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.101639292 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.121085559 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.100389987 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.107451925 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.158807762 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.106386253 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.152705183 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.503603749 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.515759105 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.103128487 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.097162417 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.094911272 seconds)
  done (took 199.253695424 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.16894698 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.190884468 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.171750382 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.104946753 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.151236827 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.147842945 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.101403407 seconds)
  done (took 17.05948851 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.104101531 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.105402813 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.126174018 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.129128738 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.105323939 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.247061639 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.110922232 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.109640082 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.128724285 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.106209663 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.441126655 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.127865198 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.108892773 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.107128623 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.118984912 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.121912768 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.091147815 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.109326786 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.204853796 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.183474654 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.114468831 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.113652997 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.133165084 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.113768016 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.107548355 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.105082414 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.108690493 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.112846395 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.106063478 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.105359644 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.10797401 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.122737717 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.106381674 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.100774607 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.106954893 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.11238803 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.111683799 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.110007015 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.105069407 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.109851865 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.107828782 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.106122641 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.105207206 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.104906848 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.108588644 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.128948446 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.105933992 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.098036186 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.101196717 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.10604012 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.137084206 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.108495885 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.108175953 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.114027734 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.151398462 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.109830201 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.11344944 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.106664888 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.110748893 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.105023148 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102942067 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.188242543 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.128343606 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.103536174 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.130453012 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.145982997 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.110769845 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.107661955 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.107887335 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.132037215 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.108960062 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.132598575 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.108289239 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.214946874 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.109656729 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.251186644 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.12933138 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.112983198 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.111660085 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.110102153 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.113391816 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.107833172 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.110081691 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.119098834 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.114082087 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.111479817 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.111069155 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.106970696 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.107719777 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.111032993 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.154184903 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.11623553 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.109671184 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.210908355 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.109312343 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.206725565 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.136088857 seconds)
  done (took 228.158241732 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.115638452 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.110090685 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.126454845 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.11261309 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.110576691 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.115632384 seconds)
  done (took 14.714463367 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.110157751 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.11470537 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.10927288 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.10977824 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.113798611 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.115580939 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.112019386 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.114090776 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.11963245 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.109965708 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.113131676 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.11256491 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.11358575 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.118154866 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.112354517 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.115170533 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.111920005 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.113512203 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.110455207 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.115623477 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.358570683 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.114254468 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.113281792 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.113696335 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.11948642 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.111387079 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.117554201 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.116823193 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.114093428 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.119173831 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.121906639 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.120885144 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.11982011 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.115308358 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.119570486 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.114114685 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.117812954 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.113401315 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.114608127 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.116108361 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.114121564 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.115737616 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.112789642 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.112761378 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.113000696 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.121030899 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.115152645 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.122529896 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.113942347 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.117679543 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.113010611 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.113029966 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.119577156 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.111070517 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.119464702 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.116282791 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.117955985 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.11491593 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.118310679 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.123739873 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.117958662 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.12071071 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.114150649 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.120655063 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.12182436 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.114581533 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.122083378 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.122755515 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.113288149 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.114562982 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.116453339 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.110778734 seconds)
  done (took 155.602046089 seconds)
done (took 616.806317105 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.228070173 seconds)
  done (took 9.256372611 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.174774568 seconds)
  done (took 9.310374398 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.505008439 seconds)
  done (took 12.542297253 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.125319914 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.13116918 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.116923741 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.115474386 seconds)
  done (took 30.529240164 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.493732164 seconds)
  done (took 9.524545081 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.12689934 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.099505018 seconds)
  done (took 16.331792775 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.142860076 seconds)
  done (took 9.173187266 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.577115728 seconds)
  done (took 9.630638465 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.125966757 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.137893018 seconds)
  done (took 16.314663373 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.116233888 seconds)
  done (took 9.147699765 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.976359666 seconds)
  done (took 10.101614249 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.117289859 seconds)
  done (took 9.164938634 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.142533989 seconds)
  done (took 9.174004645 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.09070415 seconds)
  done (took 10.122788063 seconds)
done (took 172.357008048 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.124029429 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.108870162 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.11406933 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.113981674 seconds)
  done (took 30.492486593 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.154177693 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.153525366 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.161006533 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.151571713 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.14123155 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.14116067 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.153994786 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.151313833 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.144437809 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.149318044 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.151284144 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.148664398 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.1497674 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.160963634 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.160079055 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.150073226 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.150970927 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.148644638 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.142247625 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.161594356 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.140170745 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.149122539 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.117235167 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.118934767 seconds)
  done (took 53.582797679 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.306670087 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.183342599 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.268855185 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.165251238 seconds)
  done (took 10.955665192 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.119807464 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.178882642 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.168847159 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.161862412 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.169246851 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.223013113 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.16568888 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.254030014 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.244937095 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.244344956 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.125311721 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.142999378 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.144865402 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.162542457 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.221694501 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.118591841 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.120078893 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.233223725 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.177096329 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.373021656 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.119009498 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.171296909 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.169368045 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.168532168 seconds)
  done (took 54.411370734 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.118450787 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.12590686 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.123908198 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.118391611 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.117683579 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.115388569 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.126498608 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.119948534 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.140622958 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.115045187 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.11747627 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.123864955 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.128739088 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.119775601 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.12241308 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.131315604 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.133628675 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.124623206 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.123060261 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.125828651 seconds)
  done (took 44.503845132 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.114293843 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.962943678 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.458586862 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.367299705 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.122299489 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.11922326 seconds)
  done (took 33.17807235 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.131899586 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.135088971 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.120171074 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.144461238 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.159971455 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.125005732 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.179754726 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.275453863 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.122954953 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.174530559 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.136666111 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.119171522 seconds)
  done (took 27.860755865 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.116792151 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.117806022 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.12265935 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.12291019 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.129637082 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.124545096 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.124200698 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.118302572 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.127781047 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.136802708 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.12332584 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.129917983 seconds)
  done (took 47.529976312 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.335229813 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.348280297 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357133438 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.556913632 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.455438756 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.10814312 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.407819574 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.331946411 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.86815566 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.970899774 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.425111356 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.101926494 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.066620635 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.040201622 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.018113151 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365115789 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121948672 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.977764875 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418958806 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.16939047 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122795515 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.123199195 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123777457 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.435047052 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4522029 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118340897 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.333321396 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139085796 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.119424442 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.335957934 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.561378881 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.162215342 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.323544128 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.377603353 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.496127398 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.182738545 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.221178354 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.136264598 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.15601552 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.156500487 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132074264 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.129971674 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.665635498 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.13512388 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.391738225 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12649144 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.131572327 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.213239411 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046907762 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.498572086 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.242260753 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.124096801 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.159635755 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.556920125 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24346488 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.367524947 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124257236 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.139420137 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166596367 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.435775452 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.232198365 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.227573073 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338738122 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051672678 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.597091692 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250667437 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.127062404 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128821818 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.826179866 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.36759397 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.208631267 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.507255979 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.890149169 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.12332448 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129017498 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.169380847 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.224693395 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.120841517 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.420561627 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.114455647 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.048841403 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.222302797 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.529579692 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127207915 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.124208857 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130074649 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.970187848 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051341192 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.222246291 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.440467196 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.449948068 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.124366715 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.129990696 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.150321758 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125960722 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072845096 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.520851307 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.176339555 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.053947924 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.691371205 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.576531496 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.076664896 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.454319106 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153394006 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.425654228 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.290458434 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.528583966 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.337109226 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37378359 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.6612295 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133064423 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.689807141 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211621988 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20429965 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129329885 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.685632099 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.159102947 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.474031607 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245994676 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.129828728 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.051763111 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.139903973 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327943569 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.573083326 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17348537 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.126378137 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.13382552 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.132595552 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133945368 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.240205015 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138452254 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.43487826 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.207001021 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.131296022 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.06817952 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.134047867 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422831445 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.513599982 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.179714618 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.402753152 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.399609133 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.834963411 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.727683777 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.078043035 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.434604129 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.206974546 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203619316 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.73566528 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.267828991 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.229059032 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125679801 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.260669861 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.136881467 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.135419235 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.248849339 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.535224583 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.558441969 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.171648314 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134472697 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.085361481 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.157300464 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.364487536 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.272338662 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.153609096 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1352158 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.219830668 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357380683 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.138529877 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054863982 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410763737 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.376826915 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.434284826 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.551041589 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.275625069 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.202524391 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143230811 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.345939105 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.213940461 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.781925301 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.678651251 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379591947 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.589821662 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.084280045 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.798666572 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.450716255 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.520399272 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149228538 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.58226859 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.154940579 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.6552812 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.15205354 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.6637071 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.061010448 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139702776 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.489116127 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.094154804 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.458517197 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.204384402 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.240719819 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.136440164 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.139410284 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141413202 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.143899777 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.237291197 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205548846 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21131694 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061125129 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.632985293 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.160952146 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.140617093 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.134700484 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.592589976 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.010440096 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086786457 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.135027804 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215472569 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.881207547 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.680676218 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.138582728 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141506032 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.733255034 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.139632005 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.727955254 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.146021374 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.071510287 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.160248034 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.465915143 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.840294712 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.435598765 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.21369073 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213575445 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.135467589 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138188331 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.836331041 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.147183418 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.836806608 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432050741 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.41522661 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.596218475 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.203875039 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.346014766 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.153830977 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.139238498 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.693166764 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.161966222 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14060808 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.339600068 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.642233083 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.531774959 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.787912022 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.225328381 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.135668154 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.440407442 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.157977428 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.58576735 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.834582995 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.153844117 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.198589643 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.36419685 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.825174771 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.138354436 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.050509023 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142490184 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.352121122 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340428047 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.438906955 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.450318621 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593816221 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065753845 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144466917 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.166440001 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.383050841 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.137996114 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.176919007 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.573303196 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.275750863 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.565813349 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.438898653 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.590385969 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.780402027 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.419535983 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.205616429 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.153359225 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.812837601 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.283216451 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.070138082 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258426056 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.068382535 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.959686941 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428955775 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.153167424 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.440267777 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122553662 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493093981 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.443823873 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.454145714 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.197497575 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.164673424 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.139626683 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.186895291 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.142179922 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.172890098 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.245185431 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.146607638 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.534205736 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170508727 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188965005 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.146669322 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.717747247 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160113402 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143502502 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.837287129 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.163852802 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.262048625 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213160561 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.959287232 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.61636274 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.160141527 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.015685629 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.968734888 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.441912327 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.20210694 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.618460822 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179937811 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.544663544 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139249943 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.356469462 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.146009403 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.56892017 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172286841 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.422405709 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098493433 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.355169157 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.371223253 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.170668117 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.144829908 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069076842 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.238358009 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.994424885 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.124077238 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.147868456 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.826287694 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.618808295 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.169958431 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.6436032 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.01275482 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.146169008 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.592666765 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.576953602 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.613639333 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164595597 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146739433 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.524669461 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.275354701 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.506851644 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.441605655 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.150501033 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.172290723 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360162077 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270313876 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.065543964 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.620199294 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.728064477 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.847808075 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.155058732 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.345599985 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.54123513 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.291821537 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.168419708 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.219166488 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.550496803 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.44809085 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.216693707 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070725438 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143857565 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.540446643 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.539746849 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.240449798 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.387243637 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.472951628 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.44852279 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.703749857 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.438955757 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.645579695 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.560290465 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.539555678 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376868675 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.534190033 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.472448916 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.030661117 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.560443918 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.359640106 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248252082 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.447262851 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.020600008 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.854839077 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.388209721 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.151628854 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.07733249 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.350550971 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.148567967 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.293689718 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.709644377 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.388532365 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.462588885 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621790335 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.681525709 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.182854075 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.159883467 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.111409463 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.174288982 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.167810091 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.145883053 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.62211685 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.444025466 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163972557 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088362509 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.818166235 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.073369681 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.359719748 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.187529324 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.170590869 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.69985649 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.46144889 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.247375482 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.466881463 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.244440178 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.171285308 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073683506 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.962021685 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.088154938 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.271837337 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.568928866 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163648311 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.136554343 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35053739 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.073121149 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192095216 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151374316 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364415834 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.732758051 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.445851398 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275328962 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394346223 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453486708 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.100504313 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181447556 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.418467594 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.07591001 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.618349932 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.836555253 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.180202278 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22178102 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151060855 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.15065328 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405599134 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.530923173 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.241477336 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.699901537 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.167174312 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172567373 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.527562471 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.242519433 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.150064183 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.154213996 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.478697816 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.368020977 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.151087197 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.138492438 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.364791415 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223224853 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.341564468 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.226540333 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.665085682 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.152678095 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.111268324 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253198536 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.10780071 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147775707 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.955799868 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.210097402 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.150333542 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.455580056 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.81165354 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.355833006 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.544965728 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.011928269 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.190118816 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.178404146 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.146465226 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.158644333 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.538210352 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.457607318 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.145981342 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432831093 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.201417493 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.157128702 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.81168869 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.118292523 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.148914165 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.895476408 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.014888326 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.881587479 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.540240363 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.155800107 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23597524 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153616214 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.078742024 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.187279367 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.279300246 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143388587 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.149693168 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.530597775 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.514665579 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244205285 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.156416391 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.156308048 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.16176266 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.363990113 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.667208776 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.169092785 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.854777408 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.356832453 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.16292828 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.62961984 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.609386021 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.260642107 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.182987464 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.187095051 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.403288335 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.692378739 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.18590299 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.119009019 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374609588 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.152000947 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427548275 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428565345 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.156262678 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.367663078 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.611910341 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427979845 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.50360364 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.472382103 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.226788071 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.197252687 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.022421177 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.159174696 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.158237074 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.433139726 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214978287 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.154606222 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164140651 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.712061568 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.918428227 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.64021024 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.319857373 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.533099262 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.058891746 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.907889587 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.163109 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.082682943 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.155410651 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.180916845 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.164755349 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.084125286 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.965590388 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.878081566 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.370294906 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.470949167 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.088230711 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.363023842 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.767640155 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.079096904 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.127467087 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.156865439 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.41105648 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086388132 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.160899281 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.114221802 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.49188217 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.745014904 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.419273102 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.156927787 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105231787 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159997158 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.159967441 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.162546044 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.244711111 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.161659314 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278544176 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.438717945 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.599151076 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.268250123 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.798849845 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.918985675 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.094844276 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19724992 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.718946936 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.730113952 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.494087789 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.292351346 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.978701617 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.101007917 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.158083855 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174037929 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.396267184 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.159714008 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.15970239 seconds)
  done (took 2242.020929971 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.200397711 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.225944939 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.197819449 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.234909594 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.29891851 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.274120485 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.217502413 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.160499441 seconds)
  done (took 59.882977646 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.164441258 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.148464441 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.153463565 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.171685802 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.1487052 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.15058878 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.351158182 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.177421916 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.147301428 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.152091394 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.156596757 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.15436761 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.152755289 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.152671911 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.146849753 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.452307152 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.171308001 seconds)
  done (took 81.223543084 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.20272875 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.912240076 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.153073164 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.81708938 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.160343859 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.474236603 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.150425163 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.157598596 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.227839878 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.446866929 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.175544902 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.162815765 seconds)
  done (took 93.113778856 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.148732571 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.14724383 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.149897392 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.135928941 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.152791683 seconds)
  done (took 12.802500698 seconds)
done (took 2793.649352788 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.39609928 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.238868077 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.217384225 seconds)
  done (took 6.524257415 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.299167176 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.352001061 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.458524478 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.470931613 seconds)
  done (took 11.652195772 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.443395506 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.549436242 seconds)
  done (took 7.05399656 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.509597835 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.168900273 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.532705325 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.160834519 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.159470905 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.150051123 seconds)
  done (took 23.545482936 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.156699212 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.154980117 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.159936641 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.159546483 seconds)
  done (took 10.697491539 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.157155056 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.92718827 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.15937679 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.159064127 seconds)
  done (took 22.470741777 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.305208173 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.168049569 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.917462663 seconds)
  done (took 10.462973052 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.783536833 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.602931919 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.766583719 seconds)
  done (took 10.22035237 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.29922573 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.165830208 seconds)
  done (took 8.532405279 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.299665388 seconds)
  done (took 4.368559428 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.990427741 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.471988476 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.623927601 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.683067296 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.762024588 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.378138317 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.452405373 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.409288092 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.553356601 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.545008542 seconds)
  done (took 27.93532261 seconds)
done (took 160.132229567 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.57160575 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.165188384 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.362663883 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.521090265 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.407043559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.367053631 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.455525723 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.510986041 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.182679008 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.175852143 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.518015773 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.383678653 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.404549452 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.171678263 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.411702514 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.172836099 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.398381124 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.593079319 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.207037308 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.444281747 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.458382929 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.167631515 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.366948731 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.182249627 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.386036459 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.318031844 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.756138634 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.165190535 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.357212531 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.761605709 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.312786278 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.599821508 seconds)
  done (took 178.32884688 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.14069977 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.158698952 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.153014725 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.147319915 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.429378248 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.154406084 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.161454456 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.152273507 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.445826103 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.417289158 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.155517647 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.419017591 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.159445979 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.160543723 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.156457732 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.155354022 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.56738105 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.157023316 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.154097622 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.156717836 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.15777401 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.303620427 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.16789567 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.30584315 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.556782305 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.154443019 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.156905813 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.154533321 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.161409886 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.155029697 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.161565389 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.15613023 seconds)
  done (took 217.269698535 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.160054945 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.15592228 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.154311207 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.152660159 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.163510202 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.15859697 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.159522075 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.153064433 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.883868526 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.882226381 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.156488027 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.166976724 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.168504574 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.15882259 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.180162254 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.159029484 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.176862078 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.171836365 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.160793885 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.163238709 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.155738667 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.926437087 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.152602886 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.968441285 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.159891914 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.162436874 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.156743729 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.170093632 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.166513873 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.170572113 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.162372547 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.164262912 seconds)
  done (took 230.277501249 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.403036896 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.167469043 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.165740744 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.173157517 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.163104678 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.164016014 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.169833714 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.416083737 seconds)
  done (took 21.899962211 seconds)
done (took 649.854539723 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.524194661 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.888209163 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.287197426 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.18119522 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.431710486 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.222697227 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.179452804 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.247902774 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.818830037 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.25490798 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.572028371 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.189188975 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.875668138 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.19780449 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.29247915 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.240342297 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.550191222 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.843636207 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.311899106 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.833354435 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.379366014 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.098904466 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.257788295 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.853581582 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.582948821 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.121848009 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.202732367 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.558825349 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.186866856 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.426157947 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.846634512 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.450897467 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.1924265 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.180131234 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.238324757 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.224578942 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.385951608 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.186099618 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.291780329 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.901994697 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.838445732 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.707081327 seconds)
  done (took 112.135294641 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.176182363 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.1746564 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.166150581 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.169061963 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.182748842 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.172264341 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.17385197 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.171095668 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.17343134 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.174588756 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.176286805 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.179140916 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.179039788 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.182016167 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.16935275 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.175071317 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.171916595 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.181875968 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.170929982 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.173431664 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.17247853 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.17500666 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.174292952 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.172900365 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.17380993 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.171346811 seconds)
  done (took 58.627108523 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.170264853 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.34533774 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.445779445 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.188885122 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.168965967 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.172567714 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.195445392 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.174794148 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.172874988 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.174942887 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.283073246 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.171324775 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.177959519 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.450589502 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.187341776 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.170393795 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.167795907 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.17254627 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.353314787 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.181042796 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.194385612 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.169847623 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.199612225 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.184814801 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.175805147 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.166463191 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.17194843 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.566200151 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.172040148 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.286170189 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.205049418 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.194447872 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.503216441 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.455405041 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.226627414 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.173537681 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.167922968 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.325789367 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.173588334 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.169009929 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.197330349 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.17594907 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.450575346 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.67016765 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.178544774 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.166940495 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.569736182 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.336265731 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.209109105 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.182741404 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.461960912 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.189963728 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.171121495 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.173642448 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.210358835 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.179648972 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.16868331 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.410058809 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.181853186 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.200037834 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.175571752 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.176117568 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.356777977 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.174045028 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.349062238 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.177170169 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.179874891 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.173807505 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.456115974 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.192422085 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.672464788 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.17900535 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.167083492 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.290371212 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.348844307 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.59462906 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.186844374 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.355680163 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.517426779 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.204031712 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.182958195 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.557593311 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.211753641 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.18310125 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.170785439 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.174795268 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.17061147 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.211378798 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.192770382 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.590084696 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.668934245 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.418228641 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.205362879 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.184739928 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.172775896 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.411736424 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.179871451 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.170900204 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.451436283 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.694229224 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.183686418 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.178022927 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.656215075 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.180539661 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.200177228 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.181210347 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.471569019 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.195420655 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.212567297 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.173551102 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.176000998 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.182475731 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.200675786 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.176255085 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.17353671 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.650897346 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.339855431 seconds)
  done (took 267.638633435 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.174771556 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.167914076 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.17698829 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.169798089 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.168077076 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.174889301 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.177004319 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.172883778 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.178020042 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.162347493 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.175879255 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.174488763 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.178416306 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.173409712 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.724325153 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.193016288 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.682117297 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.196429037 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.196657725 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.1936203 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.808131077 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.198208668 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.197414074 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.192715497 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.195635208 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.190557442 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.203422541 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.232505871 seconds)
  done (took 176.919694117 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.194110786 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.26545844 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.214898168 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.242412602 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.203376381 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.193333297 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.213765916 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.210985256 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.204796891 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.198374565 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.200872429 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.221727288 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.203494892 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.339852549 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.23444384 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.223570188 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.277379221 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.207026278 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.203853698 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.200344219 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.246016361 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.215336427 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.225459001 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.247724197 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.21349359 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.245798542 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.212776826 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.201093127 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.191242484 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.308581007 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.221275585 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.229333251 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.232551441 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.216446265 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.287573117 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.292547742 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.2766887 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.231787711 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.200210891 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.202284021 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.195592537 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.20047197 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.23883918 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.213553947 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.203895487 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.295254082 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.217788788 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.199037748 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.220808662 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.200851139 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.213106404 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.215566473 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.228075665 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.30368049 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.242328351 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.220108305 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.225274953 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.217036262 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.204089856 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.27651221 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.2094233 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.291162141 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.218381998 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.206876637 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.202210468 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.203525942 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.249785757 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.236102095 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.279842998 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.210020791 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.278746676 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.254812203 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.216634924 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.204953504 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.202680671 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.251063803 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.291204076 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.25392768 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.258210194 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.235194518 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.20823675 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.203150155 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.207943916 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.232881098 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.205447857 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.29745071 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.297455261 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.203674951 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.200982486 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.202553851 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.202146578 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.2225022 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.256829729 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.243143232 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.2897097 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.237899443 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.240409803 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.210350954 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.213264626 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.203278747 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.233241364 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.20879408 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.213490051 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.53380689 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.235452043 seconds)
  done (took 236.558336577 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.554763993 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.247835643 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.274547109 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.476661697 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.572024813 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.359421664 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.24114785 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.25457574 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.258294121 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.36887085 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.308178318 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.295265718 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.234445877 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.221114342 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.250355322 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.256452395 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.280418532 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.563057541 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.356264334 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.033426498 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.245218086 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.5165 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.553578351 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.586425006 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.285387842 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.628175935 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.848848001 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.340127832 seconds)
  done (took 71.533063083 seconds)
done (took 925.491279958 seconds)
SAVING RESULT...
DONE!
