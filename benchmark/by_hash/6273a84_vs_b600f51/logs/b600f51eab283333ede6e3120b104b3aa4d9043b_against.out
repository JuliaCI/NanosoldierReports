cset: moving following pidspec: 3128993
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.52234654 seconds)
loading group "string"... done (took 0.314533422 seconds)
loading group "linalg"... done (took 3.93898605 seconds)
loading group "parallel"... done (took 0.027626757 seconds)
loading group "find"... done (took 1.445599568 seconds)
loading group "tuple"... done (took 1.023408722 seconds)
loading group "dates"... done (took 0.260276239 seconds)
loading group "micro"... done (took 0.065269312 seconds)
loading group "io"... done (took 1.287504439 seconds)
loading group "frontend"... done (took 0.01278747 seconds)
loading group "scalar"... done (took 5.088552784 seconds)
loading group "sparse"... done (took 3.623307288 seconds)
loading group "alloc"... done (took 0.015616779 seconds)
loading group "broadcast"... done (took 0.389355246 seconds)
loading group "union"... done (took 3.689599386 seconds)
loading group "simd"... done (took 2.933679885 seconds)
loading group "random"... done (took 3.228097603 seconds)
loading group "inference"... done (took 2.914112135 seconds)
loading group "problem"... done (took 1.204533286 seconds)
loading group "array"... done (took 4.625061945 seconds)
loading group "misc"... done (took 1.090587484 seconds)
loading group "sort"... done (took 0.379075916 seconds)
loading group "collection"... done (took 6.522012874 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/9) benchmarking "broadcast"...
  (1/4) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.163683043 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.066247689 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.127804016 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.071958164 seconds)
  done (took 1.237286893 seconds)
  (2/4) benchmarking "typeargs"...
    (1/3) benchmarking ("array", 5)...
    done (took 0.063423897 seconds)
    (2/3) benchmarking ("array", 3)...
    done (took 0.020214286 seconds)
    (3/3) benchmarking ("array", 10)...
    done (took 0.020196534 seconds)
  done (took 0.895775897 seconds)
  (3/4) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.166319181 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.124925552 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.119182969 seconds)
  done (took 1.157128139 seconds)
  (4/4) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.148920444 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.18289206 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.310406219 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.160904225 seconds)
  done (took 1.559394773 seconds)
done (took 5.697031788 seconds)
(2/9) benchmarking "io"...
  (1/1) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.086270678 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.178231085 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.021228455 seconds)
  done (took 2.063030399 seconds)
done (took 2.818924164 seconds)
(3/9) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.069578102 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.746283704 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.994539263 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.076135013 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.214634443 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.298263331 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.077050533 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.124968838 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.041635007 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.02816034 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.066435161 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.034579712 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.0806388 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.579724935 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025299742 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.139937498 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653737823 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.041802995 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.091306232 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.428977896 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.022312198 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038804596 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043365704 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022132592 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.281560108 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.123804999 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.675163593 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.028658015 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.0221011 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.051413117 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.02461459 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.027788159 seconds)
  done (took 8.920144629 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048899251 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.036357142 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022989784 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.073580222 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.04861025 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025405118 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029944747 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022888041 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.038585794 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.074235884 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.040164665 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.039526299 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021713418 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.020631937 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.026679143 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.144200674 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.035642282 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.039538546 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.025407383 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.041609582 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.058793828 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033011553 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.026471988 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.025850797 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.087920759 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.124816356 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.056458572 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.052975703 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.024331517 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.025354415 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.06991735 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.072945633 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.021931406 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023803858 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.069701481 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.050705782 seconds)
  done (took 2.469309731 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.440321084 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098004187 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.033523612 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077117026 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.059900051 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.06975923 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.044790354 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064567079 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.092350422 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023553392 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.085417853 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.676885175 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.060561822 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.131700957 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02557931 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.153305432 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.200244541 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.087500275 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.019985257 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020793732 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022511654 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024295393 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.054634487 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.02184837 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.077531999 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.125180638 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026627331 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023931851 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065501485 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.038581686 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023047207 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.090690177 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.041206867 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.02627379 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.139197304 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022424373 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020578712 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.047699633 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.021220329 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021276855 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.021005546 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025536994 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.0207463 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.058404473 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.025766166 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.462652896 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023969021 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.492727424 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.028075962 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.021539263 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.02247205 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.054803008 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.021875447 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022719066 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.558781793 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.026361787 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.024270492 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.216545448 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024197015 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022737726 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02329471 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.049836202 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022830628 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024942783 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.02307225 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053448522 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.872540462 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.025713734 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053460113 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.022687299 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023018851 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023103389 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.325297484 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023547731 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.105735757 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.040471305 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025263273 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02246991 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021907925 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.042071138 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.044810902 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046614257 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025662052 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.02274543 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022127707 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.622459885 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.161101826 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020680494 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.021670462 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.107319608 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020685593 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021689222 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023616945 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.041535789 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02192255 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020910325 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057580464 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022370828 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021928284 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.18978289 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023513056 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.021133186 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.404929753 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024638934 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.060774905 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067112551 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021659504 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.021174725 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.02186852 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.021084831 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.021334238 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020616215 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.022100544 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021730818 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020683706 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021373412 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.019974908 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.021994349 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022071316 seconds)
  done (took 19.25147301 seconds)
done (took 32.841391117 seconds)
(4/9) benchmarking "problem"...
  (1/1) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.364431599 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.415969575 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.79364584 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.066013394 seconds)
  done (took 2.458626255 seconds)
done (took 3.419814115 seconds)
(5/9) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.034211064 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.035751181 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.035487888 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034288684 seconds)
  done (took 0.94799387 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.025789151 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.02502481 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026667761 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026867426 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024381749 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025611218 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.025456798 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.025031158 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023942446 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.025920567 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023730764 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.025048332 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025011458 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.025404045 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.02520243 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026377423 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024889038 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.025068011 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023923968 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024961394 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.024976169 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024730196 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024541787 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025834602 seconds)
  done (took 1.421483798 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.038259342 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.03340198 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.033137609 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.033594411 seconds)
  done (took 0.958467669 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.029705164 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030261548 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.037811622 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.031787959 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030820453 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031286312 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036523406 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.037729911 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.050421189 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039026948 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.023366267 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.023038769 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.022106479 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.027531941 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.035508658 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.021340839 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.027151147 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030766427 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029847896 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032436894 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.024417398 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.020503168 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030446552 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030197101 seconds)
  done (took 1.553442547 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.039971358 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020249101 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.045083042 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.051150732 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045181906 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.050636165 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.046104196 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.05072702 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.17935922 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.021391293 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026660097 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.021302788 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.052137765 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066150633 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034527378 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.052641673 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.051549217 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.026097058 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.049924725 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.021268913 seconds)
  done (took 1.776101097 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.026390778 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.026462849 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.022199419 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.020145127 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.031135835 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.034131016 seconds)
  done (took 0.989618447 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.022318739 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021499031 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.022272919 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.024795843 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021162565 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021166582 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021956024 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.024471324 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.024225043 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.021724907 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.021633446 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021973431 seconds)
  done (took 1.092887963 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.165329917 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.024943617 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.026095789 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.021546307 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.022259878 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.022088618 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.035342568 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022997257 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.038050306 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023087842 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.02216897 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023686949 seconds)
  done (took 1.308116733 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051580768 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054252701 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073737912 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057071398 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069015642 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035757614 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074297131 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032854443 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.099826381 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.071604368 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061076941 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038908341 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034660768 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024420003 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034752157 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046656805 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100989438 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.024801609 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056789722 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116822826 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060103946 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.092221599 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068897511 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060833413 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032421199 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071891386 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047047467 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033865242 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065497807 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054739994 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059911662 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053341062 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02583899 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.023824656 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091335148 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.052405116 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056267116 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.043472742 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046922803 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.039369447 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06365293 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024927832 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.049330383 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.059670691 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.028317384 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065325075 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.038764483 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049107129 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030046186 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061396893 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069596872 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054914475 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034358744 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057539485 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095164276 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04194036 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055516813 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052668312 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025821799 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.054090287 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.044368924 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051027774 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041408105 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030068745 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081620722 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032752044 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.071197316 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046066803 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.029437171 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.043281232 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051018923 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061476155 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059002801 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.041412205 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058590902 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040567269 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055403805 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.043697649 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.096670375 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03759209 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025898713 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.05622883 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098306548 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03658488 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058494194 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055082988 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047639818 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026997651 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.034417108 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.053113149 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030145823 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.074747241 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024196808 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.050755021 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071460132 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032944459 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050331129 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058346162 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02967467 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070822087 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053661257 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02493892 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062774637 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049273942 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0681827 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032745077 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029625021 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060380075 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038424904 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.112585369 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034105807 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029487658 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044406863 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05457081 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037449012 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142326252 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040186491 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056447666 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047185319 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066859478 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02687445 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.044158215 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048298988 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047597504 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051245364 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072806409 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.033461425 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035463789 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071686786 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047420297 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024830326 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059347692 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055217528 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.023463652 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027090915 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.027502708 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067831363 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037401939 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055724971 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067437005 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.02944065 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058360736 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04280661 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066562246 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050253889 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057804771 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05378736 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.136761729 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034649608 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.026277652 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047183575 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.132689832 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062004077 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.031769577 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.03554127 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064685981 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062922727 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044337262 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056242682 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036587761 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04746808 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048317833 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069091063 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061772785 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03636124 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042119985 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042235541 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.090379694 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025968729 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082279752 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039349102 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06239122 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040135199 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068852665 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.059126565 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032143954 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035697766 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042124716 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.039073053 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057392471 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069621844 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.042854354 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.024924235 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028968095 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057248879 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024202938 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047583694 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.044644696 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.042341954 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056216069 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.034856801 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030595944 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022441696 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04735332 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059304261 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023657092 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.057734465 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.05999321 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033671136 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.037619533 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.021887324 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045081818 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069446497 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051008844 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053147232 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155010643 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045334374 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057325592 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.088016997 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.051365121 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030322308 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.066297383 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068549324 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029598415 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055184417 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050042506 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090127651 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.064692424 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.042894624 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066925686 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.042114461 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049347683 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036290804 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.052025489 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074877681 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073082811 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.058052548 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031509234 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048644014 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058125686 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050472104 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030232204 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061693777 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.0245634 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054332109 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.025037739 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046731013 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029331443 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.134183352 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04300516 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059013759 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023270663 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.022747406 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074112979 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.059108114 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03708999 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03438722 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.064966197 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060474383 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03029193 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049620317 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055587828 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0473003 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047500753 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052685662 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.039632973 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028647991 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052853636 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032708586 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.025183188 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044788771 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030247173 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053017013 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03185387 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026043375 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054858231 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047888615 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028410549 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027327374 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039059903 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.079194603 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04211916 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065317018 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05316897 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056461722 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069240822 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045384159 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050385977 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047604733 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029134513 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.044615915 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023046943 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038057639 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.032695885 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092581194 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025801578 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.039882889 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022823637 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063878049 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02241523 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.045639929 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04786707 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046707521 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068101066 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042852102 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054359865 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026767803 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055412834 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047051891 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037785598 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032848038 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047687217 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043023489 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05850391 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.043450854 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05053379 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059530194 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040493536 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074744942 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033028686 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071820219 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058276126 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059975072 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037191957 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155549786 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065145442 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052339255 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0548966 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029340177 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038351055 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048403555 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051818006 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070431228 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045092582 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025687662 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038551793 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043152645 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048130547 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043264805 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031139143 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060465219 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0353774 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.043914672 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040231432 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.019646509 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044699584 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024072026 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045979245 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.041174017 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035996106 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040841655 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058931728 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048772581 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045991519 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.063471344 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.056129135 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.046227949 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.059773367 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053975549 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048607187 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029099034 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028728042 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050282982 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055388545 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.056226125 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.058149575 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044295883 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051127154 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034706058 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040636831 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03973755 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.045301008 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027106203 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.023812563 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022681165 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025037729 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047799604 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047666492 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042569845 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041452687 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.02589564 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.048887733 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047407555 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023461311 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0453385 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028861032 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04262341 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.027921072 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038772979 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.063910422 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.044352497 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045935097 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045210245 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050471103 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.065704556 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027283604 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07086216 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051949432 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027108174 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029418523 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026344423 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028608649 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046826681 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059144428 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059912271 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.024866104 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03568995 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.034173063 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02591973 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.02534691 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.043670063 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.038697056 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057183047 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044510882 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.047482588 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056514324 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028869365 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049683351 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.039340778 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046696078 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050511682 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055992445 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057187896 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.052757923 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053127511 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046153767 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02485811 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.024695649 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026288734 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029495831 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.291566287 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.029599437 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03585888 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058325143 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.041947106 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052352999 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052381316 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036204473 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026178436 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068329339 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.025063309 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069636524 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.028425019 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028938179 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.034557035 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02972273 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031359882 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058475519 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051031572 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043064483 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062142846 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05092427 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158438153 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090689757 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02690545 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138293586 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026358801 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025430036 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027365296 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04878613 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028692534 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055198045 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054902516 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060112554 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040484324 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025363554 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057004913 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.048005037 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048092676 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029979791 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.029788084 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057527032 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044939061 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.020474507 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036012734 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057737013 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027063168 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049564453 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.032010508 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030384782 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157748746 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.621877105 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037186835 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.025586499 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040089517 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077056875 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074219298 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036495073 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049049208 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.062200336 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040975628 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039582805 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051818875 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.152429094 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027266622 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029712867 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.039845289 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04628539 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042372011 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.04820406 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040602189 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.047037758 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.044357179 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031817618 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051726928 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032093417 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039744515 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049888602 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.031657321 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.034651056 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066736639 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.042474952 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.025933645 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027325459 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.056435898 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032138976 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064080889 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023847427 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052666859 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.036645588 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047316797 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.040591115 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054649821 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049192486 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070324516 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059206427 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.037398722 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.059638797 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037222544 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.026995779 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0464368 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.029592046 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027467395 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064368061 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.020304457 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.05955686 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044349578 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.052053914 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047977398 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045531507 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064826103 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043954743 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028234773 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035628352 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.036948889 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.025477723 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.026888199 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.02390171 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.029454614 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047883951 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.023357864 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040940449 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062208158 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03247579 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050075633 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.044388463 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06020958 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041577211 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049502188 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061686361 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033071305 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048303375 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065066491 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064427557 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072480605 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.042254586 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055163788 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064588435 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.026419154 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.020133833 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023878188 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071932744 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.029746087 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.038455228 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030568635 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064647541 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.039162344 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042971911 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.207733743 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029921758 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.035162044 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032752457 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023814539 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.031656175 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048334319 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036685178 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027856707 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041208272 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030450007 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050077301 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047875405 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036376394 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039473259 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028417093 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037493879 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.059516969 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.086621349 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.038033923 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.023860942 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070210582 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050813148 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051078218 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027707443 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028492306 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064668041 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037976299 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050906409 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029872233 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070000854 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06445431 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039887685 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064528155 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023933321 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041428844 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033246285 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.090825255 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.02362505 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037657045 seconds)
  done (took 31.020109355 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.194241353 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.168570946 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.121680036 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.08340882 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.052856859 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.068332082 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.159269573 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.066972226 seconds)
  done (took 2.025514111 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.049527034 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.026138587 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.052909672 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.160385624 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.057301503 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.022615886 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.020878817 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.056462097 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.025059076 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.060750491 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.056433257 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.022426538 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.02531092 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.566190758 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.021403936 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.021140413 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024490066 seconds)
  done (took 2.35869995 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.309966111 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.318513464 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.047264948 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.308433009 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.081248276 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.430322859 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.02985792 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.032357491 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.441269423 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.325815801 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.078587468 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.112266588 seconds)
  done (took 16.559063694 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.029438929 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.028365764 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.028659869 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028289354 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.029008283 seconds)
  done (took 1.185517513 seconds)
done (took 64.028192408 seconds)
(6/9) benchmarking "misc"...
  (1/3) benchmarking "julia"...
    (1/1) benchmarking ("parse", "array")...
    done (took 0.023832285 seconds)
  done (took 1.050621933 seconds)
  (2/3) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.127485357 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.022967335 seconds)
  done (took 1.213921933 seconds)
  (3/3) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034403468 seconds)
  done (took 1.077059743 seconds)
done (took 4.37807218 seconds)
(7/9) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.216078475 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029631866 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.043479121 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.030208732 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.115002793 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.034208914 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.021741306 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.126376232 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.033721848 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.044174239 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.033284223 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.122738924 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.187924119 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.167908379 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048305608 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.043001128 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.041934502 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.03354071 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.049058372 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.128489354 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.037612747 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.031839982 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027141169 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.140547827 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.1133409 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.032528245 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.166402921 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.03065052 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.762163396 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.034229755 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.102662225 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.101904421 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.172898466 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.172640746 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.195235082 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.032381409 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.110551523 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.045663089 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.118275408 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.113766052 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.0332051 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.022108115 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.039888616 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046118827 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.02257225 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.131312756 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.035337357 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.053990986 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.097589005 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.189605996 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.160567868 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.028321075 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.035749829 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.131764915 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.03143044 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.022309712 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.035131199 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032195697 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.033019299 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.041686393 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.028395782 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.037228418 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.031719581 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.114282984 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.025214041 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.089410678 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.022332835 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.046989356 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.039432924 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.174362991 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.096479697 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.032249156 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.036217735 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.031676485 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.13257287 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.042481091 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026361133 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.037437201 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.033241382 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.037248128 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022027536 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.021890048 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.033221794 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.022460506 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.035777114 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031786788 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.03114408 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.08820875 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.034926498 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.076306146 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.033430256 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.275288618 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.089586597 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026824125 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.042066864 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.0451076 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.032117191 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.035363847 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.026514892 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.021534129 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.034254209 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.165806362 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.021470062 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.035957194 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027937228 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.04979232 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032399026 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033664366 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.039678456 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021827739 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.031131401 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.039521293 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.170807022 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.140002411 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.083420806 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023300401 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.173309809 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.023222839 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.044164734 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023063159 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.02271006 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.168783907 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.022200624 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022402696 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.031778873 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.031219852 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022356604 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.169892114 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.101467314 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.030092011 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028745196 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.022392418 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.035314813 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.027691696 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023427797 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.022213907 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.022173062 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.192511708 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.030594007 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027953105 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.034618137 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.02206406 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.032199069 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.032369606 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.243283842 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.03249092 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.108934752 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031686619 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.03269675 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.034850554 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.045373622 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.078396732 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.029959398 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.0337615 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.033798255 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.125292978 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028166436 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.123367235 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024096498 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.045481571 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.252308117 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.093007457 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.036475882 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.241395407 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.022658615 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032150923 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.022381192 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.115844651 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.049472485 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.02954306 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.031127708 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.028328639 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.03014287 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.114943981 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030879715 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.027557557 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.25250254 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.022029241 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.240484612 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.095838725 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.111805682 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.032375787 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030740013 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.090642773 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044229206 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048590873 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.045993991 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.021487079 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.033530914 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.022837136 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.022116776 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.030678941 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.038722268 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.02802507 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.021524514 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.022664786 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.032714656 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.032846398 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.032305703 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.029245216 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.035404372 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.50634413 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027474424 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028766815 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.026317684 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.035212103 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.296899259 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.035586091 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.09128911 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039514535 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.03593356 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.031169361 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.023042971 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.034340901 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.101312948 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.022319135 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.035356112 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.096936889 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.022425153 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.090329781 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.022976685 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.022691744 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.039787009 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.034762421 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.033437884 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.029086413 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022557984 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.031607763 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.036543035 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.023078438 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.039091724 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.03244071 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.032542076 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.029541886 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.02217824 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.039367817 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.10269153 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022643814 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.170662375 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.099470729 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093220584 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.022772895 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.036550266 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.035456664 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.022409242 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.123322147 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.02308012 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.083617865 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.108391625 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035835086 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.035685406 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.034589935 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.023551865 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.094830312 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.039013844 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.032915566 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027642247 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.091913249 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03449851 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.110786792 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.226874133 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.030106438 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.509096581 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.041932146 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.03773159 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.023323327 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.02928419 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.040742358 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032428689 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.02354128 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.035119355 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.100867439 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027541243 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.022546012 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.022532945 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022670767 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.021806626 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042399063 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.02216584 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.031140269 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029586354 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.027890413 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.035696277 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.040286449 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.02916935 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.030995004 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022618735 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.021841826 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029880357 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036698172 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.096602037 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.110948898 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.028380521 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.034549089 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034462812 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031899382 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.090529407 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.031231986 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.131634866 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.021896624 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.031802217 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043738912 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.022391951 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.032629445 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.021558667 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02825499 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.03684891 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.030142545 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.023336415 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.031564761 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022848287 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022428877 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.022422918 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.023155659 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.031187688 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.023930663 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.022381151 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.022512632 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.027362901 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.031283793 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.030491532 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.032830401 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.032399301 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.021917284 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.034166169 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.971041513 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.023715951 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.023615051 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.039069313 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028830826 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028723592 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.023397534 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.024445107 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022396384 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.04120532 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.02284635 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.034391326 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.022951978 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.033220686 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.022490449 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048994186 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.021958255 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.034484974 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.022820673 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.031110512 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.033214162 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.031442259 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.027794839 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.032027141 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.03920239 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.108582186 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.033249483 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.038968566 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.035313667 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.032615225 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.021946576 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.021665852 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.292952191 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.088628711 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040014484 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038095393 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.022937459 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.032339009 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.022741216 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.023093163 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.021593235 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047238816 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.021674951 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.031687642 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.022781877 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.022000949 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.022338069 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.081996146 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.029986027 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.022383104 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.029714297 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.033090897 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.028092092 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.035619369 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.022782236 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.055398663 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.023026145 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022197885 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036344103 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022192027 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.035334647 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.036435605 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032317141 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.06042308 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.040115674 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.03007477 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.102274119 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.022139263 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.022318499 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.035978353 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.037592651 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.022683518 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034919275 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037026259 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033006893 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.24979981 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.051542005 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.024261619 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.022521666 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028390704 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034633819 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.031700771 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.087929322 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035100061 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.028173872 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.027755267 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.025790692 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.036317262 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.029722781 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.021787815 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.022531431 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.045031301 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.045787907 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.023746261 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02558201 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.030932852 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.022551173 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.022478949 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.765561073 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.026750615 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.031935517 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.280627233 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.023321651 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.028129201 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.030063396 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.022069173 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.96726685 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023086927 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.032278336 seconds)
  done (took 28.063523206 seconds)
done (took 29.101271166 seconds)
(8/9) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.190129253 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.163802854 seconds)
  done (took 1.457880819 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.024461172 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.02481352 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.073097253 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.025282409 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.064983977 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.12742744 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.116117441 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.024516664 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.02426748 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025150243 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.025359518 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025784268 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025491304 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.025249618 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.069167152 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.024306987 seconds)
  done (took 1.843784641 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.07735073 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.305186815 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.074071593 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.025057761 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.073154634 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.025514696 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.025719045 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.025132372 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.025126436 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.025004994 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.078416613 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.111586998 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.025062222 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.025180601 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.025422074 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.02491321 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.024866289 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.024794983 seconds)
  done (took 2.136291426 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.055319325 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.024412249 seconds)
  done (took 1.205124799 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.218307747 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.056486659 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.107888186 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.279784198 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.066622849 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.544995785 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.068543341 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.067690941 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.061083874 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.068811788 seconds)
  done (took 2.657392453 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.056730811 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.052750314 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.241296272 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.052726792 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.063281389 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.027606617 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.035533399 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.025937822 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.037128549 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.032493431 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.07410593 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.029712932 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.033500673 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.075656442 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.025986044 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058389172 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.027298974 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.025672367 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.036569224 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.026052013 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.024382147 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.024935621 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.126468753 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.024881851 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.025896248 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.024342659 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.024390453 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.031080269 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028991344 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.024091624 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.024454284 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.024204503 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.024456081 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.035933376 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.025155706 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.024056796 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024973253 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.024648572 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.024151831 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024509257 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.024259152 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.02413564 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025047036 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.024354484 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029032693 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.027880225 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.024758522 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.026036235 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.02919896 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.024286133 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.025087339 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.024674922 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.0245372 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.024165064 seconds)
  done (took 3.17750101 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.08050345 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.07164718 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025979366 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079837389 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.075693417 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0255731 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.092531022 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071703044 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.08881859 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0251897 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024769159 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.022712785 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.024627957 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.028060774 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081882887 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.072305942 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025060225 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024862093 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.073775433 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.073939842 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022948678 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.11101019 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.082889533 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.069030681 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022399313 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025524463 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022640951 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.022741672 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.022002665 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.023471791 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022900208 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.024394845 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.032264922 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.022526671 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022913679 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022625327 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022699686 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.023692918 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.02478666 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.023840438 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.022555829 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022898419 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022848163 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022734973 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024963839 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022846189 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.022205691 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.023254372 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.022328145 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023069346 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02277401 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022883748 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.022735871 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.023073843 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.023997766 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.023943301 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.023651223 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.0228407 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022814667 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024823153 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.024537364 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.025339614 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.024014139 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024760285 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.02289398 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02295793 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.024640216 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.028858989 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022930318 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.022773541 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022582729 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022878814 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.022831877 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.022192421 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.02296902 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.022990765 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.022663601 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022491461 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.025216396 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.02263726 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022608167 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.022103563 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022924262 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02288048 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022787698 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022641777 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.022303149 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.023599658 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023005478 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022721015 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022785002 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022841132 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022487513 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.022244385 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.022835758 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.023441919 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.022819379 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022872587 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.022642114 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.022991702 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022949985 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.02258526 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.022740485 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022983186 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022928507 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.023207286 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.022504013 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.025577555 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022973679 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022760554 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.023122244 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.02598415 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023102565 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.022381713 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.025309327 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.022896821 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022981687 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.026405628 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023645077 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.02340279 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022993033 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.022744291 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02332968 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.022498163 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022945515 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022590293 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02267271 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.022419786 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023507594 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.022788973 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02263652 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022654423 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.022993521 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.025876369 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023267309 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.023270774 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.023295997 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023182803 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.023120023 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023083001 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.023300756 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.022963661 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022739564 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022779422 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.025812311 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022937645 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.022893723 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022857178 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.025911524 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022783384 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.025814019 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.022832777 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02257781 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.024505562 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.025125574 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.023179623 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.026378836 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023177824 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022797121 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022551491 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022836211 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.022220761 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.023059206 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022665997 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022557404 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.02247241 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.023118079 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.022876522 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.022694744 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.022648683 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.023211589 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023145598 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022871042 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.02683968 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.02468472 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.022515767 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.022650865 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.023518594 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023107523 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.022593687 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.022903965 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023059286 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.030095079 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023142825 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.026430923 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.02257311 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.022596254 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.02312367 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.023557173 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.025346577 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.025901444 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.027363199 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023139476 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02265127 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.022200016 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022844986 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022644311 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.022055249 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022804325 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.022531728 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.028046851 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022258105 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.02348039 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022537142 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.023834608 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023129494 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023101898 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.028709746 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023707149 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022963691 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.022403425 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022857734 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.022855462 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.026153076 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.022283685 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023292846 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023135962 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.022926781 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.02333518 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023202404 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023013349 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022876951 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.022840345 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.02263086 seconds)
  done (took 7.218677687 seconds)
done (took 20.897001984 seconds)
(9/9) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.102025418 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.030670166 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.075080971 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.169222744 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.030604619 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.034757213 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.04016115 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.0633098 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.128751723 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.055019076 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.100299392 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.050326146 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.044988441 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.109675422 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.032387141 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.026153672 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.08614045 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.048518298 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.082508351 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.068098014 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.04464728 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.053170115 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.083409161 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.053261223 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.06912284 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.106828712 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.058275686 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.084628894 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.025740695 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.058411369 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.033339249 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.028684703 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.038648718 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.05536059 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.040895478 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.033352589 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.07731244 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.033728044 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.050559801 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.067519235 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.045196753 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.054876807 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.035941426 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.073817379 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.061543681 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.068277746 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.045454008 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.075662428 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.072790755 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.036804624 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.046526247 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.05660765 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.031231884 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.070939683 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.079490302 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.073876617 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.062637201 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.078437288 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.030593937 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.070994649 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 0.021300552 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.065176149 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.032989423 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.047806512 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041673127 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.071421887 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.071813024 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.071524035 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.029969079 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.056933072 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.065317554 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.057877489 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.062010677 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.025857352 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.0740746 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.071515959 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.072190529 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.029632346 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.072049523 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.073640079 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.04560234 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.032328364 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.057562356 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.073292414 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.022121811 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.022901278 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.029935797 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.022558226 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.063983281 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.028828124 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.021821488 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.065467506 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.07080931 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.025944232 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033165785 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.05724022 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.025866676 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.071425792 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.079987345 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.031383346 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.048334266 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.053123612 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.054285412 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.064605563 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.065469012 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.05240964 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.033074732 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.031254754 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.04075861 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.023124572 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.03225573 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.056761034 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.058700562 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.064340557 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 0.022355451 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.025240661 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.030052733 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.021892047 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.028941779 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.022504282 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.021543124 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.021447768 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.032887771 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.032834775 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.067849667 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057043625 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03839853 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.033981567 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.041753879 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.021779679 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.031446562 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.064622714 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.056202184 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.026621514 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.03403008 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.05228826 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 0.022496554 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.062041147 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 0.022299681 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.046233923 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.022354849 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.025463131 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.068193238 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031843585 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.029069119 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.055874101 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.055956631 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033388339 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.026222652 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.022225224 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.026379549 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.050228928 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.025989737 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.057801037 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.049679863 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.059935386 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 0.025825253 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.032761376 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.022103016 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.02568955 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.055323174 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.065366903 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.064117762 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 0.029615059 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.060121017 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.02585869 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.022479397 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.02987381 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033570981 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.041381738 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.036905751 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.02765481 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.04884513 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.05905344 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.074389386 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.034047887 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.034529875 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.031248702 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.042896076 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.021744642 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.058927331 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.058329713 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.036689774 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.030837998 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.058336185 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.057067427 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.027305663 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.030150423 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.062155412 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.022251561 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 0.031463973 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.027836768 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.031631114 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.043200791 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.025800459 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.021790501 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.022851384 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.026115055 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.079095855 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.022901647 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.025597431 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.025377715 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 0.022091456 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.022081827 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.030324802 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.022269242 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 0.022038945 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.034129464 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.067186724 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.031476822 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.026725886 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.025815398 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.026470124 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.058556579 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.069984117 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 0.026185513 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 0.025936328 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.025924695 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.035255839 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.026803203 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.030203712 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.022432432 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.022422411 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.026498971 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.066242482 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 0.021699725 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.022252132 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.034113773 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 0.023071357 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.025917257 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.023600899 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 0.030366423 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.058125907 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.022322521 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.030107223 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.031260532 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.022867176 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.02591529 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.021546576 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.025912129 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.025837681 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.03301907 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.032062019 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033585945 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 0.026016879 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.025817845 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.022686033 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.056353509 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.049153164 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.025822638 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.031444593 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 0.022298749 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.027259254 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.062515049 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.040273065 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.058722673 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 0.02237886 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.056230307 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.022110591 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.021526876 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.02219502 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.025449273 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 0.022198214 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.062296375 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.046743433 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.02243151 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 0.031285761 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.033019303 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.02576322 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 0.02676076 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.057733635 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.025823714 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.052492008 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 0.022128419 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.073155873 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.038515173 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.029734137 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 0.028922003 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.022822346 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.034405516 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.029870306 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.022637365 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.022324996 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.022123617 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.031387151 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 0.025856249 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.041398963 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.022363804 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.022847442 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 0.035448011 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 0.022433285 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.026431921 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.059675487 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.022537578 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.05716256 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.022433264 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 0.026670615 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.02240749 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.026248437 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.034252118 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 0.035383322 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.022335994 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.025879359 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 0.030163788 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.06497435 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.031055444 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.022417518 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.0254355 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.034153753 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 0.026440133 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.027744429 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.025606709 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.025918262 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.021954755 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.040614813 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.034337696 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.022585232 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.025819397 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 0.021454139 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.02658536 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.050257192 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.031698795 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.02934494 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.042505455 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.021599491 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.067964803 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.022852127 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.026862233 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.022993119 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.050400202 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.025838641 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.025984804 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 0.02553406 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0336897 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.026183072 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.021495217 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.028744183 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.022640778 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.081152392 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.02261116 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.04740985 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 0.022287235 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.022144201 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.031009347 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.021706763 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.030187025 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.039033331 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 0.027324317 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.026149526 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.022400707 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.022796557 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.025721346 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 0.027684346 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.032833951 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.028087873 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.045948075 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.02271878 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.02587185 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 0.02608636 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.021757153 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.026452117 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.033279864 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.02610613 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.025718947 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.023419328 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.022719445 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 0.022841443 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.060419466 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.028861164 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 0.028050471 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.02562373 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 0.023358676 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 0.022240817 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 0.027677419 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.025753274 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.065762386 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.027961923 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.027534359 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.027811093 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 0.022206069 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.027637326 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.038859699 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 0.022452916 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.023090105 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.022798924 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.022624995 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 0.022982789 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.021646625 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 0.027255812 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.022106598 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.022711519 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.031319084 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.062052484 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.021759667 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.021822494 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.023312617 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.051302679 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.03060179 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 0.022398597 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.048844548 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.034342073 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.027763914 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.034070695 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.033463724 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 0.021913939 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.022246778 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.02230308 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 0.023350291 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.022751099 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 0.022133438 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 0.023164804 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.026277887 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.031228841 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 0.034617982 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.026310757 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.022741618 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.030777473 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.030563693 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.022759246 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.031560541 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.022234491 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 0.022277442 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.025568025 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.028092596 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.027545151 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 0.022241115 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 0.031645049 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.026453998 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.030510938 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 0.02623248 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.029844837 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.034431017 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.026842668 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.02271607 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.027422582 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.145260776 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.025836722 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.022638784 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.025766281 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.030206361 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.021699137 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.02229648 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.0259707 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.034062274 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.030154466 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.030310124 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.023106555 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 0.021855364 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.023129478 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.025986331 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.031202908 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.029492706 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.023507629 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028414129 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.027606681 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 0.025933919 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.027657202 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.071326645 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.022127499 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 0.022457543 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 0.022257535 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.027451382 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.050804849 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.027524311 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.021848327 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.030224372 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.030705432 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.025889857 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.041682836 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.026003698 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.065044328 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.026152106 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.03151703 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.022498899 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.022633284 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.022313219 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.025748563 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 0.031552462 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.031444471 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.033486059 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.027026161 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.026730457 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 0.028013514 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.022414872 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 0.023239778 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 0.022796088 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.022681198 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.022014139 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.028321736 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 0.022970637 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 0.022190751 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.022321639 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.023123165 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.026753727 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.026910581 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.034972258 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.033415796 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 0.026488986 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.022863323 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.021887989 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.023650002 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.021836267 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.02301162 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.02316552 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.029166635 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 0.022839908 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.021827742 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.022985424 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 0.02801165 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.030306818 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.031716637 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.022997385 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.022782 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.025946369 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.025881199 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.021745691 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.030260236 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 0.022722979 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 0.031660197 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.034467442 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.022689497 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.026091648 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.025705256 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.022226317 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.026050567 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033872192 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.026985749 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.028247225 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.022532653 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.030235847 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 0.022298249 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 0.026999186 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 0.023189438 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.034452421 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.022110312 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 0.022527574 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.030895734 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.023139099 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.022187925 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.023426862 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.022624231 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.026302378 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.025838632 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.022562273 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.022020003 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.026087818 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.021888157 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 0.028959163 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.022357489 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.023120652 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.023162853 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 0.025770515 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.022427963 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.022487553 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.026804001 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 0.022726321 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.030580403 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.026318976 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.034906166 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.023041007 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 0.027145316 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.031689671 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.026933665 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.026632529 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 0.022416311 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.034608417 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 0.026008349 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 0.026992761 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.022361621 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.030880659 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.02686879 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.026159658 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.022636728 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.030131875 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.023147712 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.026648069 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.027005655 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.025898469 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.030943207 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.026160152 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.025894278 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 0.02307446 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.030424249 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.026263968 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 0.030814134 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.023119151 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.022553545 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.033552785 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 0.029112682 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.026227407 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 0.026788204 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.022760456 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.022705791 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.034501093 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 0.026290801 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.028775462 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 0.03140732 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 0.030485795 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 0.022619373 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.023590876 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028275298 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 0.022492667 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.02287696 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.02688008 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.025991657 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.034176157 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.028793624 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.024043171 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.02845308 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.030795082 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.025963937 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.023760959 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.022168195 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 0.022405596 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.026570817 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.023267984 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.022760402 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.031545411 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.022658974 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.029041474 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.025792162 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 0.029781744 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.025952926 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.028336283 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.021863178 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.029207615 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.022831802 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.030527585 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.027144521 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 0.028086145 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.030326037 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.022478971 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.029425265 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.021889705 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 0.022504785 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.02613555 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.030599789 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.022711356 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.033815405 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 0.027777702 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.0231674 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.031563588 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.022744338 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 0.026968423 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.023543276 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 0.022537657 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.139723938 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.029756405 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.025405803 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.024097909 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.023252445 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 0.025147693 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.027454724 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 0.024500197 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 0.03320232 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.034555379 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.024771787 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.022907255 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.022629237 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.027678468 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.02410609 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.031411846 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.032287205 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.030212804 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.027036761 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.024016575 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.023272338 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.026847438 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.027354827 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.026799666 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.027327896 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.023838138 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.028510011 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.034479282 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.02294565 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.022890109 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.026673188 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.023085063 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.023740397 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.023098173 seconds)
done (took 24.832564876 seconds)
RUNNING BENCHMARKS...
(1/9) benchmarking "broadcast"...
  (1/4) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.202895811 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.161956947 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.170061896 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.16545494 seconds)
  done (took 25.86877911 seconds)
  (2/4) benchmarking "typeargs"...
    (1/3) benchmarking ("array", 5)...
    done (took 1.649892184 seconds)
    (2/3) benchmarking ("array", 3)...
    done (took 1.679698214 seconds)
    (3/3) benchmarking ("array", 10)...
    done (took 1.933212404 seconds)
  done (took 6.433123712 seconds)
  (3/4) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.293563798 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.165807203 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.166001199 seconds)
  done (took 18.834228993 seconds)
  (4/4) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.578265147 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.613874993 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.307045292 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.253583056 seconds)
  done (took 6.920102658 seconds)
done (took 59.294989459 seconds)
(2/9) benchmarking "io"...
  (1/1) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.762203219 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 5.789051156 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.202605547 seconds)
  done (took 18.919378387 seconds)
done (took 20.088407523 seconds)
(3/9) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.166236826 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.739553538 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.226652836 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.325616365 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.217998451 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.226271795 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.183463812 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.195225793 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.164536798 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.178250922 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.18195565 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.174885292 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.051210561 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.176023474 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.194242958 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.236699148 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.765283133 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.18778436 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.235532022 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.711144115 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.6409159 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.189148752 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.1881093 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.253237287 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.371566697 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.196397784 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.291677252 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.174324699 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.583751327 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.179781636 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.191261245 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.177058566 seconds)
  done (took 181.139728658 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.165912291 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.036939858 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.093564434 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.210310109 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.399956074 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.414756595 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.362220404 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.550726874 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.163470701 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.186684691 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.929709903 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.164608805 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.966859066 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.131985355 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.207883182 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.245121388 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.793668198 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.877265798 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.268733085 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.395880383 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.186555461 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.752188084 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.725681694 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.81723244 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.207437947 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.243145082 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.186580948 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.190245392 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.957467357 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.748805713 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.189696112 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.21273204 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.299714781 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.046224397 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.172173772 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.183502078 seconds)
  done (took 154.860744075 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.325723702 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.171859503 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.228186656 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.442905047 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.148655546 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.096390438 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.188502177 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.164878804 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.165571211 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.170053619 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.16535673 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.236077291 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.16482797 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.550657655 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.261411956 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.164956327 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.165984607 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.393780749 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.199735276 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.164025731 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.164710316 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.243585464 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.53769029 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.45475846 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.191072463 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.167973632 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.440515687 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.198158318 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.166434852 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.162411129 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.437676054 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.200972283 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.242560175 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.437772148 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.19903434 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.25501004 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.236526154 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.113503217 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.269973146 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.223448203 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.259761437 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.247624944 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.164340325 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.58334342 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.282416725 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.172123012 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.235422945 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.467054906 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.794125052 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.168646651 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.165036172 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.164622146 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.175878626 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.166967084 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.670869314 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.191873822 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.194384816 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.264555406 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.196429427 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.165377819 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.164981771 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.165013322 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.168116723 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.170078906 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.406665374 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.236956687 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.014013693 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.548522969 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.223253082 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.191600144 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.163656587 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.164256619 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.231288256 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.446405193 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.191366279 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.166575895 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.249224291 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.166085848 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.166190799 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.364195829 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.27624417 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.165473477 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.431352041 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.188858442 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.164572774 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.302362465 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.405264435 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.19101938 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.180130701 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.40347895 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.18718947 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.164295656 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.170498767 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.279126925 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.166148163 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.178123602 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.524509434 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.188858378 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.164975603 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.073755922 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.426359556 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.163265335 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.376173282 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.420011714 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.686204542 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.187949541 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.164589422 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.223135874 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.167509441 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.174399141 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.172514959 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.165800094 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.166488825 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.175356287 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.166477449 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.165384064 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.165518744 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.184425846 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.167294083 seconds)
  done (took 339.41657007 seconds)
done (took 677.916895856 seconds)
(4/9) benchmarking "problem"...
  (1/1) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.179893566 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.203545675 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.165592325 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.17338308 seconds)
  done (took 25.887913401 seconds)
done (took 27.052695629 seconds)
(5/9) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.165137112 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.166654876 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.163859085 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.167333246 seconds)
  done (took 25.827102092 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.463213592 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.463128004 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.484966906 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.456685203 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.40883427 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.408790587 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.46149616 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.461028161 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.408839533 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.438531198 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.460803893 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.454098365 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.45555006 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.485901283 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.485753339 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.445934935 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.455600335 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.463843019 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.40784382 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.484677961 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.43689836 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.449349666 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.836782692 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.842688702 seconds)
  done (took 36.787224556 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.379304837 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.533309114 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.333448314 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.547894831 seconds)
  done (took 6.958491397 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.215894832 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.459852921 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.486768818 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.504061264 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.399396598 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.265963269 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.486479754 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.321628125 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.293805135 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.300033834 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.733518847 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.296549184 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.331947265 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.500308995 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.258893071 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.207692468 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.200841657 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.291718413 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.434142744 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.327954481 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.396919985 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.488584869 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.399925626 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.486753006 seconds)
  done (took 34.25624208 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.00216448 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.758118657 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.072101378 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.160190868 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.396675767 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.232479718 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.026190522 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.033743288 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.315713003 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.053337605 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.87726771 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.031193086 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.160872824 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.064562456 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.000303861 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.260587731 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.255969939 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.037335389 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.04959394 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.048951453 seconds)
  done (took 40.008150841 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.166894052 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.524835135 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.454306015 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.440907116 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.166451759 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.9753335 seconds)
  done (took 23.894752355 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.127731806 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.282142725 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.408540021 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.355929413 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.287924481 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.272921696 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.432385114 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.319892889 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.715594846 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.446171071 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.013399472 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.499919834 seconds)
  done (took 20.327934295 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.167893998 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.192951836 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.165507028 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.306277853 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.872058527 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.966192992 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.044764555 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.165390604 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.105769022 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.320581013 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.952419692 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.292010612 seconds)
  done (took 39.719834671 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.396857262 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.408521042 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.385224783 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.012342788 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.484019816 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.141695712 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.149571046 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.763211349 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 2.358209589 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.474389397 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.550739473 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.133399266 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161683004 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.112525529 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.10684341 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.42917377 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.020384416 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.053157473 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.37784688 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.184765303 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092774374 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.228736418 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.1741133 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.559257068 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.464986828 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168745546 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.394904619 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.331734339 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.166007397 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.411908022 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.546255084 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.474233283 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.384023081 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.432404333 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.458018213 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.184534088 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.173108587 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 4.847429347 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.609960777 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.455198875 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.277035572 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.277007409 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.290656153 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.111883462 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.450519303 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.964040068 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.172065588 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.191026932 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126132999 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.86135886 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.492601788 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.706030801 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.451760984 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.748087165 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.328468666 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.428784336 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.963001041 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.571507231 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.372006371 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 2.802956712 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.236645906 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.170600764 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.395256358 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.112463166 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.945149992 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.333192623 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.584120337 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.059832351 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.870459239 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.428808875 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.493346165 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.900898648 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.232249958 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.212380731 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.608254575 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.141969384 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.444449014 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.16733456 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.374451915 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1824402 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.112969071 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.296235599 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.544986099 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095482084 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.411518119 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.974279712 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.167474999 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.113719385 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.17659313 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 2.823619974 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.472789369 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.212382607 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.227069185 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.416048142 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.410065468 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.178834419 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.976520274 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.477593536 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.1133506 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.744645088 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.570900519 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.157769279 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.583520885 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.657945413 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.43253929 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.309693317 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.589202107 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.206641531 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.43338948 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.759644318 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.959824057 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.509509336 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.498436073 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.475690175 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.165811837 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.057305275 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.630553669 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.839052348 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.041463792 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.166125783 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.116314411 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.440740334 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.387651166 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.578082905 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.334815365 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168156502 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 1.956797718 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.167298128 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.154665969 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.16644887 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.329618458 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.470034421 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.19570997 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.326348314 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.176840684 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 1.948572825 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.47458508 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 5.56264296 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.517055448 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.377014777 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.113244984 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.016368739 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.103263509 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.017613516 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.440594143 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.408406452 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.484420093 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.729135143 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.321915805 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.176716714 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.975515601 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.320544179 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.176319687 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.644975441 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.569492904 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.56356734 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.725805446 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.451700256 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.166238872 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.382349143 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.57182336 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.427486671 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.819425766 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.270719126 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.971269681 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.412931403 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.408811352 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.166881983 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.114127106 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.396196786 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.409560265 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.461401731 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.43153869 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.822776469 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.522128151 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.528892819 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.398064219 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.491277913 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.845893883 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.810985017 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.375021759 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 4.873223472 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.158603303 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.831946063 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.834337367 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.521558049 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.286901672 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.634021188 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.839684818 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.80930669 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.209244995 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.44682319 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.116488287 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.945125232 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.502490322 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.124722866 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.504002183 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.215003094 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.276722837 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.556717558 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.213076364 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.939733676 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.385919654 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.599668053 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.539713764 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.485301742 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.127776823 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.73978015 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.085901893 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.626368355 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.248390748 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 3.007098303 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.445676564 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.233628234 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.167132561 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.483650008 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.339233577 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.743879363 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.570196376 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.096930049 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.919205625 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.958739963 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.112612824 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.173941494 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.445116137 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441238407 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 2.802409175 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.191148176 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.55702904 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.408544807 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.477757803 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.16671643 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17225306 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.870275308 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.042014782 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.873182535 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.474820314 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.135224694 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.629755874 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.236556242 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.207170886 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.28122111 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.213682478 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.24505394 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.555891533 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.014535249 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.384431285 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.700667765 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.890427795 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.796875495 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.418088054 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.167421797 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.444143522 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183439813 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.576095171 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.722489984 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.130937002 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.167439094 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.425714059 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.694962025 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.921523637 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.331449489 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.861840963 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.415105743 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.386126622 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.432159908 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.462793223 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.367888995 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.11770457 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.956183394 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.234755632 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.430870371 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.162006322 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.442364166 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.69560407 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.814235326 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.700017194 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.488948588 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.9146538 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.511603685 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.434519661 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.299173771 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.366795994 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.676406207 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.556661397 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.126427015 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.294707095 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.113999919 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.378711073 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.541997517 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.377726045 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.443426331 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.149514496 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.456694517 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.451554215 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.81590372 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.251282204 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.459729915 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.993442676 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.485742628 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.166000977 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.74415553 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.532421243 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.172256399 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 4.854476119 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.982695685 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.517453206 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.959949728 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.261537783 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.261639549 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388142119 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.004916958 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.38521783 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.293043779 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468356259 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.429124948 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.689182326 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.61026256 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.433629391 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.166043667 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.443724663 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.597677372 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.60293768 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.016654479 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.583298808 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.167268811 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.397513966 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.968074907 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.16816799 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.228402324 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429596811 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.147928439 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.397073965 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.372150778 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.216211848 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.638120328 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.127187087 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.38349383 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.104051033 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.175421135 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.637904961 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.717666592 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.153064533 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.910663907 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.187088939 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.125879324 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.277851238 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 2.996665691 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.650959 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.183615373 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.980816766 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.948889819 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.894335292 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.535508799 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 2.835726145 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.267744254 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.963630935 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.436297005 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.3978916 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.295312929 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122125007 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.67547606 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301455272 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.871503791 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.279628886 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.38452544 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.868302873 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.664072929 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.588467104 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.466121611 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.585554654 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.440375651 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.27991046 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.112170435 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.166241895 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.426544166 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.022598897 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.17934196 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.42912083 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.447888753 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 5.558700937 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.618610712 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.612464157 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.988824497 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.515250506 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.61619044 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.368068691 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.502614015 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.455727985 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.80390549 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.594352559 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.399484923 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.442121377 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.434460117 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.968703689 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.89737971 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.43251256 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 1.962388667 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122912979 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.390903536 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.169455644 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.488098178 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.833764202 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.43493591 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 2.81507229 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.656030844 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.417190932 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.600791979 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.178936879 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.76774234 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.38434586 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.39963079 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.166715809 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.678909373 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.435724693 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.261124169 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.178731459 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.949411426 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.113741076 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.398509718 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.599708928 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 1.99667386 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.777047519 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.819218642 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.607334803 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.572163745 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.638374111 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.004838096 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.113508377 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.378268018 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.22438391 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.819183739 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.697191591 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.332141155 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.598585955 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.384639315 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.123335209 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513568497 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.948059709 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.369441796 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.830478346 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.445684613 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488231482 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.393723989 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.455975821 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.251075199 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.199192715 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.446539654 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.115657399 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.603994578 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.584731363 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.511600018 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.57464095 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.167474193 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.64086881 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.447001061 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.869220233 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.235413354 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.787927505 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.747112389 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.372871465 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.859354477 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.292284215 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.976680904 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.06987151 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.624651481 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.400800376 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.167006318 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.168303657 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.396794906 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.399416927 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.378963235 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.468133088 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.912276024 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.958032554 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.288898039 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.202863492 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.1664503 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.156655183 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 2.412325677 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.60453277 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.167742704 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.447311105 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.811959111 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.38543146 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42635558 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.099788429 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.626059807 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.277098635 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.564827834 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.169620057 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.494484885 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.479487167 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.167221825 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.442405825 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.189475244 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.962746606 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.115105598 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.156866274 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.169334949 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.368778865 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.211367013 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.937439921 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.340931491 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.176002114 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.172402396 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.136339738 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.114021011 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.16891763 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.017380604 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185619432 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.170800433 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.443552151 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.820954996 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.234690737 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.170685649 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.230565842 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.17144988 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.399545288 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.692576814 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.331809264 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.873162526 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.386234961 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.174638723 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.684249264 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.634212024 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.640986359 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.323595045 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.679708302 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.427701924 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.828082655 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.583254597 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204290076 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.409863797 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.860701413 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.548994996 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.446165262 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.211857301 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.399935944 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.583378719 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.490546642 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.383718164 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.492759938 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.014179161 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.749656739 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.137316852 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.178722033 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.086068568 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.439195084 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.005122724 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.167899395 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.046357816 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.482824843 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.370580426 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.71046724 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.30532486 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.884196324 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.433337077 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.98489659 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.530552403 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.208989171 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.169806351 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.376818148 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.597792384 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.115457919 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.383307394 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.09122533 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.399106758 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.487408022 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.115419321 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.387626209 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.550513548 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.112387187 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.156055932 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.168045787 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.474741259 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.121433931 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.594668917 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.150615535 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.850653698 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.716103842 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.476039626 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.174482944 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.180932313 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.97202666 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.170969551 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.16841127 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.494972313 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.325955536 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.325204413 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.437259016 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.908422282 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.365745645 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.580866482 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.378863671 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.234500669 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.499297684 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.503956797 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.747125492 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.832153444 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.525396828 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.381457815 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.227524879 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.084899955 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.33399581 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.236597697 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.230857949 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.546091 seconds)
  done (took 1753.445529764 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.241947867 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.279709122 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.236904713 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.200703732 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.197118878 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.200323702 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.261010187 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.198783155 seconds)
  done (took 50.985116041 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.735240436 seconds)
    (2/17) benchmarking "4467"...
    done (took 1.517439724 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 3.218519813 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.246147102 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.188240173 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 3.054865503 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.234977762 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.144491826 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.260232144 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.960202177 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.261481707 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 3.588963553 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.238470436 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.191818341 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.30209422 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.244583769 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.169437906 seconds)
  done (took 73.730245614 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.222113075 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.692889951 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.175761677 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.612131249 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.227458183 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.457767109 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.171356925 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.169525807 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.184077051 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 6.472182882 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.20554704 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.212485353 seconds)
  done (took 79.993058556 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.215443636 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.213680317 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.213944965 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.211690869 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.214893962 seconds)
  done (took 7.238384461 seconds)
done (took 2194.337945008 seconds)
(6/9) benchmarking "misc"...
  (1/3) benchmarking "julia"...
    (1/1) benchmarking ("parse", "array")...
    done (took 6.169050305 seconds)
  done (took 7.33766323 seconds)
  (2/3) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.453001122 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.607403897 seconds)
  done (took 4.22930842 seconds)
  (3/3) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.338819373 seconds)
  done (took 2.520195008 seconds)
done (took 15.256706708 seconds)
(7/9) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.393295398 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.380245186 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.173619154 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.351721538 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.298153666 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 1.856404282 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.390823439 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.2713024 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 1.262018112 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 6.168123579 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.208856744 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.410702723 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.446242364 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.480442649 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.000255334 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.013725765 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.30251577 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 1.85628888 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.460950673 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.408811098 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.199270831 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.203806487 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.236839704 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.46962219 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.315651426 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 1.861548378 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 1.399098937 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.2626515 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 1.981689057 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.205934454 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.894954064 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.241061937 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.324033494 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.916195362 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 1.781877648 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.203483094 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.259029977 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.496562445 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.226272486 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.455404768 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 1.911776525 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.263606227 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.075275522 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.914858822 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.446264163 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 5.571851261 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 1.962821805 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 6.181060362 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.305359368 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.435005471 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.347476847 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.276442847 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 1.261437274 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.169150257 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.239737145 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.424393188 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.187029024 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.953529395 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.240478824 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.418130144 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.351962183 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.441115444 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.18230374 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.573489621 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.24986005 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.253851551 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.290896808 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 8.373781056 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.383218378 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.593253566 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.142511466 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.210299618 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 1.396625298 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.204532833 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.574790862 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.710558326 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.200585886 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 2.320579601 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 1.855676995 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 8.031139387 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.752531791 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.411878563 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.256507257 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.558853484 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 1.332621436 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.19695737 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.203054408 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.206695597 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.763544116 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.241443534 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.168038593 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.204931425 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.474510098 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 1.260047156 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 1.969104486 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.170399929 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 1.338716556 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 8.123950326 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 1.690501443 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.294353828 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 1.87828562 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.173045806 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.336314751 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.418248568 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.262346233 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.156718775 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.083874206 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 1.882064784 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 1.986934483 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.494141097 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 1.994364149 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.465600963 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.56064026 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.690306859 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 8.488354678 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 8.0924362 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 6.470797479 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.175519574 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.209748638 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.771358415 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.876039985 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.504114234 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.291803927 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.614754934 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.197898443 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.203386164 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.337541247 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.405836606 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.843819123 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.208185793 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.302024371 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.169706812 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 1.92683032 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.26313479 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.446456301 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.468643304 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.531867244 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.173858775 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 1.845124323 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.319848814 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 6.172644519 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.572395045 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 1.851232044 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 1.849138132 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.171237449 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 1.845518249 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.407796551 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 1.431313962 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 1.844935771 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 1.945702017 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.244390407 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.176496769 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.231724332 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.183880988 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.228198951 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.197890758 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.452810989 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.382707284 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.169432844 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 4.147536119 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.171838421 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.348586848 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.00676255 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.17589094 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.619921034 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.206543025 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.344992203 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.620352613 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.175263036 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.329296304 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.289538235 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.322979614 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.264642069 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.429688022 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 1.440594617 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.334042749 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.168219628 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.45060602 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.434940572 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.335341383 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.397592217 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.20864081 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 1.396670969 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.260206085 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.199903935 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 1.993089066 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.424589139 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.512959078 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 1.336864019 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.649859706 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.359806092 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 1.854811243 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.007619963 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.319399723 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.613729893 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.305480544 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.855511568 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 1.84797596 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.823962334 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.272568363 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 1.964093468 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 1.550721842 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.302527954 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.235910894 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.239126804 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 1.873500704 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.174418177 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.17089679 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.265862975 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.208353604 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.125545541 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 1.997977085 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.662417646 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 1.882177427 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.844618125 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.054006768 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.475415617 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.266381459 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.647476831 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.6187963 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.175177209 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.435290098 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 1.993902735 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 1.874025984 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 1.337704169 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.513476853 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.012167056 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.206561578 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.184637477 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.176356846 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.060484063 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.77253685 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 1.880779764 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.204794986 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.376253966 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 1.957680069 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.378571108 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.298150836 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.457171705 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.156133272 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.211124492 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.392770387 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.415174731 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.251064593 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.467236759 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.383538671 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.59184044 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.240391145 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.15821494 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 1.953810014 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.241060006 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.468627034 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.171372673 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.044374219 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.017121628 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 1.865342878 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.539381528 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.416897629 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.066302207 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.346291576 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.209840366 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.404803122 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 4.380642009 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.003634505 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 8.345029903 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.611127054 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.413057194 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.002094845 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.209280235 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 8.33574007 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.476819643 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.176429594 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.324399527 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.625612393 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.283606551 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.297776504 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.277245435 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.004350933 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.141433894 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 1.867470898 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.195593917 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.391422466 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 1.340124362 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.025599468 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.200953174 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 1.859135404 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.08517749 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.318095437 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.20346011 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.015354121 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.307063053 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.346597253 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.330845866 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.35754382 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.995946724 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 1.440497013 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.17198218 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.094381897 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.169710158 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.274589701 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.209430966 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.190384693 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.31652609 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 1.858331967 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.316582692 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.382536766 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.071637072 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.232529494 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.171592214 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.230141834 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.437178992 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.638338245 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.282260295 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.702303234 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.211123879 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.170007617 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.50252695 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.44014459 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.302628287 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.230981963 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 1.180787741 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 1.861605166 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.199400242 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.628287226 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.332493074 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 2.466177032 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.280763873 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.531575594 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 2.397231552 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.357485664 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.35902698 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.64413414 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.176310494 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 4.084693893 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 6.175818531 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 1.979111748 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 8.444092947 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.909455137 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.857550115 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.466653922 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.229150935 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.28918842 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.303382295 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 8.549622469 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 2.47026331 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 1.860139495 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 1.964663225 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.469962228 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.209098575 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.528171505 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.304931627 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 1.874292294 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 6.174855618 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.422134524 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 1.875071161 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.291154483 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.274419809 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.174951213 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.208971781 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.368338782 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.218951306 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.497136074 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.208221428 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.42722267 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.526458303 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.595191803 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.202517007 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.257929832 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 1.289543613 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.435081691 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.286464718 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.437922187 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.175015863 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.23443044 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.346895015 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.197670012 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 1.872096553 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 1.19453711 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.278341433 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.29662779 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.173003869 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.753610516 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 8.469623461 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.06687097 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.327150167 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.058142678 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.036646352 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.87082523 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 1.203220229 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.174000482 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 4.868527122 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.268735267 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.25730041 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.514122759 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 8.519328991 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.837904558 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.563613588 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.33869205 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.039817463 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 1.351490745 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 4.15372954 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.146939975 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.16985896 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.45611543 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.197706696 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 6.169796424 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.242628733 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.260233919 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 1.348324991 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 1.191413389 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.257507532 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.170826663 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.031281361 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 1.196998349 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.29948451 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.493861633 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.052258977 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.91098606 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.538966112 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.542113174 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 1.285598251 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.278854156 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.379445242 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 3.620444567 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.278061141 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 1.850830997 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 1.270419187 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.08314017 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.328404935 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.197283996 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.416538197 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 3.985785382 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.586663608 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 1.284898257 seconds)
  done (took 1065.128663401 seconds)
done (took 1066.298858634 seconds)
(8/9) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.278136233 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.318327177 seconds)
  done (took 13.767467838 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.180151296 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.181120564 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.372810844 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.180371408 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.205690121 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.19143169 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.18905232 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.180405734 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.181277897 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.280813788 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.180032704 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.360835313 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.307070759 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.207129412 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.307749258 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.247867626 seconds)
  done (took 40.930040735 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 3.518896543 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.018711961 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.857603419 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.734402289 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 3.592465937 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.667491902 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.929209572 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.233765187 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.39905102 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.464938233 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.364914627 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.0404326 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 3.622634163 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 3.617795437 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.563287352 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.590683158 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.624723483 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.72376326 seconds)
  done (took 43.800625875 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.175491134 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.292804981 seconds)
  done (took 8.649960499 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.196571577 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.186680992 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.187630698 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.212305164 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.192686614 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.193297455 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.208640217 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.199056886 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.173567875 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.188972737 seconds)
  done (took 63.116159668 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 3.50968139 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.421930281 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.508225132 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.338149726 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.55792354 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.504467592 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.329646481 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.490716792 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.261168638 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.728652881 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.984136919 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.587989506 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.337638363 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.472658394 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.590552018 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.146454585 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.239910113 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.596195287 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.411978204 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.78783069 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.162878037 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.160380253 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.219602344 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.86865378 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.17904841 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.734971861 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.079368908 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.276110351 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.250776701 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.408344626 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 3.01811746 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.213813829 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.160445219 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.198257591 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.396219524 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.701947931 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.390165965 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.308592183 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.306082053 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.484164323 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.449876591 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.493266447 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 2.964976843 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.449851684 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.379020158 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.536864391 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 1.926821085 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.370203583 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.273777451 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.273178955 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.425808282 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.306167311 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.307873381 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.273289889 seconds)
  done (took 124.929109552 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.170227166 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.380347325 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.33417264 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.173756538 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.429452106 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.388675514 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.869093949 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.603058736 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.175092889 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.407765107 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.324414118 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.28638325 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.175984789 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.175267629 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.173382066 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.172317607 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.337520218 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.596609063 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.177660736 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.170828207 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.394771591 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.388478794 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.282429733 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.174367573 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.345930711 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.433442096 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.533215148 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.282848181 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.661203143 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.172179484 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.590144825 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.178594715 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.17535997 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.171871496 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.478584576 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.462286048 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.543265024 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.172878594 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.178263124 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.170482348 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.91991694 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.381734868 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.469882936 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.318145917 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.419741256 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.421448852 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.76233093 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.171180239 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.893317072 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.345293836 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.386859162 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.412850673 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.443206393 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.178887461 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.842205989 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.172375268 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.172106363 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.43591531 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.394603491 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.28343079 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.174829943 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.172853629 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.171119649 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.434079725 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.17371787 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.271910669 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.174670711 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.174108553 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.278155637 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.285087465 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.3881201 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.427317821 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.412646148 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.483107734 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.781588527 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.401992432 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.577320817 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.402826499 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.17500455 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.171709993 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.535761545 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.76249187 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.308711336 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.441645541 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.466040821 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.43005933 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.781325064 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.172643399 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.372507513 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.379485349 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.424446674 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.425247852 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.497630619 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.162181436 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.172610952 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.17145432 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.278955107 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.30812418 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.174276111 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.514245342 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.450250111 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.66082114 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.430231608 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.482286733 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.278416624 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.174394308 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.792171432 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.174662182 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.388042313 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.476240292 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.182162377 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.174334461 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.352587598 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.108570649 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.173720222 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 4.851635118 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.573177494 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.181821205 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.354669305 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.175136755 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.423753067 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.16201922 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.413672219 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.703501314 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.468943571 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.441245392 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.424281287 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.05096013 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.441420468 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.462686952 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.523539203 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.421758092 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.04020133 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.172825819 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.477770773 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.176225951 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.177220307 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.365107357 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.174592762 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.334504178 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.17584377 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.460019413 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.330886322 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.509212345 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.176396215 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.438633778 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.42967308 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.555532794 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.182920233 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.31090539 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.174518155 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.036648899 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.348099276 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.173380123 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.172328918 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.914372322 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.173066867 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.333201156 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.417486369 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.917581968 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.556414606 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.623807507 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.173156047 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.535456475 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.36417125 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.522727563 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.766637663 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.320284979 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.174744983 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.726946073 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.172216792 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.433534015 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.375008929 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.177738149 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.170835771 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.975597289 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.355693237 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.169061428 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.347546175 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.647845722 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.66439087 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.380112367 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.177616771 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.485132321 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.173546754 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.039414156 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.509141153 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.172173992 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.172182141 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.172566289 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.174675821 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.172598609 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.456706063 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.418391478 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.531148391 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.325233819 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.476586503 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.484742607 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.468945813 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.584273589 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.186234298 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.419034665 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.174646113 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.59207926 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.179588894 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.376512326 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.420002978 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.177177957 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.399250577 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.508160249 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.046870493 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.60547644 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.175643571 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.172706178 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.744723425 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.316542717 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.541397006 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.174948171 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.173777292 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.469820904 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.280181145 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.3585253 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.460115134 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.220397104 seconds)
  done (took 744.953790917 seconds)
done (took 1041.31923323 seconds)
(9/9) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.197059008 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.188386121 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.214382547 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.191451004 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.186886495 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.200899184 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.225481256 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.23059776 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.209726425 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.203742384 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.253902468 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.200024559 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.200282595 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.292467322 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.189890928 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.205016 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.187705399 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.203180755 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.242156522 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.207178764 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.207520312 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.195693848 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.222472368 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.208591145 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.198280238 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.196277356 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.213256641 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.214623315 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.258162069 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.212693097 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.199050426 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.188543181 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.215146447 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.217441081 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.22249218 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.256502241 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.222368978 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.184374678 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.20059722 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.220135119 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.260231564 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.202285141 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.184365246 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.219676167 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.21055709 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.192197032 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.237040547 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.193669969 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.207678843 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.189075914 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.190044653 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.245542382 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.189759224 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.307009621 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.202924193 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.189943407 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.219429831 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.201372442 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.198573567 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.199645241 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.198943691 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.216852444 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.23092775 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.197247351 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.189593551 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.235269297 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.210013657 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.216574263 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.224862693 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.215294531 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.207284329 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.19238976 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.265459097 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.200498694 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.190892634 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.201323897 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.237381079 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.199452992 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.252206924 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.214415442 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.19068337 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.193097071 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.210204454 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.286295729 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.196295125 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.200594116 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.18856496 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.201377299 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.211373211 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.184674964 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.195270598 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.209322427 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.230823388 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.181216641 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.185422393 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.197739341 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.213620402 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.24445951 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.230956372 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.241811195 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.204787211 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.20453983 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.205502466 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.214715298 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.211696445 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.234126225 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.230610412 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.189214186 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.197686494 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.20362399 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.182601341 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.236218761 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.21725953 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.206116759 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.205711644 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.25508458 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.229711987 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.193264347 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.204833256 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.219469908 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.197975628 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.237357463 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.193558141 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.230947985 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.198118211 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.198736995 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.186835491 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.183176471 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.348061142 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.237882241 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.224064896 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.252618929 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.201896637 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.205573607 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.227879501 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.197485118 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.197411794 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.312690464 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.253527813 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.192017884 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.208260311 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.207365834 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.211889519 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.19798363 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.188674712 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.206541202 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.189092003 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.18773905 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.194871647 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.231689384 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.248201723 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.185917171 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.204018361 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.197754558 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.196110971 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.202513053 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.207034746 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.190659452 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.19294427 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.198336664 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.246518242 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.230908102 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.211060947 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.208868103 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.211730546 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.215414059 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.220861388 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.198805279 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.186118535 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.329751088 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.241575917 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.211662149 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.1969195 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.190138162 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.213456262 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.191604945 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.183649557 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.222935176 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.351388572 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.202330682 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.192798848 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.201556014 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.190030884 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.201549635 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.203425788 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.205236786 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.265300959 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.198658917 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.20509977 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.253601147 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.210124142 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.191586991 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.206999616 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.227130135 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.310511071 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.205038215 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.195362991 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.198591319 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.214035576 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.202949676 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.202407232 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.211427873 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.289348321 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.205563234 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.1916606 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.245095005 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.211509059 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.192194302 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.247421001 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.190136004 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.244933355 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.206590058 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.204242592 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.203966704 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.228522816 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.189167869 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.194497067 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.201920497 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.254325899 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.213754441 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.19586498 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.215780264 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.225595993 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.200224005 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.200043376 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.195525533 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.191835265 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.190687949 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.224687303 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.203210309 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.221433615 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.309444343 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.22008361 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.223009353 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.199582566 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.218397667 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.228130387 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.232799224 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.195615135 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.211468336 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.229968232 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.218332826 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.182319548 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.194553486 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.219367461 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.230681713 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.214954421 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.19853226 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.206444656 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.191525189 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.203443613 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.26736919 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.196407455 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.200781928 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.308199733 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.193609526 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.210078564 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.224979337 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.234255916 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.193682194 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.205928245 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.190557146 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.213498575 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.206301594 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.207086929 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.191357141 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.226959734 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.190523915 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.211825836 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.207477243 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.217694696 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.191312346 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.200915443 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.206573575 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.202618861 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.197249852 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.195741062 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.188764273 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.203464483 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.184125307 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.189921595 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.206498205 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.214684825 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.204786688 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.220518795 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.209384664 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.331093857 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.208298565 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.191001701 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.250373023 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.199902437 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.248294596 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.200581653 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.199727091 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.215321162 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.209784006 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.213453304 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.223536623 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.209010654 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.24612666 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.249595096 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.20310336 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.185783563 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.207103386 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.235414442 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.197981365 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.193045095 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.203900146 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.234288131 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.246532304 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.20597066 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.25675797 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.209979932 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.191093334 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.351015569 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.205731847 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.210329307 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.215131594 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.195262441 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.215679098 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.20069687 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.205048181 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.200066499 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.349588051 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.25441626 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.222954973 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.210956995 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.231223269 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.201603741 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.190522537 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.238985541 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.221907955 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.204903462 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.18899103 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.228505827 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.210781398 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.201251875 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.20075469 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.247092033 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.208657191 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.203829026 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.210168998 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.189852529 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.185530738 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.193175219 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.250309504 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.197217174 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.201419603 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.203136957 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.206692134 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.201871173 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.209465272 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.236595161 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.213274289 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.194807773 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.366189244 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.217609162 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.202335173 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.215273732 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.182437401 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.195262438 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.190696306 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.240562262 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.231823931 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.207004115 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.203612233 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.203613334 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.20840823 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.200413923 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.186661411 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.203219665 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.25817322 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.189749158 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.196273295 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.215934847 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.21074508 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.209545644 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.202858148 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.188035806 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.20906994 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.208962567 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.196118064 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.253336329 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.199517189 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.20982812 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.349072119 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.217013785 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.204820559 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.200079997 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.197480161 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.199449768 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.210629848 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.230773087 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.191278541 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.202652711 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.199133896 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.20578562 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.21603876 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.212602497 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.208296868 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.196428043 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.1865051 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.198069274 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.195814422 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.231892514 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.200514569 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.210010482 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.224084818 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.196175298 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.200624922 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.22605682 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.311009965 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.211042094 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.249663594 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.311982758 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.332358899 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.214062268 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.195470026 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.202700647 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.249035216 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.206399039 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.192486867 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.201628655 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.188983543 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.203563092 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.21826241 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.215491083 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.203702281 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.201764105 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.20555993 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.192890083 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.220564172 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.206097379 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.354125385 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.227235102 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.192069982 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.207706673 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.256950083 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.239207147 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.221766291 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.226257254 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.194490718 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.226470973 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.203967522 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.268658288 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.20579738 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.185782778 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.199616554 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.201698658 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.231287871 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.225324614 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.190138485 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.197535704 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.186938885 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.202899421 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.221041627 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.207238938 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.251411138 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.206263071 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.216063111 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.197216352 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.210546648 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.208237314 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.201318592 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.223844182 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.193121483 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.190189577 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.212242794 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.367850877 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.218001204 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.194980972 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.194661069 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.218064143 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.206999965 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.237825995 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.221149246 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.192325608 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.208040543 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.201240064 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.219801012 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.211697935 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.245570351 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.190014079 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.225487673 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.191567218 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.207866656 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.332900736 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.223546473 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.197229139 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.207315336 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.196859212 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.225964118 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.208462901 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.204798599 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.208886958 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.240887837 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.244757234 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.198594842 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.367861323 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.210296751 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.195389932 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.18601468 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.20355317 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.204444173 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.207527102 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.19710166 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.211877678 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.196802097 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.205634401 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.188702041 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.216101986 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.206612718 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.199021353 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.195030185 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.231589208 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.192343411 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.190107885 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.37161054 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.231747838 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.236070451 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.201843212 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.202008379 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.201851005 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.193458999 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.228432446 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.200704842 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.216308536 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.1925054 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.189316779 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.231879724 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.213944969 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.219710517 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.196617212 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.248857283 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.19223752 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.208548008 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.242580171 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.194033041 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.209414803 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.204242518 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.227846318 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.205715968 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.238584923 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.205678921 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.250634737 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.209753063 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.18569964 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.200380588 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.213441941 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.221259618 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.204000684 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.207661852 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.206362505 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.207075001 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.207943818 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.213985864 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.218769212 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.193325309 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.266952869 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.350621622 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.216417065 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.198813246 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.203100874 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.197474528 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.189993691 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.309279751 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.237381357 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.251261776 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.20773695 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.200754645 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.247785844 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.296092864 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.212914212 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.191556923 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.199654259 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.230792768 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.216464082 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.207297674 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.213056935 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.192420407 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.214987061 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.210584572 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.202721388 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.215082923 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.20728508 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.218883232 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.238078808 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.294649767 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.209505916 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.243457771 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.19800152 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.267422137 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.21128893 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.248379773 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.214652443 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.201565615 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.309677874 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.20893933 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.206780082 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.213703199 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.188733347 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.213624267 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.217749291 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.201214546 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.191058572 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.195654453 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.200889815 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.183431295 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.198422615 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.199008668 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.227539377 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.208491576 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.184631179 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.210641748 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.241871012 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.208596735 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.208269978 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.245314819 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.204866539 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.189544957 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.215139114 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.209081688 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.205107391 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.186402777 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.216804633 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.205685785 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.204292534 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.223036241 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.253875743 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.192979046 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.203689296 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.184112697 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.206241116 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.199552722 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.22386344 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.199725513 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.209852599 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.212354605 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.189245793 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.209879752 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.20413766 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.227510569 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.210616347 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.204903714 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.211467714 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.208191726 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.206403371 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.196807082 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.225180014 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.210055863 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.209041133 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.197872817 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.193332979 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.203676446 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.212038464 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.20234983 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.193336931 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.202419496 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.196020619 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.258586249 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.205246012 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.244897336 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.230569805 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.197178178 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.194532003 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.205256109 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.353736353 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.228450236 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.228618379 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.190741767 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.200976778 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.209254013 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.202330451 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.195477395 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.219804792 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.2067303 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.207585199 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.268658565 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.224670277 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.211385972 seconds)
done (took 827.617048053 seconds)
SAVING RESULT...
DONE!
