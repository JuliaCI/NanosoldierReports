cset: moving following pidspec: 1466154
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.748674007 seconds)
loading group "array"... done (took 3.042726787 seconds)
loading group "misc"... done (took 0.39853477 seconds)
loading group "sort"... done (took 0.246244677 seconds)
loading group "frontend"... done (took 0.004619781 seconds)
loading group "shootout"... done (took 0.691646441 seconds)
loading group "sparse"... done (took 0.480828874 seconds)
loading group "scalar"... done (took 0.971403983 seconds)
loading group "dates"... done (took 0.133842456 seconds)
loading group "alloc"... done (took 0.016510977 seconds)
loading group "find"... done (took 1.168638857 seconds)
loading group "io"... done (took 1.146004886 seconds)
loading group "tuple"... done (took 0.736927817 seconds)
loading group "string"... done (took 0.201032295 seconds)
loading group "random"... done (took 2.152473105 seconds)
loading group "micro"... done (took 0.046722553 seconds)
loading group "broadcast"... done (took 0.548647479 seconds)
loading group "parallel"... done (took 0.020685515 seconds)
loading group "linalg"... done (took 2.700356445 seconds)
loading group "collection"... done (took 5.732203395 seconds)
loading group "simd"... done (took 0.885661467 seconds)
loading group "inference"... done (took 2.4233606 seconds)
loading group "union"... done (took 2.802066233 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/11) benchmarking "problem"...
  (1/1) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.197281456 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.280586558 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.606119678 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.172050231 seconds)
  done (took 3.958634728 seconds)
done (took 4.721222797 seconds)
(2/11) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.282082997 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127915425 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119809502 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.164146168 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000317599 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.168212026 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.099144782 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.326174032 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13296343 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.184158939 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.034299148 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.473023084 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026923645 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.25286707 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047663337 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030141667 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.185263722 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021053589 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.447137641 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.023103056 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058670425 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020612901 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.19869254 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7403e-5 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.31607468 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071787304 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038449768 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041894303 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031698121 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063766938 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022315042 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.373272285 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059894883 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.602666538 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087056349 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057522271 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091462214 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122643939 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.031205414 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023687968 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023567992 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031009659 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074558334 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.029500222 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7648e-5 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068801848 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08284283 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.019348498 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032016499 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.02081658 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061316317 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034411385 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056310044 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021188245 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 0.083928416 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045022174 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.040743068 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134613402 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101324129 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026272063 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015750846 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031553852 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037274842 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060652622 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040290882 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058178898 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.079193516 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.023914951 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016025783 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093866016 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023533067 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041624129 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029724526 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074553767 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057705629 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040669003 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0421281 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040559258 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066654678 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056729074 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063082019 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095815562 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051331886 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094130864 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064875375 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060781379 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041883485 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035489263 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175993806 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.018209974 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.046288547 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056829607 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.016845488 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000306316 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028564518 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028256741 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03127247 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048523691 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.2863e-5 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040029709 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042662378 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050885724 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.010915723 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046828598 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.00048335 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.034080114 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.01222273 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.2122e-5 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059048205 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012908907 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.2654e-5 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023737956 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028145552 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012524517 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066666114 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023255556 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063306073 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058776966 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016067977 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.019179169 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097502555 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057186852 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.024885328 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020239128 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046963745 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.019250778 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013201362 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.1481e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079873838 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02585088 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024111682 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042192196 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.04313578 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024952982 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016277401 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052522117 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.023149449 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.02026138 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.242e-5 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029588223 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039567233 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010678899 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078328034 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073673403 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060097463 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011659492 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063043606 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073239215 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02316747 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047796262 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088780022 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035124685 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04926416 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014265892 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.038959183 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011606583 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.031145127 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044474061 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050793751 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03344826 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.0721e-5 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050385671 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016100859 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.067581275 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06651488 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060108582 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019248667 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026279562 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048463085 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024052039 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052903937 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04393747 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07150637 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016780076 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049812538 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020181923 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021871798 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028070869 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035433275 seconds)
    (180/608) benchmarking "5d"...
    done (took 0.209597532 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020809548 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022231022 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040870707 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.1008e-5 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037805912 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021999358 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006605975 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016689709 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000234029 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.022691753 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033050373 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.3438e-5 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015010259 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034899093 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060362517 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024721171 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055317759 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000306218 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.087579249 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025872976 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082603436 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035290521 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06080562 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.463e-5 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02592075 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046948213 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052733238 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.049140612 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.549425259 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094857258 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063200034 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7863e-5 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027546284 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015965406 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032815038 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000344125 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.055036927 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047319535 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006604283 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.035010412 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03736075 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017422093 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034335993 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.000219418 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.2058e-5 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020444079 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029936443 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006617935 seconds)
    (229/608) benchmarking "6d"...
    done (took 0.19852154 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025226083 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.8348e-5 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026190295 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07386293 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.025577829 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.031101675 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085754444 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.020884841 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027710153 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061030014 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071437939 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018088254 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069436941 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014953039 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046962245 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084079966 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04729342 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.831e-5 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039320177 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034807054 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053479344 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019426087 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047230488 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.1235e-5 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000117627 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.029835285 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046880624 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042858567 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.6034e-5 seconds)
    (259/608) benchmarking "3d"...
    done (took 0.060902036 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0732505 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022298175 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040138917 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.024821418 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046925697 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022285719 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.066359309 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058372454 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0222104 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000195263 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016952347 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07663816 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056102504 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000179112 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.180416367 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.01945708 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055765492 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.020964316 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082725733 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.034622246 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078937344 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.022322415 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029429006 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.047462013 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.038777057 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000122747 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034174439 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04025462 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048091576 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030670559 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.047997573 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021777108 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034633251 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.016180514 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000156853 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027946085 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051610695 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.013920128 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015228979 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046325602 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.026522415 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.5886e-5 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028041745 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026035885 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037303325 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000436665 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054308537 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016620776 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.6523e-5 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.7577e-5 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042636144 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.052638836 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.021271682 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052933148 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060962348 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030853747 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021235145 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016411093 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071405006 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026283802 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027100075 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077089975 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.078003938 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.016014855 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022453307 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021211684 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019462752 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057861504 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054660893 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03520341 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067634871 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.037745869 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052310601 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.019203748 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016254954 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000108915 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021848531 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073852607 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073763134 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 0.297602804 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.6853e-5 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000167456 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014771481 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073411863 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012262873 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032673609 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000111355 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053264518 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.0003536 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076430181 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.5135e-5 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104329264 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000495804 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045728148 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074104981 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030346019 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030782533 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015806934 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.9716e-5 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061549218 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032050954 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170936582 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051934907 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.7448e-5 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044632948 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027198839 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.5875e-5 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024346869 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000485753 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 0.048365482 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029664215 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028727158 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040922363 seconds)
    (373/608) benchmarking "7d"...
    done (took 0.251646451 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052106902 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049607183 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.866e-5 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023719171 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018004719 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035253939 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019090867 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.062849557 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029014439 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021437421 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026449461 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024657882 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054628081 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055229616 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034184526 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062792345 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065993306 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077635335 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.035417115 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047146017 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02401636 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034350813 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.185600065 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017673442 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060897191 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022418224 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013421158 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060385428 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042359165 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000481824 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039304351 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045204903 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076217179 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077523502 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065067103 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015992937 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024998642 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051368843 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.4475e-5 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028339116 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.059989171 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000246421 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000308173 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026649145 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.2857e-5 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000101606 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018341233 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014563648 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.013720165 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.00017222 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030066484 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032819352 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016055394 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058938636 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033023886 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.176e-5 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06534098 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023303605 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.016205665 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017235461 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037726161 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07325817 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034902445 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013830414 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034548478 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058266879 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0702575 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026938975 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030800834 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.027557535 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.9654e-5 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040319893 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010304164 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.8845e-5 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018921757 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037772979 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021702056 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.053e-5 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033228385 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062713439 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015266339 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058566654 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067633639 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044792784 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079782229 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.1226e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030252671 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063086616 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046887525 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026180212 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025350611 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022587182 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014280184 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.8882e-5 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071694222 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011558984 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031256144 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041718535 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032240934 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040795274 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015714063 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073498297 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024141652 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.022207115 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041543762 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073412555 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025902581 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.051236685 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047750499 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027628745 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067367577 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167740927 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.064353587 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044838425 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032914008 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015801422 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061710099 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064632779 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040900121 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050726131 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064803407 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011225312 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.042452455 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.3025e-5 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027853899 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000561734 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072855743 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.059653915 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03785674 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029785134 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071713924 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047839847 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01678896 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08257556 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 7.1159e-5 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011188073 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040975176 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049126988 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047755174 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.461995672 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.2698e-5 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020075126 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027723905 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000329175 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064367219 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039647937 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050494278 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01254812 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085388795 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039164054 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029163473 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021441596 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030812203 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059424218 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059242307 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.1101e-5 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054175141 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.03918714 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026534406 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.016114763 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022036122 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.028247818 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000113132 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071439715 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04842576 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046857309 seconds)
    (540/608) benchmarking "2d"...
    done (took 0.046523017 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033118468 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.5572e-5 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022014745 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014397482 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.7313e-5 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065630467 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.046431262 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032452089 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.8679e-5 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029160017 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.059447077 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023984318 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050996565 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028571241 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027543574 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.060660591 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4424e-5 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017987551 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064408406 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.311e-5 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064739981 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046060015 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030171526 seconds)
    (564/608) benchmarking "4d"...
    done (took 0.095778663 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.6862e-5 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012779119 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.2457e-5 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046567271 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084650567 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054946432 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053832709 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041165866 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068413256 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024845991 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037536614 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040784143 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033952722 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03421668 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015769713 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030799948 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064741399 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014046698 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078301949 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063158124 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.020826299 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000114009 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041576979 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 6.9835e-5 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066451809 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019815705 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041969911 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067398365 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062176207 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025885491 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027960936 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078412981 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.016812811 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027319227 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025217535 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064147108 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02895248 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000375996 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062476242 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171170809 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.048573263 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000105448 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024693475 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062980107 seconds)
  done (took 29.21064921 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.062320747 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.236110526 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.039125171 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.058168353 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06020454 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.05340597 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.083897797 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.197027865 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.065829225 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.053681254 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.041828118 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.06878199 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040668974 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.053193057 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.050151729 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.03522934 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.040799317 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.052885594 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.100882584 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.067946715 seconds)
  done (took 2.262170278 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.202137693 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.0300652 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.095162404 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.076948328 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.077231887 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.529621373 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.086019085 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 5.8926e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.290967732 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.057449726 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.6053e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.006665923 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.4433e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.006850102 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.1992e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.008335821 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.0728e-5 seconds)
  done (took 2.305435398 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.172980193 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.346754678 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108237224 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.196453351 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.129016053 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.31139181 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.483585928 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.295363691 seconds)
  done (took 2.860080238 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.135981069 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.035104784 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.113978806 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.098628719 seconds)
  done (took 1.193929923 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.055888074 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02437261 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.034113853 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025142378 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.045231319 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025170082 seconds)
  done (took 1.023595858 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045425318 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.053351477 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.179052573 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035430518 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.034843659 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.039239257 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.055168787 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.04604967 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.036793247 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.039725021 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.031705479 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.025856027 seconds)
  done (took 1.464607224 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.05826598 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045892626 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.050824137 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.043964224 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.039668091 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039306508 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.051556567 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.045041649 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.039178778 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.02562624 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.031092297 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.048628446 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.03211576 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.032317229 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030953895 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.035384813 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.036789355 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.02052568 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.04696876 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.043095634 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.044736773 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.046478612 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.036210737 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.047597095 seconds)
  done (took 1.789644348 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.150261918 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014414243 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.010770964 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.015122237 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.01540293 seconds)
  done (took 1.022698716 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.149954133 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.517189127 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.372641051 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.143686389 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009267946 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005646585 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.560935251 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.649708443 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.420865621 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.757453157 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.592111201 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.097086083 seconds)
  done (took 27.096123644 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.051871736 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.048359422 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.051851014 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.046246409 seconds)
  done (took 1.01383171 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.031278735 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.792e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.041992319 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.1595e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.0862e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.043491596 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038125042 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.0081e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5868e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.2441e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.4983e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.9803e-5 seconds)
  done (took 0.979802946 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.034971593 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.04501968 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033651544 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040501382 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.046379043 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027402593 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026163362 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039559954 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.040084748 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037908824 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022772709 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045911992 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040892514 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029652639 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038787112 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022866603 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.034361831 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.041346273 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027643848 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034638992 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023783293 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045699695 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038893084 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023273251 seconds)
  done (took 1.666062213 seconds)
done (took 74.584874245 seconds)
(3/11) benchmarking "misc"...
  (1/3) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.136306339 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 7.1936e-5 seconds)
  done (took 0.96353461 seconds)
  (2/3) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03767917 seconds)
  done (took 0.863755701 seconds)
  (3/3) benchmarking "julia"...
    (1/1) benchmarking ("parse", "array")...
    done (took 0.020329119 seconds)
  done (took 0.845209446 seconds)
done (took 3.502030555 seconds)
(4/11) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.42877287 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.21216089 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.047095722 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.081774465 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.4665e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.041117272 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.082084346 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038396765 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.107980068 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.055071677 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.08920062 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.052378346 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.7207e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.1037e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053634815 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082825928 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000757151 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.106219503 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035877423 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.8968e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.7137e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000696915 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000757513 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.4726e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.032793852 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000731911 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.8874e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.00082777 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059209821 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.7426e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000141315 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.3307e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.4265e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.1947e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.3242e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001098435 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.5105e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.066101911 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.9924e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000831246 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012820856 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.8877e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000980399 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.9248e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.00013076 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001030739 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.1378e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.4634e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.742e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000713728 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.7068e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.6332e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.994e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.0278e-5 seconds)
  done (took 2.585059432 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.588785397 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.458481007 seconds)
  done (took 1.880341186 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.166431149 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.111979368 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.159557161 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.128408588 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.112468384 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 4.5796e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 9.257e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 1.0395e-5 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.222298846 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 3.1254e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.8315e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.3402e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 9.518e-6 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.0906e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.8407e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 9.345e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.7049e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.6923e-5 seconds)
  done (took 1.731938684 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.462113543 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.168037161 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.306605711 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078194428 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075275882 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.128281702 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000176572 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072957281 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.3465e-5 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077845207 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.072134717 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.8862e-5 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.033880278 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.1596e-5 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.027342073 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.00231576 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.130451487 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002755893 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.090981191 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075959427 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 7.1943e-5 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.032910696 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032507516 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.068404864 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.0386e-5 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002710272 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002070018 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074672393 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.001938487 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.034837819 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000103613 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001247917 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.034636413 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.029632753 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000734046 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031275227 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003162356 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.001893027 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.03445561 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003416608 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001751247 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000104328 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.032308274 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000218645 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000128975 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000176874 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.6678e-5 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.6838e-5 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.034752445 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.6014e-5 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.1818e-5 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.9279e-5 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.001734974 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000125301 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.4632e-5 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.002689021 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000109819 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.00170327 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032448683 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.023e-5 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000202543 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002664346 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.9282e-5 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000103535 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004663313 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000712364 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.3803e-5 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002188244 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000327839 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001583678 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000213893 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.00015034 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001166396 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009644952 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000169202 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000104851 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002041944 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031256029 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.9635e-5 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.6654e-5 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.037171729 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000210699 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002404653 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.010823032 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001271965 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000190462 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.004355208 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.008687792 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000293611 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000164238 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000300981 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.008216124 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000168844 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.015932218 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.002574929 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 8.063e-5 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000278931 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001455765 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.8974e-5 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.004483509 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001464965 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008931333 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.001322291 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 6.3258e-5 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002047049 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000193705 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000188403 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.007659217 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.002339656 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000113991 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.045088478 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000151589 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.0151e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000211434 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.002977871 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008139455 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008041136 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.00136467 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000145045 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008235423 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002007864 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01116127 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000120193 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001429595 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 5.0066e-5 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000121776 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000182696 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001532685 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007414665 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004964227 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000158249 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000228758 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013284686 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002323604 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000486963 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008072241 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000121296 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012607361 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008938123 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000251244 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000761527 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000113706 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.017138965 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002523648 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.7529e-5 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.1456e-5 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000184305 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01139562 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.0601e-5 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.016390853 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.9465e-5 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.8842e-5 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002415401 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.955e-5 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000151129 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001414648 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.00011558 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9049e-5 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.1166e-5 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002412166 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.6135e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002223736 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 7.7767e-5 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.0463e-5 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001166999 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004822819 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.00065249 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000128993 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.2831e-5 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000204854 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.000108671 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000533712 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.3454e-5 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.00172166 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005004074 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000169714 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008869013 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003333582 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002079789 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000788719 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.3019e-5 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001728368 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.2079e-5 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000212135 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000128188 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002566066 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000127828 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.342e-5 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.0016543 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004887219 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006876578 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000128864 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.979e-5 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002641365 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001425047 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000123905 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000178036 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000127556 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001971127 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000474045 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014373469 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003623482 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000746643 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.5505e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002162945 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009195432 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.1976e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000124181 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002719837 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002818748 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000127675 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000176025 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.8413e-5 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013052361 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000123501 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0002259 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000817668 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.749e-5 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.00922319 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001218433 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000142606 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000141924 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3252e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001395975 seconds)
  done (took 3.649821971 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.062156434 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.150628082 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.24120832 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032260224 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000200424 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.149821835 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000172657 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.279364548 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000133585 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.998616608 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000100562 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.050474169 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.00022011 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.489467141 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.295222249 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.210130914 seconds)
  done (took 3.792000879 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.933968521 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 1.052151272 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.272511022 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.422880726 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.138881341 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.470955469 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.108478228 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.120113916 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.110976549 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102101702 seconds)
  done (took 5.586459166 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.05939769 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.186214299 seconds)
  done (took 1.102287055 seconds)
done (took 21.15459861 seconds)
(5/11) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020440949 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019989851 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.019603372 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021667537 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019187058 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.036071868 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019775649 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.019226623 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.048437602 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.02012186 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.026265036 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.032133079 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.019893291 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.0186765 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019458371 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.018878441 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.019658303 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019151576 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021026343 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.019168575 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019856014 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020605146 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.019801848 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020670419 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.019558654 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025387129 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.019994725 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019337654 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025366896 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020840969 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020184218 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.02019786 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019004619 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.019525698 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.019640044 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.018734261 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.026611125 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020329434 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020102483 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021287652 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.01988309 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020580512 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020340601 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020702658 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.01905075 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.018659796 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021289722 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.020985188 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.018934888 seconds)
  done (took 1.909808597 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035232348 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.7829e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.034178814 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.4618e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.0474e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.413e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.2391e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 6.751e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.021e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.252e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.6507e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.767e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.552e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.935e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.162e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.703e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.008937233 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 3.0674e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.2942e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.026e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.693e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 6.144e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.1e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.729e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.847e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.746e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 5.897e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.709e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.796e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.781e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 5.541e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.657e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.0782e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.6192e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.699e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.807e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.698e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.12e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.882e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.585e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.977e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 6.465e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.3541e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 8.241e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.234e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.697e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.63e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.782e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.235e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.928e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 7.101e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.886e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.36e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.744e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 7.896e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.828e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.38e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 6.246e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.722e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.3172e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.235e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.872e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.547e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.046e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.173e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.283e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 6.437e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.882e-6 seconds)
  done (took 1.022597135 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019343571 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.0723e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.409e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.334e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.94e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.363e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.009e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.441e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.3e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.414e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 7.919e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.293e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.339e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.733e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.619e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.281e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.413e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.401e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.517e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.318e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.758e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018649968 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.453e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 7.101e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.039e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.224e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 6.494e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.247e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.144e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 6.302e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.279e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.909e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.239e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.938e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.272e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.619e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.614e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.3914e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.976e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.07e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.52e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.968e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.4785e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 7.253e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.201e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.071e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.279e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.763e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.974e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.127e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.478e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.681e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.564e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.923e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.156e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.872e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.748e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.656e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 6.115e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.207e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.972e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.036e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.617e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.921e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.779e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.178e-6 seconds)
  done (took 0.896791855 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043451592 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026489809 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.045979901 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.041518922 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037112459 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.049110631 seconds)
  done (took 1.101616156 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021035317 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.5865e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020640618 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.0311e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 8.506e-6 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.263e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.222e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.384e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.72e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.158e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.1098e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.572e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.1524e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 5.042e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 4.874e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.453e-6 seconds)
  done (took 0.900881418 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019203048 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.5625e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.474e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017346988 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018392914 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0675e-5 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9472e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.00015016 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.907e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.311e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0067e-5 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.051e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.505e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.272e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.0124e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.887e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.538e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.432e-6 seconds)
  done (took 0.914718241 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019239205 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.5757e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018661137 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.3171e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 7.322e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 5.998e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.919e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.58e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.581e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.841e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.0188e-5 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.974e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.022e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.757e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 9.048e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.221e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.666e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.261e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.1926e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.066e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.679e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.625e-6 seconds)
  done (took 0.895247383 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018722128 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0424e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018741511 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.2052e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 7.438e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.941e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.346e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.752e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.022e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.452e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 8.207e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.374e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.304e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.642e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.503e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.234e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.042e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.68e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.403e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.364e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.278e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.738e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.229e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.876e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.654e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.335e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.238e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.591e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1745e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.828e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.772e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.203e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.801e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.576e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.488e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.521e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.177e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.903e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.56e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.722e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.008e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.274e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.6413e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.969e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.821e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.739e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.686e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.771e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.678e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.163e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.364e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.388e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.491e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.859e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.247e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.396e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.233e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.393e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.313e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.367e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.406e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.8e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.444e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.602e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.412e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.263e-6 seconds)
  done (took 0.896402339 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.019209205 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018443635 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.347e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 6.858e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.648e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.159e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 6.238e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.628e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.613e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.618e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.733e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.113e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.642e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.023e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.386e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.882e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.1855e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.895e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.691e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.601e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.588e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.858e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 5.084e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 4.988e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.357e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.141e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.233e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.948e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 4.88e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.163e-6 seconds)
  done (took 0.896097598 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.019053523 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.6981e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020368895 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.1676e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.65e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.182e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.853e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.426e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.462e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 4.935e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 9.996e-6 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.913e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.274e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.014e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.061e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.08e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.2e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.688e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 4.843e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.004e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.477e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.898e-6 seconds)
  done (took 0.898545709 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019110461 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.5932e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.863e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01835898 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.2776e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.224e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.286e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.415e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.586e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.075e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.5009e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.175e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.412e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.067e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.746e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 4.958e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.329e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.934e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.203e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.236e-6 seconds)
  done (took 0.898529532 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021087688 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018440881 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.0278e-5 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 9.845e-6 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.477e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.474e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 6.186e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.828e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.467e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.715e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0789e-5 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.649e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.516e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.755e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.486e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.147e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.96e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.82e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.1217e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.652e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.993e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.731e-6 seconds)
  done (took 0.898666389 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019265977 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.0295e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 7.018e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 7.126e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.919e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.873e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 6.033e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.637e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.871e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.935e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 8.98e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.043e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.003e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.984e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.823e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.006e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.397e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.167e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.877e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.845e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.546e-6 seconds)
  done (took 0.878361523 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019151126 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018850172 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020810721 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019880792 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015703499 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019469651 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016019249 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024069271 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015777416 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019288451 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.019508065 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019111443 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.019898823 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023755997 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016444572 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020342401 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020223385 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.02206836 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020418662 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.02028821 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020423988 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.015850956 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019644687 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019780206 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.02054814 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020812876 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.021213504 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016091503 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015837276 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019653157 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019421349 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019364031 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021488282 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019797791 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.020067422 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029035576 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.020784327 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015780251 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016083927 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020767376 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020133613 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020398282 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019280233 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015859751 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020208761 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019321096 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019638484 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015823006 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015912502 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020109519 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015853164 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020024875 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015993566 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019433878 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019639905 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015864293 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015946745 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.01976972 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.016076862 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019685432 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015802783 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015996487 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020149556 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015676475 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.019572921 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015924386 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019905673 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019484802 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019439332 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.01936303 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022819674 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020913796 seconds)
  done (took 2.233967159 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.01996657 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019405088 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.4265e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.275e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.778e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.111e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 4.868e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.925e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.567e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.325e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.279e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.057e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.212e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.118e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 8.707e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.244e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.324e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.75e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.751e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.163e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.705e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.767e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.133e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.347e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.497e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.105e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 4.954e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.211e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 4.981e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.644e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.156e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.009e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.591e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.245e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 4.869e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.172e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.707e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.905e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.117e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.239e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.147e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 4.828e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.457e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.061e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.447e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.12e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.225e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.559e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.408e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.611e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.217e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.305e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.434e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 4.809e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.063e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.151e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.244e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 4.915e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.348e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.272e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.245e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.185e-6 seconds)
  done (took 0.906926625 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.019281434 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017113345 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017103006 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01838391 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017095117 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1457e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.000104417 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.153e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.717e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.856e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01697696 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.4834e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.0936e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.3554e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.9557e-5 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.7e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.5402e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.558e-6 seconds)
  done (took 0.968502845 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.019077858 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018276759 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.457e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.711e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.914e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 5.388e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.493e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.547e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.741e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.3e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.4761e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.537e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.13e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.5e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.601e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.343e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 5.216e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 4.935e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.06e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.153e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.736e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.01e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 4.878e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.271e-6 seconds)
  done (took 0.899375082 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.05151961 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.1503e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.944e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.325e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.723e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.185e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.117e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.491e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.844e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.896e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 7.707e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.308e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.176e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.129e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.074e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.962e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.68e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.188e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.884e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.985e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.012e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 4.964e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.882e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.0e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.955e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.145e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.782e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.118e-6 seconds)
  done (took 0.914361677 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018680504 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.018809948 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.7978e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 7.054e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.653e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.607e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.928e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.432e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.032e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.973e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.353e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.404e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.326e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.843e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.565e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.702e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.245e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.226e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.205e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.863e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.518e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.736e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 6.564e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.881e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.435e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.143e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 6.136e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.664e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.479e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.631e-6 seconds)
  done (took 0.900955937 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020741694 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018780552 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.02300795 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 9.88e-6 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 5.756e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.01831123 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.1239e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.018951711 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.02190417 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022024216 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023546496 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.4603e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019074995 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.3895e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 9.202e-6 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.020584437 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.032e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.1649e-5 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 8.812e-6 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 8.96e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.076e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 7.202e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 5.946e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 9.677e-6 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 7.186e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 6.034e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 5.985e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.971e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.725e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.712e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 7.259e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 6.321e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.759e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 6.131e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.701e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.514e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 6.129e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.544e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.837e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 6.041e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.02038002 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.2244e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.7752e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.0565e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.722e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 7.617e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020606939 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 9.29e-6 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.0461e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 5.681e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 9.93e-6 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 7.387e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.226e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 7.899e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.61e-6 seconds)
  done (took 1.113389476 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.018943466 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.6656e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.912e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018830484 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0249e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.0323e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.828e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.033e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.291e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 6.147e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.945e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.59e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.328e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017147061 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.2315e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.1358e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.074e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 6.3807e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.735e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.694e-6 seconds)
  done (took 0.916137393 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019352542 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.578e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020713879 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.0985e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.776e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.681e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.126e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 7.033e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.621e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.238e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.505e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.9e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.945e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.372e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.237e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.081e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.0191e-5 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.191e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 4.668e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 4.68e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.116e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.9e-6 seconds)
  done (took 0.902219136 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.018766219 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019059067 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.4358e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.444e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.0717e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.558e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.691e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.043e-6 seconds)
  done (took 0.899329562 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020457029 seconds)
    (2/2) benchmarking "in"...
    done (took 0.019696336 seconds)
  done (took 0.902549044 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.031560614 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020673008 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01898674 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023007255 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024031295 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023989165 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019918949 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027355469 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020809918 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.021772679 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020652853 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02026969 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024097978 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020952196 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022473476 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022500515 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020975874 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.021294556 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022693379 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021198792 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021047921 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022307157 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020815155 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020662439 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026800355 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021193057 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021175641 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019850544 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022233214 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020061441 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020684781 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025926608 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020838958 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020304995 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020197172 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.022109353 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021396973 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021839053 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.022125056 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020094469 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019803024 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.021118057 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023879386 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020636415 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004527645 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024329434 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020356014 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.020043251 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020242537 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.023159398 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027073759 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022266351 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.022800544 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021314703 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021431483 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020356995 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.021339071 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021982859 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.0208878 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022259048 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.0266734 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027686276 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021664658 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020669837 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.02167493 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.027082577 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022172696 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020373096 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019947879 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021933113 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024575529 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.02249215 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022913831 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022504607 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020800164 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022032388 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027344792 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020708491 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022905697 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020814522 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020992367 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021389572 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020437004 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024124776 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021691033 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027227029 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021690482 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023115427 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021168776 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021676206 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021120999 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027476572 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022549535 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023616843 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022316789 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022954536 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020037776 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019453362 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.020293372 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020042256 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019299966 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021598199 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027347699 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.02141454 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020627216 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021346295 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028408234 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022716712 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.00310469 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021424529 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022537736 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021496231 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021600942 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027176536 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021760427 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026463697 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023757013 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020725978 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019741045 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020939594 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003421355 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019808125 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020318121 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020603312 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021803617 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023064267 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02157688 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019757218 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021215205 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022165799 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019816906 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020423718 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021284759 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020917936 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020248547 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020541469 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02223688 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021447825 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.021038988 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020855268 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023272708 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023244007 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020384804 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020952588 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022222066 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023942193 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021292766 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022002969 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022196543 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019470112 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021630635 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022204797 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019739265 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020363287 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021404046 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.02209092 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022291725 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021757376 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019779915 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021452194 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020084043 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019643392 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027823246 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.02007283 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021943687 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022301454 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021207645 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003247691 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002788083 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020851866 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022739573 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020982088 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021142184 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020684257 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020745505 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021395745 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022408806 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020513085 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021106447 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022780329 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021090063 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020071601 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020362252 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022727318 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019468508 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02119963 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022198609 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022698391 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004249427 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022461454 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019042744 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021893965 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020403074 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022446479 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020965308 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.02106704 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019516974 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022299854 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026676014 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020368919 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022126291 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021696877 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020357423 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020912545 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.02086922 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021860907 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021689541 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021484648 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019773233 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023081491 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019036781 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022113065 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019955581 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020961791 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020657961 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020809161 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020397681 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021908988 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020513164 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028413155 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021773127 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020724374 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026472793 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.02635383 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019624707 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020113573 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026796269 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021236276 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021511088 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021501982 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026358457 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.022274504 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020896627 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020967101 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023715983 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023284678 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022125934 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019232478 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021271149 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02081754 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.021525813 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019377815 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018867257 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021076105 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022162501 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.022680251 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021016971 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021522988 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020501305 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022008065 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020737271 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022794352 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02161011 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.022049563 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.02238545 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024218745 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022323055 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020860796 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022257581 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026139597 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020081499 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020645679 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020367784 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02113672 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021757898 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022070275 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021524233 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022690194 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021614404 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023081993 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020220836 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026931592 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.01967671 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020086788 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018742984 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.026995708 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020487898 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.01833049 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.01982033 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021369624 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020555042 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.021674862 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018862533 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021030101 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018894229 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021241827 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025628998 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023130519 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021312282 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021326592 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02001052 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020467198 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019986283 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.020117916 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.02072698 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.020942048 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021127064 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020020428 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021045306 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020635706 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025464059 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019507679 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020970854 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018893309 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021907777 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019196973 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.02212376 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022060501 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021243855 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020416491 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.02228423 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021813869 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02087908 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021156248 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020591139 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021429411 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020568498 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020477807 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019417653 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01900917 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021464198 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021557052 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020754828 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023250415 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022547808 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020322305 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021969252 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020295213 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021970158 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02286414 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02292076 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023289095 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022430323 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.020985259 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021377216 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020660526 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025520387 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021573156 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019864087 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020992979 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021460651 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020507002 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021317449 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019284666 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022034652 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009130666 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020532297 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021264073 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021113551 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023081598 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022121099 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02084496 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021664113 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020530059 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019614498 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019765547 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020350701 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020444719 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020040803 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025158072 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020476889 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020513741 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025763686 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022335802 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021968944 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021538732 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.0200946 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020352606 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023411652 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026478374 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020814268 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021688032 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021147439 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022019376 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021014034 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022960933 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020247464 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022158564 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021425904 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020750428 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020132557 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019009859 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021861272 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020880567 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021019987 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020611226 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021918285 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019353451 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.02012423 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020956406 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021819488 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020456504 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020524923 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021377726 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.020914728 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020154546 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020247668 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020420394 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020984422 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026336247 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019887995 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02169313 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020322967 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019541864 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020129072 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020226038 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022482136 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018984191 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019458868 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026171848 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021287197 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020149403 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01935544 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021753213 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021144878 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020033211 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021609252 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022468743 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020037729 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021006736 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.01902514 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022644817 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019421958 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022241647 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020317859 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020127717 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021156612 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020967571 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018988699 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019435496 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020431635 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022966962 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021826616 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020957472 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021265343 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020077316 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021771303 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019059277 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021644446 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021742726 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026527105 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.02210053 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020026936 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020343923 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026006541 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020135489 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.02118403 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021926283 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020478195 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020182516 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020512153 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003685485 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022796763 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020363709 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021297165 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020197646 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022644519 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022475015 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020174443 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018910658 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.02055992 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019905707 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020678456 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021968578 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021846252 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020467154 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020798465 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003126489 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018975729 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020078278 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020312328 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020520355 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020422973 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021089535 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02117603 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020351624 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018961187 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019953996 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003231822 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020427616 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.02146373 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020545823 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020335559 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020797969 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020085242 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021245109 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02073299 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020849698 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025685217 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003427409 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019406382 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021842761 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022210561 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020478705 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020454833 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020107526 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020787679 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020204358 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.022257772 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020357395 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020445125 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.021096694 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020308784 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.02601752 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021306943 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019030322 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020190185 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019932433 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020160768 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021159352 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022567439 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020497214 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.02104518 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020013871 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019517909 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021391947 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025674026 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022028433 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022144807 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020277922 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018651619 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.021931039 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019509579 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.019780716 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.020685973 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026891453 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01851504 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.019850916 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019809248 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020036027 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019509284 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.020880753 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019202942 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.019948345 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019590779 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02105774 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.019941841 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020427744 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019239499 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.024555218 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.020657238 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020293268 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019840194 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.02162107 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020212145 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020640494 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021840952 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02609482 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021849961 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019227577 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022543618 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019026731 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.02134377 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008602375 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022440038 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.0194199 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021381636 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.02588522 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020981828 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019894784 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.02130907 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020574346 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020339915 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022104785 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022900838 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020297004 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.023159896 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.021414827 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019501865 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020658625 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026208772 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020026794 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019300499 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021794613 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023319059 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020245291 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022818045 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0230115 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.01937345 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021174703 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022985033 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025560869 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023345369 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021143149 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019772122 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019143169 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.02052187 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022280472 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003935418 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021704734 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.008819028 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019677547 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019623489 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023061939 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021200595 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.004080242 seconds)
  done (took 13.432740268 seconds)
done (took 38.867348928 seconds)
(6/11) benchmarking "io"...
  (1/1) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.841714774 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.752297825 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.908578624 seconds)
  done (took 4.400940787 seconds)
done (took 5.324226932 seconds)
(7/11) benchmarking "broadcast"...
  (1/4) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.203035096 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.333306293 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.269036974 seconds)
  done (took 1.707289606 seconds)
  (2/4) benchmarking "typeargs"...
    (1/3) benchmarking ("array", 5)...
    done (took 0.0618133 seconds)
    (2/3) benchmarking ("array", 3)...
    done (took 1.0746e-5 seconds)
    (3/3) benchmarking ("array", 10)...
    done (took 7.147e-6 seconds)
  done (took 0.984073626 seconds)
  (3/4) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.233111908 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.07047196 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.114350502 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093686141 seconds)
  done (took 1.434545631 seconds)
  (4/4) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.167340224 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.160473573 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.28339451 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.111082571 seconds)
  done (took 1.644280758 seconds)
done (took 6.713003981 seconds)
(8/11) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.046736736 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.022656375 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.039754224 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.036365831 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.023086412 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.108867152 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.045338335 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.149208771 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.041549564 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.023020183 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.246296233 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.024331985 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.028757431 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.035360252 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.023481657 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.123387281 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.028844668 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.125168666 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.041093203 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.091202784 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.126522596 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.101472962 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.229086692 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.029631427 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.09212673 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.023308502 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.02835168 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.085603257 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.095100717 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.046489648 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.043972334 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.02928431 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.028354534 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.027820184 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.024440343 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.037135043 seconds)
  done (took 3.274489436 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.07489585 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.253444322 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.088899166 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.150300348 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.055301803 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.039121386 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.18541783 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.188167678 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.271682034 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.00440222 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000233302 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.178578514 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003671988 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.129682616 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.144381832 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.28008417 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173551297 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048832774 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.208991484 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040243851 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.418593695 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.068844793 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.641497557 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.5276e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003826139 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.4629e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.031949006 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.2900457 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227290825 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000567152 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.260457092 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.315736528 seconds)
  done (took 13.706684089 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.581493943 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.195945699 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.094305353 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.021310647 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.113534322 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.147693282 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02082781 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.093206834 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.085440777 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043708475 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.202705032 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.13e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072731762 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.243098178 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034261811 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.110379761 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.218939359 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.059329648 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.244807659 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.052539532 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.085785581 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.124786174 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050447586 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007830192 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.065588391 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.061035998 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.034537159 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.064911994 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 9.6643e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.782619006 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.048102214 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.113727432 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.183252093 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051595679 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.113195219 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025621507 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.0756e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.065510804 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.025968099 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.04190683 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000618004 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.8536e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.020644726 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019692133 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.378e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030359021 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.134931852 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.10167509 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.1327e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.089696843 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.026904858 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019802884 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012086501 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.026252271 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.2608e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067917651 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.750492074 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.090235039 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.038039087 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.048646241 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.208192463 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.870374668 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.6618e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.002512959 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.229321437 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.062332006 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.126194666 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.2754e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.052382099 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.0897e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.055270915 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 9.5532e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.021141169 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11369025 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070242049 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.6285e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001706396 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.095056697 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027104447 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001970452 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.5624e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.8543e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.405e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.119105649 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.520512813 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.00155211 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.832e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 7.1916e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001261346 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053538523 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000129745 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.7833e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.020697201 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.1421e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.4747e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.106278436 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.306e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.6848e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000136781 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.3394e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.016757353 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.000827914 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000722125 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.171074345 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 3.4075e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 7.6097e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.527334278 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.7208e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001498555 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.8628e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.3068e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.4441e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.010934585 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001098568 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.533087495 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001574404 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9977e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007569948 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.6154e-5 seconds)
  done (took 24.500469436 seconds)
done (took 42.99155478 seconds)
(9/11) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.088269574 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.087607776 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027644763 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.049239616 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.038156151 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.148312727 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100116702 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.036652723 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019881348 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032610799 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.044576786 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036655119 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.021076193 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.054939001 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041480984 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.029247328 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032892442 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031331875 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02125079 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.02600955 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026873001 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022962143 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020044207 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020392647 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032496714 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023071251 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027665716 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020488882 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026574356 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027445558 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.03037361 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031210055 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019668066 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041059276 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.052039727 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.02063338 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026991232 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.0227e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033101163 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.070812652 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.7979e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036683852 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019671692 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.100834204 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071792126 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021421084 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075210507 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057565556 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039789981 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028578833 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039395654 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039456763 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02626329 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.026293172 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025660918 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.03048224 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.025297738 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.030277955 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.02127736 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.050752804 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.021378529 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.058116945 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.037297343 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026193781 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.0226e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020580265 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039380966 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028793155 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025956458 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027390105 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027611902 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020217897 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026718032 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031330869 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041913949 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.03039203 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.053591645 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025215735 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.031698551 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026313675 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.026465258 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038616029 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043357187 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.03219706 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.057228266 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020404838 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03247084 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.028632872 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5329e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036259386 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.0561e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057049625 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.033985576 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.028726692 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031263889 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029047853 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028470432 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036807788 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019229575 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035112601 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.019973187 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.030603127 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026178637 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.03438639 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.5912e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028589339 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024028592 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.5772e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 7.963e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.048617263 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026224847 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.033594726 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.030479032 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020519321 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027452939 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.028670908 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.035267089 seconds)
  done (took 4.903911549 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.032751431 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.051461743 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.131169977 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023779964 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.094384413 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.065706181 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.045105521 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.10567931 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040725963 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.165490878 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.041486726 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.143615764 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149138135 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.040885869 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026201153 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.040883288 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021083411 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.089097712 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026688529 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.022825718 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028541196 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.040317133 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02190918 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022581276 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.020930402 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.021650511 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043029658 seconds)
  done (took 2.539666245 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034447018 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.033524982 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026214736 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.042458612 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.024071896 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.03306891 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025641867 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.030940992 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036259032 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023463345 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037411937 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.022010385 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019554727 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.063395947 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027158522 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.02718355 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02799124 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019329752 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022928944 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021658089 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.028550696 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.030060998 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.054679056 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025640277 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.5039e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021550281 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.037179254 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033724128 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021532337 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.0675e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021070588 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019372278 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022159324 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028939689 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021379857 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.02402985 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.021107083 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.8617e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019250202 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.020931892 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022425395 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038351344 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020459024 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.02874369 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035417349 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.2216e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.03519628 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.032694725 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024407914 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041663103 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030612536 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020649789 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 6.0269e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.4515e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023665603 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020623494 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.6436e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.03311409 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024758259 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020105639 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.9395e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038106877 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021746095 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.038924794 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.033027051 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022005421 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.943e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000139891 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.02808696 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.7871e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.1346e-5 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.7311e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.03839702 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026953656 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.039105373 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023730031 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025370756 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026973971 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.7731e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035601422 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.028796209 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.0302e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020967742 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.9689e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.8796e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027439227 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024250561 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.032959955 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.9041e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.6194e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.041200535 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.2772e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025557436 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.4992e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021933277 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.3181e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.4342e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037989036 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 4.2507e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.4205e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.1875e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03846977 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.0379e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.0105e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.2173e-5 seconds)
  done (took 3.192799427 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033524267 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.031961385 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.055810964 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036219177 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047219776 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037039306 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020573226 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031727143 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021629045 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.025555748 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021575892 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021796096 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.044001958 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038708908 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045572668 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035377704 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032418667 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.050414675 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021806085 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.043961585 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.046189488 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033333964 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.040103712 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.036901495 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031466008 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.048668287 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037685716 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040740562 seconds)
  done (took 2.003454275 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027406682 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029869451 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024004152 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.027947339 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029803043 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030227288 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.030849772 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02179639 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026649935 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022474249 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.029710364 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028276804 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02638073 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023802014 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032332952 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026945245 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.029643935 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022508595 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.0263705 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027797152 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023199576 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.02769769 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030340124 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029812166 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029709642 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026315009 seconds)
  done (took 1.705110979 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023303172 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.027714393 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.029723001 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030612095 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.036742736 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.0653629 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.037755153 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.031477573 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020271861 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029620529 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005627921 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.021417624 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.034053394 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.023614877 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021235766 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.00472225 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.020627825 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.01179891 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027564458 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.02155012 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.021891753 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011656341 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005403472 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012987782 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012209065 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.3269e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02849123 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026156149 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026231999 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008696917 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003250997 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011849454 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.021735631 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.01177083 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005444043 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.010026132 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.7039e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003416535 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011471999 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008337122 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008337815 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.566e-5 seconds)
  done (took 1.768171319 seconds)
done (took 17.079357214 seconds)
(10/11) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.059793939 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.168627708 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.046515554 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.056051562 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.071613238 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.072885737 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.031087664 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.058606494 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.041055503 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.079872679 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.047007114 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.107896781 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.041559223 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.0695788 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.8791e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.054636385 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 6.345e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.07287822 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.027820562 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.079131037 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.028409766 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.5029e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.079402833 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.094111883 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.066452818 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.047133453 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029564962 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.068936737 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.067304924 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.087150329 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.048835632 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.0157e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.06269362 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.067480159 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.064653212 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040022318 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.077458886 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.9512e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.069109794 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.052926078 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.05278285 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.072768388 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.044050062 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.0857359 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.076143436 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.061534106 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 3.1505e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.091984446 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.061028853 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.855e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.064884361 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.048238999 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.065869061 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.057486367 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.057062462 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.08077395 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057660186 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.7315e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.087024549 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031869565 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.073359352 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.03147275 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.9401e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.04879233 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.06061837 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.03188758 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.046376377 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.128e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.07594013 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.4629e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.8925e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.083204402 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.2195e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.043895847 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.06336142 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.046877269 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.088950295 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.6652e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.5468e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.057791778 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.064514306 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.067759066 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.041414706 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.7663e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.4955e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.072169054 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.5548e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.056375444 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.5521e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.8353e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.045005199 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.058266907 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.0578227 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.067753722 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.061221081 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.066201869 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.8997e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.031896344 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.049821923 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.066248091 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.073325378 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.073042786 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.2108e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.058609694 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.416e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.064685018 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.068094821 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 3.5326e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.068315965 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.3214e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.3066e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.51e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.031885598 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.429e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.5511e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.066697761 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.065741413 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.0511587 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.056954866 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.3926e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.028812704 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.2867e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.030804349 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.058510209 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.2853e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.070773501 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033119283 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.7301e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.6746e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.9233e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.066375423 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.3793e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.070171341 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.03231024 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.3206e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.062738553 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.067102995 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.053810278 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.061539368 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.528e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.077919241 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.076585335 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.050486457 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.069661845 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.0014e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.9735e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.03186373 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.068063641 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.056300436 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.9222e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.6394e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.6549e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.1001e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.061159708 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.4211e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.052037746 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.4283e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.6462e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.6752e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.072378853 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.9648e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.6472e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.7191e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.3456e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.067379075 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.6018e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.6495e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.05170443 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.0153e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.036833465 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 9.3925e-5 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.2699e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.4786e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.057732616 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.051227137 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.061183772 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.075021242 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.9876e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.057739566 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.062663984 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.3972e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.6901e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.7741e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.2065e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.1984e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.0386e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.4334e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7279e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.2766e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.6107e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.050927432 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 3.8805e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.7998e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.6938e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.051188973 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.041959689 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.1979e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.0626e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.029988192 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.058660141 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.9415e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 3.0492e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.038318734 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 3.3204e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.065944048 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.604e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.2279e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.041086719 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.7984e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 3.32e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.029664425 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 3.319e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.3656e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.036539057 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.2004e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.033419805 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.060942764 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.02901662 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.4875e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.1499e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.7046e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.040216295 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.2887e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.2171e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.067795583 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.6901e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.6106e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.070388004 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.9473e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.9363e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.060697061 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 3.322e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.4132e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.2648e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032861817 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 4.0676e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.056577546 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.4348e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.3452e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.8206e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.2949e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035740602 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 4.2288e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.9833e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.05944873 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 4.2276e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.02512802 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.072882112 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 3.5326e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.1586e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.0015e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.2009e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.9259e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.9355e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.061569571 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.3358e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.2283e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.4156e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.045847932 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 4.1489e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.3311e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 7.147e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.5359e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.4699e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.9918e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.1665e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.1997e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.8097e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.3945e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.3028e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.029078973 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.063398574 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.3428e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.5561e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.039505463 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.3265e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.9321e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.6732e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031808125 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024288605 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.4899e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.041e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.049878885 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.2461e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.7217e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.9173e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.035784509 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 3.645e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.7049e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.8339e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.8015e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.486e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.6788e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.7905e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.074161185 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.031580184 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036703116 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.048258496 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.3786e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.8317e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.070250925 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.1632e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 4.0499e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.9512e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.7584e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.3713e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.6183e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.6299e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.053607422 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.0361e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.9635e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.5524e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.6512e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.0843e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.4624e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.8513e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.078253566 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.064523979 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.1776e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.045040199 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.6393e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.9404e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.8359e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.9085e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.6619e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3941e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8283e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032015983 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 5.9036e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.3887e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.8969e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.0835e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.1667e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.8437e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.5076e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.2791e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.04787962 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.6214e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.825e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.056820186 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.8822e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.062954647 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.7852e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.3759e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8696e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.9617e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.058212245 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.4988e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.8679e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.086e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.2938e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.5611e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.0001e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.9552e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.27e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.762e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.8494e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.4596e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010884538 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.6669e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.4539e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 5.4831e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.6997e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.9105e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2066e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.9755e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.9628e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.0977e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.6644e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.5048e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.4562e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.5533e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.6634e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.773e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.0462e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.6562e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.4727e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.7831e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.5408e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.6785e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011295789 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.4989e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.0956e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.6164e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 6.7435e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.9964e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.1361e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.0457e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.3536e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.7532e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5986e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.4753e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.6953e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.446e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.7831e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.6635e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3031e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.7205e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7189e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.0096e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.4551e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 8.806e-6 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.084121509 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.0086e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.7122e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.4008e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.4468e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.0553e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.9908e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.2683e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.1898e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.031893526 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 3.5586e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.5276e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.8663e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.916e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.4577e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.3634e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.5521e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.4671e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.1647e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.5425e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.9177e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.029900442 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031490601 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.8057e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.9575e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.057468496 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 4.8188e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.4806e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.6804e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.238e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.5549e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.897e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.5424e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.2169e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.4664e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.3146e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.7431e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.9859e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.6305e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.0734e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.962e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.1247e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.511e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4903e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.0965e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.6594e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.3144e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.2138e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.4968e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.5934e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.6732e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.917e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3746e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 8.086e-6 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.4679e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.6015e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.1614e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.066738804 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.5913e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.3763e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.7962e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.1986e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.7915e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.083727008 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.074486169 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.49e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.2819e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.8231e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.4639e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.7112e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.9261e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.1386e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.4113e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.666e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.9849e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.3429e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4585e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.8487e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.5544e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.0987e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.167e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.065151385 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.5138e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.7741e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.5428e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.9308e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.4693e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.9958e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.808e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.9566e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.4392e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.9769e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.06181496 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.795e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.061201011 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.3226e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 3.7161e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.8962e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.8495e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.6933e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.256e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.031024777 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 3.8093e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.2856e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.1993e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.4063e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.2294e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.7471e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.4565e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.4545e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.913e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.4361e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.5532e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3339e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.0305e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.2154e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.1328e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.0295e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.4062e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.453e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.027e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.0738e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.3559e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.4698e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.7509e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.5404e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.059107528 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.9792e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.6493e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.028432153 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 3.6257e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.332e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.9335e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.9822e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.404e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.2878e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.8919e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.0942e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.3204e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.4912e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.6959e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.1289e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.5578e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.3678e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.9182e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.4426e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.5611e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.3397e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 9.312e-6 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011123619 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.031751428 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.2729e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.1139e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.5241e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.5105e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.6053e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.8763e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.435e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.056169905 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.605e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.039881751 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.5974e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.8658e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.9825e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.4046e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.6529e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 3.5633e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.7475e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.5229e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.0162e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.3461e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.9234e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.194e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.3592e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5944e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.9997e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.7616e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.9316e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.5619e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.4029e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.5029e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.984e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.9702e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.0173e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.475e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.2572e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5176e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.8108e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.7727e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011387298 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 4.1032e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.3232e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.3909e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.2556e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.701e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.0842e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.6848e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.9586e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.0854e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3377e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.0815e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.4301e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.3953e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.9717e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.5535e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.3039e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.3417e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.7498e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3094e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.7985e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.8304e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.4575e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.5764e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6032e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2988e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.284e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.9373e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.8486e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.4525e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3308e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.7709e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 9.742e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.7846e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.8268e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.8518e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.2139e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.4908e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.493e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.3064e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7471e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.7041e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.1875e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.6255e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.7077e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.2108e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.6171e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.6833e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.2535e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.9447e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.5642e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 9.372e-6 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.8588e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.191e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.3854e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 6.1801e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.5273e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.1121e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.8256e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.492e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.5884e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.8852e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.4233e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.7713e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 3.0233e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 4.2143e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.451e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.491e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4528e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.4277e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.527e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.4975e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6954e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.2016e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.5359e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 5.0936e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.1938e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.4909e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2691e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.2842e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.5155e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.5467e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.2415e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.6496e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.1128e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.3645e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.5821e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.8174e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.5052e-5 seconds)
done (took 11.567342601 seconds)
(11/11) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027806264 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.029665049 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.117370516 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.075914016 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.060902598 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.038189397 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.038810326 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.035211197 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.113948332 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.141566222 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.3501e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.045468871 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030277553 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.119033978 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.032145461 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030740982 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.025971373 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.033528795 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.05991034 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.041714682 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038649794 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.237571289 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.030692902 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030463027 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024803065 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038199757 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033215161 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.112769917 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.168807441 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.037945113 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.0292432 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 7.3123e-5 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.029566843 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.09154383 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.056131496 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030070842 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.031123125 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.210673311 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.17856039 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.03219343 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.036935932 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.096531952 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.037464442 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.194943516 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.029544855 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.158366493 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.119820592 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030033666 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.029995051 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.044584443 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024335022 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.029588232 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.110814828 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.114553571 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.5118e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.2355e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.194136497 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000220079 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 6.8507e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.0360782 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.06549467 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030177584 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020047389 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.02695124 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.033387072 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.040823143 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029739322 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029141454 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.180848553 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.094910622 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.120187799 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.038038662 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.030202355 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.052898487 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.037674359 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068549646 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034703375 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000128543 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.030157284 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045403117 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027704746 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.089704968 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.107482983 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 9.1516e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029769057 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.03500876 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028017169 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.134163462 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.000103579 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028703916 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.2352e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028175785 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.141582521 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.030023565 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.029045698 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.027845152 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029264265 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000236336 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.4108e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.141731536 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.188516823 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.088241224 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031170631 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.029921657 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031805871 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.153262819 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029512024 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.075029453 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 6.6368e-5 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.026116843 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.031975408 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001839539 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029802753 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 7.1332e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030521602 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.027611121 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.111286104 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.028941647 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.036486247 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029062614 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.140431621 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.092481987 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.03121946 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.038470776 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.028245883 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.162918513 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.028047387 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.036758169 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.091901965 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.974616185 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 9.4921e-5 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.028654417 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.02898537 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.03117546 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.037008226 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028839046 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029439513 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027049651 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.085680548 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.113647635 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001330469 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.087559469 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.0484589 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029533184 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.108565947 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.032434661 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.054179572 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027884571 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.194123173 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.6989e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.233586484 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.028224881 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.030349561 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.6939e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.171885209 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.18283661 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037635137 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.1403e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.8016e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002757731 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.252759261 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000136606 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031870221 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.044500051 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029949564 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.151085115 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.135052777 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.090316507 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002341717 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027844531 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.03424189 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000886013 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.9116e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.048750385 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.236932772 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001220363 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029927152 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.144627387 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.036445526 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.805e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.091024446 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.028942089 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034149756 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027266471 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.160645176 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029856384 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.134845119 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032244995 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032082359 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030065114 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.112114742 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000103193 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.02827262 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.181861038 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026764134 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000116789 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024785684 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.031110501 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.5198e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.089837437 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029826025 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.03735901 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.09837463 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033804935 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000153539 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029813811 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000109715 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.025520748 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028487139 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.512143266 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.038863454 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 8.751e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.088980585 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.030933232 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.113122761 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.274460389 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.156940376 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.4477e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.4294e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030888626 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.29006963 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 6.9698e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030005448 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.03174431 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033796251 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000108858 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.3504e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.03069662 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001707147 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034228336 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 8.9699e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.030133635 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.0409e-5 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.111243211 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.4282e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.444e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036766288 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.034341054 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.041624953 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.09120141 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.091199213 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.032e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025982132 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001197956 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.1826e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.034211791 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027536007 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.357e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.035287997 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037915907 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.6695e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.141321597 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.6124e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031419767 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043596816 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 4.342e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.0927e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028856273 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024634928 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065434195 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.04563891 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.5098e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 6.9659e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.0824e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031033416 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029575619 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.1295e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.482e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.5189e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.032865475 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 8.1294e-5 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002401084 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.088844405 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.029430228 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029192006 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.034341294 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001720528 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.108060922 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 3.6071e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.028978903 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.062638373 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 8.0873e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.0122e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033752376 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027121697 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025838642 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.035236696 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.246935952 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.203381193 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.4982e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 4.8318e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.030996971 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.036034041 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030815672 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.034649017 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 9.9618e-5 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.922622418 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.038724697 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.183050476 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.002526866 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046321197 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.00195977 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.177479618 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 7.3992e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036878846 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 4.1289e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.030613262 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.029684007 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.030117523 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.037093714 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.037016954 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.3341e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027357718 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.027230712 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 3.6857e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.000100944 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.4176e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.034167641 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002243969 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.6714e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000110141 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.033955415 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.03712662 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.223272687 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034783917 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.059788874 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044274599 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 7.9965e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.000901584 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.1137e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.032199958 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.2854e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.8006e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.1077e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 8.4038e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.096724276 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.3345e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001501277 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.7894e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.9909e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.7723e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.8201e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.2981e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000695162 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034475335 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.0317e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035417432 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000135888 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.072254214 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.229093814 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.038436263 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.045198099 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.030336234 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046195769 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 9.6575e-5 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.000911747 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.137869756 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.9161e-5 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.041493025 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.033800433 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.7912e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 7.3318e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 6.0109e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.6979e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031180918 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.7098e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.030576312 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.2824e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000124753 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.117550405 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.886536017 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.036127467 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001769341 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.029654237 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.030499673 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.5081e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000684909 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.2279e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.038539299 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.044074254 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001809542 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.8501e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002930681 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.02781599 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033778406 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000115916 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.4577e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 7.7755e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.544e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.0938e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.306e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.032007643 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3266e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001686972 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.02940643 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 7.5998e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 3.6235e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.4613e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031714295 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.0735e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066964557 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.0961e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 6.0222e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031311613 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.033990193 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000129896 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.2206e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 4.963e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 4.7312e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.025975237 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001607753 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.0278e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.7218e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.00011445 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 7.1008e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.147708511 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.033848309 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.8718e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.029846271 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 7.297e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.496931178 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.6306e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 4.9083e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.4367e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001667667 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.5714e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032629784 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.4576e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043614635 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.0668e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.03726598 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.32321711 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.034795248 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036997908 seconds)
  done (took 24.360513467 seconds)
done (took 25.395711713 seconds)
RUNNING BENCHMARKS...
(1/11) benchmarking "problem"...
  (1/1) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 6.147683944 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.138438565 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 6.145081705 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.103884983 seconds)
  done (took 25.631217285 seconds)
done (took 26.809826074 seconds)
(2/11) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.102061382 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100680767 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.10477518 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 2.612669462 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 2.49629614 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098411962 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 6.09950497 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.099808322 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099986068 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100353131 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 6.100772456 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.099320981 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.097983543 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.100551547 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103693826 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.09870602 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100216195 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.098418353 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.097686207 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.101919847 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.097131688 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.101018625 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.099603942 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.361310331 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.105230703 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.100952162 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.101651611 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.156941466 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113741135 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.156691207 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.13217365 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.103549986 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100197692 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.099173344 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.101024307 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098340596 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.100287464 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.100820501 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.100226558 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.098917415 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.100326197 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100110502 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.097977768 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 5.251226242 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.360978601 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.103710218 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.101700437 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 4.908791386 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.098341454 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.098976407 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.099049034 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.098472923 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.101443317 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.099778443 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 1.833842455 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.105299505 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.10172616 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.099397578 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.100902009 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.099203094 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.09817575 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.1064847 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.100530332 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.100780152 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102477674 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.383952853 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.10667671 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.101811668 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.1009472 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.100039194 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.099485692 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.10449949 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 6.101416307 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.101326147 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.101191673 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.938198144 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.152382855 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.100968572 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.100716106 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.104892168 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.100285293 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.102371011 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.102070104 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.105419847 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105477452 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.117826072 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.105034995 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.099317469 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.10060221 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.133880496 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 6.101141054 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.10473603 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 6.104374255 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 2.495515623 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103823608 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105876568 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.099990678 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.101792494 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.294794845 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.104061278 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.102048387 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.099389498 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 6.099992326 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100679915 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.444487732 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.103394649 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.099459555 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.134648608 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.122798027 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.56905847 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.364225062 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.101240689 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.098686549 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 4.575963535 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.100813861 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.101494347 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.10067612 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.102412644 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.101910378 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.101995704 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.105769458 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.101428959 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.571637699 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.107205667 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102065411 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.581313118 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.100994044 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.171963214 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105182051 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 6.105071715 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106208564 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.102362927 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 5.493067725 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.105342281 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.103560716 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100600192 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 6.101080483 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.109122387 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.08263272 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.105654662 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.128124092 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.255672881 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.104942972 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.105900107 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.116365681 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 6.101428383 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.104793019 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.099962475 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.100405609 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.104646163 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.101021874 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.099672626 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105641436 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.199151584 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 6.105026508 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.238027474 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 4.815990443 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105512039 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105581549 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104773592 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.13093378 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.103664583 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104196804 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.276583346 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.104349267 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.105554391 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.102084621 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.100446148 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.103066081 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.105504504 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106528678 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.101956494 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102566371 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.101508275 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.104397792 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.242922544 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.103669374 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.102200314 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10266746 seconds)
    (180/608) benchmarking "5d"...
    done (took 4.401006872 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103246329 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.103089083 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.108599951 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.529393651 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.105249499 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.10409584 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.108291647 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.103980888 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.158669173 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 6.104431787 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106391762 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.271984934 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102970326 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102143456 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.112070106 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109683357 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102568354 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 2.499178162 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.10787168 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.104531492 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106377645 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.102713845 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.101830589 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.363587324 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.10770141 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105099531 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.104979707 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 3.00946851 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.107277635 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.102937484 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.114540272 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.27174605 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10375859 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.105805332 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104102031 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 2.684858235 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106744867 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106363319 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.103784512 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.525756306 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.103500472 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.10187695 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.105957579 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.21103036 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.212518997 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 6.105452428 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.10107107 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.111676816 seconds)
    (229/608) benchmarking "6d"...
    done (took 6.102565815 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103232725 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.253517679 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.11285624 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.106702655 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.103676448 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.103765384 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.107416305 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 6.104695119 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.10226724 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104621438 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.106455734 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.103949652 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.101018571 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106944122 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102686931 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102930454 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.101141268 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.362984498 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.110388262 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.108679091 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.10468772 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.155931445 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.102354841 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.639315449 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 1.584202291 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 6.105876832 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.102889642 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103665772 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 1.514713314 seconds)
    (259/608) benchmarking "3d"...
    done (took 2.720711931 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.107595752 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.107806943 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.107438767 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 4.928066801 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103978763 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.104892744 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.355233067 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109222174 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104000001 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 2.475640188 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.139764427 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.107329454 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.107044626 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.291611564 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.112253408 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 4.601913562 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106079848 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.104450963 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.107403551 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 6.106429205 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.109187932 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 6.105921552 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 6.106799118 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.105781297 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.104108553 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.648931856 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.109567172 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109219072 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.110355652 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.104181254 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.104107826 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107525481 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.110363975 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 4.948124983 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.324995095 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.107519704 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.104017409 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.201247764 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.211181525 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.104828943 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 6.106330246 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 1.51627152 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.10798277 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.108644386 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.110506102 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.212441659 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.107407025 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.104487155 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.253941985 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.568358246 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.115488361 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 6.10698327 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.110587742 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10421445 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.107860243 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106860346 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10413687 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109455357 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.107954171 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.194422352 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.105138555 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105780098 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.487346444 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 6.108530911 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104705606 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105890315 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.104344996 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105222725 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.123540404 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106983541 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.125655583 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 6.108330504 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.103588397 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.107526488 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106744209 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.666676723 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.111092195 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104716704 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.108307365 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 6.208655097 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.357018288 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.350135342 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106206424 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104493488 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 6.103682727 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.941589526 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 1.528590947 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105741398 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 2.991513206 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.105601238 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.397052431 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.118878048 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.449287839 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.10666266 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109021654 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108472897 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106622022 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108760485 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.256735624 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.117065229 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109519475 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.109764865 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.105154571 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.452926351 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.118256844 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.10793486 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.043803333 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.141409324 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.547548682 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 2.219249203 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106526637 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.132118573 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.127598649 seconds)
    (373/608) benchmarking "7d"...
    done (took 4.142404236 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10635922 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.105447738 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.313450349 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.110776843 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.105826768 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109189648 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.10595244 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.107712216 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106557144 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.11243835 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.108854967 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105449282 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.11721519 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.108553179 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107892097 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106518623 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107005943 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.104975056 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.103517515 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.107508162 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105043036 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.110308272 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.10567106 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.105268564 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.10714242 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.453239903 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.602173233 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.106689787 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105341348 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.44941534 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106164791 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.104210828 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.124743503 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107784368 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105368022 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.108001374 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106545535 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.105671445 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.358908419 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.115257854 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.105711965 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.707515714 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.019870096 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.104825155 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.231524691 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.690259486 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10861879 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108024264 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.603521118 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.342048275 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104008715 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.11010953 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106307718 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.106305236 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105698885 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.135040249 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.107766403 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109087345 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 4.598524938 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106658249 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106811265 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.10585013 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.107393945 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.105215442 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.384805195 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108716629 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.111749207 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.104406389 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.1047568 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.233674873 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.680747238 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.138092022 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.240733517 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.216488931 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105633833 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.11146174 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.104793366 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.135299635 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.110707509 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.108062841 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106396156 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.10535497 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105962337 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.10559089 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10652578 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.135048304 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.107003115 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.106265352 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.105110871 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106905114 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.111041836 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 5.273567602 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.108507601 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.63922077 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.12630667 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.240888532 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108382485 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.107585522 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.104153964 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106076041 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106500588 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113404132 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.107721229 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 6.106886689 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.104222073 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10816603 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.110905342 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.10858641 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.10849345 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.109335056 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.10777594 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.109627303 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.108511775 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.112649125 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.103359988 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 6.109210731 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.109466453 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.105954084 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.110788697 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106209598 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105209454 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.10437044 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.104308208 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.752254813 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107890067 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.84828616 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106738668 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.489132378 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105805614 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.107810404 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.10917025 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.112228267 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106877331 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.105543479 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.275192966 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.104347436 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.105382384 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.105729874 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.108359522 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.11452046 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.214310109 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.142588891 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109117214 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.633724601 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107783804 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.108491966 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.107603063 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.107865724 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.105551973 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10890571 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.110105472 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106706255 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.10768586 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107284668 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105486348 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 1.782119421 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.145790026 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 4.531215944 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 4.715137992 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.105811364 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.227532196 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 6.107936415 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.687362779 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111755068 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105627067 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.110520407 seconds)
    (540/608) benchmarking "2d"...
    done (took 2.496797837 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106398909 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 1.752283283 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.285291699 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.210404048 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.346870926 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.108112033 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 6.106827628 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105195939 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.176696618 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.112009416 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.347150556 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105290693 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105950814 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.105296798 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.107218124 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 6.106944909 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.403081147 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104575427 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103817348 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.038009706 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.123433427 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106312254 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109004092 seconds)
    (564/608) benchmarking "4d"...
    done (took 2.981138225 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.559931054 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.114798469 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.190883029 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10508211 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.105388087 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.120762342 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.110526933 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.107370716 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.110387744 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.107172206 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 6.106958497 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.111546274 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.200935937 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106846758 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 6.106892807 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.10541642 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108489401 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.109353576 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.107215607 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.104519924 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.106539352 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.690190962 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.112479622 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.391122434 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105798981 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.107972718 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.940517736 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.108231946 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.107557814 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.10866823 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.109108457 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.106385017 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 6.10413542 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.103809046 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.111772624 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.107915352 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109292023 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 2.783310051 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108344808 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.107196091 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.637410803 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 1.568532673 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.108986499 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 6.105228019 seconds)
  done (took 3213.104954235 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 2.333023888 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 1.183237991 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 2.001937508 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.077358433 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 1.516017644 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 1.671791952 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 2.035883474 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 1.538725024 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.924647873 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.971273665 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 1.989625466 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.013499343 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 1.835512525 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.926668494 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 1.976337835 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 1.27858034 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 1.984969817 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.225936825 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 1.208570008 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 1.632310997 seconds)
  done (took 37.43243599 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 1.119411306 seconds)
    (2/17) benchmarking "4467"...
    done (took 1.341877827 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 6.11488046 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 6.104448623 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 6.109794205 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 6.105801539 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.108868753 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 1.155842895 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 3.448445511 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.643369631 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.765023961 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 6.1102819 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 2.751973494 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 6.109642887 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 3.127026771 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 6.108008107 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.814087426 seconds)
  done (took 71.143346608 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.192186006 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.361543469 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.181470319 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.232351778 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.159205295 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.282249768 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.520051314 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.238247375 seconds)
  done (took 51.271773399 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 1.650784751 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 1.727518226 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.210375367 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.903624046 seconds)
  done (took 8.603829782 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 6.1106833 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.925876134 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 6.104607511 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.483033405 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.11590279 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 1.936720117 seconds)
  done (took 24.782191079 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.997047863 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 1.277327027 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.125694394 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.108086344 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.114398632 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 2.002832944 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 1.306709279 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 1.728062475 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 1.727476879 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.111190613 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 2.294333991 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.232857376 seconds)
  done (took 39.129232761 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.468757262 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.619088487 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.320439302 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 1.296442932 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.516379022 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.646647164 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 1.210146062 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 1.396156991 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 6.112294568 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.148581131 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 1.318967735 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 1.173026692 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.351207885 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 1.172948885 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.356846785 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.496114085 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.545250235 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.148025874 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 1.437307951 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.522541277 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 1.322421831 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.425066086 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.517574565 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.761159719 seconds)
  done (took 39.389768143 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 1.344527565 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 1.321174852 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 1.340815568 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 1.352775529 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 1.352171939 seconds)
  done (took 7.8161615 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.147288529 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.211301966 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.274398632 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.200697725 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.109191561 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.108122768 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.110084455 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.686978805 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.052938913 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.864452974 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 11.700847523 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.205772149 seconds)
  done (took 89.776350119 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.111610815 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 6.110378652 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.118711517 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 6.110070729 seconds)
  done (took 25.55827807 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 1.169714161 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 1.20986034 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 1.566183701 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.376301944 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.178472828 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 1.343105215 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 1.33969472 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.206711135 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.200329435 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 2.635833444 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.196238518 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.639551818 seconds)
  done (took 19.169247428 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.456876706 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.427408388 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.457971774 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.464636943 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.427832687 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.409663441 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.409661251 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.479711954 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.459866669 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.48049205 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.352038749 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.426232602 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.460807333 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 1.794127074 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.478919076 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.348972514 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.456445351 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.46340281 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 1.795424452 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.458562138 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.34839594 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.425657421 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.478951305 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.347808773 seconds)
  done (took 36.219970973 seconds)
done (took 3664.494102767 seconds)
(3/11) benchmarking "misc"...
  (1/3) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 1.624489035 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 1.414386772 seconds)
  done (took 4.144702199 seconds)
  (2/3) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.283823072 seconds)
  done (took 2.389448773 seconds)
  (3/3) benchmarking "julia"...
    (1/1) benchmarking ("parse", "array")...
    done (took 3.205969761 seconds)
  done (took 4.312245983 seconds)
done (took 11.955245888 seconds)
(4/11) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.385089175 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.109734967 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.210313196 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.010987315 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.870486839 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.201572912 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 4.916176605 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 5.10806354 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 1.517246602 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.228761358 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 6.12853059 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 5.035213406 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.676649807 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.339737319 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.920854176 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.288235423 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 4.87044644 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.521791032 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.43800674 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.506135415 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.715855106 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 4.828077243 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 6.108110914 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.311546707 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.141179218 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 5.275804658 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.094855147 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 5.768278454 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 3.128293179 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.279666295 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 1.634762794 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.042886037 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.234316741 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.386483218 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.212121838 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.11302161 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.430377827 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.891088235 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.321941945 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 5.669670019 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.11655353 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.274140313 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 5.998701287 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.022675047 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.689637374 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.110119347 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.06276097 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.232529412 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.27403131 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 4.839593028 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.295858905 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.131014301 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.307519881 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.82544243 seconds)
  done (took 164.159351877 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 6.375327425 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 6.310281687 seconds)
  done (took 13.826691121 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 1.495689739 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.900796921 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 3.057438879 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.895176247 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.881200539 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 1.524109449 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 2.549068863 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 1.757621966 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 1.591158121 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.266728539 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.755143007 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.277031864 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.642004463 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.611520668 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.61917755 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 1.755599447 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.391034533 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.724506165 seconds)
  done (took 36.810573024 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.527255831 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.68546204 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.501393521 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.108100406 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.08188 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 6.111679417 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.801510899 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 4.375095626 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.540324453 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.59329348 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.108663958 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.672097696 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.599347599 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.909711444 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.111494718 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.106916489 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.543746907 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.110042183 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.430216878 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.118729356 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.319669993 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.681480691 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.557309942 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.116468232 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.378698997 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.113280154 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.108012185 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.250086611 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.112248106 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.119402755 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.618682532 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.108125817 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.371452738 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.114860052 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 5.592602361 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.112387589 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.109978469 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.108864225 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.496289032 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.11395117 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.109050995 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.558052828 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.115878525 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.945336356 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.66568961 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.883225103 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.470827636 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.65886423 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.696025519 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.293029182 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.346362907 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.692096871 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.114834241 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.6803089 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.575848495 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.113049576 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.605539663 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.112440724 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.58376961 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.590992348 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.053637424 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.107877331 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.624192856 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.507367687 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.120402827 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.039348375 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.732931851 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.112985777 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.036132526 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.107506061 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.067264939 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.767551889 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 6.108778818 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.112847677 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.84791681 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.625107349 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.109743761 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.110754683 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.50130836 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.544969845 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.126464745 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.079678181 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.116970899 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.118244729 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.10777363 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.96715594 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.113436393 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.11481145 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.94520284 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.600879775 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.057950209 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.114482891 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.586186782 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.121153643 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.11016743 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.506824245 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.909101474 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.110155031 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.347465589 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.115597157 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 5.733353104 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.114920156 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 5.254971011 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.593178787 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.106636401 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.620343796 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.623570785 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.114003179 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.107676186 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.395787549 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.119191277 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.701490888 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.705674418 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.088244632 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.110988895 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.114854576 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.116846529 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.11096325 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.62242991 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.117266497 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.110112503 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.11402159 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.56866425 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 6.111452765 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.627571751 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.644031159 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.901140533 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.112795968 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.110807329 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.110125587 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.724651402 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.073061302 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.119631456 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.112280013 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.58288738 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.114573022 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.599207585 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.119455008 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.11627014 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.146369882 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 5.56878143 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.489505854 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.11632573 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.11226642 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.63680748 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.339146396 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.286848461 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.114778469 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.345117768 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.127409497 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.376337443 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.584143683 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.111433567 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.346927976 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.772927247 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 6.112671204 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.498572259 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.549698724 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.410351199 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.115263358 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.49841423 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.11008221 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.408647245 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.616996731 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.108155073 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.109512959 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.466014631 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.519467974 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.304509876 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.870991317 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.688373559 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.884488569 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.697695192 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.110485936 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.115303454 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.809945655 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.115017876 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.11162007 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.114267654 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 5.652199256 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.592512757 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.11272547 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.523431862 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.092644439 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.610433445 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.113111573 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.633578498 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.449156234 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 6.116878595 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.112027521 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.114060841 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.493829567 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.57550824 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.113453154 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 6.11181446 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.599855093 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.837410841 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.640816239 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.109768371 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.820214915 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.12216273 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.113301694 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 6.017549812 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.610729815 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.120514273 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.116225228 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.299193093 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.640528114 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.113643364 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.108766741 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.660790169 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.791754518 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.337731105 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.11814135 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.584926704 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.07552147 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 5.90775329 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.630313017 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.112349991 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 6.113183433 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.659956076 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.492405632 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.638347425 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 6.110112331 seconds)
  done (took 844.159489793 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.640427481 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 6.175073313 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.526548293 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.959652632 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.940682728 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 6.194161109 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.71279764 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 6.262345798 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.543542308 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.664079956 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.424873804 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 6.139802609 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.017589594 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.549997505 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.252510218 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.255832442 seconds)
  done (took 66.366474245 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.176371091 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.161477446 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.207541157 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.156151684 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.1461542 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 6.197939389 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.180462038 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.180351118 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.183759515 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.149110976 seconds)
  done (took 62.84813784 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.59835775 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.248914001 seconds)
  done (took 8.955250202 seconds)
done (took 1198.233867262 seconds)
(5/11) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.147669183 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 1.549451046 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 1.162583691 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.066510087 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 1.571507092 seconds)
    (6/49) benchmarking "13786"...
    done (took 1.140879663 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.143133862 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 1.143880404 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.563609639 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 2.035085228 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.209639992 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.73807125 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 1.700721755 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 1.155772651 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 1.144277106 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 1.145038581 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 1.609516545 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 1.980980795 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.12601386 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 1.145789308 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 1.144444514 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.142846961 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 1.144033985 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 1.146809038 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 1.625431591 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.682154221 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 2.408568604 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 1.170038587 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.576161852 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.144987489 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.146925845 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.144270257 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 1.142109732 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 1.141524274 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 1.868801424 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 1.968117379 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.182575178 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.143354383 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.148597023 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.020552904 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 1.161055722 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 1.149609859 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.144340026 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.147727765 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 1.142362852 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 1.141187174 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.023209135 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 2.335134062 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 1.195322389 seconds)
  done (took 78.121544342 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.17640405 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.173469826 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.247866997 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.302228709 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.175943739 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.168777657 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.183390777 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.351468377 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.184549174 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.17309411 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.232012546 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.176168475 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.178156411 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.165632569 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.168436613 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.303608774 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.168653974 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.168102088 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.165472282 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.163461976 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.245543723 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.173970625 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.173642962 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.17935134 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.166041633 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.167514357 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.237660641 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.172239372 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.248458565 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.165667957 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.17663541 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.163785071 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.168126494 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.176241382 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.173657606 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.181652694 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.163676353 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.300694393 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.177041513 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.233192891 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.29599089 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.162813504 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.179486544 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.169816111 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.163216415 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.163444638 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.178486438 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.158042396 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.16627266 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.231038585 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.175584745 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.233621386 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.15706461 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.296644203 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.173867929 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.170136974 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.237478357 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.180367399 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.299827687 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.191797289 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.162475208 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.241668812 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.173019055 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.294375874 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 1.20857736 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.166178098 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.159427439 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.183610833 seconds)
  done (took 82.556941215 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.193711039 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.191581786 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191523418 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.19079733 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.40145146 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.194993693 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.393983796 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.257737328 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.190594186 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191756186 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.39572986 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190672666 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.250628902 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.190201145 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.193019143 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.246204149 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.407607229 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.192329008 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.249217704 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191207607 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194141332 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.183634011 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.191530208 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.393439923 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192109831 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.19247239 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.171385215 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.190542372 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.192536634 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.171758732 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.249307136 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.19074888 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.194287641 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186675634 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.185039354 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.389827166 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.398624521 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.165930213 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.183806397 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.16481958 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.249399083 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.191512072 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.190060682 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.170834267 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.2494904 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.25257964 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.190239661 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.249453408 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191252829 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.195319036 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.249844252 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190913003 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.213386776 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192204056 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185359651 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.384961842 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.248106538 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.193842356 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.174964639 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.247661835 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191165344 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.246665054 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.253751613 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.194255367 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.191852199 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.212987563 seconds)
  done (took 82.100519486 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 1.118756266 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 1.119762657 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 1.134759528 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 1.133377751 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 1.12282193 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 1.131124325 seconds)
  done (took 7.870840681 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 1.182971599 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.254703414 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.256315314 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.244936204 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.251336785 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96211702 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.245336731 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980136244 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965290925 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.294256029 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.255992588 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.293329087 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.178681051 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 1.178721617 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 1.182257608 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982921109 seconds)
  done (took 23.827589712 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.196932406 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.160532653 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.162860978 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.976493572 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.163502287 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.16236662 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.200381116 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.102605881 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.229183251 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.18306033 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.171176244 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.159887798 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.170620635 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.160247323 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.173114853 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.162714963 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.17052943 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.171294442 seconds)
  done (took 23.987568176 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.25198749 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.162559825 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.298663082 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.349249428 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.191284355 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.252668021 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.167983654 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.339898127 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.349510805 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.340999431 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.290463951 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.299189346 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.166727365 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.291208594 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.2321603 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.167806869 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.232752744 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.229600042 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.167417124 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.229802292 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.163118316 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.192115441 seconds)
  done (took 28.47706455 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.165089973 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.183125942 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.490147473 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18324909 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.466227844 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184588521 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.388229582 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.248583077 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.181412 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.184007955 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.490081607 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.196419274 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.196919871 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186462449 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.185010061 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.183696266 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.202110747 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.470119579 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184115242 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.252074855 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.181733271 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.250880472 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.182236441 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.197468457 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.487154184 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197453921 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.219177592 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.386774134 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.162984261 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.168636542 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184776294 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.181949752 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.182060065 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.195358251 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197509297 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.182333397 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.19700963 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.247754577 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184271017 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.183277114 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.18183669 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.181699925 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.215019776 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187457357 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.25146701 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.254602518 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.198219651 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.174820412 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.193897172 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.177679629 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.195644416 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.187182507 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.48823735 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18223307 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.193246828 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.184813012 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.25589825 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.197722974 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.195343475 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185449753 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.188107643 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.248477272 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.176975591 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.194930283 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.184665956 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.203121433 seconds)
  done (took 82.181870042 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 1.206063102 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.18759043 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.188754686 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.187065757 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.186767378 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.171324725 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.190966944 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.171370823 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 4.649274828 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.188076277 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.169593956 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.114388653 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.16911114 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.187398003 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.652318211 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.207482702 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.187592611 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.163752243 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 1.186867408 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.163821783 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.187213587 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.169063315 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 1.18773384 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.187591497 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.110840077 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.187519688 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.174404258 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.187251923 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.163170252 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.187327799 seconds)
  done (took 53.383344533 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 1.169610235 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.214183271 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.217056345 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.214467794 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.214249484 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.159164572 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.158663475 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.216726976 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.173212647 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.214815363 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.217303018 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.169424533 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.219396761 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.170246731 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.201106147 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.202037914 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.159804758 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.172132508 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.159359907 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.159320768 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.172009266 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.170140079 seconds)
  done (took 27.235465004 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 1.164694211 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.262296905 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.266049032 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079765691 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.262628878 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.332254812 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.165006102 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.250323241 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.080789253 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.250919173 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.230592135 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.164940449 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 1.161720447 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.232255862 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.231136193 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 1.250494121 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.331872375 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.231541894 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.261517476 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.230297204 seconds)
  done (took 29.553474969 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 1.198865781 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.229734828 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.229773894 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.216684186 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.216105338 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.559794108 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.168978902 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.229591416 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.16920299 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.216707976 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.720555394 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.232820546 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.206942757 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.206548227 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.559617711 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.216674782 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.199134166 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.174032988 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.168840692 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.177670107 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.720650627 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.199488476 seconds)
  done (took 29.332344482 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.168070972 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.166469923 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.166313901 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.373549563 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.171759487 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.16645634 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.171626662 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.170770215 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.16627732 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.165939739 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.223964947 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.208267812 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.199484107 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.189350867 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.172379922 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.369259725 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.189637869 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.166303887 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.195313367 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.171554225 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.171902753 seconds)
  done (took 26.255250221 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 1.145149215 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 1.145842254 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.198113673 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 1.161030062 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.135598133 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.148923116 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.131717424 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.213155196 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.134206847 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.146871774 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 1.143284349 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 1.145393564 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 1.148272422 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 1.235596603 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.132301679 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.145613066 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.145023928 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.195025284 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.147899659 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.150602695 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.150628076 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 1.132342871 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.145411459 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.145297132 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.148369801 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 1.175742992 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 1.153840526 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 1.132152104 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 1.132259426 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.147902524 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 1.14525435 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 1.145600677 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 1.148500417 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 1.143092896 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 1.150706081 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.302960774 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 1.175273906 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 1.132011245 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 1.131474955 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.150390649 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.146291658 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 1.163757173 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 1.142467085 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.132185765 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.147629705 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 1.14255007 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 1.145604822 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.131450437 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.132870597 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.148671921 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.13174954 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.14368364 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.133793895 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 1.146634457 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 1.144892622 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.132259089 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 1.13218045 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 1.145761943 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 1.132685396 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.142594259 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.132649453 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.132452758 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.147691368 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 1.132443648 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 1.147441978 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.133546483 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.150397699 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.149004947 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 1.145542189 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 1.143582272 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.23016962 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.150893938 seconds)
  done (took 83.965261742 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.248250759 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.215430982 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.304672638 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.455266195 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.304166198 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.248788607 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.246919003 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.215519457 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.247620522 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.304326491 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.306916742 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.247077999 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.335721537 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.256510219 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.308335199 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.29516331 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.304161255 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.344287572 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.409235087 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.281903356 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.211006411 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.255650831 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.461365221 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.30733911 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.253917187 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.33621656 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.286626544 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.232732054 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.276903519 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.271350433 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.331238362 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.23059293 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.221168389 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.245912112 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.249949714 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.210426007 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.247121135 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.246746118 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.25220307 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.249804665 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.220531958 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.243743573 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.220589511 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.300171013 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.455323145 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.305996297 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.301183805 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.247739519 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.246697685 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.262733184 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.249161083 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.221033317 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.24663491 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.246281409 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.305594232 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.299907028 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.300873131 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.452521275 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.24673329 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.247312171 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.246670712 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.246322351 seconds)
  done (took 80.483790061 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 1.166176779 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.003338557 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.025021835 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.163931655 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.992315795 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.166639383 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.965778278 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.166252635 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.163540489 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.166790611 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.058973209 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.164064917 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.026631024 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.981267661 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.165935581 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.163065752 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.064486158 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.162838985 seconds)
  done (took 28.88075257 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 1.176750555 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.182034976 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.176836017 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.983514518 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.179662305 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.165769445 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.500379751 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.177019407 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.980868482 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.17821684 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.180508343 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.183721303 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.179630918 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.119345575 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.119185422 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.118960876 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 1.178037721 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.119322479 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.500097182 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.17962993 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.176431749 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.179282652 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.164734596 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.178745197 seconds)
  done (took 39.389125348 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.1661491 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.173233565 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.171568836 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.171406262 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.17366232 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.194547138 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.176367649 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.194037578 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.35580759 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.168642097 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.193303867 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.177795851 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.195519949 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.197540308 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.193824457 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.199402977 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.35498245 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.173542663 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.165846405 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.171621139 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.173182113 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.170267885 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.167817808 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.193514029 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.17093285 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.169002319 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.171172447 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.17117601 seconds)
  done (took 34.466758434 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.187921664 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 1.168962527 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.195068224 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.243100008 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.241179423 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.197714675 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.173451875 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.184617526 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.171230684 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.184919504 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.241781433 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.245371727 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.237338253 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.190153394 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.174698979 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.168280473 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.224128637 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.166497639 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.165493897 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.171642795 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.223781624 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.165563303 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 1.17094842 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.245014658 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.165544554 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.168135717 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.232724344 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.194418882 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.241229549 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.197392603 seconds)
  done (took 37.049507638 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.149998875 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.186741187 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.157391542 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.160001538 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.185758334 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.163217923 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.157904591 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.17701854 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.15779246 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.15345905 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.532235529 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.158287261 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.176434347 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.184632622 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.154560567 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.154434614 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.176233425 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.152308542 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.149688494 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.634812956 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.165091669 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.178649148 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.175755189 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.154245211 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.164618458 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.151062942 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.17630476 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.175764091 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.179311341 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.52245654 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.185780424 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.163170109 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.157473964 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.152687819 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.160145331 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.186388671 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.517921034 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.633599226 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.176181802 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.160575965 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.15094769 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.186815113 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.147389036 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.175826346 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.154222656 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.15065734 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.146980344 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.147015376 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.176549225 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.176314531 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.150366707 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.184632663 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.184356575 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.158111299 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.521875165 seconds)
  done (took 67.583039123 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.185492082 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.165190125 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.168326032 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.167891073 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.167588715 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.18571245 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.183457658 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.229261531 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.2161147 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.170294352 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.163213868 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.215766191 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.171052596 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.961887057 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.167407501 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.168672143 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.167375451 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.010545958 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.169049417 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.168021471 seconds)
  done (took 26.313195172 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.181732694 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.18574741 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.168191178 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.182063315 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.219691044 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.171687093 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.575196855 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.219091704 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.221673985 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.226631746 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.635914365 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.164108368 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.163292115 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.579325133 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.182356504 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.155394698 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.168047711 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.169261689 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.170511833 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.155957796 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.63512683 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.186105396 seconds)
  done (took 28.827009967 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 1.159940784 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.343772798 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.273860194 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.289428347 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.158291961 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.222324948 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.23292542 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.298354416 seconds)
  done (took 11.088804397 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.143187242 seconds)
    (2/2) benchmarking "in"...
    done (took 1.143442425 seconds)
  done (took 3.396862259 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.672732081 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.162292952 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.149640362 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.301478881 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.27747097 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.688895306 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.1555799 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.605934347 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.176818583 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.14971702 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.148855807 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.738684368 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.274246133 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.727867271 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.15631797 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.159133128 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.077814068 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.222728199 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.352500388 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.520747379 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.553337907 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.290095796 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.149380427 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.56694697 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.759461156 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.401672667 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.37125851 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.145950317 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.266629618 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.73343825 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.997829479 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.043191228 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.557721245 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.500553761 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.220637022 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.571208925 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.158793672 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.157245576 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.386262199 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.836831997 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.44894453 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.989607833 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.332690116 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.268584925 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.135666843 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.065668135 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.794407978 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.149014834 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.149174643 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.12591872 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.282667484 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.586365415 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 3.402401355 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.1535782 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.61154481 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.98430369 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.149041251 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.702966624 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.397737734 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.005408788 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.858750362 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.045280529 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.037018832 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.978600073 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.85114262 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.394430883 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.166076389 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.148893933 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.144609914 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.149272252 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.01879683 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 4.058200045 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.108306374 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.013937515 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.970189363 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.370694684 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.264444111 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.14943216 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.814563789 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.298669795 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.075161738 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.681832591 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.220693221 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.820930387 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.01838149 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.415114149 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.382353567 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.26721988 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.149103518 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.152368336 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.849829611 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.302582172 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.965080117 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.884707646 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.43410415 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.579206893 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.332225904 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.146891115 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.150152476 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.572794419 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.983313847 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.926565958 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.384242 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.267395742 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.146792172 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.308246802 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.700145989 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 3.311955925 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.306420564 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.637204184 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.655968882 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.30415459 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.239834384 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.080784739 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.726893318 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.026048551 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.675763979 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.151551388 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.148654996 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.524284954 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.362860845 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.150776987 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.148963949 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.148855961 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.0337848 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.963028673 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.052124905 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.188017127 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.11722152 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.536620127 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.193519136 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.253814251 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.27931421 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.153570392 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.151452821 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.150434112 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.858840672 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.066197855 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.202527584 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.150670592 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.692638869 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.582809915 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.306089563 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.634156069 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.804121441 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.861395466 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.986448057 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.893578894 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.965356591 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.289118033 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.179436618 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.483694219 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.282379791 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.149559908 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.152637992 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.835201857 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.021740322 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.226057381 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.147753726 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.046363214 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.221299754 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.149501466 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.576673568 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.649587598 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.281838293 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.97824472 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.614840097 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.305785901 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.227635746 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.150208135 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.428965917 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.294835618 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.148960747 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.14699562 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.147452566 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.185056615 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.355882423 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.306615295 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.150619548 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.945265006 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.291903497 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.867073792 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.969615406 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.840559706 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.971993147 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.825454612 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.110541714 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.078665444 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.333837388 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.296153672 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.70403809 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.159100191 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.148853371 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.763395148 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.291878465 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.470223688 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.220987037 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.969045385 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.233076436 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.222161686 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.409337698 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.007080109 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.637470208 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.687667991 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.221325342 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.025811942 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.190024391 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.880153478 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.293516064 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.849601256 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.342773876 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.473453705 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.978368883 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.988605558 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.148752651 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.15078885 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.092564672 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.222859422 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.03238486 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.50537955 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.249094255 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.614522254 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.505228725 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.538486751 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.307288976 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.151528479 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.870219096 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.490944009 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.109477809 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.804344294 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.531991914 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.274928686 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.202954171 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.159691477 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.343724651 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.753951352 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.109236068 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.293878153 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.173203185 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.157526193 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.976480503 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.207326226 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.147482016 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.030479532 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.703156138 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.58105869 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.401929209 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 3.432173896 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.601912331 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 3.426685179 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.281163401 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.326149112 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.804761231 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.29258856 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.587702426 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.497518169 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.788411713 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.149404361 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.003963258 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.470865698 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.40259538 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.156966667 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.150061078 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.854950377 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.971026599 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 3.141905594 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.676524579 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.632723157 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.406748826 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.128764542 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.581692194 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.1554167 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.767625864 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.19633865 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.143789996 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.673614372 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.993487336 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.148287343 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.150887504 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 3.433283527 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.966030962 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.545614797 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.358378415 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.009881084 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.222421427 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 3.362254484 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.532147805 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.514487557 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 3.001414819 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.755701231 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.416819867 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.286572851 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.294302351 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.148820559 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.908976337 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.460650891 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.71266086 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.99044894 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.873168493 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.30427704 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.014545641 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.15250615 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.149168298 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.146756463 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.04075515 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.779117952 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.479533647 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.490682048 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.635601518 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.759741002 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.574616486 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.715532149 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.893034279 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.915006362 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.301151408 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.589831355 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.985239233 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.154850153 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.149570679 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.148871331 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.222131344 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.481963487 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.228049868 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.321196363 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.566676796 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.427655783 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.050544334 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.785382774 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.203401085 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.935683528 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.763133291 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.323821909 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.444268955 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.585117715 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.650866655 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.575760738 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.256881592 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.098462023 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.28356135 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.9828902 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.939166871 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.974340057 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.622672041 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.221335586 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.887884173 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.468020678 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.547903507 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.232682071 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.289759468 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.298280695 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.954255653 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.293098097 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.436906951 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.620314343 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.273321283 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.149344229 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.152581101 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.154931997 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.504004145 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.176458262 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.241382518 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.272389432 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.347927991 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.751504976 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.818054049 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.729552555 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.292565315 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.154285606 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.348685423 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.117131528 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.160435418 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.570203681 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.468127554 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.060620262 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.58269566 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.842804482 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.406810696 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.511950583 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.204648518 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.231639853 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.150449187 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.1468328 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.852430389 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.302010459 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.155077409 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.09043015 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.271031879 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.291901346 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.149193083 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.132695559 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.861112166 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.722155458 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.08284051 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.891315541 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.295062121 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.147898697 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.152020454 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.038632757 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.148028342 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.085899221 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.408949404 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.03877078 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.210842122 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.871606358 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.979665791 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.831786 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.913554248 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.974105239 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.146727212 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.511956699 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.492336749 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.499218357 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.217261818 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 3.265320674 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.271562707 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.14684653 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.854282922 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.786523411 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.424917186 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.150154349 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.14763517 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.484048573 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.285516366 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.545829997 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.279862713 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.15021811 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.307413 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.588017782 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.34914856 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.146801103 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.150189817 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.557604777 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.330057635 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.06202781 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.379635894 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.294799077 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.503959408 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.349031214 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.888987255 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.720431729 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.362829219 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.69187125 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.424908039 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.153576567 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.1357717 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.618034981 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.100259959 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.71089968 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.946044671 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.216671713 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.804404004 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.216401913 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.460402461 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.314924399 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.993156668 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.282436192 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.614328217 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.782035745 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.256690744 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.147781864 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.47592222 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.219809216 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.566414798 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.254303749 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.316460429 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.296891717 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.164003087 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.120912513 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.147122904 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.158160305 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.474747267 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.225570307 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.99405511 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.576006264 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.157841986 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.146815263 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.147936193 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.149959746 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.212082573 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.158332939 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.352036554 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 4.082872964 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.594204508 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.954029956 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.298665885 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.27032008 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.439896894 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.083365419 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.03939892 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.543607568 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.156012423 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.356325871 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.561526482 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.141691902 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.697019586 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.689747497 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.232400964 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.150599258 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.150254398 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.846691655 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.115695163 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.157656258 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.153436377 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.47312921 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.688847603 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.287688603 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.146925355 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.147063034 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.155404876 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.261921824 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.730674912 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.159557068 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.905956774 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.294671102 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.147022697 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.99146476 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.57554947 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.4592129 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.793722044 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.157779329 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.146999124 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.616615426 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.410545272 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.784559069 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.321772592 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.972132324 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.352231559 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.140851482 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.174453365 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.155926528 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.149612585 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.76880556 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.286197345 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.152270753 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.150184386 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.596028555 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.428602905 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.227235744 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.17864573 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.161417913 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.326583071 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 3.053486242 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.218976472 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.439418778 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.156946596 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.549812998 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.473435597 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.498564437 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.298278715 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.293787397 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.46525835 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.311580584 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.190014132 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.151177334 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.277878939 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 3.226956237 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.193445705 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.170045016 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.326286715 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.149904005 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.237985873 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.737186228 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.1538441 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.150102622 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.65588476 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.33324187 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.881459824 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.296486593 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.154689879 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.156306797 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.068420651 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.235427807 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.147210093 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.361204941 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.498893354 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.312470104 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.496523099 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.591654125 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.310591761 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.157760701 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.707432641 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.708752079 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.454196505 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.201451217 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.152786669 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.147095099 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.125256625 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.418747948 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.317658762 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.298232329 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.686669152 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.823379076 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.692095126 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.29474097 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.844438418 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.849575099 seconds)
  done (took 1179.967718853 seconds)
done (took 2197.428045238 seconds)
(6/11) benchmarking "io"...
  (1/1) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.620228991 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.579555037 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.578625101 seconds)
  done (took 20.89657988 seconds)
done (took 22.787218741 seconds)
(7/11) benchmarking "broadcast"...
  (1/4) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.11504857 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.00052975 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.114146003 seconds)
  done (took 18.341221142 seconds)
  (2/4) benchmarking "typeargs"...
    (1/3) benchmarking ("array", 5)...
    done (took 1.423159776 seconds)
    (2/3) benchmarking ("array", 3)...
    done (took 1.445860181 seconds)
    (3/3) benchmarking ("array", 10)...
    done (took 1.608501843 seconds)
  done (took 5.589094502 seconds)
  (3/4) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.120215805 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.116135096 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.116032238 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.114935911 seconds)
  done (took 25.681419417 seconds)
  (4/4) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 1.956118785 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.22987043 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.245174933 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 1.666084797 seconds)
  done (took 7.212991691 seconds)
done (took 57.968112093 seconds)
(8/11) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 4.026457453 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 1.979876894 seconds)
    (3/36) benchmarking "trsv"...
    done (took 2.650832736 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 3.530093115 seconds)
    (5/36) benchmarking "asum"...
    done (took 1.875850327 seconds)
    (6/36) benchmarking "trsm"...
    done (took 6.153882135 seconds)
    (7/36) benchmarking "symv!"...
    done (took 2.562231281 seconds)
    (8/36) benchmarking "symm!"...
    done (took 6.189860003 seconds)
    (9/36) benchmarking "trmv"...
    done (took 2.66386216 seconds)
    (10/36) benchmarking "dot"...
    done (took 2.082905308 seconds)
    (11/36) benchmarking "herk"...
    done (took 6.291614017 seconds)
    (12/36) benchmarking "dotu"...
    done (took 2.133077794 seconds)
    (13/36) benchmarking "scal"...
    done (took 1.241744055 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 3.559049174 seconds)
    (15/36) benchmarking "dotc"...
    done (took 2.134122369 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 6.159616658 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 3.997057342 seconds)
    (18/36) benchmarking "symm"...
    done (took 6.198385356 seconds)
    (19/36) benchmarking "ger!"...
    done (took 6.114379319 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 6.17154166 seconds)
    (21/36) benchmarking "gemm"...
    done (took 6.192776763 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 6.143756681 seconds)
    (23/36) benchmarking "herk!"...
    done (took 6.234296565 seconds)
    (24/36) benchmarking "scal!"...
    done (took 2.036458385 seconds)
    (25/36) benchmarking "syrk"...
    done (took 6.167910219 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 2.338356085 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 3.480624133 seconds)
    (28/36) benchmarking "trmm"...
    done (took 6.160350407 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 6.174593637 seconds)
    (30/36) benchmarking "her!"...
    done (took 6.116146382 seconds)
    (31/36) benchmarking "syr!"...
    done (took 6.117349209 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 3.495824667 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 2.628584469 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 2.635067886 seconds)
    (35/36) benchmarking "symv"...
    done (took 2.618485057 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 2.323511524 seconds)
  done (took 149.693467771 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.176372518 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.239497999 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.122268125 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.24532259 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.145405028 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.117973428 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.297612483 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.122896585 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.123994512 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.168495832 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.968160153 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.194382632 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.149681765 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.166295417 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.138560369 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.246471281 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.202737942 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.169382522 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.201271043 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 1.151610644 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 8.451648114 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.717690987 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.741172206 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.139570838 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.119918954 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.171425211 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.150594709 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.12412681 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.239308111 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.515484882 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.303197157 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.847928631 seconds)
  done (took 179.984812606 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.223245182 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.114091625 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.114142851 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.114202907 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.117648435 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.118491741 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.115209885 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.27695477 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.114356778 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.113678422 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.626546905 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.114798948 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.114637352 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.117829937 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.114420425 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.114501652 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.119016719 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.115843052 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 17.642515303 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.128064376 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.113091293 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.120776987 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.188558598 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.501946185 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.49193127 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.133399925 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.115256929 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.114615221 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.11632991 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.712238253 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.173001487 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.11788597 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.119087309 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.13331819 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.117590305 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.115215324 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.113918043 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.113978875 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.192638739 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.171222996 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.129292734 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.11407782 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.121230948 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.11404854 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.113795516 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.174060163 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.331816473 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.71417657 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.115106155 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.188948417 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.316744551 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.117917307 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.713198071 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.234188583 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.11839855 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.114512534 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.550468813 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.114885854 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.122142835 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.117037825 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.152342451 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.158368369 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.117703248 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.232991281 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.003283296 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.114256813 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.009665987 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.115128572 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.712575793 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.118610563 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.866034885 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.115918535 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.118341236 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.174246415 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.844971755 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.115635177 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.191005542 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.882654388 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.116429698 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.199899933 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.1158016 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.117905063 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.115106085 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.153010806 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 10.567743736 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.184250601 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.115496619 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.116870352 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.167570507 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.843144288 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.118507328 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.114799904 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.114875318 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.114233007 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.114576537 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.118112126 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.114275776 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.117270684 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.121097126 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.114896181 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.176437664 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.151906319 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.132055813 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 9.69420639 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.115235373 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.115451001 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.168635551 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.120791259 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.174333967 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.123666542 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.122021614 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.117095703 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.352812435 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.148382267 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.168044774 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.177137066 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.114915798 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 1.498046613 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.123756393 seconds)
  done (took 334.951387053 seconds)
done (took 666.969899121 seconds)
(9/11) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.311915715 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.38814661 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.294431543 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.236298752 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.296536103 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.683175447 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 1.729677017 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.066824012 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.383125646 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.289433571 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.432617344 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.559860296 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.271841621 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.265767358 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.154574857 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.260665766 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.306841382 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.270367886 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.213722692 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.230329646 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 1.783529433 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.426150168 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 1.928745721 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.556288773 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.208739042 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.217912507 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.284365394 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 1.270449655 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 1.814730006 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.087090261 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.794379809 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.248312647 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.19154705 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.876133719 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.18515724 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.254938155 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.309368156 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.178974429 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.238294053 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.251487692 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.158497762 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.642042555 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.328860171 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.079201265 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.131182077 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.570749628 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.159265315 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.148944545 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.109432176 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.235786673 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.171995418 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.622914513 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.766667584 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.372556817 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.38689346 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.320920827 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.425598814 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.305793926 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.302976844 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.310898832 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.236196292 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 1.975608182 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.463319124 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.401759067 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.282251986 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.266876296 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.2526273 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.618928826 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.165642992 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.28313926 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.287947625 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.225070818 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 1.794707611 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.563851727 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.206736207 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.386598046 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.417136514 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.426470424 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.927472569 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.592228066 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.609922898 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.594081601 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.395158418 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.274082567 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.59690452 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.200621534 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.321249203 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.26526917 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.182079494 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.271258332 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.180131165 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 1.712885765 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.465333827 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.4431627 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.441928953 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.383283801 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.419642786 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.500259717 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.392660514 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.306751276 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.038876478 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.462323009 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.404684388 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.246417855 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.196385542 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.212191124 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.292447859 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.199697546 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.180730858 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.643992455 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.283419847 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.118935922 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.549066209 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.413683202 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.638423835 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.390192592 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.040482707 seconds)
  done (took 194.463582532 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.471238275 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.161849389 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.279024914 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.116017464 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.117040144 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.118357837 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.129896222 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.117736604 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.253014715 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.115643296 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.119436843 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.120749897 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.118683736 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.115829672 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.368550243 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.150229023 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.119533499 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.115191292 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.11641135 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.117976914 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.119502088 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.116406782 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 1.797344779 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.240159606 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.115417662 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.118657018 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 2.830676964 seconds)
  done (took 147.945962843 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.203707831 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.63127735 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.386243153 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.484054677 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.551640143 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.48059157 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.183899634 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.182414114 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.249361172 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.399257717 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.123230955 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.560936275 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.151691911 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.508747136 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.180446202 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.184775887 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.196721043 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.150260089 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.225347812 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.401819796 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.250038645 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.182407315 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.425737567 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 1.189946019 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.188947436 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.36252792 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.353553596 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.343634805 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.300079204 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.383828227 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.547059733 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.176580953 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.151882423 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.199236525 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.248899032 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.31969207 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.23303761 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.538749116 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 1.173751299 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.373739455 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.161055221 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.540839879 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.157620897 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.20711395 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.344014583 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.251204668 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.593377376 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.710149074 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.414606724 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.192353529 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.186438704 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.272583025 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.541107801 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.426679027 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.554987733 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.150846086 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.590963863 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.470423488 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.406273001 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.149333478 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.409225296 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.182266113 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.177644422 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.270591586 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.653132878 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.344168999 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.549297667 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.476727174 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.19914492 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.653544009 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.20005526 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.396531586 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 1.853802126 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.294689178 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.913755168 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.334130515 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.157410872 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.197951947 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.193883165 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.478162881 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.179115246 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.260033476 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.218856897 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.284099197 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.349577725 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.292050561 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.494045962 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.658157403 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.23296853 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.550914796 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.792320159 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.469771497 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.169012298 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.244239015 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.151017979 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.250415578 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.342408376 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.508236808 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.60726582 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.449313353 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.982945742 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.715662724 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.157265978 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.23392036 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.180801298 seconds)
  done (took 152.529328091 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.908865974 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.803696466 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.686952117 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.489776794 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.549284965 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.32334713 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.24550844 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.196409236 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.304481429 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.168876626 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.277787659 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.228088757 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.419994024 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.644472505 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 1.444904576 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.789322369 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.187600229 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.637837547 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.320014397 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.268861565 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.775325391 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.184234015 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.424308834 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.364296614 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.111458622 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.404431708 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.455663024 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.329476225 seconds)
  done (took 48.061043404 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.198221439 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.246927094 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.172854784 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.270646684 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.279438858 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.273267944 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.230191349 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.633509391 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.243552664 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.226110429 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.260612926 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.174075717 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.708880161 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.174631839 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.203062949 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.25558828 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.264666119 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.682331371 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.269844957 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.677818232 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.228582804 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.271073954 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.225157528 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.177802855 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.214392178 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.172794078 seconds)
  done (took 34.868920272 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.249765987 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.077839187 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.364125019 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.413230482 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.668628019 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.316850979 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.552495954 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.151750622 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.348152032 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.229608536 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.13926139 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.701902568 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.328703333 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.693234852 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.275284835 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.227276113 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.634911182 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.246862677 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 1.503243417 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.303847088 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.758764166 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.267111937 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.366728283 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.374835929 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.268112049 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.325843664 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.237034414 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.676529275 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.263419356 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.290398148 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.404687621 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.245575824 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.76175597 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.235117395 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.248885948 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.582440131 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.327307402 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.669528364 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.277017878 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.111779526 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.257919382 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.326478255 seconds)
  done (took 68.823417505 seconds)
done (took 647.808470493 seconds)
(10/11) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.292775653 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.161330876 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.134703752 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.144771501 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.17254876 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.147434697 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.136689484 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.344734288 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.149456245 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.145706652 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.152693369 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.152354152 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.14583415 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.14688665 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.16817308 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.144237045 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.296463801 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.177687325 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.127879245 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.140431494 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.143728468 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.138161173 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.146038393 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.140018467 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.173472355 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.140561591 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.12804506 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.159421109 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.14290553 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.166918539 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.142145603 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.150356163 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.146029499 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.144142816 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.15647312 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.144621153 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.134963462 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.14324787 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.142308145 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.138256391 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.135296191 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.151379378 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.153450288 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.195766525 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.163487652 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.14856095 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.14447479 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.15892762 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.265417757 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.15085091 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.150630651 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.14396112 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.14381876 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.141717416 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.140469149 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.159259082 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.14070095 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.141498212 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.16650512 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.14040565 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.170429983 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.127518026 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.172518171 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.135933665 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.135329197 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.141150137 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.148937407 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.140041079 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.138719516 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.131046043 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.13849532 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.175846092 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.141560526 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.136352312 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.143551383 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.142043672 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.166341083 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.161035498 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.140142976 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.142620911 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.14452957 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.182494766 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.219455609 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.261319863 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.162177996 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.13950802 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.173000814 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.144906277 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.167623081 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.170032478 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.148561659 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.149600827 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.140518811 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.144115526 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.133201286 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.147709321 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.171960948 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.162365989 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.155338532 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.147235523 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.165517416 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.151400813 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.178521958 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.146696649 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.128351733 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.167847155 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.153988816 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.159311823 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.154536482 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.255129636 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.154998254 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.168066621 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.140361406 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.139907388 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.134909967 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.1370645 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.140920952 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.134876006 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.344171415 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.142497781 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.133424755 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.144691039 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.128216269 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.142109739 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.136665983 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.136114035 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.133589025 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.14992049 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.203585339 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.18871663 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.149511215 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.151507544 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.162443794 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.145958894 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.13973508 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.147936938 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.164131213 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.140265368 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.145648163 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.150733348 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.152241075 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.144075012 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.165905706 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.172835794 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.136935046 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.152933329 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.133232638 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.142460298 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.161302336 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.145648188 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.138682797 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.150648356 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.141189703 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.13907869 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.162557197 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.130922289 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.141936455 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.137648992 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.143260146 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.144348875 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.166184293 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.176040624 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.148173224 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.135871436 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.13495907 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.14187664 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.139484282 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.148667772 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.142767374 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.136510778 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.165518304 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.161565542 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.137867178 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.169138703 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.136762339 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.142713053 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.170969087 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.163696483 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.172783679 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.143616373 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.176413379 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.176304961 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.14483363 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.170695274 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.156672929 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.166671224 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.134239054 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.138310499 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.135034633 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.144453851 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.13661844 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.165604517 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.142712343 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.145727867 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.156192529 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.148773265 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.150046223 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.15280985 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.143315184 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.13972485 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.146516733 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.17028464 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.139467777 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.146205571 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.136716404 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.136236341 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.153145554 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.14304744 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.151182799 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.157678056 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.13094728 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.15655864 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.155883076 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.140531883 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.153849932 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.145761616 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.151728727 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.128022962 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.174501969 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.147681523 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.147431071 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.141183996 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.137335086 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.14143097 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.143396974 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.139899655 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.167266717 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.156225907 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.154319737 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.146318003 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.289912441 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.14531397 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.149878336 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.139567041 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.142632216 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.143841909 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.144497677 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.138280425 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.156601849 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.145304635 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.134880217 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.134420824 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.150965564 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.136348192 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.15983473 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.166936479 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.134259555 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.143566146 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.141944839 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.146619604 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.147136305 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.155540728 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.142057348 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.144116883 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.14376744 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.164332305 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.14776408 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.13557761 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.139703219 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.147582182 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.150723465 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.289926403 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.184529533 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.131650225 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.156744975 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.141339684 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.148389474 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.146587574 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.132508701 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.161713245 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.130866564 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.136427882 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.144406789 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.165455948 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.140007024 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.145022026 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.16120508 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.136888345 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.138382457 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.127921978 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.180860938 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.143217878 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.161954703 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.145376411 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.136881071 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.149941687 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.137280385 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.147790384 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.145628827 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.152768755 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.140501548 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.138527404 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.143779735 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.138807819 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.149162599 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.143736419 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.13055794 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.144639921 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.140679101 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.141679751 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.145901711 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.143294611 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.191631139 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.145030281 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.141526079 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.175859316 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.191229489 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.140664796 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.139604215 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.143419639 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.190842765 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.138104173 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.132688101 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.155266656 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.173825661 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.143645048 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.147267975 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.143115326 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.160794271 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.14448041 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.147438689 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.148237008 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.127298387 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.152539629 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.153378419 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.164705892 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.14558604 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.133754074 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.265871994 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.148451074 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.154898657 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.147515475 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.168008772 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.140055565 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.137526206 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.135454106 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.142300941 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.174705512 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.140199053 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.138399259 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.146714427 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.177017089 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.15953653 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.1288691 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.13853414 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.146091852 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.137837549 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.151050357 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.150117053 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.129356715 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.143987825 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.137636509 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.127680522 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.152151169 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.176188421 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.136476446 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.144371772 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.150830597 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.140881625 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.144109217 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.138750235 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.254336204 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.138472373 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.144011644 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.156256883 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.190778491 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.145462132 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.152269282 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.14708352 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.135035133 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.137533336 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.146268083 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.14287474 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.248577075 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.153507396 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.152422694 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.138319205 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.141048424 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.155609495 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.143527741 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.145606443 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.144075913 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.141639223 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.13819034 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.342089558 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.151234457 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.157848541 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.258526743 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.137640996 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.148864406 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.135212654 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.144141867 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.143702664 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.135956205 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.150473354 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.147273346 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.168193504 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.145777123 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.15783486 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.1755753 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.147407631 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.133693484 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.182724157 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.141671422 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.144232767 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.166195178 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.133179275 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.167589199 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.149876839 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.139789921 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.158517879 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.138391847 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.144068674 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.13078821 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.138723628 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.145082632 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.161584817 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.138511179 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.150340174 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.141383399 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.164422626 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.137731114 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.144328825 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.126672826 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.139023094 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.147168714 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.146240501 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.145833758 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.148977068 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.139747089 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.141571253 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.139113732 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.137480068 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.141681756 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.15005981 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.133873441 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.147546282 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.141240612 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.146395149 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.133778712 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.138951949 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.12857855 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.156477019 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.137486082 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.138886631 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.136626232 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.155699647 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.139903911 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.133330585 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.180296155 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.139279769 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.159233952 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.189842891 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.151567744 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.133998686 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.12819652 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.147301701 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.142130907 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.210433206 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.164245753 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.157122876 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.159308171 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.150958075 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.173358546 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.162043024 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.17944582 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.175327435 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.151635647 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.16373212 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.149226778 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.136443543 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.146683113 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.150400329 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.159848739 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.132476013 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.140199441 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.153595187 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.137669676 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.174232483 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.173204681 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.150396312 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.166223117 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.169490682 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.186539892 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.146543191 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.149053235 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.166840515 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.127032632 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.134696632 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.148044033 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.141134052 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.161818713 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.135148683 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.152385436 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.263504013 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.142390518 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.30117312 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.135823994 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.158192691 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.152540818 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.147775043 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.137750855 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.154907587 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.12771998 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.13952503 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.185158218 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.150701268 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.134556424 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.147465579 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.141566022 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.263140329 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.206714056 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.149540254 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.137939955 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.14164898 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.13182416 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.148820717 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.153539972 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.147328913 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.152465292 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.164764303 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.142703588 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.155057234 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.127457175 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.135600752 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.142254736 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.142613001 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.213775484 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.290165115 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.132325434 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.13147031 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.127496826 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.141238051 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.140834617 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.143052436 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.146143831 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.224475176 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.134247587 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.146085184 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.158344241 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.221219656 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.136248201 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.147319227 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.187296602 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.137341188 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.137717883 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.143682699 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.132897775 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.142461341 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.134497648 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.134372199 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.134573795 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.132241606 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.165064592 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.148399637 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.179744354 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.140375612 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.174752174 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.142600503 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.133402625 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.144186623 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.150713665 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.181105713 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.136365898 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.156903556 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.156533666 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.148380714 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.138170091 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.181084986 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.139341154 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.139310954 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.152930356 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.133148144 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.144838435 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.201350603 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.165260335 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.140605746 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.141986478 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.143977379 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.253297385 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.171234707 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.135854898 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.148284189 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.153162945 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.15495879 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.155133237 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.171312474 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.134507255 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.135826855 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.145958326 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.153214961 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.147198977 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.167003787 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.176775519 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.201322028 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.195014517 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.193958162 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.24966445 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.2505191 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.195157353 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.146905996 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.137582431 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.148271129 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.164672868 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.186096575 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.184221544 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.170755335 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.164022989 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.192555837 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.176736429 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.164827198 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.175575898 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.169772893 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.163050169 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.143698717 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.183356107 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.163613529 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.130585576 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.133963766 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.143646017 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.139295112 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.160124738 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.14266662 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.128880127 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.150930894 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.142745511 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.142095256 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.151470799 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.187625169 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.144522507 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.131442003 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.155177659 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.14289711 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.139970342 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.154272484 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.143785613 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.17806696 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.147935065 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.145111675 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.178556107 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.154843381 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.139123964 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.129417534 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.144238954 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.133640389 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.132954795 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.343662827 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.147650731 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.165406462 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.155809082 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.145317075 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.143853494 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.13357716 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.143459429 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.161038721 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.167572475 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.177261413 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.142115827 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.196346224 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.14072669 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.207524426 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.139431681 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.146436067 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.19183348 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.135937872 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.150104366 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.296708968 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.16953505 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.150927036 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.136377749 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.288706509 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.144131878 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.146779956 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.134285919 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.142376674 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.134956217 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.142669601 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.141904367 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.156835816 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.190008355 seconds)
done (took 786.470033703 seconds)
(11/11) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.196315247 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.308383488 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.198828374 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.186271261 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 1.525794588 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.336184018 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 1.453576089 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 6.127824434 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.358315153 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 5.700615225 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.264623069 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.417907682 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.12647119 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 8.349379581 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 1.779586771 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.152875848 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 8.562268264 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.18165094 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 1.624275973 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 6.125527392 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 1.464991866 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 4.592819774 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.178829823 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.118018173 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.228207021 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 1.462309198 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 6.124657291 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.266368801 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.588881041 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.310442958 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 1.135896428 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.257362401 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 1.358681903 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.128603622 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 1.5396152 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.144978501 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 1.539516016 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.354650145 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 1.642163413 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 1.372925439 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 1.465674904 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.390703663 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.355698712 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.121940075 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 1.136669309 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.364666973 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.125223199 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 1.560434032 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.146337775 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 1.785101618 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.183196907 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 1.356166235 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.344991605 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.302392486 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.181580707 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.139318183 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.34809039 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.11284964 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.351365722 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 1.262690397 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.208249798 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.369364679 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 3.644472442 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 1.209788919 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 6.121744185 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 8.605733903 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.137511151 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 1.355656309 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.126909433 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.546428535 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.319770208 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 1.469988525 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.205159275 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 1.773841153 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.332494972 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.209225704 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 1.187434038 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.459145354 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.124564591 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 12.746921208 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 8.001245649 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.354888534 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.21579215 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.343600522 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 1.359463584 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.341301299 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.20280616 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.122938514 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 5.904905882 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.142250146 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.183876443 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.299423848 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.878358407 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 1.375538184 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.136228583 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 1.357903109 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.125576404 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.192914833 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.201243006 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.519115494 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 1.472019695 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.209836978 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 1.371892417 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.215941951 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.920701114 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 1.627833752 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.146793877 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.121849541 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.337168773 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 1.180531841 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 1.255499708 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.118956333 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.586822264 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 1.348777819 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.142805431 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 1.357046645 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.306809058 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 1.36104291 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 6.129806781 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.144232319 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.463790225 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.151810927 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.121642998 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.192348883 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.377983329 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.485653445 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.22642579 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 1.398953667 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 5.661324696 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.78299703 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.414383531 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 6.128337513 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 8.966831932 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 1.622816232 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.130296294 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 5.188902857 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 1.368131095 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 1.21724476 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.186253203 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.257967348 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.128174168 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 9.099366628 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.169748387 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 1.364552733 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.234401999 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.296731501 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 1.151332882 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.401270499 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.204841265 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.182159655 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.12384276 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.211436403 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 1.360093672 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.240683017 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 1.711361292 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.156616922 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.901168978 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.350210924 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.314953874 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.133389749 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 13.776270131 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 1.612834733 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 1.629008212 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 1.423752203 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 1.368951055 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.360990585 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.502469294 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.194031622 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.128163081 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 5.726416732 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 1.763019074 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.549579808 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.23206342 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 1.727692823 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.12441981 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.123794096 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 8.985119434 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 1.470632615 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 1.399173581 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.349129936 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.360884601 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 1.548105716 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 1.263451053 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.144933893 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 1.553812104 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 1.374045065 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.50703538 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.312855913 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 1.665401814 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 1.366695736 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.429679023 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.500883221 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.263378428 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.340213349 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 1.134088043 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 1.496857376 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 1.17220804 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 1.367209126 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.308232699 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.327235015 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.155017529 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 2.030673944 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 5.824902962 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 6.233663993 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 1.758544464 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.216257345 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.486570024 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 1.208896734 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.296644074 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 4.050469078 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 1.474627289 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.354162278 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.18646335 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.191659638 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.305605622 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.122948936 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.35711371 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.142951506 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.136989443 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.315937977 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.130061883 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.45503941 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.145461561 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 1.48889293 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 1.19788319 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.406471198 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.366982082 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.260698485 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.124543825 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 1.719878379 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.353833097 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 1.367223029 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.340777131 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.301517329 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.32679782 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.210274913 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 1.463350149 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 1.783306637 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 1.601725589 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.192272098 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 1.226125727 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.186202815 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 1.17299747 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 5.197823997 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 4.924685294 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.404403335 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.222095818 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.200166145 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 2.057657127 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 6.125136984 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.356280177 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 1.461874404 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.398195927 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 1.369270481 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 1.479087358 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.231247135 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.204559057 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.143380865 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 1.20381641 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.182969374 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.141609621 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.22347348 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.337989239 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.221467922 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 1.492021093 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.374598437 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.145154174 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.206492692 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.303497305 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.342476416 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.388082993 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.12703646 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 5.591464112 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 1.357789007 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 1.364597837 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 1.851278946 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.133099336 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 8.600518975 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.207435456 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.253356204 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.12738784 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 8.836935019 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.143041865 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 1.27528248 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.357326456 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.218337299 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 1.463982063 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 5.786200972 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.373910268 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.144475622 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.254686278 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 1.369197711 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.173397702 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.129109255 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 1.163887482 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.28981515 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 1.825831065 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 1.471078419 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.35312015 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.124591042 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 9.988339312 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.8982036 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 10.701772089 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.32293879 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 1.468273662 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.160834237 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 6.123104164 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 8.661315285 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.13630797 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 1.474674976 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 1.601708903 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.317622424 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.140569071 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.239471689 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.209125081 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 1.399877658 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.14501868 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 1.474458066 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.131890342 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.167961254 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 1.606247437 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.318745282 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 1.478969782 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 3.864470265 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 2.009943989 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.181221316 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 1.465037302 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.329331379 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 5.776867849 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.98523117 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.341250405 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.227081747 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.29385152 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.34257517 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.453413524 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.153568405 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.229650805 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.120753254 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.099166457 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.185707517 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.189335683 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.33004251 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.200611879 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 4.899992246 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.153921896 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 1.347292423 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 1.213652252 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.529611144 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.214892822 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 3.840379533 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.445398999 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.178043817 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.137475398 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 1.69872968 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.403870069 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 5.916560657 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.869744458 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.947197602 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 2.308032568 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.228441968 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.138603654 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.378555708 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.316460457 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.200762791 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 1.369097586 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.138277412 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 1.625746261 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.136001957 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 1.598153842 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 1.335984966 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 3.243111949 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 1.479037755 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.131611564 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 1.771514589 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 1.366971772 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.146764585 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 4.76017132 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.029885893 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 1.45373375 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.144582548 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.122609036 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.744255751 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.126217831 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 5.886881009 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 1.474005647 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.53356478 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.47697577 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.407758474 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.353653291 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.300718913 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.144182886 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 1.255452116 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.144621312 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.120248649 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.578854133 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.367225112 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.201279973 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.320329719 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 1.7072375 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.191443573 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.117972713 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.083474132 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.353543336 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 1.372171589 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.303591343 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 1.489882255 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.206819804 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.259485794 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.312167616 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 1.209769404 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 5.213310773 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.056245375 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.131722484 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 1.61840365 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.351033673 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 6.125715562 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 13.230024271 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.748947697 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 1.36352457 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.361027721 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 1.487435783 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.17092872 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.237496961 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.201150564 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.120429443 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.591783274 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 1.164631415 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.349150993 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.417589953 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.143124248 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 1.573139647 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 1.203888987 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 1.831826404 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 1.474162457 seconds)
  done (took 1075.447230887 seconds)
done (took 1076.564023921 seconds)
SAVING RESULT...
DONE!
