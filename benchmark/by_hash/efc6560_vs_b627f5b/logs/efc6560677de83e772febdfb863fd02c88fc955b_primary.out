cset: moving following pidspec: 3149761
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 3.090875155 seconds)
loading group "array"... done (took 3.146122799 seconds)
loading group "misc"... done (took 0.412915394 seconds)
loading group "sort"... done (took 0.256545908 seconds)
loading group "frontend"... done (took 0.003902836 seconds)
loading group "shootout"... done (took 0.707193025 seconds)
loading group "sparse"... done (took 0.492539614 seconds)
loading group "scalar"... done (took 0.994868033 seconds)
loading group "dates"... done (took 0.139144508 seconds)
loading group "alloc"... done (took 0.016137589 seconds)
loading group "find"... done (took 1.148140485 seconds)
loading group "io"... done (took 1.163750955 seconds)
loading group "tuple"... done (took 0.773118606 seconds)
loading group "string"... done (took 0.214538376 seconds)
loading group "random"... done (took 2.201158634 seconds)
loading group "micro"... done (took 0.046618405 seconds)
loading group "broadcast"... done (took 0.571021256 seconds)
loading group "parallel"... done (took 0.019972229 seconds)
loading group "linalg"... done (took 2.544207245 seconds)
loading group "collection"... done (took 5.718156393 seconds)
loading group "simd"... done (took 0.89573583 seconds)
loading group "inference"... done (took 2.455111827 seconds)
loading group "union"... done (took 2.741180945 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.158750726 seconds)
  done (took 1.887641339 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.141455159 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.277076307 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.611038393 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.165882245 seconds)
  done (took 3.904678374 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.793752708 seconds)
  done (took 1.514984762 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 1.007048482 seconds)
  done (took 1.742714297 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.972592218 seconds)
  done (took 1.696113179 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.228622708 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.197461066 seconds)
  done (took 1.148164062 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.934034163 seconds)
  done (took 5.662543978 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.51401738 seconds)
  done (took 2.248307884 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052266684 seconds)
  done (took 0.8129418 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.229416024 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.223376911 seconds)
  done (took 1.233548335 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.239392428 seconds)
  done (took 0.9831082 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.73179085 seconds)
  done (took 1.475479619 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.33402189 seconds)
  done (took 1.081885237 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.361483214 seconds)
  done (took 2.105112073 seconds)
done (took 28.286963777 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.272806491 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12535715 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116772866 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.161826117 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000301981 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162005753 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.092103762 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.31215036 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111605996 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.185474305 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.033426319 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.468915982 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027571455 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253521208 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045505972 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028488625 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150716359 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021560175 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.445117396 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021504154 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5996e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015800849 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.231293949 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.361988436 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029870146 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.067374668 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037642315 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04060287 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030066087 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065618946 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020341188 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.362712973 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055886523 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.571107151 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037928637 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061031023 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115225525 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121814172 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023489807 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024098283 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031807035 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074698693 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.030122661 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5399e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06829072 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066947468 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046532036 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030728891 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018262093 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060358539 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033403286 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075187632 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020504753 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.084319517 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045711672 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.039855153 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052321342 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086465421 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024971062 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029356547 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044176797 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033604549 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019852305 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059218749 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.045849653 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.076119311 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.124277164 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06339951 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027931929 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023924306 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117793736 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047007777 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.028488103 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046192013 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.039242837 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04357759 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078631173 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057694861 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067707777 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083409398 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063310064 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093713361 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051419828 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062610805 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054794496 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034347974 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030290381 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.20678273 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.01708236 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029312839 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.042679487 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028768762 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059719998 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.015235197 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000308068 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027752356 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019509862 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03043732 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047345956 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9944e-5 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039968712 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054376799 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049952948 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.011029885 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047147507 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.00048465 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.021214387 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012300826 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.0691e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060079084 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.011300484 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.434e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024363694 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03855862 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.011079629 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065847 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023902913 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052127203 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049091897 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014478188 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.029121236 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088172765 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058201125 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.023546902 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020587075 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047968538 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.025191028 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.9273e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078816047 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014935826 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022086662 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042281361 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044317037 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.026310385 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053002178 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.021415584 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020423728 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.0562e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027892941 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048049193 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010978276 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071471503 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060572222 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011843863 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072727527 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017850607 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036990886 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10031128 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04867386 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014446179 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.037935893 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011672586 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.035994281 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030897894 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049693495 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043851251 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.7033e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050161308 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014768797 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.065956745 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.066148747 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045601787 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064948267 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024675662 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047475222 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044804142 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071489249 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013872825 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062532951 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.02067366 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020561079 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028350139 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020273797 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.211404103 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016116434 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.1459e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16153832 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014609693 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038751336 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03166713 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006604958 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000202595 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031728607 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010944772 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043652343 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9756e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013432143 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061310824 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02846909 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054050488 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000304723 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.087079292 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023315471 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075326945 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019109421 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047052332 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022150549 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9647e-5 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046774262 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053660161 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050572356 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.564495845 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129013194 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064225422 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0079e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035913794 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016574994 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068145427 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.025861854 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.00144378 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056385181 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061488032 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006619977 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.033438579 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037722851 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014998982 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024856588 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.2092e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.268e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.031718245 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02892379 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006676847 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.20290718 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.073293396 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024177907 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.0537e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024598654 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067642374 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018329352 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.031059486 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087080694 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.018433233 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051154293 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.026226666 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060542004 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070365259 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01621948 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067915702 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015002998 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047994037 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083290886 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047021403 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7425e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040324912 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033994121 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052203641 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029651469 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046992034 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051991954 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000113155 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.7816e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.027021258 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043011527 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000110419 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.061426254 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075955599 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02084258 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026781272 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039111409 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.022182071 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047825459 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020567419 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.064357342 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071017809 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020494166 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000197252 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.015804061 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076110378 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055077016 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000165687 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033639841 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018253865 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06611852 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082116535 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.038350276 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078147471 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.017277994 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.02999849 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037226982 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.0386283 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000125338 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041348628 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039495654 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049043959 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029906011 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.035923702 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02082217 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045129706 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015188471 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000154914 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.028301676 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011823425 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014130897 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.016188054 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045940246 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014832625 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.8152e-5 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032192892 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033524157 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037646775 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000436703 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.043537039 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.8609e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.3329e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046764649 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.062225647 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016244344 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050642148 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048989589 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030832394 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064305163 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019390553 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016349677 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070743871 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061970972 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027062059 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065143318 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.065795425 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.014342178 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033222641 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020684873 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019800263 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056490365 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0357078 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.036541714 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068376202 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050876766 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000117157 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018540347 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016540593 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.020482082 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071985614 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061309301 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.299876003 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 3.8881e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000149073 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014514449 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085722957 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.01174674 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029687408 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.2971e-5 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051323158 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000304514 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089948557 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.5202e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091412877 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000483785 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043800734 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085055978 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02811674 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016537734 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018481939 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015941618 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.9153e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07634746 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06751564 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032537713 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.197972665 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052479044 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.9032e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039622372 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045271498 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011440299 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.2129e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.033257848 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000505828 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.047225378 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036768342 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027001974 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076357651 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.257698366 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052665689 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051567112 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000208772 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023758112 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01847982 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034300029 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01977003 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.0620835 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017821124 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016770454 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036781653 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023579901 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055283311 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05616044 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032164528 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050361013 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074771392 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076483225 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.034637849 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011674707 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017101196 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046679482 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.204349078 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.016505309 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047854309 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061073256 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.012032385 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021780265 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059489781 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042779551 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000481075 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044736443 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044697318 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06378506 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088627189 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063851441 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016078193 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023059552 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050300565 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.2123e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020488901 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000310168 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000125647 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026898345 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.3896e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000103282 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026503622 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012725849 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.012095109 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000146629 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028082748 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031594263 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016294984 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053967982 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027788289 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.4175e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020599929 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015154663 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017433667 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024106807 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098046409 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040098799 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012402398 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034849402 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05511136 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069389269 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028057397 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014538742 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.026302023 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.9726e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.051705056 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010433415 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.6538e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017882525 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.036073705 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022219334 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.1882e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034443001 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058244654 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014972963 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066969231 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067047674 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048895467 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077274903 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.4922e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031135699 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062467955 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.014173151 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046669877 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024853469 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024963607 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022663561 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3262e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067598231 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011531819 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032273624 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040474458 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.036611352 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051924654 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027915412 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054107721 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021143695 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.021131478 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041496125 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071681054 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033973133 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027039759 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039601617 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049505161 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031542142 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067121083 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.073042575 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03362982 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035102033 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.013970877 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070080439 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064864888 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027925456 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015399843 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049987535 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062820658 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011478306 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051848669 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.000129287 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028717467 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000579835 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014687467 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073969695 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.059326665 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020173111 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028396629 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081148441 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053234388 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017043669 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070298909 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1491e-5 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020308053 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011186009 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051802055 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048975292 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.443414127 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.1211e-5 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020670052 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025939388 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000322945 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05299854 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045720743 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052522439 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049767891 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012740379 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08500568 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.011412833 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028460541 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029901916 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020099909 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032142508 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05608526 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060148536 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.0975e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055690202 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.048538513 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.031262773 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.013483354 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021866761 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015172725 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000115382 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074535749 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048426691 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046751132 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.046657571 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04501188 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.00023525 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02157768 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014548785 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.8916e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057711416 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.032358779 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06813308 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033516151 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.9734e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030207413 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.058502504 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022856406 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065272481 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040190954 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.048972587 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.2178e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016728685 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063794202 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.2838e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06272595 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045757824 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04078703 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.097155578 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.6657e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.4224e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069689038 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047120611 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056185529 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012422372 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05468191 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031494946 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081979579 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024375881 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022692264 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040497629 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033640536 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039262939 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.026964177 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064356904 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029967544 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014241486 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.022434943 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 6.9952e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000108284 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041465772 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066255356 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030718851 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055768367 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043205816 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067242243 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049412883 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026972402 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026886126 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077769368 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045621507 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.013796751 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025572679 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062501717 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040646121 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000364086 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045661227 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.197661805 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049414808 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.00011228 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037799409 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066635496 seconds)
  done (took 28.997201919 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.062339249 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.243796554 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.039354905 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.055372983 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064949542 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.054861282 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.033260609 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.199534412 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.063798487 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050950996 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.039792404 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.068301615 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040248854 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.050759163 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.049103277 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.035333166 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.040704609 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.050302791 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.098727577 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.065051443 seconds)
  done (took 2.259704872 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.111825727 seconds)
    (2/17) benchmarking ("hcat", 5)...
    done (took 2.9099e-5 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.073626144 seconds)
    (4/17) benchmarking ("hcat_setind", 5)...
    done (took 0.072928954 seconds)
    (5/17) benchmarking ("catnd", 5)...
    done (took 0.629564515 seconds)
    (6/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.053633965 seconds)
    (7/17) benchmarking ("catnd", 500)...
    done (took 0.004506579 seconds)
    (8/17) benchmarking "4467"...
    done (took 0.029972077 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.002461152 seconds)
    (10/17) benchmarking ("hcat_setind", 500)...
    done (took 0.002483042 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.119068409 seconds)
    (12/17) benchmarking ("catnd_setind", 5)...
    done (took 1.4768e-5 seconds)
    (13/17) benchmarking ("vcat", 5)...
    done (took 0.057720501 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 0.298928432 seconds)
    (15/17) benchmarking ("vcat", 500)...
    done (took 0.002488458 seconds)
    (16/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.4585e-5 seconds)
    (17/17) benchmarking ("hvcat", 5)...
    done (took 9.877e-6 seconds)
  done (took 2.366584722 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.16542202 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.343963636 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108744403 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.181818693 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.130718861 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.297693376 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.485484677 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.282163244 seconds)
  done (took 2.861378371 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.13009428 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034805719 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.114633376 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.099550723 seconds)
  done (took 1.242715345 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.057255383 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024795849 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.034643097 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025107836 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044939139 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024386294 seconds)
  done (took 1.073277829 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.046334897 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.053927703 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.204193966 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035812336 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.033617646 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.040237904 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.055937597 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.046083672 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037169969 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.034060143 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.032099662 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026275433 seconds)
  done (took 1.559678711 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.056729195 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.04331307 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.050727559 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.042877183 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.038521363 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.038159778 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.048196536 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.042296596 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.037377922 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025141515 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.031026571 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.044675676 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031781749 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031822171 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030458911 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.033037538 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.034397469 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020226825 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.043095711 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.041114925 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.042678269 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.042842384 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.033799024 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.043281432 seconds)
  done (took 1.795038503 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.059617628 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.009343698 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 0.018866071 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.013440428 seconds)
    (5/5) benchmarking ("setindex!", 5)...
    done (took 0.013989286 seconds)
  done (took 0.980927076 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 1.37825983 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.453182946 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 1.642216214 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.006137892 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005541312 seconds)
    (6/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.50224488 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.078926338 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.413208759 seconds)
    (9/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170771833 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.09971858 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009373525 seconds)
    (12/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.625989874 seconds)
  done (took 27.249431872 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052329954 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.051496667 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.053274842 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.047021944 seconds)
  done (took 1.142091102 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 0.040169253 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 0.03319959 seconds)
    (3/12) benchmarking ("push_multiple!", 256)...
    done (took 1.8961e-5 seconds)
    (4/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.4294e-5 seconds)
    (5/12) benchmarking ("append!", 2048)...
    done (took 0.044447472 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.2474e-5 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 1.1997e-5 seconds)
    (8/12) benchmarking ("prerend!", 2048)...
    done (took 0.045328352 seconds)
    (9/12) benchmarking ("push_single!", 256)...
    done (took 1.4513e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.0603e-5 seconds)
    (11/12) benchmarking ("prerend!", 8)...
    done (took 9.997e-6 seconds)
    (12/12) benchmarking ("append!", 8)...
    done (took 7.184e-6 seconds)
  done (took 1.078474496 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035234146 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.042336941 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.032657927 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.038486677 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.044022574 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.029017119 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027320966 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039878114 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.038709833 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037688567 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022670441 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.042686705 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.038316792 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029883632 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038021677 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023232234 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.032507343 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.038566584 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.027764633 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.032430798 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023932944 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.042700923 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038320756 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023171165 seconds)
  done (took 1.724028793 seconds)
done (took 75.081914585 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.099656638 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.039514146 seconds)
  done (took 1.046001337 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.208402216 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.060983617 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.091679079 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.055702954 seconds)
  done (took 1.057079572 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.036639204 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.036860423 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.040971651 seconds)
  done (took 1.026634462 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.048247518 seconds)
  done (took 0.969182212 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.15431753 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.23952465 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.096342199 seconds)
  done (took 1.395371418 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.195512392 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.059081438 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.054792065 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022801519 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.031610842 seconds)
  done (took 1.080207536 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.046176885 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.029515086 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.020430499 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.01950621 seconds)
  done (took 0.995781937 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.061719973 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.062797204 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.058862479 seconds)
  done (took 1.065878375 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.06256248 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.023363347 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.022461263 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.022099295 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.02252333 seconds)
  done (took 0.974908451 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.189529825 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.087936896 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.038471596 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.09721125 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.098074331 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.979e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.8407e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.7256e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.3407e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.072589638 seconds)
  done (took 1.468159256 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.139304773 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.243e-5 seconds)
  done (took 1.030040316 seconds)
done (took 13.534017807 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.111931194 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.106239302 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.327679706 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.569097206 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.036562627 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025033705 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.02897002 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.357e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024173669 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.3489e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.930929453 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028427798 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.582301922 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027222135 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.084959182 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030744792 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.406e-5 seconds)
  done (took 11.795027645 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.6359e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.00147681 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000373777 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000960347 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000583874 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.3288e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.9872e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000360905 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000983584 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000369497 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000360574 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000579439 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.023590951 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000535985 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000411395 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000553094 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000380698 seconds)
  done (took 1.002167499 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.7996e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.1498e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.245e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.584e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.837e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.202e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.791e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.682e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.9118e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.375e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.806e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.95e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.3683e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.506e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.0631e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.81e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.966e-6 seconds)
  done (took 0.937912402 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.7429e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.6332e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.2359e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.0382e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.7e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.329e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 6.42e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.703e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.7337e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.483e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.0613e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.5459e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000224621 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.3557e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4978e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.3826e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.663e-6 seconds)
  done (took 0.938191778 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.040151343 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.035168576 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.75523511 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.974715365 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 8.99894702 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.038398444 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.180151342 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.1574e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.398589055 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.03490431 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.713717651 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.312788706 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.246781156 seconds)
  done (took 21.667177692 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.240917938 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.219757969 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.131092531 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.063339557 seconds)
  done (took 1.612661483 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.15086692 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.109396758 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.070936041 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.061959645 seconds)
  done (took 1.358981821 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.106871528 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.050711414 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.064150378 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.05602235 seconds)
  done (took 1.243794227 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.039221453 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.056672986 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.038079674 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.028527718 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.034500429 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.054851092 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025024681 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.024611527 seconds)
  done (took 1.266333777 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.1052e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000109199 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.4955e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.3807e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.5347e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 7.036e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.1826e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.3765e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000101369 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.3234e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.7973e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.3185e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001800489 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.3456e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 7.3536e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.3288e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.6704e-5 seconds)
  done (took 0.968786728 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.8288e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.2663e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.927e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.0235e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.957e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.815e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.934e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.888e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.022e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.222e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.959e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 7.001e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.2e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.119e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2825e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.497e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 7.034e-6 seconds)
  done (took 0.961892562 seconds)
done (took 44.639197687 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.023039092 seconds)
done (took 0.984269057 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.094842104 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.104827114 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.052439713 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.122219785 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065065506 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.113624629 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.090883502 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.539732311 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.072492935 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.074276166 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.38427286 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.838143565 seconds)
done (took 5.514062093 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.110042306 seconds)
    (2/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.034236942 seconds)
    (3/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.086949595 seconds)
    (4/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.055312917 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.3273e-5 seconds)
    (6/54) benchmarking ("spmat", "range", 100)...
    done (took 0.10630396 seconds)
    (7/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.070104265 seconds)
    (8/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.104490578 seconds)
    (9/54) benchmarking ("spmat", "range", 10)...
    done (took 1.4388e-5 seconds)
    (10/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.097002797 seconds)
    (11/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.21530048 seconds)
    (12/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.045025159 seconds)
    (13/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.090453531 seconds)
    (14/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.062123262 seconds)
    (15/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.035868258 seconds)
    (16/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.041211078 seconds)
    (17/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.033917663 seconds)
    (18/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000156919 seconds)
    (19/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.3259e-5 seconds)
    (20/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.7806e-5 seconds)
    (21/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.084994038 seconds)
    (22/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.2196e-5 seconds)
    (23/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.0899e-5 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000850224 seconds)
    (25/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.3781e-5 seconds)
    (26/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001007218 seconds)
    (27/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000757235 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038164787 seconds)
    (29/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 4.4193e-5 seconds)
    (30/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001747264 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.8897e-5 seconds)
    (32/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.7397e-5 seconds)
    (33/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012098697 seconds)
    (34/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.8587e-5 seconds)
    (35/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2342e-5 seconds)
    (36/54) benchmarking ("spmat", "array", 10)...
    done (took 1.7761e-5 seconds)
    (37/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000873565 seconds)
    (38/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000741154 seconds)
    (39/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000136456 seconds)
    (40/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.306e-5 seconds)
    (41/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.0273e-5 seconds)
    (42/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.054682715 seconds)
    (43/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.3526e-5 seconds)
    (44/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.0536e-5 seconds)
    (45/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 4.549e-5 seconds)
    (46/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.154e-5 seconds)
    (47/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 4.0026e-5 seconds)
    (48/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.1788e-5 seconds)
    (49/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000718896 seconds)
    (50/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.2192e-5 seconds)
    (51/54) benchmarking ("spmat", "logical", 10)...
    done (took 9.94e-6 seconds)
    (52/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000713762 seconds)
    (53/54) benchmarking ("spmat", "logical", 100)...
    done (took 6.3196e-5 seconds)
    (54/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.2357e-5 seconds)
  done (took 2.465892322 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.551981448 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.442943914 seconds)
  done (took 1.97225024 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.127717504 seconds)
    (2/18) benchmarking ("Diagonal", 1000)...
    done (took 0.152621792 seconds)
    (3/18) benchmarking ("IV", 10)...
    done (took 0.205079587 seconds)
    (4/18) benchmarking ("Diagonal", 100)...
    done (took 2.8901e-5 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.015e-5 seconds)
    (6/18) benchmarking ("IJV", 10)...
    done (took 0.058853722 seconds)
    (7/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.388e-5 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.105549761 seconds)
    (9/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.107566377 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.0226e-5 seconds)
    (11/18) benchmarking ("Diagonal", 10)...
    done (took 1.5091e-5 seconds)
    (12/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.921e-6 seconds)
    (13/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.0858e-5 seconds)
    (14/18) benchmarking ("IV", 100)...
    done (took 1.3217e-5 seconds)
    (15/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.835e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.0161e-5 seconds)
    (17/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.0489e-5 seconds)
    (18/18) benchmarking ("IJV", 1000)...
    done (took 2.4454e-5 seconds)
  done (took 1.74636963 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.482326256 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.17065657 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080121038 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.298373054 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.079257625 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077667809 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.124071276 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000148563 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07574189 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 6.8018e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.080763435 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030578661 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.074844669 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 9.0901e-5 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.03438743 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.8321e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.028242706 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002359808 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.092684224 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002905596 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.124608516 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002957068 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.093803199 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002073958 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.9047e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033895144 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033621536 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033673983 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.069779587 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 6.8391e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002699757 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002668316 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000567326 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002495095 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.03562114 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000115242 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001507917 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.035033353 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002297783 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001413151 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.032175881 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002139971 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035404503 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002903862 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000108093 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.006026396 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.00022377 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000142495 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004692035 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000175843 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.3198e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018391063 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.0829e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035513159 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1354e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.6408e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.6371e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002623606 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000130362 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.645e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003790774 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003861547 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000111877 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002256607 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033548945 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.4393e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00019982 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004627533 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.8195e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.046460305 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000115386 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006323332 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001628662 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.9712e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.003007445 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000560937 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002392696 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000207998 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.00015853 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002411551 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012274847 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000181253 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000105518 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002941209 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032170349 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000102168 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.4485e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.013209721 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000221094 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012026672 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002203817 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000202434 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006260416 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009105102 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000204838 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000105525 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000193535 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007881792 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000108918 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.0453183 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001516103 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 8.1556e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000208307 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001180318 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.7082e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000794021 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000703504 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.3396e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001430874 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000142953 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000118262 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.00136416 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.7685e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000143683 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.5277e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000229341 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.00837131 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008085756 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001367997 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000147136 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008333889 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002021891 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011154298 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000122756 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001436539 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.7966e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000116326 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.00017993 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001581767 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007378906 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005093073 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000166488 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000234502 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013316515 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002318435 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000484589 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.00810477 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000126258 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012672928 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008946215 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000251718 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000777679 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000136688 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001638283 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002489708 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006483177 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 9.8369e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.9129e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000184335 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011464456 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.4906e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.3087e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3109e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002554498 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.874e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.00016054 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001458914 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.00011329 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.0223e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.3426e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.015481476 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.3174e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002225096 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.0666e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.0427e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001175672 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004729199 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000717932 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000129925 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.3645e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.00022538 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.4705e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.00049731 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.2151e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001748434 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005080326 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000178903 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008694239 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003948743 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002126805 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000818056 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.8722e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001729287 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.1704e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000224288 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000137642 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002585814 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000135989 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.8128e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001633977 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006937991 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014498677 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000149885 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.823e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.00256394 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.00149462 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000125694 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000190673 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000128294 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001986957 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000470749 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.004045468 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000763743 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.0749e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002159142 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009080333 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.8096e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000116079 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002805737 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003140286 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000138965 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000181064 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.7852e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000109662 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000231773 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000886208 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9537e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.012598072 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001217906 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000146442 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000165174 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005672036 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.2984e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001473538 seconds)
  done (took 3.860246049 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.060401121 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.148784847 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.238266583 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032131989 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000184626 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.146522942 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000163685 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.282978194 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000120337 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.035850283 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000101589 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.061762747 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000262573 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.453537486 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.258056986 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.205439718 seconds)
  done (took 3.902680024 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.795537032 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.900957417 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.261864538 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.428779585 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.139106957 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.452319517 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130844581 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.109254624 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.113610889 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.100515704 seconds)
  done (took 5.429083974 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.060479844 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.178954329 seconds)
  done (took 1.236318505 seconds)
done (took 21.579774204 seconds)
(8/22) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.021590102 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020592735 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.020090363 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.02238867 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019697034 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.037641509 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020378751 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.01957188 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.05036974 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020456819 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.02725162 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033103414 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.020468192 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.019462472 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019641222 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.019189239 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.020268174 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019664753 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02173387 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.019832008 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020273967 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.021543026 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020471143 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.021117421 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.020126691 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025756901 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020852739 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019604978 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025891282 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021540566 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020842554 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020821631 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019623024 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.019792067 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.020208746 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.019371089 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.027244562 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020683156 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020637115 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021819837 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.020353781 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021164097 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020877614 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021512906 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.019798197 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.019333963 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021759768 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.021477515 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.019417595 seconds)
  done (took 2.081686869 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035948429 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.77e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.034993253 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.6927e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.2597e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.3562e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.2061e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 7.432e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 7.081e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.86e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.4849e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.693e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.75e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.348e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 7.135e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.787e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009144039 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 3.0932e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.3135e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 7.472e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 7.341e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 7.219e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.83e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 6.446e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.684e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.865e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 6.133e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 6.785e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.742e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.91e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.254e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.307e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 9.14e-6 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.7251e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.713e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.54e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 6.862e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.0145e-5 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 7.647e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.114e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.156e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.546e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.5788e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.862e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.532e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.261e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 7.104e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.696e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.802e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.47e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.011e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 6.345e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.883e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 6.282e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 8.179e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.562e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 5.872e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.992e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.87e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.227e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.379e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.745e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.546e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.999e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.255e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.133e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 6.349e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 6.203e-6 seconds)
  done (took 1.220681717 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020665491 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 9.697e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.843e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.559e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.567e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.765e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.749e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.441e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.888e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.841e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 8.825e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.569e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.847e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.414e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.832e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.428e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.869e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.399e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.594e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.789e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.426e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019201741 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.2519e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.846e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.652e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.289e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.743e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.72e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.919e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.747e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.355e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.748e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.706e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.351e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.828e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.34e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.27e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.3959e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.364e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.537e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.577e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.449e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.1401e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.711e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.599e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.8e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.534e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.138e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.39e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.098e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.491e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.224e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.542e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.348e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.304e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.925e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.623e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.336e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.512e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.339e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.097e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.31e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.784e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.178e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.272e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.386e-6 seconds)
  done (took 1.039714018 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.045306413 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026701888 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.046875898 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.043227887 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037885946 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.050842967 seconds)
  done (took 1.247893228 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.022241124 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.6491e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021331878 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.4081e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 9.726e-6 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.634e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.181e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.47e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.263e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.051e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0484e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.303e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.2007e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 6.269e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.879e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.467e-6 seconds)
  done (took 1.047983127 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020122968 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.5261e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 7.596e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017688559 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019079918 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.422e-6 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.9002e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000148936 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.408e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.913e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0107e-5 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.781e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.787e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.333e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.149e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.825e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.429e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.621e-6 seconds)
  done (took 1.058311432 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020754955 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3461e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018933291 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.1464e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 6.502e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 5.373e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.343e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 5.994e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.102e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.125e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 9.123e-6 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.474e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.633e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.319e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.247e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.94e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.164e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.076e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.899e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.56e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.654e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.362e-6 seconds)
  done (took 1.042028977 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020079743 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.1886e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019441107 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.3568e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.922e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.122e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.195e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.404e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.439e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.146e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 8.74e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.069e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.774e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.713e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.603e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.07e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.674e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.888e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.888e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.569e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.666e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.691e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.572e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.25e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.288e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.013e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.411e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.835e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1189e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.471e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.719e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.448e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.446e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.208e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.874e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.828e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.493e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.633e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.518e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.649e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.329e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.342e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.6311e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.692e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.651e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.48e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.293e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.464e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.248e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.378e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.374e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.362e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.594e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.567e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.739e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.078e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.415e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.438e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.146e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.332e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.244e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.188e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.153e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.016e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.089e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.415e-6 seconds)
  done (took 1.042494029 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.02006822 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018975749 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.3295e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 7.722e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.97e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.045e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 6.414e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.992e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.762e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.775e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.395e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.21e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.269e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.518e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.763e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.03e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.0217e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.316e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.491e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.122e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.41e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.402e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 8.354e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.856e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.278e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.081e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.041e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.246e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.019e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.577e-6 seconds)
  done (took 1.041926097 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.020523421 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.5061e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020917819 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.3872e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 7.096e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.011e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 6.658e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.698e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.21e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.656e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.0339e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.988e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.753e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 6.025e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.667e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.925e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.82e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.959e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.757e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.2164e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.385e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.837e-6 seconds)
  done (took 1.04774516 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.020406706 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.6646e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 7.155e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019056788 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.1552e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.796e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.649e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.799e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.354e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.194e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.4163e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.257e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.707e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.426e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.759e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.168e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.694e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.868e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.994e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.384e-6 seconds)
  done (took 1.040095987 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.022430544 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019203187 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 9.306e-6 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.0169e-5 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.592e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.627e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.257e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.242e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.087e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.195e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.644e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.46e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.058e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.069e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.961e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.076e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.33e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.246e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.58e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.726e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.351e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.784e-6 seconds)
  done (took 1.04404739 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.020695996 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 9.87e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.746e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.248e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.862e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.125e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.278e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.878e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.033e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.467e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 8.112e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.125e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.351e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.173e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.064e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.546e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.265e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.449e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.521e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.897e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.036e-6 seconds)
  done (took 1.020200381 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.020367513 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019436898 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021083246 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.02056832 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016054716 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019783045 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016016422 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024080595 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016127669 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019725565 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.019370133 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019199715 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.019842273 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023487762 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016095211 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020726226 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020161972 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.022020865 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020181579 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020501664 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020298041 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.015765019 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019543547 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019835593 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020483875 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02050683 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.020930846 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015750103 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015883196 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019452123 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019378419 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019633054 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021140306 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019341676 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.020068917 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029079686 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.020585978 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015862588 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.01594671 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020660799 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020180576 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020061558 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019082826 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015747358 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020270203 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019511944 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019288444 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016013737 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015811722 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019950205 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015666955 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019631937 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015853706 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019343439 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019405258 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015767139 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015873418 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.019464706 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015660001 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019658947 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015716573 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015928977 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019952382 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015845987 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.019459584 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015914727 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019552805 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019649193 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019551554 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019352651 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023008805 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020671478 seconds)
  done (took 2.376568332 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.021235215 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019935791 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.4051e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.859e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.781e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.008e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.217e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.147e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.95e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.413e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.449e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.448e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.298e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.416e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.489e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.428e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.068e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.119e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.273e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.577e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.857e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.509e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.665e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.012e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.24e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.188e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.327e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.279e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.58e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 7.271e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.36e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.189e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.284e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.501e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.568e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.632e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.441e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.407e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.468e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.22e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.333e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.358e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.5212e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.428e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.718e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.802e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.236e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.423e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.469e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.313e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.556e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.808e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.211e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 4.946e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.107e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.248e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.057e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.557e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.411e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.412e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.289e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.431e-6 seconds)
  done (took 1.048468811 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.020356523 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017550003 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017576128 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018870459 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017502213 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.3424e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.0024e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.138e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.079e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.721e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017495553 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.3158e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.5447e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.8919e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.8569e-5 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.743e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.247e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.533e-6 seconds)
  done (took 1.116261175 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.020366206 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.019035026 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.3798e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.673e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 6.219e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 5.244e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.885e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.611e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.562e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.202e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.3502e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.643e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.188e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.218e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.104e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.075e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 5.147e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.02e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.357e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.969e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.912e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.764e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 5.433e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.067e-6 seconds)
  done (took 1.043980137 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.05613146 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.0156e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.155e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.286e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.164e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.275e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.632e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.496e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.535e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.159e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 8.429e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.446e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.093e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.239e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.447e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.969e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 8.842e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.415e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.462e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.064e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.795e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.192e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.749e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.265e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.93e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.12e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.953e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.067e-6 seconds)
  done (took 1.061995001 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019808186 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019244399 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.7874e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 7.75e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.919e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 6.17e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.814e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 6.387e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.808e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.343e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.0016e-5 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.725e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 6.014e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.623e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.377e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.506e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.369e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.249e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.444e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.329e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.437e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.651e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 6.292e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 6.053e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.334e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.722e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.649e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.879e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.345e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.435e-6 seconds)
  done (took 1.04569245 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.021831666 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.0189336 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023873806 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.3561e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 7.073e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019066297 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.0718e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.01924426 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022525732 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022583125 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.024052258 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.4558e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019408044 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4841e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 9.955e-6 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.021271336 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.2112e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 9.127e-6 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 8.564e-6 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 8.248e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.166e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.366e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 5.472e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 9.722e-6 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 5.393e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 5.376e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.169e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.277e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 4.971e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.609e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 6.269e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 6.083e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 6.286e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.147e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.605e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 4.831e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.239e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 5.881e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.655e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.177e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020752067 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.2521e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.9309e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.036e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.924e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 6.672e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020957376 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.0865e-5 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.1224e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 6.912e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.1007e-5 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 8.606e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 6.247e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 8.15e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 6.373e-6 seconds)
  done (took 1.261081176 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020098263 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.5137e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 8.006e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.019051601 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0084e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.8303e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.204e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.345e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.813e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.717e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.0523e-5 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 6.124e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.435e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017682608 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.4398e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.1163e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.567e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.5126e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.102e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.041e-6 seconds)
  done (took 1.060427289 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020420243 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.4506e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021059809 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.2513e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 7.075e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.303e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.38e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.366e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.332e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.312e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.605e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.991e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.072e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.671e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 4.933e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.264e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 9.8e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.357e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.031e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 4.969e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.909e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.507e-6 seconds)
  done (took 1.0476646 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.019917745 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019229788 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.379e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.436e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.2531e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.189e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.533e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.408e-6 seconds)
  done (took 1.04834531 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.021510891 seconds)
    (2/2) benchmarking "in"...
    done (took 0.020485512 seconds)
  done (took 1.047266868 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.033504219 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.02152333 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01928719 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023739905 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024631481 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024808395 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020516878 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.02796613 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021506622 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.022236089 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021497819 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020978683 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024824825 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.021025135 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022666291 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022309457 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020909829 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.021303848 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022979205 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021488013 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021291461 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022866484 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.021087916 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.02054979 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.027250782 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021598519 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021750578 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020311639 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022981746 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020614675 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021136634 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026304459 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020895739 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020454378 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020231695 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.022128766 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021532557 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.02179037 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.022181654 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019960781 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019897387 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.02116191 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023744159 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020562993 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.00455216 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024094086 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020253948 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.01991402 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020316018 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.023135579 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026955141 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022356475 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.022709324 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.021331605 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.02156475 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020213395 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.021395883 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022110294 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020853772 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022475326 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.027013634 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027839643 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02149462 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020588626 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021664744 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.026960907 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022007787 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020292076 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019742631 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.02164812 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02486524 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.022525194 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.023074333 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022747955 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021060608 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022148564 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.02704771 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020454688 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022706386 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020809073 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020830769 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021324178 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020553303 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024263887 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021551548 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027249661 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021173404 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023161216 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021312182 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021787009 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021078158 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.027199313 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022183383 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023662817 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022291633 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022533699 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020007086 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019413382 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.020293866 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019881841 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019195975 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021435382 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027096262 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021372773 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.02023734 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021413882 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028568695 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022877596 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003214274 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021633926 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022729197 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021461838 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021523689 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027137857 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021732249 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026090591 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023999736 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020639802 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020030963 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020649848 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003560738 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019888284 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020313147 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020775399 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02152614 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022839902 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021587561 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019749773 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021360221 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021851411 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019963721 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020446314 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021343896 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020838906 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020450029 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020433114 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.022361638 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021346666 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020971821 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.02122463 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023418531 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023233228 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.02060396 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020971955 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022202434 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023890413 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021268536 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021983091 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022060204 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019433527 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.02173454 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022205997 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019775658 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020480574 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020985345 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022057969 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022097385 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021769456 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020023775 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021702543 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020106196 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019695402 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027874339 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019682409 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022093426 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02261997 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021116751 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003173054 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002840394 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020815127 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022679872 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.021039482 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021115429 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.02039861 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020695622 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021490847 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022281989 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020614889 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021219109 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022841357 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021183777 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019806163 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020341905 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022607194 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.01929055 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021420886 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022006417 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02272658 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004290996 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022502197 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019041846 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021700005 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020485221 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.02249295 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.02102151 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020917509 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019642344 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022067598 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026425048 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020784096 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022313759 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021678955 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020237035 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020758649 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020839056 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021734325 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.02168512 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021470325 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019888688 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023462239 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019350053 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022257201 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019919526 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021269131 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.021037477 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020548005 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020166291 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021750051 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020442266 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028438114 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021810867 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020741488 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026600846 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026020905 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019528821 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020194878 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026677508 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021052449 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021237026 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021608884 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026250752 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.02211266 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021020467 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.02085066 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023594923 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023077648 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022260921 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019056254 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021023071 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021382624 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022380843 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.02010004 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019120914 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021613556 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022761464 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023327926 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021856212 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021851456 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020759973 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.02199871 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021023682 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.023496924 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022018357 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019691125 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.02176091 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023808875 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022397233 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020685986 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022316345 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026376752 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020125983 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020791373 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020428428 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021191676 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021580296 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021818613 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021716343 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022497045 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021328132 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022964129 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020440785 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027741081 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020335949 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020614277 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019379062 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.028279762 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.02085014 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019016826 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020194417 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022197636 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021464324 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.022449028 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019582011 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02127655 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019580916 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021877686 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026345302 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023516265 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021896724 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021813844 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02064298 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021006111 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020626623 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021090675 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021344177 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021203914 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021549326 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.0202112 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021120801 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020472546 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025766654 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.01951714 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021332388 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019237217 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022210274 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019449175 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021886692 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021919894 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021023765 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020339671 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022604897 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021771651 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020787874 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020872322 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020628294 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.02132051 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020394875 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.02046318 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019380404 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018973734 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021637871 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021395503 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020895313 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023110942 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022493721 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.02037317 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021917865 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020173561 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021862846 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022591821 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023121015 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023245749 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022018765 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021055046 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02147336 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020679284 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025674546 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021511999 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020004423 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020957234 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.02123863 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020758473 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021248028 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019465787 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021948392 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009172098 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020370794 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021159668 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023681621 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023209346 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022214329 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021100009 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021632674 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020464723 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019651472 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019853804 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020310904 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020655973 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019987941 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025279694 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020391148 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020469636 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025558658 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022636161 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021997056 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021534683 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020132476 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020472534 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02326153 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026482943 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020589942 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021902139 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021072665 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021954688 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020534306 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022677644 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019878091 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022123816 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021285261 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020886245 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.02061324 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019102402 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021831915 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020774949 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021171762 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020649409 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021793052 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019457155 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020146803 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021060667 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022048308 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020511739 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020634787 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021271708 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.020945609 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.01993542 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020306572 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020647219 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020865563 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026054541 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.020076172 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021464537 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020363102 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019580476 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020122079 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020007576 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022514041 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018970446 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019397841 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026142823 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021443061 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020093203 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019334777 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021602629 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.0210277 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019948728 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021580502 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022258032 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020194029 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021105329 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.01887018 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022857435 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019252202 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022225257 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020145761 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019846395 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021317944 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020927054 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019222898 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.01988109 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020658237 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022826161 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021486411 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020779033 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021162186 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020111211 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021732775 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019023291 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021702958 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021869173 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026045046 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022228436 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019924499 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020109323 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.025845694 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020448587 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021385101 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021606951 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020332602 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.02024672 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020356192 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003776408 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022476012 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.02034949 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021449329 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020316293 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022668669 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.02228307 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020314879 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018939658 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020193426 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020131263 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02015864 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022087562 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.02179375 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020713876 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020884756 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003049629 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019274894 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020024961 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020542247 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020530961 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02034459 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021195331 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021160093 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020188131 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018971695 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019936094 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003271864 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.02054373 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021327109 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021069485 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020353451 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020929882 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020096658 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021388342 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02074262 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021130246 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025960649 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003419688 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019524359 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021551646 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022023833 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020360965 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020256245 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019839553 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020545556 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020112319 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020120604 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.01950501 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020511755 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020665496 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020178716 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026012708 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021239131 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01925571 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020339384 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.02000228 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020392982 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020925331 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022787404 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020285357 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020957206 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020119908 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019884991 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021778247 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026169751 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.02247017 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022480895 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020730036 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019240261 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022240796 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020237918 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02026919 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021278922 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027343448 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018968581 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020348056 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020633 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020521787 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.01979151 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021390935 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019837439 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020319778 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020008467 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.021728547 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020608096 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020953845 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020041252 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025094336 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021546791 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020441244 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019894954 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021356244 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020359586 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020208082 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021627706 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026125767 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021565379 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019153419 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022676595 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019152586 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021486598 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008500718 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022597325 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019600078 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021493607 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025824794 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020791023 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020057899 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021478012 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020888145 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019857486 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020036612 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020958935 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019694084 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.0218145 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020121631 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019571553 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020327136 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.025884579 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020031276 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018911937 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021589676 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023057309 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020180093 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.02274873 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022817199 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019558803 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020954354 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022648978 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02553468 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023011598 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021001256 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019694303 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019001602 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020292727 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.021985865 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003875058 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021451669 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.009095729 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019612549 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019617024 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022834091 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020830476 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.0041262 seconds)
  done (took 13.605516739 seconds)
done (took 42.745596435 seconds)
(9/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020549654 seconds)
    (2/7) benchmarking "month"...
    done (took 0.019263929 seconds)
    (3/7) benchmarking "year"...
    done (took 0.019154924 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020478077 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020965689 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021154033 seconds)
    (7/7) benchmarking "second"...
    done (took 0.021207219 seconds)
  done (took 1.185257058 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021981964 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.48634329 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021619937 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026077311 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.282975569 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.195718831 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.200429238 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.025965841 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.026148717 seconds)
  done (took 2.333101608 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021618337 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021884856 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021934354 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023312453 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.040102218 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020371164 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.023087979 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020440302 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02142592 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027161844 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022275273 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020375735 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.02947409 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025161938 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023935306 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021341731 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021452796 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022625512 seconds)
  done (took 1.485695656 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.044130029 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.023233214 seconds)
  done (took 1.119486687 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020721186 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020986641 seconds)
  done (took 1.095782565 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.020292194 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.158066358 seconds)
  done (took 1.228628883 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.038503056 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021269736 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021221391 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.021124997 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.031264088 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.03401855 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.033844255 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.020815188 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021059747 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020584837 seconds)
  done (took 1.319194262 seconds)
done (took 10.832328738 seconds)
(10/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.092521292 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.124048341 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.059337637 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.082303389 seconds)
done (took 1.411518125 seconds)
(11/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.043312141 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040388955 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040859531 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028996101 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.056216136 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038899601 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040903305 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.5452e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040922329 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.056918651 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.1262e-5 seconds)
  done (took 1.440962204 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.042145305 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040887054 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040592432 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031295396 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052178729 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027579677 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040688814 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7641e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040902889 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.051935633 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.5435e-5 seconds)
  done (took 1.42339258 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.087491851 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084532881 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084823639 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091094746 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087328301 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027624366 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.8523e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082177057 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082074231 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.6781e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088630748 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.083342106 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019752211 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.085936861 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.4111e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 9.589e-6 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.2237e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 8.232e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.086627003 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083368821 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.3818e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.2915e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 9.3e-6 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4297e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 6.661e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.566e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.648e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.2773e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 9.32e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.081611596 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082356646 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.334e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.4484e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.0013e-5 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 8.27e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 6.856e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1395e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0366e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 9.113e-6 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 9.858e-6 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 9.911e-6 seconds)
  done (took 2.292130281 seconds)
done (took 6.215851839 seconds)
(12/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.024513608 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032219756 seconds)
  done (took 1.118139662 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.238602739 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.879152088 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.743159693 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.89724094 seconds)
  done (took 4.58425318 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.8780427 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.10809957 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.053761211 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.040486344 seconds)
  done (took 2.180061679 seconds)
done (took 9.191134002 seconds)
(13/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.072934992 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021487171 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.021109289 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022355042 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.02232569 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021217043 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020759723 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021197499 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022671911 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020534754 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022213801 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022935442 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023362902 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021128575 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021161226 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023467849 seconds)
  done (took 1.520799042 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.141132553 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.23403301 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.889724193 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.039036241 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.082685211 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027999861 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.145137799 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022734174 seconds)
  done (took 4.651563329 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.023492997 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.022013868 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024719033 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.02042709 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.02262607 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023886098 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022093026 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.02346968 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020319156 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021702938 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.02210571 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022156152 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023726254 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.02258338 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022465084 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026325252 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.023128704 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022892328 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026758532 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.023193648 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023891618 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.023437857 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022326492 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.02802554 seconds)
  done (took 1.640713927 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021971941 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.04576384 seconds)
  done (took 1.142333004 seconds)
done (took 10.026046334 seconds)
(14/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.02458469 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023717446 seconds)
  done (took 1.118848086 seconds)
  (2/7) benchmarking "join"...
  done (took 0.286068015 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.042141213 seconds)
    (2/4) benchmarking "different"...
    done (took 9.274e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021854524 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.2098e-5 seconds)
  done (took 1.157636355 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021032091 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.14532887 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000209214 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.819e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000898722 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 7.552e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.616e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000575951 seconds)
  done (took 1.225782669 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.023674982 seconds)
    (2/3) benchmarking "different"...
    done (took 9.002e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.209e-6 seconds)
  done (took 1.100600162 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.038476389 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.0251986 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021284267 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021369696 seconds)
  done (took 1.181535694 seconds)
done (took 7.167466951 seconds)
(15/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.024015725 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021899732 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030066089 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.025242701 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.022584843 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030196708 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.029938671 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.021692241 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.038921339 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.057003128 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.9415e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.033895119 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.02160393 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.034367166 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025472964 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.029846718 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021842225 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.3696e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.021361741 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.0453e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029829323 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021976154 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.023263604 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.2208e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.0797e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.032992461 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.9276e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.0098e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.3268e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 9.667e-6 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.076e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.021251315 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.1189e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 9.853e-6 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.532e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.786e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 5.792e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 5.495e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.019951664 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.0535e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.3975e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020129998 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.6092e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 7.253e-6 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.6069e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 8.7e-6 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0053e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 5.542e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.093e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 9.447e-6 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.1231e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.801e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.0477e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021826691 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.029765739 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.7214e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.262e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.7019e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.1853e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.0631e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.022689845 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021949755 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.322e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.7983e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.2544e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.714e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.2829e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.1718e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 8.364e-6 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.027580266 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026677343 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.2277e-5 seconds)
  done (took 1.882080102 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.032913046 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.035437054 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.020794491 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.019733943 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.019697015 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021850151 seconds)
  done (took 1.228645745 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023252089 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021542732 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025542766 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.035000455 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021799346 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.04084425 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021568314 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02145305 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025078006 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026225508 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020819601 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021829645 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020846066 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.032981479 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025214437 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022520123 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022107882 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024245783 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.051696069 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024335156 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021474585 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024285159 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034301081 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024608115 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022351166 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.039428103 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021525835 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024449015 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020949084 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029659084 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.036263413 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024329361 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025664755 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028533535 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023202335 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031565278 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037492193 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033663684 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.052382038 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035162031 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021743503 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049436076 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062902665 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039244608 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034337022 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020594594 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020604755 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021586804 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.025714294 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021778617 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020673931 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023917811 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032840398 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.030459814 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019522924 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030462711 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023112738 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.03168704 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022581655 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021469303 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021245812 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.02215093 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022244739 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022434477 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025468731 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.02954258 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.033335754 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.024328693 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022260873 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024001921 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021378342 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031919022 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021173655 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024601513 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021798831 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023617191 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.034453303 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0225256 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024579927 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022033645 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033775648 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.044500587 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.02142532 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024464289 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03033951 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018994606 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.02815585 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035007021 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021901814 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025512671 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021988173 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.019969026 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022158556 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048689102 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034579283 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033519547 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030575674 seconds)
  done (took 3.769752391 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.054227976 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035191346 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034212767 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031973171 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.02017657 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021294105 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021259803 seconds)
  done (took 1.310345503 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.030365828 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.047675272 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.031743773 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.043675195 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040275407 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.037155371 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.049912153 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.045506222 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.028243234 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.6151e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.034216943 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.033281906 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.030785032 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.023996632 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002423776 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.047039345 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.029917491 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.032952281 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.2903e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047208456 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.035034177 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048647727 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020677605 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.03943755 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.023173715 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.036478864 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.7096e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.035853669 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.023390907 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 4.7275e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001069691 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.035876884 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.3555e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.7091e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.032617705 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.039664116 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.03260346 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.4895e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.036284528 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.024131972 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.02439431 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.03046544 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.4467e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 8.626e-6 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 7.3717e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.040138042 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.2671e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 9.9056e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005481873 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 7.908e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.0716e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001059081 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 4.9574e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 7.702e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.0201e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 6.654e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.7213e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.024685647 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.7576e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001056635 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.0843e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 8.662e-6 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.2577e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.033188813 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 7.9583e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.037e-5 seconds)
  done (took 2.34737744 seconds)
done (took 11.613659543 seconds)
(16/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038358267 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.103461502 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.059149268 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.125119852 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.14162851 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.448300712 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023613647 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.038715068 seconds)
done (took 2.06925849 seconds)
(17/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (5, "scal_tup")...
    done (took 0.043709044 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.033958028 seconds)
    (3/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.030390841 seconds)
    (4/9) benchmarking (3, "tup_tup")...
    done (took 0.021434381 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.022041657 seconds)
    (6/9) benchmarking (10, "scal_tup")...
    done (took 0.030883889 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.104266506 seconds)
    (8/9) benchmarking (10, "tup_tup")...
    done (took 0.024275005 seconds)
    (9/9) benchmarking (3, "scal_tup")...
    done (took 0.024158422 seconds)
  done (took 1.478898896 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.189561951 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.272725754 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.332138805 seconds)
  done (took 1.895852955 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.050872336 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.064802427 seconds)
    (3/6) benchmarking ("array", 10)...
    done (took 1.2128e-5 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 7.857e-6 seconds)
    (5/6) benchmarking ("tuple", 3)...
    done (took 0.033721186 seconds)
    (6/6) benchmarking ("tuple", 5)...
    done (took 0.03910256 seconds)
  done (took 1.296741178 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.075432935 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.096311547 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.239313812 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.115821657 seconds)
  done (took 1.633487016 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.159180794 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.107877291 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.281804525 seconds)
    (4/4) benchmarking ("(10000000,)", 2)...
    done (took 0.162441979 seconds)
  done (took 1.8215736 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.061078086 seconds)
done (took 9.28984508 seconds)
(18/22) benchmarking "parallel"...
done (took 1.112149227 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.10305516 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.058748037 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027290227 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.048966024 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.036540719 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.144777804 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10193763 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035570016 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019602701 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032584194 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.046184661 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036417897 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020646655 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.051825731 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041833009 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028670931 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032616479 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031163788 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020879604 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025794209 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026650205 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022938174 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019866517 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020309975 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.032225775 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022734612 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026976336 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020309204 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026469634 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027080664 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029746718 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.030778912 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019497918 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.0411017 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.054732355 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020236771 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027050417 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.0264e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032789935 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.066047832 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.3085e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036154271 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019273792 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.101429087 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069637111 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.020802692 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.071418992 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.057973682 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.03973323 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.027956206 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.03912245 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039094396 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025660268 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025723429 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025539142 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.0296429 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024129947 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.029823787 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.020676993 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.057853836 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.020808782 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.055562136 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.03643353 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025663877 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.7297e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020452861 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.03868478 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028065545 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025867107 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026988234 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027085585 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020101972 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026451824 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031126501 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041508473 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030152028 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.046853304 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026086259 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032621441 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026605441 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.026575713 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039092544 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.041448412 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032372214 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.057806459 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020559588 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033088761 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029307116 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.6068e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036478263 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.1213e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.055476825 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034202062 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.028733026 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.03153314 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029077667 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028616359 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037600783 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019135605 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036008959 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020148589 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031118324 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026432265 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.034908864 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.6507e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028953824 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024458766 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.6718e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 9.831e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.059731581 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026818018 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034134373 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031019828 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020842912 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.028204567 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020180227 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.035853087 seconds)
  done (took 5.007152679 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.034308319 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.052708637 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.136098016 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023551203 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.093180912 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.065884853 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.039691536 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.106929939 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040490289 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.16722347 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.041013171 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.143327149 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150597179 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.041578758 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026282055 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.04151158 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021302075 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.091504578 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027261062 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.022713743 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028949941 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.042719589 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022132042 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.02273724 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021133512 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022062367 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.045586672 seconds)
  done (took 2.693203771 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036022915 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.034068215 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026685555 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.039899893 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.024192474 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033594144 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.027424727 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.032537422 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036900408 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023922829 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036791357 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021990657 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019331986 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.062848234 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026781481 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026379181 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02780228 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019103283 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022643964 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021579759 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.027959659 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028065153 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.053918957 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025331901 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.1414e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021137872 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036224858 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033203754 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021036383 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.0712e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020869192 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019153603 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021892976 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028742059 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02101574 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023759713 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.020746753 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.1874e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019117438 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.02062827 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022162795 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.037884392 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020057853 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026036965 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035018355 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.7125e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.035011063 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.032358812 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023681096 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.043087321 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.031023286 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020378356 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 4.9271e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.1854e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023113232 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020408785 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 4.2e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.032714563 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024257311 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019940373 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.598e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.03901801 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021587889 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.03896376 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.032868367 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021703137 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 4.0111e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000124613 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026666718 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.5801e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 9.962e-6 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.0392e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.038040411 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026546367 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.038572168 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023587117 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024654646 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.02796135 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.6004e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035470296 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.029150783 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.7259e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.02062214 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.474e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.6903e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027915772 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.0241847 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.03259194 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.8385e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.3519e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040686359 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.5479e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025107116 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.2788e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021443096 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.6441e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.2888e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037661672 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.7359e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.4046e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.0167e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.038198803 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.7205e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.9347e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.1713e-5 seconds)
  done (took 3.316208074 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03491316 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032588906 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.057477664 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036952411 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.048136619 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.038153357 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021160776 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032011532 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021362623 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.025246205 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021103043 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021754116 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.043649018 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038338053 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045285565 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.033989869 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.03198986 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.049917754 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021220653 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.04368206 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.045614974 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032564486 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.039548616 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.036784815 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031212075 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.047838436 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037773922 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040483999 seconds)
  done (took 2.142321689 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.02839257 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027837793 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024166353 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028171598 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029788486 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030484209 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031089303 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021613815 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026248131 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022089414 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.029606042 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027817704 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.025966513 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023441083 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031570037 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026494718 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.029401796 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022490185 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025999435 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027409799 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.022776521 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027143554 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.02979412 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029166656 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029626613 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026106298 seconds)
  done (took 1.840170704 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.025368143 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.028966564 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031459563 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031473989 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.037349792 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069935871 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038488319 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.03217264 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020632934 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.031596846 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005717048 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.02160814 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.034603619 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024989285 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022340954 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004790826 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.020881647 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012112429 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027250484 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021223627 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022656316 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011751729 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005433493 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012832015 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.01333826 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.4567e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.030030615 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026498078 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.02778452 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.0087427 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003277427 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011693618 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.021558867 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.012574003 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005424329 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.009810052 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.515e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003402721 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.012387296 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008233161 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008279728 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.5603e-5 seconds)
  done (took 1.932803462 seconds)
done (took 18.035278465 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.151396305 seconds)
  (2/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.043730886 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.050143645 seconds)
  (4/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.061639914 seconds)
  (5/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.084816232 seconds)
  (6/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.111982231 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.053990565 seconds)
  (8/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.085580269 seconds)
  (9/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.091542585 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.085772143 seconds)
  (11/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.073748393 seconds)
  (12/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.034901232 seconds)
  (13/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.062852811 seconds)
  (14/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.073145014 seconds)
  (15/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.026127428 seconds)
  (16/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.030934412 seconds)
  (17/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.074265934 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.084878232 seconds)
  (19/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.055858019 seconds)
  (20/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.058350125 seconds)
  (21/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.065131511 seconds)
  (22/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.3748e-5 seconds)
  (23/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.037392072 seconds)
  (24/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.02969697 seconds)
  (25/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.024403886 seconds)
  (26/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.067342193 seconds)
  (27/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.057198632 seconds)
  (28/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.026988078 seconds)
  (29/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.7431e-5 seconds)
  (30/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 3.6501e-5 seconds)
  (31/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.039888213 seconds)
  (32/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.05647974 seconds)
  (33/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.028423862 seconds)
  (34/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.057231921 seconds)
  (35/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 3.3371e-5 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.044421558 seconds)
  (37/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.073043567 seconds)
  (38/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.053869379 seconds)
  (39/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.058933576 seconds)
  (40/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.075301081 seconds)
  (41/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.05792931 seconds)
  (42/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.041931247 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.055317511 seconds)
  (44/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.069315552 seconds)
  (45/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.036852962 seconds)
  (46/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.056754666 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.059799505 seconds)
  (48/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.0581515 seconds)
  (49/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.052818719 seconds)
  (50/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.056349604 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.077360488 seconds)
  (52/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.062179574 seconds)
  (53/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.035543744 seconds)
  (54/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.063306847 seconds)
  (55/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.7578e-5 seconds)
  (56/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.8693e-5 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.8096e-5 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.068968332 seconds)
  (59/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.032076716 seconds)
  (60/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.04857704 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 4.4435e-5 seconds)
  (62/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.03068788 seconds)
  (63/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.059868987 seconds)
  (64/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.028e-5 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.080723408 seconds)
  (66/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.061535067 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.067391485 seconds)
  (68/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.063340455 seconds)
  (69/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.062208501 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.3601e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.051727327 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.074530122 seconds)
  (73/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031938189 seconds)
  (74/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.052054356 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.061733819 seconds)
  (76/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.047099064 seconds)
  (77/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.037322578 seconds)
  (78/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.074421478 seconds)
  (79/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.067013647 seconds)
  (80/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.063133091 seconds)
  (81/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.063346807 seconds)
  (82/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.478e-5 seconds)
  (83/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.6379e-5 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.083737227 seconds)
  (85/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.057087517 seconds)
  (86/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.5893e-5 seconds)
  (87/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.074139067 seconds)
  (88/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.063824166 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.063061632 seconds)
  (90/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.030388385 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.2517e-5 seconds)
  (92/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.065515277 seconds)
  (93/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 3.2302e-5 seconds)
  (94/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.41e-5 seconds)
  (95/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.063102777 seconds)
  (96/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 3.0376e-5 seconds)
  (97/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.052644171 seconds)
  (98/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.083358323 seconds)
  (99/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.027081508 seconds)
  (100/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.063045452 seconds)
  (101/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 3.9665e-5 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.7701e-5 seconds)
  (103/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.2535e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.7059e-5 seconds)
  (105/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.05924552 seconds)
  (106/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.052411202 seconds)
  (107/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.057994274 seconds)
  (108/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.054395315 seconds)
  (109/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.06175115 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 3.6352e-5 seconds)
  (111/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.065286596 seconds)
  (112/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.042995399 seconds)
  (113/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 3.696e-5 seconds)
  (114/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.068998634 seconds)
  (115/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.3317e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.8743e-5 seconds)
  (117/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.069767177 seconds)
  (118/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.033785529 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.067101347 seconds)
  (120/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.070915815 seconds)
  (121/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.379e-5 seconds)
  (122/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.6422e-5 seconds)
  (123/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.0358e-5 seconds)
  (124/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.4878e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.3651e-5 seconds)
  (126/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.046011051 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.051712685 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.2214e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.084889718 seconds)
  (130/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.067983692 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.08500733 seconds)
  (132/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.066991217 seconds)
  (133/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.059447115 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 3.9183e-5 seconds)
  (135/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.061602786 seconds)
  (136/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.4806e-5 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.056330647 seconds)
  (138/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 3.0486e-5 seconds)
  (139/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 3.3122e-5 seconds)
  (140/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.4702e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.6503e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.056476296 seconds)
  (143/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 3.2702e-5 seconds)
  (144/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.031680031 seconds)
  (145/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.028374157 seconds)
  (146/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.5601e-5 seconds)
  (147/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.055398791 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 3.56e-5 seconds)
  (149/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.12e-5 seconds)
  (150/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.074689445 seconds)
  (151/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.027777991 seconds)
  (152/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.028474996 seconds)
  (153/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.064398422 seconds)
  (154/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 3.3859e-5 seconds)
  (155/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.028821519 seconds)
  (156/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.059037958 seconds)
  (157/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.3259e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.074117514 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.5707e-5 seconds)
  (160/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.05834246 seconds)
  (161/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.029158369 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 4.0183e-5 seconds)
  (163/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.027430553 seconds)
  (164/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 3.723e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.4577e-5 seconds)
  (166/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.7089e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 7.8931e-5 seconds)
  (168/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.058191457 seconds)
  (169/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.066268949 seconds)
  (170/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.033756715 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.6161e-5 seconds)
  (172/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.086756359 seconds)
  (173/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.074025925 seconds)
  (174/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.8478e-5 seconds)
  (175/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.8495e-5 seconds)
  (176/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.038126227 seconds)
  (177/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.4666e-5 seconds)
  (178/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.9169e-5 seconds)
  (179/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032316442 seconds)
  (180/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.056173118 seconds)
  (181/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 3.6827e-5 seconds)
  (182/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.4209e-5 seconds)
  (183/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.815e-5 seconds)
  (184/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.5004e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.6094e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.5357e-5 seconds)
  (187/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.050017294 seconds)
  (188/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.6435e-5 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.052394949 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.6695e-5 seconds)
  (191/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.9794e-5 seconds)
  (192/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.06852823 seconds)
  (193/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.0837e-5 seconds)
  (194/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.052125162 seconds)
  (195/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.5064e-5 seconds)
  (196/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.7373e-5 seconds)
  (197/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.063194659 seconds)
  (198/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.064359365 seconds)
  (199/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.057091747 seconds)
  (200/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.246e-5 seconds)
  (201/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 3.0343e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.3471e-5 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.3233e-5 seconds)
  (204/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.604e-5 seconds)
  (205/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.031234061 seconds)
  (206/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.9229e-5 seconds)
  (207/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.037187535 seconds)
  (208/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 3.6655e-5 seconds)
  (209/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.048520079 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.024669453 seconds)
  (211/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.05505447 seconds)
  (212/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.075500073 seconds)
  (213/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.4061e-5 seconds)
  (214/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.7471e-5 seconds)
  (215/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.8374e-5 seconds)
  (216/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3808e-5 seconds)
  (217/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.594e-5 seconds)
  (218/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.028247402 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 3.2418e-5 seconds)
  (220/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.057450954 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 3.7882e-5 seconds)
  (222/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.6413e-5 seconds)
  (223/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.5692e-5 seconds)
  (224/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.054290367 seconds)
  (225/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.030858631 seconds)
  (226/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.046790146 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.8842e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.069559346 seconds)
  (229/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 3.2268e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.686e-5 seconds)
  (231/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.6582e-5 seconds)
  (232/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.1596e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.981e-5 seconds)
  (234/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.588e-5 seconds)
  (235/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.2687e-5 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.3666e-5 seconds)
  (237/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.4817e-5 seconds)
  (238/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.2261e-5 seconds)
  (239/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.026344987 seconds)
  (240/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.058657975 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.074071844 seconds)
  (242/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.471e-5 seconds)
  (243/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.062146148 seconds)
  (244/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.5662e-5 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.0417e-5 seconds)
  (246/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.9538e-5 seconds)
  (247/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.6187e-5 seconds)
  (248/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.053169249 seconds)
  (249/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 3.4262e-5 seconds)
  (250/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.061881804 seconds)
  (251/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.8459e-5 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.055441457 seconds)
  (253/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.074694469 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 3.5728e-5 seconds)
  (255/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.057616935 seconds)
  (256/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 3.6567e-5 seconds)
  (257/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.056468782 seconds)
  (258/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 3.406e-5 seconds)
  (259/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.2407e-5 seconds)
  (260/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.7708e-5 seconds)
  (261/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 3.2846e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.4464e-5 seconds)
  (263/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.2529e-5 seconds)
  (264/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.7552e-5 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.046871238 seconds)
  (266/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 3.8282e-5 seconds)
  (267/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.035880791 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.6266e-5 seconds)
  (269/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.3229e-5 seconds)
  (270/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.056697839 seconds)
  (271/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.04584382 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.5362e-5 seconds)
  (273/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.4238e-5 seconds)
  (274/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.009789165 seconds)
  (275/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.8251e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.07421044 seconds)
  (277/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 4.7558e-5 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.8466e-5 seconds)
  (279/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.2429e-5 seconds)
  (280/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 3.3382e-5 seconds)
  (281/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.944e-5 seconds)
  (282/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.4444e-5 seconds)
  (283/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.3436e-5 seconds)
  (284/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.3796e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.9805e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.6499e-5 seconds)
  (287/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.2483e-5 seconds)
  (288/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5317e-5 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.4741e-5 seconds)
  (290/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.034997273 seconds)
  (291/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.026570339 seconds)
  (292/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 3.3005e-5 seconds)
  (293/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.1241e-5 seconds)
  (294/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 3.6348e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.5513e-5 seconds)
  (296/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.876e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.9771e-5 seconds)
  (298/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.5406e-5 seconds)
  (299/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.2595e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.9634e-5 seconds)
  (301/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.042633429 seconds)
  (302/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.2801e-5 seconds)
  (303/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.3201e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.059016126 seconds)
  (305/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 3.0522e-5 seconds)
  (306/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 3.5844e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.1551e-5 seconds)
  (308/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.5123e-5 seconds)
  (309/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.5999e-5 seconds)
  (310/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.6454e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.075957158 seconds)
  (312/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.038076559 seconds)
  (313/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.8923e-5 seconds)
  (314/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.6647e-5 seconds)
  (315/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.7918e-5 seconds)
  (316/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.1023e-5 seconds)
  (317/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.0645e-5 seconds)
  (318/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.9629e-5 seconds)
  (319/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031752749 seconds)
  (320/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.8635e-5 seconds)
  (321/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03216258 seconds)
  (322/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.046361195 seconds)
  (323/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.6715e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.933e-5 seconds)
  (325/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.058652166 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.062044643 seconds)
  (327/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.7118e-5 seconds)
  (328/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.3737e-5 seconds)
  (329/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.864e-5 seconds)
  (330/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.2519e-5 seconds)
  (331/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.8242e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.07001095 seconds)
  (333/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 3.9671e-5 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.032534609 seconds)
  (335/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 3.5301e-5 seconds)
  (336/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 3.4041e-5 seconds)
  (337/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.8561e-5 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.8878e-5 seconds)
  (339/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.4037e-5 seconds)
  (340/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.033348922 seconds)
  (341/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 3.7093e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.5204e-5 seconds)
  (343/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.0212e-5 seconds)
  (344/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.338e-5 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.1432e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.3711e-5 seconds)
  (347/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.3285e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.081526297 seconds)
  (349/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.4656e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 3.5094e-5 seconds)
  (351/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.4763e-5 seconds)
  (352/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 5.8647e-5 seconds)
  (353/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.6138e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.8927e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.2533e-5 seconds)
  (356/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.8121e-5 seconds)
  (357/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.9203e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.3751e-5 seconds)
  (359/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.8756e-5 seconds)
  (360/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.4424e-5 seconds)
  (361/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.030495701 seconds)
  (362/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.7108e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.8827e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.1898e-5 seconds)
  (365/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.8061e-5 seconds)
  (366/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.5623e-5 seconds)
  (367/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.035986922 seconds)
  (368/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.7452e-5 seconds)
  (369/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.7129e-5 seconds)
  (370/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.3695e-5 seconds)
  (371/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.3697e-5 seconds)
  (372/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.456e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.4786e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.5406e-5 seconds)
  (375/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.0227e-5 seconds)
  (376/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.9408e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.9666e-5 seconds)
  (378/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.8989e-5 seconds)
  (379/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.010064224 seconds)
  (380/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 3.775e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.8414e-5 seconds)
  (382/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.0949e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.057968859 seconds)
  (384/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 4.0511e-5 seconds)
  (385/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.2216e-5 seconds)
  (386/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.3203e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.0217e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.2639e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.8684e-5 seconds)
  (390/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.9859e-5 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.8908e-5 seconds)
  (392/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.2211e-5 seconds)
  (393/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.063800065 seconds)
  (394/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.5072e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 3.3867e-5 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.8819e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.3225e-5 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.8311e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.7874e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.4831e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.553e-5 seconds)
  (402/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.1677e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.8407e-5 seconds)
  (404/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.049281479 seconds)
  (405/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 3.6687e-5 seconds)
  (406/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.1257e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.1989e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.9057e-5 seconds)
  (409/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.152e-5 seconds)
  (410/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.027131087 seconds)
  (411/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.6943e-5 seconds)
  (412/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.7421e-5 seconds)
  (413/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.4627e-5 seconds)
  (414/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 3.1034e-5 seconds)
  (415/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.6386e-5 seconds)
  (416/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.7034e-5 seconds)
  (417/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.1905e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.9657e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.0247e-5 seconds)
  (420/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.2378e-5 seconds)
  (421/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.4656e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.7245e-5 seconds)
  (423/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.7757e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.85e-5 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.4774e-5 seconds)
  (426/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.8319e-5 seconds)
  (427/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 4.1424e-5 seconds)
  (428/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 9.386e-6 seconds)
  (429/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.4446e-5 seconds)
  (430/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.2299e-5 seconds)
  (431/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.3514e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.9522e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.2521e-5 seconds)
  (434/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.9167e-5 seconds)
  (435/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.3783e-5 seconds)
  (436/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.6529e-5 seconds)
  (437/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.3421e-5 seconds)
  (438/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.7078e-5 seconds)
  (439/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 3.0936e-5 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.6383e-5 seconds)
  (441/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.1116e-5 seconds)
  (442/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.7192e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.503e-5 seconds)
  (444/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.4808e-5 seconds)
  (445/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.1781e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.2643e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.9054e-5 seconds)
  (448/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.2117e-5 seconds)
  (449/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.5658e-5 seconds)
  (450/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.0582e-5 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.7839e-5 seconds)
  (452/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 4.806e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.5702e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.3561e-5 seconds)
  (455/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.3645e-5 seconds)
  (456/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.030399837 seconds)
  (457/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.6785e-5 seconds)
  (458/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.8353e-5 seconds)
  (459/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.2937e-5 seconds)
  (460/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.9815e-5 seconds)
  (461/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.1052e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.4706e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.8229e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.5154e-5 seconds)
  (465/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.842e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.4735e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.2891e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.8448e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.5184e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.4813e-5 seconds)
  (471/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.9641e-5 seconds)
  (472/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.2212e-5 seconds)
  (473/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.6476e-5 seconds)
  (474/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.00980152 seconds)
  (475/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 4.4959e-5 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.8129e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.7168e-5 seconds)
  (478/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.056337841 seconds)
  (479/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 3.7135e-5 seconds)
  (480/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.3287e-5 seconds)
  (481/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.7154e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.1888e-5 seconds)
  (483/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.2287e-5 seconds)
  (484/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.7748e-5 seconds)
  (485/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 4.1735e-5 seconds)
  (486/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.0186e-5 seconds)
  (487/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.875e-5 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.0525e-5 seconds)
  (489/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.1439e-5 seconds)
  (490/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.0225e-5 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.3748e-5 seconds)
  (492/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.1442e-5 seconds)
  (493/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.2886e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.3429e-5 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.6083e-5 seconds)
  (496/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.1077e-5 seconds)
  (497/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.4346e-5 seconds)
  (498/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.989e-5 seconds)
  (499/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.009771368 seconds)
  (500/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.887e-5 seconds)
  (501/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.4287e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.7928e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.5314e-5 seconds)
  (504/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.6663e-5 seconds)
  (505/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.4924e-5 seconds)
  (506/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.8002e-5 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8238e-5 seconds)
  (508/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.1938e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.9893e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.2483e-5 seconds)
  (511/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.3048e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.4074e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.7666e-5 seconds)
  (514/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.7207e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.339e-5 seconds)
  (516/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.6972e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.0777e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.4983e-5 seconds)
  (519/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3736e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.9336e-5 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.69e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.0361e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.0233e-5 seconds)
  (524/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.7126e-5 seconds)
  (525/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.7132e-5 seconds)
  (526/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.1348e-5 seconds)
  (527/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.7495e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.5255e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.5509e-5 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.227e-5 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.0409e-5 seconds)
  (532/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.8105e-5 seconds)
  (533/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.4596e-5 seconds)
  (534/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.3017e-5 seconds)
  (535/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.5112e-5 seconds)
  (536/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.1653e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.5924e-5 seconds)
  (538/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4247e-5 seconds)
  (539/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.5973e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.8156e-5 seconds)
  (541/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.2948e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.3057e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.4433e-5 seconds)
  (544/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.2183e-5 seconds)
  (545/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.0968e-5 seconds)
  (546/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.3393e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.432e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.4173e-5 seconds)
  (549/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.0408e-5 seconds)
  (550/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.231e-5 seconds)
  (551/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.5433e-5 seconds)
  (552/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.5529e-5 seconds)
  (553/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.4217e-5 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 9.957e-6 seconds)
  (555/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.3025e-5 seconds)
  (556/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.0668e-5 seconds)
  (557/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.056296838 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.9002e-5 seconds)
  (559/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 4.6594e-5 seconds)
  (560/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.9209e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.1664e-5 seconds)
  (562/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.544e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.2261e-5 seconds)
  (564/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.8122e-5 seconds)
  (565/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.4391e-5 seconds)
  (566/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 4.8912e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.1134e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.2546e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.5448e-5 seconds)
  (570/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.6812e-5 seconds)
  (571/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.9204e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.4759e-5 seconds)
  (573/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.7605e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.6584e-5 seconds)
  (575/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 3.4249e-5 seconds)
  (576/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.126e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.4041e-5 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.0172e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.2336e-5 seconds)
  (580/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.5399e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.7759e-5 seconds)
  (582/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.5648e-5 seconds)
  (583/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.6315e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.8044e-5 seconds)
  (585/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.556e-5 seconds)
  (586/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.5433e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.0019e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.4827e-5 seconds)
  (589/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.0296e-5 seconds)
  (590/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.0227e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.2582e-5 seconds)
  (592/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 9.365e-6 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.0846e-5 seconds)
  (594/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.4439e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.8813e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.3368e-5 seconds)
  (597/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.6948e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.8195e-5 seconds)
  (599/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.4257e-5 seconds)
  (600/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.6526e-5 seconds)
  (601/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.1527e-5 seconds)
  (602/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.000155258 seconds)
  (603/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.9861e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.3607e-5 seconds)
  (605/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.7335e-5 seconds)
  (606/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.0482e-5 seconds)
  (607/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.6445e-5 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.0328e-5 seconds)
  (609/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.1909e-5 seconds)
  (610/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.4192e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.8819e-5 seconds)
  (612/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.3514e-5 seconds)
  (613/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.2403e-5 seconds)
  (614/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.5394e-5 seconds)
  (615/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.9262e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.4025e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.995e-5 seconds)
  (618/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.4504e-5 seconds)
  (619/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.7145e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.1164e-5 seconds)
  (621/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.8847e-5 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.36e-5 seconds)
  (623/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.604e-5 seconds)
  (624/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.0576e-5 seconds)
  (625/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 5.1282e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.8403e-5 seconds)
  (627/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.0655e-5 seconds)
  (628/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.7323e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.0706e-5 seconds)
  (630/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.3402e-5 seconds)
  (631/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 5.0074e-5 seconds)
  (632/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.337e-5 seconds)
  (633/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.4583e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.4955e-5 seconds)
  (635/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.1771e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.0755e-5 seconds)
  (637/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.4338e-5 seconds)
  (638/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.3874e-5 seconds)
  (639/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.3866e-5 seconds)
  (640/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.0783e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.565e-5 seconds)
  (642/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 5.8068e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 8.728e-6 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.643e-5 seconds)
  (645/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.1703e-5 seconds)
  (646/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.163e-5 seconds)
  (647/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.2632e-5 seconds)
  (648/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.2821e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.403e-5 seconds)
  (650/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.3219e-5 seconds)
  (651/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.7379e-5 seconds)
  (652/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.816e-5 seconds)
  (653/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.8289e-5 seconds)
  (654/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.601e-5 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.5576e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.5253e-5 seconds)
  (657/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.2688e-5 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.6037e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.2807e-5 seconds)
  (660/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.1918e-5 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.2476e-5 seconds)
  (662/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.81e-5 seconds)
  (663/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.0708e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.7377e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.1531e-5 seconds)
  (666/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 9.441e-6 seconds)
  (667/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.65e-5 seconds)
  (668/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.7357e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.6754e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.9982e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.2631e-5 seconds)
  (672/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.3061e-5 seconds)
  (673/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.5055e-5 seconds)
  (674/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.3867e-5 seconds)
  (675/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.9445e-5 seconds)
  (676/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.3053e-5 seconds)
  (677/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.0999e-5 seconds)
  (678/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.7905e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.1008e-5 seconds)
  (680/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.451e-5 seconds)
done (took 11.526241357 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 20.426285518 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.349475297 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.385757204 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.159351795 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.27784415 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.948973298 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.960468005 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.408236881 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.482187055 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.110206044 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.725428666 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.081473854 seconds)
  done (took 36.47490535 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 4.158672079 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.258420602 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.514337888 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.110615272 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.278775388 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.697980892 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.267612364 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.592762657 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.345872327 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.108396788 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.764088541 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.084543281 seconds)
  done (took 19.77390558 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.248553909 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.099010771 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.155329386 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.113818238 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.133624428 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.152848387 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 3.734434246 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.059596471 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.451597631 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.041640919 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.386532943 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.048923569 seconds)
  done (took 10.569890887 seconds)
done (took 68.002384816 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.043362169 seconds)
    (2/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.035023644 seconds)
    (3/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050583398 seconds)
    (4/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.070016357 seconds)
    (5/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.02981226 seconds)
    (6/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.029602215 seconds)
    (7/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.124877164 seconds)
    (8/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.029006231 seconds)
    (9/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.036924463 seconds)
    (10/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.061127319 seconds)
    (11/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.071896566 seconds)
    (12/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.030422961 seconds)
    (13/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.031809983 seconds)
    (14/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.030085189 seconds)
    (15/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.114412801 seconds)
    (16/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.146032183 seconds)
    (17/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.120788986 seconds)
    (18/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.031520052 seconds)
    (19/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.027951662 seconds)
    (20/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.031709202 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.032458438 seconds)
    (22/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.041005696 seconds)
    (23/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.03230719 seconds)
    (24/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.035285486 seconds)
    (25/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.172737417 seconds)
    (26/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.042424696 seconds)
    (27/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.031975406 seconds)
    (28/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028411251 seconds)
    (29/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.031432191 seconds)
    (30/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.238896535 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.035589623 seconds)
    (32/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.122791728 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.040093204 seconds)
    (34/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 4.1543e-5 seconds)
    (35/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 8.7359e-5 seconds)
    (36/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042085435 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.03528453 seconds)
    (38/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.159390779 seconds)
    (39/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.094213081 seconds)
    (40/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001864193 seconds)
    (41/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.1999136 seconds)
    (42/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.031582706 seconds)
    (43/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.096125572 seconds)
    (44/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.115511269 seconds)
    (45/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034695558 seconds)
    (46/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.031992054 seconds)
    (47/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.000106525 seconds)
    (48/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042264184 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.033903515 seconds)
    (50/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.027973463 seconds)
    (51/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.029872855 seconds)
    (52/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.02878915 seconds)
    (53/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.032231269 seconds)
    (54/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.046407993 seconds)
    (55/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001040609 seconds)
    (56/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028775961 seconds)
    (57/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.185508487 seconds)
    (58/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.112937723 seconds)
    (59/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.034571653 seconds)
    (60/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041262308 seconds)
    (61/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034027405 seconds)
    (62/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.11361478 seconds)
    (63/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035336666 seconds)
    (64/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033329412 seconds)
    (65/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000111667 seconds)
    (66/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.026764121 seconds)
    (67/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.033238483 seconds)
    (68/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.6488e-5 seconds)
    (69/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.027518473 seconds)
    (70/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 4.5466e-5 seconds)
    (71/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.055629008 seconds)
    (72/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.000108759 seconds)
    (73/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.09438644 seconds)
    (74/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.09082336 seconds)
    (75/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.087513919 seconds)
    (76/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.027724456 seconds)
    (77/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.173418779 seconds)
    (78/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.030441863 seconds)
    (79/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.000110406 seconds)
    (80/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033786768 seconds)
    (81/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.036210956 seconds)
    (82/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.187285461 seconds)
    (83/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.029966308 seconds)
    (84/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.274558336 seconds)
    (85/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042371709 seconds)
    (86/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.205677391 seconds)
    (87/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.089590778 seconds)
    (88/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.175005577 seconds)
    (89/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.027631964 seconds)
    (90/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.129844688 seconds)
    (91/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028716845 seconds)
    (92/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.075741503 seconds)
    (93/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.034299142 seconds)
    (94/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.244644696 seconds)
    (95/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.096693358 seconds)
    (96/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.093425653 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032458108 seconds)
    (98/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.036558656 seconds)
    (99/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028433602 seconds)
    (100/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.107589749 seconds)
    (101/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.3585e-5 seconds)
    (102/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.11216371 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.031992638 seconds)
    (104/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.054179329 seconds)
    (105/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 7.2771e-5 seconds)
    (106/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.185542422 seconds)
    (107/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.089596635 seconds)
    (108/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.026888339 seconds)
    (109/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024895849 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.037872767 seconds)
    (111/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.181348342 seconds)
    (112/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.03620218 seconds)
    (113/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.067452008 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 7.3933e-5 seconds)
    (115/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001729062 seconds)
    (116/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046959884 seconds)
    (117/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028929845 seconds)
    (118/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.035554313 seconds)
    (119/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028192988 seconds)
    (120/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029693392 seconds)
    (121/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040381233 seconds)
    (122/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157633964 seconds)
    (123/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.043851978 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.042279349 seconds)
    (125/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.170138125 seconds)
    (126/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038681693 seconds)
    (127/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.0071e-5 seconds)
    (128/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.028468913 seconds)
    (129/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028412382 seconds)
    (130/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.7969e-5 seconds)
    (131/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046157246 seconds)
    (132/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038165592 seconds)
    (133/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.119515412 seconds)
    (134/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.03928221 seconds)
    (135/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029045979 seconds)
    (136/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.0904656 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.032653514 seconds)
    (138/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026817118 seconds)
    (139/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 6.2838e-5 seconds)
    (140/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.029517079 seconds)
    (141/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.088806804 seconds)
    (142/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03295699 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.031054165 seconds)
    (144/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.036337846 seconds)
    (145/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.091580552 seconds)
    (146/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.362e-5 seconds)
    (147/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.035966349 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.118554531 seconds)
    (149/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.2403e-5 seconds)
    (150/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032159677 seconds)
    (151/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.826e-5 seconds)
    (152/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.03328877 seconds)
    (153/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.143074915 seconds)
    (154/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 3.9837e-5 seconds)
    (155/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.000844025 seconds)
    (156/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.222940022 seconds)
    (157/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.178349686 seconds)
    (158/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.265786267 seconds)
    (159/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.040331512 seconds)
    (160/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.054445661 seconds)
    (161/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027939976 seconds)
    (162/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039239283 seconds)
    (163/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.00150631 seconds)
    (164/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 9.4485e-5 seconds)
    (165/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.026683815 seconds)
    (166/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.03824498 seconds)
    (167/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.034123757 seconds)
    (168/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.030825775 seconds)
    (169/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.031648267 seconds)
    (170/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.091440507 seconds)
    (171/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.02782642 seconds)
    (172/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.153430942 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.225168911 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06793109 seconds)
    (175/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.138571552 seconds)
    (176/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 3.9402e-5 seconds)
    (177/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.4497e-5 seconds)
    (178/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002214095 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.093128465 seconds)
    (180/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000146803 seconds)
    (181/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.030361613 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.030449095 seconds)
    (183/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030673716 seconds)
    (184/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.8658e-5 seconds)
    (185/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.0894e-5 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.037159444 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.135448988 seconds)
    (188/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.03081796 seconds)
    (189/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040078922 seconds)
    (190/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036241983 seconds)
    (191/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000105914 seconds)
    (192/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.033790669 seconds)
    (193/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028142204 seconds)
    (194/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030593007 seconds)
    (195/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.177663572 seconds)
    (196/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.091941395 seconds)
    (197/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000107581 seconds)
    (198/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.03223432 seconds)
    (199/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030933507 seconds)
    (200/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 4.4829e-5 seconds)
    (201/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.038233014 seconds)
    (202/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.37e-5 seconds)
    (203/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.120025312 seconds)
    (204/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.290192892 seconds)
    (205/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.031534963 seconds)
    (206/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.327580193 seconds)
    (207/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040906097 seconds)
    (208/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.4912e-5 seconds)
    (209/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000117444 seconds)
    (210/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029750918 seconds)
    (211/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 8.1254e-5 seconds)
    (212/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.028054076 seconds)
    (213/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 4.1557e-5 seconds)
    (214/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 3.0532e-5 seconds)
    (215/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.154680445 seconds)
    (216/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039099777 seconds)
    (217/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.040850992 seconds)
    (218/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.114400266 seconds)
    (219/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.00150411 seconds)
    (220/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 7.8523e-5 seconds)
    (221/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.041227234 seconds)
    (222/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.029875952 seconds)
    (223/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.115816454 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031946679 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034815167 seconds)
    (226/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.0902e-5 seconds)
    (227/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.002239419 seconds)
    (228/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.118469527 seconds)
    (229/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 8.6048e-5 seconds)
    (230/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.031377344 seconds)
    (231/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027089327 seconds)
    (232/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.115970913 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 7.9783e-5 seconds)
    (234/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 8.877e-5 seconds)
    (235/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.040174315 seconds)
    (236/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.022946342 seconds)
    (237/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 6.37e-5 seconds)
    (238/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.9185e-5 seconds)
    (239/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030888995 seconds)
    (240/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.028788666 seconds)
    (241/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.117391536 seconds)
    (242/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.161182702 seconds)
    (243/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.029646167 seconds)
    (244/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.036286018 seconds)
    (245/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 3.5041e-5 seconds)
    (246/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.327e-5 seconds)
    (247/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.036244316 seconds)
    (248/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.032772895 seconds)
    (249/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027134553 seconds)
    (250/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.3883e-5 seconds)
    (251/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.086205561 seconds)
    (252/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.8127e-5 seconds)
    (253/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038530325 seconds)
    (254/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.000911673 seconds)
    (255/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.8148e-5 seconds)
    (256/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.044565896 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 4.6035e-5 seconds)
    (258/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.265618752 seconds)
    (259/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 4.3089e-5 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046444541 seconds)
    (261/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.8013e-5 seconds)
    (262/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026534525 seconds)
    (263/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044957931 seconds)
    (264/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.4066e-5 seconds)
    (265/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027603911 seconds)
    (266/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.000103492 seconds)
    (267/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 4.1434e-5 seconds)
    (268/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042920181 seconds)
    (269/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002255454 seconds)
    (270/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.235275986 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032922526 seconds)
    (272/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.153967492 seconds)
    (273/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.028991855 seconds)
    (274/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.8246e-5 seconds)
    (275/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038874116 seconds)
    (276/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.03193947 seconds)
    (277/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 4.6421e-5 seconds)
    (278/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.225027099 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.7592e-5 seconds)
    (280/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.000875321 seconds)
    (281/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.020150887 seconds)
    (282/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.031334167 seconds)
    (283/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.464721068 seconds)
    (284/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.171770669 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.030418487 seconds)
    (286/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.033069461 seconds)
    (287/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030896975 seconds)
    (288/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.968e-5 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.07581341 seconds)
    (290/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.029216007 seconds)
    (291/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 9.0808e-5 seconds)
    (292/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031093297 seconds)
    (293/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028329407 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.046492839 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.090125942 seconds)
    (296/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024244059 seconds)
    (297/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037949364 seconds)
    (298/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034253892 seconds)
    (299/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035337702 seconds)
    (300/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.17871224 seconds)
    (301/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001940005 seconds)
    (302/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.026662194 seconds)
    (303/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.8575e-5 seconds)
    (304/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001703455 seconds)
    (305/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.027450072 seconds)
    (306/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.024219218 seconds)
    (307/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.034166528 seconds)
    (308/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.4912e-5 seconds)
    (309/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.109154983 seconds)
    (310/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.08478373 seconds)
    (311/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.5453e-5 seconds)
    (312/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.9941e-5 seconds)
    (313/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.035243967 seconds)
    (314/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.030605689 seconds)
    (315/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.033201046 seconds)
    (316/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.7392e-5 seconds)
    (317/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037880246 seconds)
    (318/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.029747286 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002226695 seconds)
    (320/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 6.4139e-5 seconds)
    (321/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.034089728 seconds)
    (322/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 6.4684e-5 seconds)
    (323/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.088773536 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.064059235 seconds)
    (325/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001222043 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073772194 seconds)
    (327/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.1211e-5 seconds)
    (328/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.028048601 seconds)
    (329/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.027905355 seconds)
    (330/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.03235044 seconds)
    (331/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 3.8398e-5 seconds)
    (332/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.2633e-5 seconds)
    (333/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.28e-5 seconds)
    (334/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 8.1017e-5 seconds)
    (335/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.303e-5 seconds)
    (336/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.214e-5 seconds)
    (337/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.841449338 seconds)
    (338/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.035673711 seconds)
    (339/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.056709622 seconds)
    (340/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000120176 seconds)
    (341/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029050197 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.4641e-5 seconds)
    (343/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034039953 seconds)
    (344/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.857e-5 seconds)
    (345/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 4.0561e-5 seconds)
    (346/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.034330811 seconds)
    (347/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.00012847 seconds)
    (348/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.03560265 seconds)
    (349/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.024931033 seconds)
    (350/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 6.8085e-5 seconds)
    (351/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.069415212 seconds)
    (352/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025132419 seconds)
    (353/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 6.2154e-5 seconds)
    (354/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000221795 seconds)
    (355/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 6.4915e-5 seconds)
    (356/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.026948654 seconds)
    (357/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.186892465 seconds)
    (358/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.4749e-5 seconds)
    (359/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001695625 seconds)
    (360/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024567584 seconds)
    (361/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.135930064 seconds)
    (362/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.026838321 seconds)
    (363/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.7271e-5 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.6033e-5 seconds)
    (365/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.000109406 seconds)
    (366/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031133601 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.036642711 seconds)
    (368/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000126768 seconds)
    (369/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.9754e-5 seconds)
    (370/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.035006575 seconds)
    (371/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001808154 seconds)
    (372/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.0746e-5 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.065509999 seconds)
    (374/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.0091e-5 seconds)
    (375/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.000101943 seconds)
    (376/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.0418e-5 seconds)
    (377/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.001045039 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 4.3767e-5 seconds)
    (379/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 6.4981e-5 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 4.9786e-5 seconds)
    (381/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 4.3679e-5 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001718019 seconds)
    (383/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 8.1116e-5 seconds)
    (384/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 6.2986e-5 seconds)
    (385/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029674569 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.00011195 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.2946e-5 seconds)
    (388/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.960414861 seconds)
    (389/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 9.4743e-5 seconds)
    (390/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.025039464 seconds)
    (391/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 8.2965e-5 seconds)
    (392/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002699485 seconds)
    (393/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.9999e-5 seconds)
    (394/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.024912261 seconds)
    (395/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026857833 seconds)
    (396/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 9.8628e-5 seconds)
    (397/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.000241496 seconds)
    (398/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.002326637 seconds)
    (399/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.1326e-5 seconds)
    (400/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032689527 seconds)
    (401/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030799832 seconds)
    (402/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044513393 seconds)
    (403/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001487082 seconds)
    (404/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.0404e-5 seconds)
    (405/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.030213246 seconds)
    (406/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 6.4039e-5 seconds)
    (407/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.4392e-5 seconds)
    (408/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000127764 seconds)
    (409/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065026981 seconds)
    (410/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 6.8073e-5 seconds)
    (411/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.034313017 seconds)
    (412/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.038377856 seconds)
    (413/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.7488e-5 seconds)
    (414/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.4117e-5 seconds)
    (415/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.6316e-5 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.1869e-5 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026105272 seconds)
    (418/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.028908946 seconds)
    (419/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 6.6825e-5 seconds)
    (420/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 7.8263e-5 seconds)
    (421/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 4.4639e-5 seconds)
    (422/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.030708841 seconds)
    (423/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.002313793 seconds)
    (424/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.6961e-5 seconds)
    (425/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031011178 seconds)
    (426/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.2959e-5 seconds)
    (427/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.019441723 seconds)
    (428/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.000115674 seconds)
    (429/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.035093334 seconds)
    (430/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.9097e-5 seconds)
    (431/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.031098727 seconds)
    (432/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.2757e-5 seconds)
    (433/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.004207594 seconds)
    (434/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028515781 seconds)
  done (took 23.098918181 seconds)
done (took 25.310177262 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.809944583 seconds)
  done (took 10.03179149 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.243739345 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.300054645 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.283063486 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.239884628 seconds)
  done (took 31.2982078 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.59250801 seconds)
  done (took 9.826452432 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.655783071 seconds)
  done (took 9.894534304 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.610974869 seconds)
  done (took 9.83439816 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.29433928 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.267165392 seconds)
  done (took 16.793826606 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.348423625 seconds)
  done (took 11.579720912 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.567642928 seconds)
  done (took 9.801728926 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.227194696 seconds)
  done (took 9.450512764 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.233528701 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.22495912 seconds)
  done (took 16.689771199 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.257107474 seconds)
  done (took 9.493264688 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.233596318 seconds)
  done (took 9.467104438 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.37853784 seconds)
  done (took 9.605622346 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.742889241 seconds)
  done (took 9.967645077 seconds)
done (took 176.044143872 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.236127488 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228523033 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.235874077 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.757505989 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.632635099 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.231332084 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.237677008 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.23501584 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23888611 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.242408585 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.238776068 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.230945642 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.228881524 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.239722218 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.232964178 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.241019995 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.238242176 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.231393088 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.239004597 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.237227615 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.501313719 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.237542978 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.245504676 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.245258713 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.240060225 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.242381106 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.245185107 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.240210465 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.238522105 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.241433427 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.240154621 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.247406119 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.2441418 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.242987865 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.248179096 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.247019529 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.250936537 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.254187898 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.242653212 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.24768771 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245190536 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.244758527 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.613950778 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.511817209 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.247273888 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.249333496 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.250840534 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.249991154 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.244049617 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.258529358 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.248226669 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.252268911 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.248993399 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 2.984031725 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.25097935 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.246470046 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.248142259 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.24863983 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.250867413 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.265625519 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.252901332 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.251806604 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.249554206 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.53715562 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.249101144 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.249927362 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.251258069 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.252457793 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.262187054 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.248673649 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.259053546 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.248164537 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.258726958 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.2498858 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.193885736 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.299597238 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.26124609 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.250213421 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.255807052 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.255008899 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.255462098 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.254461773 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.260932952 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.273433444 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.258786562 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.25098866 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.251009061 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.254153158 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.286101334 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.250671016 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.257919807 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.254236009 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.466325468 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.259488236 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.649227363 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.252453972 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.252375238 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.262195579 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.252246851 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44839923 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.255857633 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.26252739 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.252764413 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.254511482 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.2576501 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.596190118 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.255227791 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.25273327 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.283010626 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.275813662 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.873028659 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.490626052 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.258984668 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.257538055 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.915564091 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.258879971 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.254451215 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.255807569 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.266040358 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.249316178 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.261750745 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.264888537 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.25404783 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.989390041 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.26794596 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.25263866 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.251513072 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.323411137 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.253884665 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.253584193 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.263692753 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.255929856 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.813081155 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.254478362 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.254294622 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.255706951 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.260782106 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.731193366 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.327388968 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.254448359 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.398114364 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.257715186 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.269472063 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.257146764 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.252661597 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.256993933 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.258489525 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.259469977 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.25367846 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.354468863 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.258919618 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.389573831 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.125591268 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.256081718 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.255490281 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.255437911 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.285580508 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.254792805 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.258783405 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.425401503 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.255911158 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.259790657 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.257296861 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.254734609 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.261094059 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.261028041 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.252846661 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.255355603 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.262587907 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.394151741 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.257823298 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.258719637 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.261217744 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.592177275 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.257456812 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.649171348 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.263250574 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.252895298 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.259049004 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261420632 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.258564595 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.373264098 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.255131661 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.253516797 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.256465099 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.429992436 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.260548759 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.261136545 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.259858996 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.258401752 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.651928556 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.257515698 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.270658165 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.25968383 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.48941739 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.389543275 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.346825196 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.520560755 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.257355167 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.256066583 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.281869947 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.267585105 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.257472951 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.271758706 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.426970273 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.256486567 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.257743313 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.259452979 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.257543854 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.257650383 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.260142956 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.258912247 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.260835972 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.697319822 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.271404233 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.256246294 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.25707041 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.366976944 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368460618 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.259614448 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.258995155 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.260401088 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.260194884 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.2552381 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.259051832 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.401147039 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.262932635 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.258242979 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.266445368 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.25871684 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.262248134 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.268019323 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.259829934 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.25673618 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.258897695 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.268256249 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.25950978 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.25869517 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.261624812 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.261136112 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.262638539 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.26152936 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521656296 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.262432026 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.260645251 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.270867773 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.26117335 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.269639797 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.258892273 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.750021544 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.538768493 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.267007404 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.259412305 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.672714252 seconds)
    (255/608) benchmarking "3d"...
    done (took 3.891238125 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.265796208 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.262064851 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.259993819 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.263215443 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.191412878 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261435229 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.264340098 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.698032989 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.263414168 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265808499 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.002023842 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.29721244 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.27124696 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.311288871 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.515292625 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.265122673 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.811153861 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.260319269 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.267679939 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.263812488 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.267074977 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.26426228 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.261561934 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.266738229 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.262537145 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.810818517 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.263290531 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.270221414 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.261847783 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.268205633 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.257619163 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264900661 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.263756384 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.136367847 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.537955874 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.26963396 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.261374158 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.363926485 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.373618198 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.265582056 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.261370128 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.671409898 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.258979704 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.269547641 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.26551571 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.3675595 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.261310417 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.415486488 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.712767875 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.264218845 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.274633975 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.26503782 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.260525375 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.279246703 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.261695909 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.270918873 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.26034319 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.262565391 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.26353797 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.261572962 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.363272108 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266740085 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.059056445 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.273684521 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.26239403 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266831884 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.270741716 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.26312551 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.265963011 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.263603668 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.294739113 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.268760049 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.832945622 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.273693358 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.269686116 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.267167732 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.262496662 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.263701577 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.427802033 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.516357948 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.499400181 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.266784013 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.263103586 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.269869184 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.211710681 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.69054343 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.26473833 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.153148923 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.26650798 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.56185138 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.294531947 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.606408003 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.267373872 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.26679438 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.269957531 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.26438204 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.265367249 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.268438189 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.413347579 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.274261769 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.263798861 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265454716 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.265573616 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.263633982 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.603065428 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.300054464 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.26369677 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.263440493 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.194450156 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.295452035 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.611059519 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.39721631 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265659622 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.2685069 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264391937 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.420874749 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.265365324 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.263603359 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.462036492 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.385107426 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.261652288 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.266002374 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.266182133 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.26271987 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.273357428 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.263410322 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.267223825 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.273034326 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.271968168 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.263100043 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.271990777 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.26277856 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.261604376 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.27759329 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.263507062 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.268301832 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.266442906 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.264876319 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.267266962 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.267656619 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.269499089 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.264467285 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.826521354 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.616878071 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.264714364 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.264523212 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.608571288 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.26451699 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.264721277 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.275031211 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.257969793 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.259374765 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.258183388 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.259512243 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.254749531 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.507418194 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.272485512 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.154620902 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.857716392 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.262892742 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392460096 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.793983421 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.262195227 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.25985645 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.822543357 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.527591007 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.267277382 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.268817242 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.260589845 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.270505927 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261110021 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.295476912 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.263371016 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.824943979 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261145008 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.257202714 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.259121026 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.26841772 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.258027657 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.549294278 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261887254 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.269872342 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.258935633 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.259476489 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.39736315 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.598891238 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.267423908 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.400849837 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.375818598 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261925186 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.283907136 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.260102986 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.290910221 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.262921802 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261900156 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.265688514 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.270989051 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.263085796 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.262579035 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265235658 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.293898091 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.268101959 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.267606487 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.260200588 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.272875848 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.2639251 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.26468189 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.757641781 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.533816585 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266639887 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.398089842 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264733194 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.270146944 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.258575746 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.267415635 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.260765557 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.271159486 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.262343185 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.261164764 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.266285594 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.265009148 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.468943533 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.261578322 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.341087558 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.311639874 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.257124415 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.261487624 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.265031024 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.262554152 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.265072056 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.271321961 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.261649465 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.265386547 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264815824 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.260809035 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.278344716 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.263164238 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.262259243 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.267529469 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.966134185 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.269175712 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.016830857 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.2637561 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.272702683 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.090634719 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.273146214 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.265468833 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.263674697 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.267216767 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.269936601 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.26713519 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432337286 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.269792844 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.268507421 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.263359604 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.270287706 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.28059795 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.376186117 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.304776027 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.287593294 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.770545412 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.276117122 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.262726517 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.26815373 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.265375234 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261922514 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.266530232 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.261826138 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264915473 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.265346625 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.265638417 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.267060452 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.263789524 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.270411862 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.785872622 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.295429794 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.817137697 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.86182022 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.26094098 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.393551784 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.26568884 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.835669862 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.268841655 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.270253995 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.262909886 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.591927637 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.264290502 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.973024376 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.44016652 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.367838601 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.502722745 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.268365006 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.264984572 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.260651232 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.265804997 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.331972059 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.266088584 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.695730988 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.265925094 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.268542535 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.261380521 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.274278785 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.56180577 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.267941927 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.264776423 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.193215361 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.285191934 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.272286393 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.281067317 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.016396342 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.717839672 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.311051738 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.29321566 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.268799996 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.281849877 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.268946958 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.265950769 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.26417649 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.274177253 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.277015483 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.266779128 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.269787153 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.373582119 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.274213672 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.270860549 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280359504 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.265290194 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.266896404 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.267698951 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.557049798 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.838314446 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.27211282 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.272452506 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.277644812 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.281568905 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.096801504 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.27024873 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.272434623 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.274367667 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.265600294 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.268843955 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.265873757 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.266105965 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.274873045 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.266961825 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.274032091 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.942126436 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.281431883 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.269260748 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.844549911 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.757959716 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.269232102 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.268876817 seconds)
  done (took 3925.688512767 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.509428371 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.356947104 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.17029473 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.253077644 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.615336089 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 3.145842092 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.19600647 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.704212913 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.09672905 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.140946655 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.154579918 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.182894875 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.011106093 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.098052141 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.144161045 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.429553429 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.149972404 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.401525852 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.359370804 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.801349246 seconds)
  done (took 62.201663585 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.274244262 seconds)
    (2/17) benchmarking ("hcat", 5)...
    done (took 4.675938136 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 4.093634802 seconds)
    (4/17) benchmarking ("hcat_setind", 5)...
    done (took 4.137261587 seconds)
    (5/17) benchmarking ("catnd", 5)...
    done (took 2.316878755 seconds)
    (6/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.269045633 seconds)
    (7/17) benchmarking ("catnd", 500)...
    done (took 7.283127726 seconds)
    (8/17) benchmarking "4467"...
    done (took 2.451417711 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.305091994 seconds)
    (10/17) benchmarking ("hcat_setind", 500)...
    done (took 7.270202153 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.267909944 seconds)
    (12/17) benchmarking ("catnd_setind", 5)...
    done (took 2.286603293 seconds)
    (13/17) benchmarking ("vcat", 5)...
    done (took 3.955590005 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 7.270669592 seconds)
    (15/17) benchmarking ("vcat", 500)...
    done (took 7.273435239 seconds)
    (16/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.180967096 seconds)
    (17/17) benchmarking ("hvcat", 5)...
    done (took 4.755679624 seconds)
  done (took 93.336908745 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.296067023 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.492407968 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.293678084 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.309836942 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.297451249 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.362002225 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.64212561 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.345798379 seconds)
  done (took 61.30910333 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.752026497 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 2.788653415 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.252330032 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.004017003 seconds)
  done (took 14.062021933 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.27012617 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.318033078 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.268818173 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.593541361 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.27515434 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.300979424 seconds)
  done (took 33.296154319 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.161281639 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.434636801 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.271367983 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.269425309 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.273731867 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.093483769 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.457986166 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 2.884988651 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.021073092 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.276213822 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.422238458 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.397453493 seconds)
  done (took 54.229529422 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.623105201 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.692308394 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.496815928 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.475358829 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.687569118 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.736632737 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.369475483 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.486819472 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.27037993 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.308136984 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.490297156 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.323670919 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.520805907 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.334061229 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.524130525 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.588226739 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.690371376 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.302843469 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.5082832 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.673585324 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.496101046 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.501597435 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.592057241 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.902584594 seconds)
  done (took 67.863278729 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.522398495 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.482691581 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 2.526906872 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.493092403 seconds)
    (5/5) benchmarking ("setindex!", 5)...
    done (took 2.538183466 seconds)
  done (took 14.830258729 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.639282075 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.653219499 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.853571789 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.267501144 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.271699411 seconds)
    (6/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.414190908 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.340488031 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.545344534 seconds)
    (9/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.384836882 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.344334163 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.272560632 seconds)
    (12/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.875626718 seconds)
  done (took 105.130162229 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.275574838 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.273327149 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.277352154 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.270908161 seconds)
  done (took 31.362261093 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 2.528406137 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.365968459 seconds)
    (3/12) benchmarking ("push_multiple!", 256)...
    done (took 2.359990744 seconds)
    (4/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.380750349 seconds)
    (5/12) benchmarking ("append!", 2048)...
    done (took 2.637828091 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.339595037 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 3.512521817 seconds)
    (8/12) benchmarking ("prerend!", 2048)...
    done (took 2.866598413 seconds)
    (9/12) benchmarking ("push_single!", 256)...
    done (took 2.345895925 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.291564007 seconds)
    (11/12) benchmarking ("prerend!", 8)...
    done (took 2.523783408 seconds)
    (12/12) benchmarking ("append!", 8)...
    done (took 2.473484415 seconds)
  done (took 34.893106994 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.640359322 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.588244633 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.630096436 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.632100479 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.588912388 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.571822735 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.573112146 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.635634664 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.636807689 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.633644475 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.52987622 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.58832414 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.638841416 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 2.952225451 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.647771567 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.513996141 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.638141977 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.632861567 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 2.958028039 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.630911571 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.510119793 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.592737351 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.635460039 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.512511798 seconds)
  done (took 65.382264762 seconds)
done (took 4565.820701789 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.900468433 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.100833324 seconds)
  done (took 8.267779517 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.573346447 seconds)
  (3/15) benchmarking "20517"...
  done (took 2.835202141 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.118142947 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.126431962 seconds)
  done (took 8.51094283 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.336840698 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.894845282 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 2.928018453 seconds)
  done (took 10.426011045 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.443822641 seconds)
  done (took 4.716241948 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.804904328 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.738189906 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.459798829 seconds)
  done (took 10.270649191 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.291773468 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.040510225 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.426397167 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.548570334 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.754616613 seconds)
  done (took 15.036946019 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.272234192 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.267066147 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.586465731 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.713212198 seconds)
  done (took 24.106472583 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.271881077 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.278665875 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.278930418 seconds)
  done (took 24.101174797 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.514588264 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.302355436 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.306617615 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.30574076 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.309789472 seconds)
  done (took 11.489077689 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.763281975 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.705074567 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.691337519 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.757741769 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.130317899 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.509317345 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.715971633 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.646101007 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.438659231 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.589225774 seconds)
  done (took 29.210573229 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.796106597 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.648293966 seconds)
  done (took 7.710533314 seconds)
done (took 171.332298118 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.276162576 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.291433569 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.279975959 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.284230226 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.284345472 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.279137522 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.27663953 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.2816931 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.288199251 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.281723929 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.281588429 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.281654931 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.428877329 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.281689966 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.292995555 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.285470575 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.288690141 seconds)
  done (took 41.230863275 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.302868204 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.675635289 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.081734445 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.606755252 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.122670616 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.302468862 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.491689385 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.011382045 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.158202146 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.078517371 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.027356641 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 4.904408177 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.284510869 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.886325279 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.21601141 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.001726902 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.203555984 seconds)
  done (took 81.62070743 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.276684824 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.278619905 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.276679065 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.27797357 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.276554302 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.280206723 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.276383885 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.277237513 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.381012507 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.477823914 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.567847499 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.342979658 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.310006603 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.307956237 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.475621701 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.373549112 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.370317194 seconds)
  done (took 42.094682097 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.370678007 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.333525381 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.294693127 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.314757369 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.306192366 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.2762246 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.277652212 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.293477404 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.305415212 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.295721576 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.289067845 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.30029215 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.188143377 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.297740331 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.295380648 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.308770826 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.299212929 seconds)
  done (took 42.407249348 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.283381218 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.273839378 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.922651097 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.316083641 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.156429796 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.434811835 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.911800297 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.278399326 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.676463941 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.444364069 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.474573618 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.792066539 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.697114451 seconds)
  done (took 82.927039462 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.272366627 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.273359294 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.277235408 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.270335947 seconds)
  done (took 31.362907663 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.273723011 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.272583248 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.271863162 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.268046072 seconds)
  done (took 31.356843894 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.302143158 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.296104487 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.311323595 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.294668643 seconds)
  done (took 11.473777284 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.507887445 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 2.999569435 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.002165404 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 2.978464414 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.822912551 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.218093349 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 2.980126527 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.42669808 seconds)
  done (took 27.201377973 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.284132279 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.619562139 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.457925872 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.619131109 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.489451813 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.286483196 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.300062215 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.502867472 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.666908732 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.51273809 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.496704572 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.502464031 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.274366045 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.432452317 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.478818695 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.46691513 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.537095182 seconds)
  done (took 49.193048104 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.277194419 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.282139505 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.28270949 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.283195069 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.280667318 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.281535143 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.278199734 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.286600585 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.280468251 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.28245475 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.286014284 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.277870496 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.37089651 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.278388896 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.288528695 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.279645042 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.288910107 seconds)
  done (took 41.155586355 seconds)
done (took 484.294016663 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.273015895 seconds)
done (took 9.54019508 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.285493698 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.398599036 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.271651951 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.641521072 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.272160688 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.306369002 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.272808322 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.289628761 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.332737841 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 4.165836025 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.14266913 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.191075842 seconds)
done (took 74.840365824 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.266186587 seconds)
    (2/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.273834566 seconds)
    (3/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.218178916 seconds)
    (4/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.517155255 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.500039965 seconds)
    (6/54) benchmarking ("spmat", "range", 100)...
    done (took 2.692527913 seconds)
    (7/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.160213158 seconds)
    (8/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.961991789 seconds)
    (9/54) benchmarking ("spmat", "range", 10)...
    done (took 3.921974637 seconds)
    (10/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.321446516 seconds)
    (11/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.415668854 seconds)
    (12/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.37328553 seconds)
    (13/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.296153623 seconds)
    (14/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.505139 seconds)
    (15/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.602927044 seconds)
    (16/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.367726686 seconds)
    (17/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.035888215 seconds)
    (18/54) benchmarking ("spmat", "array", 100)...
    done (took 2.769671685 seconds)
    (19/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.156390273 seconds)
    (20/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.507647388 seconds)
    (21/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.274933817 seconds)
    (22/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.382265225 seconds)
    (23/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.176908592 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.097297405 seconds)
    (25/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.464122999 seconds)
    (26/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.255919516 seconds)
    (27/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.258890339 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.451713452 seconds)
    (29/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.184864499 seconds)
    (30/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.287040347 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.436407658 seconds)
    (32/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.549724012 seconds)
    (33/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.285845711 seconds)
    (34/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.966567447 seconds)
    (35/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.582664889 seconds)
    (36/54) benchmarking ("spmat", "array", 10)...
    done (took 2.378340659 seconds)
    (37/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.178626954 seconds)
    (38/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.448409842 seconds)
    (39/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.805910459 seconds)
    (40/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.108036373 seconds)
    (41/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.572933183 seconds)
    (42/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.271028141 seconds)
    (43/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.20325279 seconds)
    (44/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.433283428 seconds)
    (45/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.631596912 seconds)
    (46/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.384224938 seconds)
    (47/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.733575217 seconds)
    (48/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.930211708 seconds)
    (49/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.340229043 seconds)
    (50/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.502547231 seconds)
    (51/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.988298826 seconds)
    (52/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.218288115 seconds)
    (53/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.597709336 seconds)
    (54/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.42039432 seconds)
  done (took 229.932415988 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.394690793 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.429183297 seconds)
  done (took 17.09253633 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.794566505 seconds)
    (2/18) benchmarking ("Diagonal", 1000)...
    done (took 2.672977736 seconds)
    (3/18) benchmarking ("IV", 10)...
    done (took 2.874068146 seconds)
    (4/18) benchmarking ("Diagonal", 100)...
    done (took 4.595746397 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.508910714 seconds)
    (6/18) benchmarking ("IJV", 10)...
    done (took 2.916288792 seconds)
    (7/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.467421642 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.835918909 seconds)
    (9/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.872801963 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.799237419 seconds)
    (11/18) benchmarking ("Diagonal", 10)...
    done (took 3.709133708 seconds)
    (12/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.21482968 seconds)
    (13/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.370698556 seconds)
    (14/18) benchmarking ("IV", 100)...
    done (took 2.664642467 seconds)
    (15/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.82729572 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.412155539 seconds)
    (17/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.150181205 seconds)
    (18/18) benchmarking ("IJV", 1000)...
    done (took 2.543609267 seconds)
  done (took 59.496471477 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.71293496 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.860380551 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.275721791 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.69011854 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.283669591 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.253894743 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.268441432 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.941365667 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.5561442 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.679003112 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.776593842 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.278157796 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.267766133 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.832283003 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.808999471 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.057126885 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.306517703 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.273405917 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.281094125 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.271073025 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.723444062 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.27889693 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.584982142 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.313893135 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.48097113 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.279713588 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.867137762 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.716472671 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.2793973 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.528156818 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.276173415 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.264879414 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.283491948 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.268452673 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.285672111 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.812572869 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.27010393 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.539590274 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.277295685 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.993163194 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.270605145 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.265814727 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.638736341 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.276334774 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.716478803 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.280239752 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.146711014 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.785966327 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.281244739 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.0788789 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.636416908 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.283849204 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.823232873 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.889184912 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.454803797 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.505685785 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.841759654 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.281909273 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.863516446 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.761924402 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.286207875 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.268406229 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.79946306 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.270167364 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.739299008 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.72521564 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.260380928 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.268456962 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.803048812 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.28754635 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.670020704 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.277584004 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.269330462 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.89514951 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.289741289 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.209215164 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.26712639 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.255895587 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.972939291 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.273310683 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.283363013 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.053740664 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.827006154 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.271725078 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.406115006 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.636801747 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.700873576 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.296166099 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.284547323 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.297792595 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.266403862 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.175333025 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.282757445 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.26930339 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.15213519 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.799169248 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.267669435 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.280547751 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.784613727 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.294336309 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.265162847 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.68576523 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.109350049 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.277084703 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.502104145 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.136571732 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.575035286 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.768136182 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.272641529 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.738551283 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.826752155 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.273327264 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.553737122 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.902441516 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.878426113 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.308839804 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.274157808 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.278326135 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.270108439 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.756285611 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.28525121 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.265764371 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.274996277 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.762228848 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.270730418 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.81560594 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.833386835 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.108620004 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.280830231 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.271332489 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.279585748 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.949213339 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.290010527 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.275366752 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.269376327 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.7880231 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.272739091 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.776035385 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.286867276 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.268132344 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.33033707 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.951050669 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.648205772 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.278338988 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.280054869 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.269405157 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.775867335 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.509719865 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.472437458 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.274955305 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.506888286 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.549708879 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.754784202 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.273646169 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.492226321 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.96848709 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.277335167 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.648307391 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.712018632 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.560881992 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.293005963 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.649034185 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.280793917 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.566389405 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.754771339 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.272171049 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.267891434 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.663429681 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.667500951 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.46170049 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.040636647 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.831641484 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.023841487 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.834745396 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.269806464 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.26941447 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.968137817 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.274092481 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.268327066 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.266250004 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.950614593 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.751313238 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.266849439 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.703037216 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.241027091 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.776344585 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.275088711 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.791882283 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.585966816 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.292839345 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.272869829 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.273711685 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.621087142 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.741465389 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.269756119 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.264404984 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.764074766 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.998369359 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.802600834 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.273698463 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.016752756 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.267938776 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.264572065 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.752656185 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.26872427 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.271866058 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.450527302 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.799904633 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.269061013 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.26976764 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.810896209 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.917877964 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.501610647 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.774210026 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.231679614 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.25607106 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.842065806 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.479753726 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.266956435 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.912121967 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.755319541 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.356971768 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.783269844 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.266605048 seconds)
  done (took 1108.534514679 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.816917851 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.355407978 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.663302522 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.114110808 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.109124789 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.364697794 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.839357827 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.403476912 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.717074068 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.805012982 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.583768081 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.308858993 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.179182593 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.610655393 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.542569087 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.379812726 seconds)
  done (took 86.058297686 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.315937613 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.341280723 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.345202291 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.332280983 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.334560536 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.349078502 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.323316144 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.340661961 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.317603374 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.327444568 seconds)
  done (took 75.592126292 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.7565382 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.418900973 seconds)
  done (took 12.436767407 seconds)
done (took 1591.417708246 seconds)
(8/22) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.305645416 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.649676549 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.375777784 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.356243511 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 3.890818988 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.300333262 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.303251178 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.301204077 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.718703917 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.098232924 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.42634882 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.840521815 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.786649714 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.376793597 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.301330127 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.300749159 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.790906327 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.125496158 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.288298478 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.324160327 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.303358133 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.30967736 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.303408208 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.312867098 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.778213929 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.966572959 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.68174042 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.319736885 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.818555024 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.306818336 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.304017151 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.305288014 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.307690982 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.303009883 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.038499467 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.116325932 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.345122294 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.302590161 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.314915792 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.176228196 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.325553189 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.312612166 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.301567806 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.302738694 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.300129832 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.297447138 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.247802712 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.75129614 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.340353623 seconds)
  done (took 136.919704691 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.326572798 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.328245256 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.407669707 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.458380054 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.335294823 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.323715795 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.320766995 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.449732167 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.329734943 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.330743824 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.393010654 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.335634815 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.338972424 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.324680384 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.321275691 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.460670013 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.324456393 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.322831982 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.323774545 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.329638877 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.40323306 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.33357562 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.332593766 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.33902918 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.324243658 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.320558842 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.394873727 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.331564471 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.412162199 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.322634265 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.335393359 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.321360844 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.332881529 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.335727177 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.335049305 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.339485606 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.325647545 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.456984383 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.331804886 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.390778383 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.452022103 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.314979204 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.331441821 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.321003518 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.322175489 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.320272234 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.339196776 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.312631519 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.323726414 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.39039309 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.33014398 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.388823692 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.313122877 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.455609336 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.331931111 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.31884389 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.394490749 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.337082536 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.462092963 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.406457305 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.315628914 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.399366296 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.333036297 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.450913707 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.362852075 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.324653146 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.312567581 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.342473326 seconds)
  done (took 162.383901736 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.351045396 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.360033281 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.353832547 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.350059944 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.567814908 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.350015225 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.553452589 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.41131244 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.359569931 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.348870005 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.5547224 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.36511859 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.406621577 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.363007131 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.350754208 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.404217929 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.567366826 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.352392607 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.404427729 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.357062494 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.360054229 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.344874507 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.360421221 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.555998814 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.351009566 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.350824071 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.336257756 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.351554991 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.357063251 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.335230066 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.412471211 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.358637672 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.353952973 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.342611151 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.348578021 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.551471612 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.555396565 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.327448608 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.344512981 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.32715807 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.405243455 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.351828274 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.356048847 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.340095108 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.409453185 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.412604464 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.352385297 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.411701495 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.352072486 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.352592089 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.408218307 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.365436736 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.370487699 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.359796389 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.344905457 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.546056072 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.411356467 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.353496548 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.337696193 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.405243962 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.360332318 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.405583466 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.414052733 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.352715133 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.353050895 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.371372268 seconds)
  done (took 159.925871312 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.277842986 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.27736592 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.306540517 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.293099595 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.283404919 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.291928306 seconds)
  done (took 15.996012782 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.346607411 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.415397782 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.417490968 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.404077655 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.410189513 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.122250038 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.405295155 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.186290563 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.123016049 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.462355588 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.417167533 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.460399662 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.335499694 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.342971706 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.344073563 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.183974396 seconds)
  done (took 43.653178439 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.358913571 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.334900116 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.330944493 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.280913708 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.323537204 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.321778917 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.356441044 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.216874032 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.392668497 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.342091511 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.328968573 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.335163192 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.329442678 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.336486742 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.32193834 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.325781358 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.323979672 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.328988695 seconds)
  done (took 46.156793795 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.415403328 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.3308194 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.466702462 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.508222698 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.358557541 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.409774767 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.329793876 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.50442605 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.509035613 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.499091953 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.451400023 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.464389065 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.329226942 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.451267912 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.392356695 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.329135967 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.392182422 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.392655691 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.33034101 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.38876409 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.33080664 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.353998789 seconds)
  done (took 55.206491046 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.32955568 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.351386265 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.561494664 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.353700482 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.559811192 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.347710004 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.549757692 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.414959697 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.342402589 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.347545561 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.562835769 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.351795643 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.356973363 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.359027114 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.34370056 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.343301283 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.353447952 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.560779169 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.339922382 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.410345953 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.34536292 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.409021782 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.349527993 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.351807672 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.566429684 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.352895078 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.379879635 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.549659192 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.32484269 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.323942631 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.346996037 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.346257643 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.342517048 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.352500078 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.354817567 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.342320635 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.356479987 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.41430155 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.34591891 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.347955875 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.345231814 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.343921309 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.376348199 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.344177232 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.415509051 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.414569849 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.354651999 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.328676111 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.354672977 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.33237498 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.359976228 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.345247389 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.564682896 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.341220702 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.355081583 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.345442561 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.416570079 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.355109474 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.351647028 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.349733429 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.345468364 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.409043875 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.333543949 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.358544206 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.345898446 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.357485935 seconds)
  done (took 159.457109711 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.372707081 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.347775984 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.349677694 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.348301212 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.34849562 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.341996766 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.346915619 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.333984468 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.810826455 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.350870982 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.332659754 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.270386554 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.325199638 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.350862904 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.815073123 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.371487551 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.346916045 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.32550662 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.348111909 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.328601627 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.350247048 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.325033286 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.350036329 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.351238434 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.272462982 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.347484694 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.341775602 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.347510577 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.324464299 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.347155728 seconds)
  done (took 89.396383731 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.324484398 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.372993496 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.379944313 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.373882716 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.372697734 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.322416167 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.324541927 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.377410981 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.324399169 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.372050702 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.377490174 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.323445459 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.383658441 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.323782534 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.360069851 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.360216385 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.320003154 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.328691186 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.320606988 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.320745287 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.332548455 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.328866251 seconds)
  done (took 53.899511136 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.317284589 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.420064812 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.579130284 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.225485712 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.426064411 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.485534622 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.330835646 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.409050297 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.234092879 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.409897126 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.393610442 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.322237528 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.319565033 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.391640546 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.395332348 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.407777677 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.484434359 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.389516009 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.421773801 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.388749124 seconds)
  done (took 54.020078953 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.358639352 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.39402264 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.389902262 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.378783336 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.378188169 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.719789064 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.330044494 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.388567515 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.332247961 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.374499916 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.876208729 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.389332131 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.367269242 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.365648632 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.722830792 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.375043117 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.362611335 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.336694326 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.3325421 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.337884581 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.884407665 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.357594114 seconds)
  done (took 56.020181161 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.330925833 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.330021478 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.330214298 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.529496716 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.335993249 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.331294185 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.338498901 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.335786478 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.330542183 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.330301344 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.386761385 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.374033346 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.369481283 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.348785179 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.336145086 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.527358287 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.356765298 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.330026354 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.355889317 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.339039341 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.33621701 seconds)
  done (took 51.851305102 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.306191426 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.306770658 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.352133611 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.324109407 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.291411728 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.30544496 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.293112202 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.373790976 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.294027405 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.304510172 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.303532752 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.3060555 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.305431091 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.399558012 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.295381954 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.306455795 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.307558059 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.358825329 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.308573804 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.310786628 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.311022385 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.297553907 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.305724544 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.312280239 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.306095229 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.334083187 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.307995095 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.291686897 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.294706407 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.307069971 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.304235655 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.304234559 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.310599683 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.306385618 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.311936916 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.460426457 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.334272416 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.296913841 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.29169291 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.310804323 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.308049875 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.330934896 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.302194613 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.293099729 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.308785624 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.309322269 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.305854869 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.293523321 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.294483894 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.308885025 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.293295944 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.305190209 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.295023055 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.305749858 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.306335024 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.291809928 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.291435649 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.308829592 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.294031947 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.31095939 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.292965543 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.297428926 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.311086632 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.299253504 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.305940765 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.291684005 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.317000141 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.309008047 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.312182738 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.303534468 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.389961819 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.31521009 seconds)
  done (took 168.725378755 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.407823738 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.377176288 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.459855637 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.620427837 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.461762871 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.412326737 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.405448277 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.376265789 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.409074831 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.46632661 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.461435492 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.406635756 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.463476949 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.404098494 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.408160522 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.406986684 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.405654992 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.40561396 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.470053685 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.403789427 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.371971666 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.406868311 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.616597387 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.406588725 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.381975091 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.466170429 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.426541664 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.363338477 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.406026013 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.411642872 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.46708731 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.368529978 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.380971472 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.411496232 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.407929391 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.373432114 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.406355103 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.409158244 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.409222372 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.414153982 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.380325384 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.40882508 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.380956708 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.463066296 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.617878406 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.465308581 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.465888827 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.407005739 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.406688464 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.425367543 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.40871507 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.380693067 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.408646912 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.405788616 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.469954087 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.462267722 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.46739734 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.615606858 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.411558388 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.407396934 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.407210437 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.40746839 seconds)
  done (took 152.888580285 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.326113205 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.196538936 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.205714388 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.328244666 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.160264191 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.326851587 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.208748802 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.331688949 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.325044123 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.32591508 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.19639641 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.325724456 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.204952746 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.190608808 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.325502755 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.32462231 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.241459969 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.32697418 seconds)
  done (took 51.144036838 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.343184141 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.337860864 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.341495917 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.13732005 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.341561195 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.329441161 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.662860512 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.341621514 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.145735019 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.345103268 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.339355646 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.344797984 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.339753636 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.281673324 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.281927241 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.282250375 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.342342383 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.281204924 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.667124859 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.339501313 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.340297826 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.345740548 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.323572496 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.341675717 seconds)
  done (took 68.452618184 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.344872533 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.337140839 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.332673132 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.334613422 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.332915744 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.367094841 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.332059246 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.362196449 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.520470696 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.328284824 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.355470593 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.331973968 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.364075641 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.360557659 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.362017463 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.361346895 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.52349966 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.334704255 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.332755136 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.328537724 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.340421149 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.330753921 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.32725667 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.418433736 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.48635696 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.58699149 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.518458357 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.335440617 seconds)
  done (took 68.864003993 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.489278594 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.396479529 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.47275074 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.484614758 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.483958492 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.358230977 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.339461701 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.349341166 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.336826446 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.347713521 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.40463168 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.409014421 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.396338064 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.353954316 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.334842662 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.334268317 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.362837971 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.328928212 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.323352243 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.333654088 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.363289864 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.330694209 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.331791897 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.409095222 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.326522694 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.325225255 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.396589555 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.356639903 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.408555992 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.3591707 seconds)
  done (took 73.652799457 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.313098933 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.349619377 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.313011262 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.328513411 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.351174417 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.321949342 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.326794313 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.339186789 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.319042274 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.320062301 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.695027444 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.320219951 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.348176004 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.347915927 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.319292688 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.31360543 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.347315151 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.314678556 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.311191309 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.799750695 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.318560529 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.344754024 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.341569987 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.321490574 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.317291243 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.320269123 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.342965603 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.339806791 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.341049321 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.686318951 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.348693036 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.323156179 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.318932985 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.31072379 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.324112318 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.351975899 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.682580736 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.799040372 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.347497585 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.321853653 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.316067405 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.349889187 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.311790734 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.343183456 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.318735234 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.31340055 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.311059798 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.312349476 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.339958718 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.347719927 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.312627619 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.353807584 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.348309665 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.323586056 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.68242492 seconds)
  done (took 132.765251205 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.351314385 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.332162863 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.329566531 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.330285559 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.329878183 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.349422544 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.345252976 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.394033033 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.386270278 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.333439633 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.332843673 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.394012133 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.339070024 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.286838829 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.332224077 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.338347064 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.332300134 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.217481697 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.330824649 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.330707901 seconds)
  done (took 50.991879448 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.347648094 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.34647332 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.332941142 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.347589401 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.388787767 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.331335189 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.738218493 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.383081744 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.389393282 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.387203753 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.804086699 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.323282326 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.324445071 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.738865167 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.350621997 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.320966239 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.33828647 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.33147002 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.333315487 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.320336335 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.800351955 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.346844686 seconds)
  done (took 55.60627156 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.327035983 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.508718493 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.438408692 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.451561926 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.329377203 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.38540434 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.39197587 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.460538783 seconds)
  done (took 21.565032863 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.306249261 seconds)
    (2/2) benchmarking "in"...
    done (took 2.312697331 seconds)
  done (took 6.894947115 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.818597669 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.305476401 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.306776485 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.41531969 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.354153215 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.964973305 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.339897798 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.892638207 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.321742646 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.316716476 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.311334224 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.880992171 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.389874133 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 3.860882756 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.382903725 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.312480798 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.244275674 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.3699709 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.53181941 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.661696738 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.73459732 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.445260708 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.313068323 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.727052323 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.068794465 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.447244308 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.523134386 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.301843154 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.381965657 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 3.852342346 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.169099289 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.185280981 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.691423091 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.691475583 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.369347226 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.768061749 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.373600842 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.321126625 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.637427425 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.985567597 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.587998135 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.130286551 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.528704972 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.419771058 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.332039203 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.203497424 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 3.918478494 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.304587253 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.304922822 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.416389416 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.285918345 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.880802996 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.584876661 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.369325893 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.785223077 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.13360329 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.309959252 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.22662991 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.551058461 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.160883225 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.021197605 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.20613175 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.191616095 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.134504685 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.245653393 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.514076435 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.305508692 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.311256793 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.298884253 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.312234172 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.179109526 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.230367147 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.245941169 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.192861429 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.144917949 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.493023614 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.395454798 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.365170564 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.984886297 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.457553686 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.304635143 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.024226386 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.383630434 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.979682924 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.233692796 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.656448577 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.572732424 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.41679195 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.304347072 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.303725197 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.017082947 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.453687728 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.105806115 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.10649679 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.700072109 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.745974626 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.489917898 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.309550414 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.315966747 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.733206163 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.135512661 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.998711199 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.625187181 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.419846468 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.301403288 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.512567392 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.013045458 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.494259882 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.590649996 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.947819847 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.842158715 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.444908882 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.449104844 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.232057015 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.849220969 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.030253646 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.886475064 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.470880733 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.303371875 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.871332132 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.40353315 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.30124888 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.305391754 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.305787594 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.213147502 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.443010452 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.179327046 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.33603785 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.282484479 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.614947981 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.511782926 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.481935091 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.431710418 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.309969783 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.31152776 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.309055733 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.042352659 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.241326974 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.352448654 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.308106939 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.703372958 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.025455208 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.458275677 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.798369011 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.021656979 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.876598585 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.320667833 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.183712224 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.128350258 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.440859203 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.3411912 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.758651634 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.436818081 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.312310983 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.336556166 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.868356678 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.442647034 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.385272841 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.311985193 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.212750188 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.388926943 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.311046057 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.707586704 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.977362129 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.469254013 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.135545966 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.806689565 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.541147863 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.444980818 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.314369695 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.598697272 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.451493998 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.311033019 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.310602829 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.312034063 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.349815136 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.582311847 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.457094216 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.309606666 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.189755418 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.445928552 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.025708905 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.127494253 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.000997912 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.125063437 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.994703943 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.245507341 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.255524425 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.462000919 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.434396126 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.848822757 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.315829634 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.312356786 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.071270222 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.453570976 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.650797162 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.377062664 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.259977995 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.251527206 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.330953146 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.577231657 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.16139917 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.792711093 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.848849119 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.373207159 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.188219734 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.34374505 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.087521017 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.444590694 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.984202807 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.478398624 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.676437298 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.059824185 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.132714705 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.308584121 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.311363388 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.245349565 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.37637025 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.183783955 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.749030647 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.417899135 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.706321767 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.717746641 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.713682583 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.459665637 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.305192853 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.118535392 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.696738711 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.27767887 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.08129784 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.76798839 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.428069854 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.360710719 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.317364674 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.571883127 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 3.951502134 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.279448518 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.44839497 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.338152071 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.327765927 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.164045493 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.363390827 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.310036625 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.260420568 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.925349608 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.776134333 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.555585398 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.847784836 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.785592513 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.618200023 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.572613185 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.428089839 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.076175771 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.451927223 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.886138795 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.656815285 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 3.927239203 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.314910808 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.176032899 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.707467457 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.551873814 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.31823341 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.313433516 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.038121598 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.177080505 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.24639027 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.871118495 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.967286741 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.516874751 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.360484569 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.763874119 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.308323992 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 3.901726966 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.359652671 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.313997554 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.257315748 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.140879705 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.308615238 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.309774184 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.877908907 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.144363248 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.729169581 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.511550556 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.209715829 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.372324389 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.611827515 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.793707445 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.681291328 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.26619419 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.965178391 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.576281514 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.484630315 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.447391259 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.310960765 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.085349655 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.559342597 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.847984655 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.087968707 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.893592512 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.455457778 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.829865537 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.591677627 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.311702138 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.30645982 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.193341224 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 3.911178703 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.684030208 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.64722217 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.777375015 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 3.910082057 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.750743867 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.902348613 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.055439158 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.09342969 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.450987433 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.748411585 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.137124092 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.314686392 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.308875787 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.313618726 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.381066065 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.678775002 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.381034534 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.478468593 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.845610479 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.577081756 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.183422928 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 3.918199239 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.382311309 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.068874466 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.906724147 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.486648923 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.632226273 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.790530736 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.8404304 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.748493716 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.467930262 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.271984136 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.436944306 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.160726801 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.155138677 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.132721505 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.806470411 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.378202579 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.028060388 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.493322381 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.663767425 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.383977587 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.448887873 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.453655552 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.201157624 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.458441147 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.555340158 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.80452054 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.42535775 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.312833455 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.310735142 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.313609995 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.69547386 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.395516801 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.397030533 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.455645405 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.565928893 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.913761985 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.851920962 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.008008109 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.442664919 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.313881596 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.549213747 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.058795984 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.639591777 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.864554642 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.667696435 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.172324649 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.799808726 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.033193128 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.563374923 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.656422881 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.380412213 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.383225434 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.31901264 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.310263734 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.030002659 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.454012283 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.317133124 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.237903277 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.43637183 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.446082463 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.312649684 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.254494819 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 4.966185072 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 3.861691966 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.262055765 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.097787293 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.452310288 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.314477946 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.318085965 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.195218014 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.310932715 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.292512297 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.566142424 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.250256971 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.368459913 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.008533865 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.129778891 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.009852223 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.056012179 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.12929069 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.309741585 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.708808524 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.644407363 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.68222935 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.373188516 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.480279781 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.432611462 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.315799593 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.021612535 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.014608551 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.581553557 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.316594226 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.311839773 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.736545229 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.438258264 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.749735449 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.436997334 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.315227632 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.491049175 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.793999031 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.507713787 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.311847503 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.314081929 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.74533759 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.566067686 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.233360365 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.513423949 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.453956072 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.65816615 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.507919938 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.052666289 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.976641705 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.649016797 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.930770514 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.583875075 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.313873888 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.301054063 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.790595751 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.266120388 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.946226784 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.115940118 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.375318462 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.966686337 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.523845909 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.615173495 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.469993126 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.20773343 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.51578744 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.059705783 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.229888879 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.454198161 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.49705347 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.782370035 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.460419048 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.764107196 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.447337004 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.510862426 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.454156989 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.325285881 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.331180837 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.318936729 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.321483717 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.684979887 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.385789027 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.138565884 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.716119786 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.321980212 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.311404949 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.312371526 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.313220379 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.32474166 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.319700142 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.436181237 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.215230493 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.718531839 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.209489236 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.456779563 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.47499416 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.648992529 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.268919814 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.18736309 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.811750656 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.318064482 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.547014879 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.73930953 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.327632165 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.876884424 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.842482176 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.390250714 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.313564804 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.318592322 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.01510327 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.260157103 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.321224703 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.317206028 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.693973064 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.898654053 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.446642391 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.312921861 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.311055128 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.31429734 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.429789641 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 3.870296305 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.327869135 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.082966862 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.448230237 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.310563384 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.183171056 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.71366288 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.604966345 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 3.941662707 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.321693437 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.315740512 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.822301533 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.573657304 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.975983815 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.487932441 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.233027623 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.512726328 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.308240509 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.337299213 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.319074384 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.312098277 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.064426308 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.44125203 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.318200321 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.314163865 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.867583157 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.58446149 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.392096072 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.342498829 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.412287242 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.498496162 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.20862932 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.381507546 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.618677091 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.343587057 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.73880019 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.614313631 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.78068169 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.509882427 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.451842669 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.624926689 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.471022849 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.357035954 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.348983749 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.417600071 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.352831671 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.366932928 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.332349992 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.483058013 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.315648296 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.409755868 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.875574869 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.315977711 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.31234897 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.847175118 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.497709865 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.055849167 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.45530674 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.320642618 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.329636555 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.296009042 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.393482027 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.311588533 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.578594218 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.740101256 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.470147327 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.725624876 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.748564086 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.469303621 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.328946315 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.863973284 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.939576868 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.622641754 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.371225275 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.316596268 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.312585911 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.300464247 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.659621615 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.507687407 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.435448464 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 4.918087731 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.002294659 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.83483878 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.455138219 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 3.989900698 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.383186981 seconds)
  done (took 1883.704465284 seconds)
done (took 3822.406004956 seconds)
(9/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.507906012 seconds)
    (2/7) benchmarking "month"...
    done (took 2.418827657 seconds)
    (3/7) benchmarking "year"...
    done (took 2.406088477 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.31531233 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.330230218 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.329103373 seconds)
    (7/7) benchmarking "second"...
    done (took 2.332872757 seconds)
  done (took 18.922017527 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 2.919897836 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.771724478 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.766954858 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.917567656 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.34254977 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.127954485 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.314077868 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.04479278 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.132652939 seconds)
  done (took 27.615252789 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.40941112 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.331149524 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.331234908 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.339139576 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.530547805 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.453957694 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.342768974 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.451643501 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.49442819 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.519075181 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.478070019 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.321210974 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.499447029 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.51536788 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.455271207 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.479880236 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.331233532 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.476254953 seconds)
  done (took 46.038360123 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.298044742 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.300327084 seconds)
  done (took 6.875385756 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.311795704 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.321249819 seconds)
  done (took 6.907703457 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.442447184 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.403072306 seconds)
  done (took 9.12765814 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.824276985 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.314502158 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.312732731 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.31387842 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.572877925 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.749946125 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.632732717 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.314535068 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.314313583 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.316138672 seconds)
  done (took 27.015613217 seconds)
done (took 145.538284659 seconds)
(10/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.278702897 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.8735702 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.334396419 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.384014041 seconds)
done (took 32.147434507 seconds)
(11/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.443659788 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.444761857 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.534541485 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.531868333 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.543511023 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.845357098 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.545484016 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.41801019 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.528941438 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.444811316 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.433493852 seconds)
  done (took 29.98423026 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.440695899 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.445988693 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.525600861 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.023839149 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.530223822 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.177319194 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.555507077 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.497591316 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.540529257 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.442104589 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.559640127 seconds)
  done (took 31.009671571 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.347689933 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.373069514 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.379120559 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.455492855 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.38416708 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.418404995 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.383768154 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.409653007 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.415275695 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.34076754 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.3852582 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.324307709 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.529366487 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.405555557 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.337232616 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.689048669 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.162057671 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.40155339 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.411275382 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.546229406 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.341992719 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.381712965 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.339300003 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.425642955 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.321779466 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.321946081 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.315934409 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.434907762 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.393977811 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.368119921 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.403594455 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.338488184 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.444936847 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.325475074 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.385023318 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.321780181 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.381011463 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.865543111 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.363062188 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.337826924 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.424081768 seconds)
  done (took 105.606024493 seconds)
done (took 168.87074565 seconds)
(12/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.735591962 seconds)
    (2/2) benchmarking "read"...
    done (took 2.797018429 seconds)
  done (took 7.802612825 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.432086847 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.597069507 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.46239173 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.448083866 seconds)
  done (took 24.777052048 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.27474827 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.554463488 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.469452753 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.40888267 seconds)
  done (took 26.981844587 seconds)
done (took 69.267057784 seconds)
(13/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.285203352 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.282440427 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.283598933 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.280458783 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.284946323 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.278793165 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.280670748 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.279292642 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.280831605 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.281272289 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.283503215 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.280631381 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.280210016 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.281158107 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.279135417 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.286819931 seconds)
  done (took 38.779111453 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.280951914 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.281221475 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.302096655 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.285033185 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.281488919 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.283095443 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.285058577 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.28911819 seconds)
  done (took 20.558240567 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.284264261 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.282996551 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.28424512 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.283225961 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.28645683 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.289052642 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.283444928 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.284893534 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.28422932 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.284330735 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.285988697 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.286462194 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.286711438 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.286180796 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.291343812 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.286137857 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.286042063 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.285854753 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.289850279 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.284637264 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.284353688 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.284513929 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.283908254 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.287475115 seconds)
  done (took 57.130166772 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.31214078 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.692210967 seconds)
  done (took 7.278856461 seconds)
done (took 126.018004188 seconds)
(14/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.401620821 seconds)
    (2/2) benchmarking "String"...
    done (took 2.480010801 seconds)
  done (took 7.155255384 seconds)
  (2/7) benchmarking "join"...
  done (took 7.316632569 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.44707222 seconds)
    (2/4) benchmarking "different"...
    done (took 2.377273046 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.578776517 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.443268674 seconds)
  done (took 12.11946952 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.3068784 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.051888467 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.273545204 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 2.838231347 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.745968104 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.47537057 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.882656618 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.186262211 seconds)
  done (took 32.72677091 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.592416131 seconds)
    (2/3) benchmarking "different"...
    done (took 2.338468903 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.324182898 seconds)
  done (took 9.534768823 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.468613785 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.435600534 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.085530063 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.492893979 seconds)
  done (took 15.754200535 seconds)
done (took 90.212412147 seconds)
(15/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.339701211 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.31535217 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.340828987 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.848271913 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.098207426 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.341236667 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.367876346 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.320983456 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.403858133 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.56223201 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.527857964 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.1778831 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.324294432 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.272770534 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 5.091712888 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.335750938 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.315490012 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.377174366 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.316090974 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.443402498 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.345309482 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.317648694 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.341430964 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.340204942 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.399075888 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.356122664 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.454922212 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.340151928 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.321654356 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.315775946 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.393664854 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.352960946 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.851108627 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.121134464 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.61350463 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.12321449 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.084152182 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.34996921 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.352318146 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.353437255 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.291721891 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.910652398 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.445690098 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.378979448 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.338166098 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.340864478 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.317775073 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.344771237 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.668143073 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.924940477 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.245348195 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.046864519 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.320070979 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.545084229 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.340482927 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.35097632 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.3937156 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.8431021 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.122907427 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.316220522 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.362729395 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.315651038 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.338576338 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.378085274 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.843884675 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.100470183 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.612253315 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.050827541 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.377701551 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.363739888 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.541076257 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.847526011 seconds)
  done (took 204.144687854 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.832391202 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.389025749 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.831515084 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.398068013 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.414781421 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.555669101 seconds)
  done (took 21.477436399 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.3299926 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.324440431 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.31538766 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.62067844 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.404604399 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.34282711 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.320555505 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.322655357 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.370135037 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.351355942 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.339631633 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.321061696 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.320704978 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.271708524 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.580953342 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.34109082 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.327550101 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.334583421 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.624313311 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.332575522 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.317489123 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.329330081 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.568963171 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.333647143 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.335148295 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.378746119 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.405676856 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.370319685 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.34471559 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.603942379 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.327707324 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.461333584 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.352025136 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.321931346 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.331686003 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.612923068 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.506162138 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.576933772 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.272673216 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.275872054 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.515138484 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.168233666 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.183096687 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.719228888 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.57010241 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.393037564 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.345108316 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.500235509 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.279260346 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.166774343 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.315729861 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.336211778 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.469518824 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.272958202 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.476472725 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.444686454 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.332475266 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.274215916 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.327563763 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.326391364 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.323286476 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.351044396 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.500939279 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.336790931 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.313794359 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.532052132 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.570062336 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.273591336 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.04125764 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.333502333 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.322059428 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.483955851 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.48917372 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.338795952 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.467510282 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.330494872 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.379350133 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.272003668 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.445635099 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.228375174 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.57114608 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.270645935 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.328463483 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.338730197 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.274067095 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.337318881 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.607397151 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.328440794 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.200756762 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.348589075 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.272662887 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.392392645 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.018461704 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.331868441 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.620223612 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.57042009 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.629398783 seconds)
  done (took 298.062128259 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.541873476 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.625297971 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.872880467 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.625134823 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.42792737 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.61537841 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.946041509 seconds)
  done (took 20.925979926 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.548764943 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.667554835 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.274260677 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.276122883 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.27243378 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.489794615 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.274433645 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.548786894 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.654751965 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.667714318 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.570779342 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.750821097 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.275543614 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.27264338 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.275444824 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.5742306 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.403476033 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.539052456 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.272614473 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.272922776 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.54102236 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.511863181 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.66635845 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.278442524 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.363865671 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.271131905 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.273069883 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.601279169 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.513514647 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.636530235 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.284419703 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.729003033 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.549070548 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.545006902 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.281425963 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.44392556 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.665621165 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.657086087 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.524356607 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.346852133 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.483463473 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.380697815 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.538155181 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.460080492 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.58568898 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.520220575 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.651214285 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.94838283 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.356322405 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.492321097 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.58027059 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.355766109 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.474903437 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.362741022 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.652439542 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.738471139 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.535988048 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.273294316 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.457875967 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.271943699 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.585163365 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.279250119 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.271492757 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.272150927 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.530267074 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.274077419 seconds)
  done (took 275.210880932 seconds)
done (took 822.518766281 seconds)
(16/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.224516179 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.705880838 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.306978009 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.348595733 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.273823732 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.613305052 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.687648223 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.225917743 seconds)
done (took 46.658666524 seconds)
(17/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (5, "scal_tup")...
    done (took 2.317756665 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.324431482 seconds)
    (3/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.317545794 seconds)
    (4/9) benchmarking (3, "tup_tup")...
    done (took 2.311460141 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.318491588 seconds)
    (6/9) benchmarking (10, "scal_tup")...
    done (took 2.34349608 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.28130437 seconds)
    (8/9) benchmarking (10, "tup_tup")...
    done (took 2.772013795 seconds)
    (9/9) benchmarking (3, "scal_tup")...
    done (took 2.315262749 seconds)
  done (took 28.582747715 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.278621192 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.274981059 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.229893142 seconds)
  done (took 23.054310822 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.506157249 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.624987036 seconds)
    (3/6) benchmarking ("array", 10)...
    done (took 2.816485692 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.640415434 seconds)
    (5/6) benchmarking ("tuple", 3)...
    done (took 2.416908146 seconds)
    (6/6) benchmarking ("tuple", 5)...
    done (took 2.423154513 seconds)
  done (took 17.70591799 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.284421027 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.277079113 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.280982329 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.276344716 seconds)
  done (took 31.39082608 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.360413017 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.676403876 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.399543826 seconds)
    (4/4) benchmarking ("(10000000,)", 2)...
    done (took 2.676886972 seconds)
  done (took 12.384243607 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.400859673 seconds)
done (took 118.809929578 seconds)
(18/22) benchmarking "parallel"...
done (took 2.659905439 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.441301306 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.539466765 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.455626511 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.379420843 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.465298132 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.716079964 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.073939794 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.228199131 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.522410579 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.453770753 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.600177649 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.674318571 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.434969552 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.405989177 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.319153431 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.41127112 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.437747695 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.421083751 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.348850773 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.396244676 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.968383328 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.555924177 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.083957033 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.674828471 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.35634157 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.378276941 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.440954713 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.436509551 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.993489955 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.240684398 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.820843899 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.392708242 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.348778595 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.52357344 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.386258261 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.406410664 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.470974867 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.340536892 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.381783061 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.416623875 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.316734183 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.682577515 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.488976261 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.173802325 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.249678931 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.737677198 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.29597767 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.41108562 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.264822661 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.377842582 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.333501582 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.668302379 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.931280388 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.495242102 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.540850354 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.476699401 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.441496133 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.436231723 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.438348751 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.442349553 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.346413916 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.168067821 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.581207091 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.522426757 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.436968855 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.43030795 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.444810455 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.665076451 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.32393085 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.426207615 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.431947839 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.334193816 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.037946964 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.714281903 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.475297072 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.520813073 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.715180857 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.558923193 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.07737806 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.755475663 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.694925629 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.755176421 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.566305525 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.540779875 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.729770629 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.23861957 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.439134069 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.421118218 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.342921359 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.420432469 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.33786363 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.996585124 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.615940794 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.690872002 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.586724962 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.506394323 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.525097199 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.693942416 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.547298216 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.442265827 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.143069015 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.628893109 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.516531637 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.429278743 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.425716952 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.371729636 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.460159182 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.35829244 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.344407676 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.680975321 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.404387454 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.280012197 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.704654458 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.418614528 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.667059602 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.546780915 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.196177563 seconds)
  done (took 329.456738907 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.606907538 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.299848313 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.428071937 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.280081772 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.275913688 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.277929253 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.289102842 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.308489457 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.376846219 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.275258424 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.278710881 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.282060019 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.279086327 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.276599232 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.505267475 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.290265796 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.279377908 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.274908374 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.284710288 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.277392939 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.279518212 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.279537728 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.948282256 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.370876239 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.275739441 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.280673652 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 3.985121212 seconds)
  done (took 180.287859232 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.36232118 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.772439572 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.533039854 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.624721526 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.69315523 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.62081633 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.357213305 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.352278348 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.404722081 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.548222303 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.277027334 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.72469577 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.315628254 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.653422287 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.334710495 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.34089962 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.359069749 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.3147261 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.383784919 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.535758521 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.403671759 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.343731841 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.594281008 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.349442814 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.347082195 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.499583407 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.510096387 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.500360897 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.453342725 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.525687384 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.68983985 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.342286131 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.317516904 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.356103099 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.412209565 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.481711781 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.397031398 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.688253608 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.328612807 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.514421757 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.326351306 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.684716653 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.318318352 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.367582034 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.477698251 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.410102345 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.744007875 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.84542434 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.587433819 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.348487837 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.344798698 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.419996175 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.68749377 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.558246842 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.714689914 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.313115038 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.744171852 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.593055708 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.568309147 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.308581722 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.556008968 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.340566608 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.339802581 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.413607581 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.789746792 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.498646638 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.689747136 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.614688077 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.347600554 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.783540958 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.355207489 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.547472788 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.996019982 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.448284759 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.149560914 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.482470191 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.318078618 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.368083195 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.352760816 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.617066088 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.347998221 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.413596285 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.374491702 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.438985183 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.491922401 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.444883891 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.636511694 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.805732724 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.435288693 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.688805488 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.904260171 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.62287015 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.325861194 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.403772852 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.312819904 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.408114947 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.491563404 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.65400377 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.749354339 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.591567536 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.135233874 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.812458671 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.32183844 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.394797028 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.345358051 seconds)
  done (took 274.763569924 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.418533543 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.527302124 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.869631478 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.633335008 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.729393829 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.450763664 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.402571732 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.362393349 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.462666663 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.317093521 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.436174302 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.389446993 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.57467714 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.789820825 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.566819218 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.947441368 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.355491937 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.802555493 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.558555733 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.425013949 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.891307345 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.346355965 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.601436618 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.514333733 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.289936979 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.588007504 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.617695268 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.484250723 seconds)
  done (took 80.62763246 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.355528906 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.398574391 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.318062044 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.423925263 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.416537157 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.409061442 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.376744202 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.856538215 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.457985137 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.367562968 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.40907694 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.321420653 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.827555674 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.318381296 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.388136001 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.408145282 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.463225038 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.83246538 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.413469914 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.823507146 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.370523035 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.418841799 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.370662177 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.361015003 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.37875637 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.327692904 seconds)
  done (took 66.099991508 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.387459106 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.275862024 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.499086664 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.555632853 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.837934741 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.476018631 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.690950854 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.336132621 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.500092657 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.398811639 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.078470566 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.837236077 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.443658655 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.842076998 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.441557651 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.403541675 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.789236699 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.414854432 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.673599214 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.463519453 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.932403904 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.435549207 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.54465997 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.543001476 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.437458533 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.485069996 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.410905995 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.847119755 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.427439389 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.45933276 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.552620429 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.419344508 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.938856182 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.411119527 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.423185746 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.718426315 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.501029149 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.812256152 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.446277363 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.239355906 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.424597349 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.498546925 seconds)
  done (took 117.527562866 seconds)
done (took 1051.041677041 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.306275637 seconds)
  (2/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.295054896 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.310292944 seconds)
  (4/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.298850429 seconds)
  (5/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.321552798 seconds)
  (6/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.306250895 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.296533889 seconds)
  (8/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.363969826 seconds)
  (9/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.302748789 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.310163067 seconds)
  (11/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.300710401 seconds)
  (12/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.297811845 seconds)
  (13/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.325940177 seconds)
  (14/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.351745069 seconds)
  (15/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.286623436 seconds)
  (16/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.298338496 seconds)
  (17/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.334765575 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.418778116 seconds)
  (19/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.310046543 seconds)
  (20/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.349445083 seconds)
  (21/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.331618029 seconds)
  (22/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.303626675 seconds)
  (23/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.339288673 seconds)
  (24/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.299286661 seconds)
  (25/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.295390715 seconds)
  (26/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.361592032 seconds)
  (27/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.300141891 seconds)
  (28/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.299644945 seconds)
  (29/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.295136427 seconds)
  (30/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.379762962 seconds)
  (31/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.296728867 seconds)
  (32/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.301463206 seconds)
  (33/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.287881609 seconds)
  (34/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.459291891 seconds)
  (35/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.329602657 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.310035795 seconds)
  (37/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.304413701 seconds)
  (38/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.304269741 seconds)
  (39/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.302036374 seconds)
  (40/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.355021548 seconds)
  (41/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.309032528 seconds)
  (42/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.302497805 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.307904813 seconds)
  (44/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.317798977 seconds)
  (45/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.297942992 seconds)
  (46/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.297323887 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.303253572 seconds)
  (48/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.303879943 seconds)
  (49/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.360183191 seconds)
  (50/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.356415837 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.313424008 seconds)
  (52/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.310421816 seconds)
  (53/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.411919706 seconds)
  (54/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.30295965 seconds)
  (55/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.291479052 seconds)
  (56/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.314550372 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.304105656 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.304464431 seconds)
  (59/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.313273765 seconds)
  (60/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.295120892 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.364644724 seconds)
  (62/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.29903422 seconds)
  (63/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.31593964 seconds)
  (64/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.294565934 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.306564447 seconds)
  (66/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.30176616 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.311638431 seconds)
  (68/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.312808743 seconds)
  (69/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.32970618 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.327505661 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.298421255 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.321575134 seconds)
  (73/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.306163062 seconds)
  (74/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.300407153 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.317298154 seconds)
  (76/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.298339132 seconds)
  (77/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.324620888 seconds)
  (78/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.333351799 seconds)
  (79/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.346968249 seconds)
  (80/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.295887959 seconds)
  (81/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.307610608 seconds)
  (82/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.304085147 seconds)
  (83/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.299453764 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.30648531 seconds)
  (85/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.322240586 seconds)
  (86/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.323614512 seconds)
  (87/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.301242455 seconds)
  (88/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.297287083 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.317254822 seconds)
  (90/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.305899507 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.391468933 seconds)
  (92/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.328633937 seconds)
  (93/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.333993066 seconds)
  (94/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.306856881 seconds)
  (95/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.356592156 seconds)
  (96/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.337149599 seconds)
  (97/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.307234311 seconds)
  (98/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.363792703 seconds)
  (99/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.289112884 seconds)
  (100/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.300529731 seconds)
  (101/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.334461327 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.356361238 seconds)
  (103/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.315492922 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.304151569 seconds)
  (105/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.326486833 seconds)
  (106/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.295933517 seconds)
  (107/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.307029845 seconds)
  (108/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.308781772 seconds)
  (109/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.299384389 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.32603448 seconds)
  (111/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.300849433 seconds)
  (112/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.308435007 seconds)
  (113/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.296597833 seconds)
  (114/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.326539 seconds)
  (115/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.309767046 seconds)
  (116/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.32421789 seconds)
  (117/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.306797148 seconds)
  (118/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.299804938 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.345075317 seconds)
  (120/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.311086293 seconds)
  (121/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.310911282 seconds)
  (122/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.297334854 seconds)
  (123/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.309489827 seconds)
  (124/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.292252871 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.331215222 seconds)
  (126/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.295046425 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.301472574 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.304429835 seconds)
  (129/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.331460436 seconds)
  (130/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.29699421 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.306524375 seconds)
  (132/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.304243425 seconds)
  (133/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.426049161 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.311403176 seconds)
  (135/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.356345174 seconds)
  (136/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.29998558 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.319239382 seconds)
  (138/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.333061372 seconds)
  (139/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.290166536 seconds)
  (140/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.316900693 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.305168779 seconds)
  (142/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.390471352 seconds)
  (143/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.302676848 seconds)
  (144/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.292565305 seconds)
  (145/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.289136046 seconds)
  (146/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.302006715 seconds)
  (147/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.327961649 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.309317617 seconds)
  (149/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.309634361 seconds)
  (150/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.351524216 seconds)
  (151/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.3046017 seconds)
  (152/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.286960667 seconds)
  (153/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.30032666 seconds)
  (154/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.30536154 seconds)
  (155/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.287136128 seconds)
  (156/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.305674701 seconds)
  (157/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.315489179 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.321922976 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.299874451 seconds)
  (160/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.314079323 seconds)
  (161/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.295319633 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.316589701 seconds)
  (163/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.293825219 seconds)
  (164/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.299377116 seconds)
  (165/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.328421967 seconds)
  (166/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.297876614 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.316332461 seconds)
  (168/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.453722517 seconds)
  (169/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.344711222 seconds)
  (170/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.298444846 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.296510254 seconds)
  (172/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.352171917 seconds)
  (173/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.32375597 seconds)
  (174/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.321203603 seconds)
  (175/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.303814389 seconds)
  (176/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.307356639 seconds)
  (177/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.305801818 seconds)
  (178/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.302465836 seconds)
  (179/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.293873578 seconds)
  (180/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.330472126 seconds)
  (181/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.338738285 seconds)
  (182/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.28947009 seconds)
  (183/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.310964206 seconds)
  (184/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.302251763 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.343795545 seconds)
  (186/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.29649339 seconds)
  (187/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.295296219 seconds)
  (188/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.31620467 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.316310559 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.312167116 seconds)
  (191/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.306702011 seconds)
  (192/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.307077396 seconds)
  (193/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.294295198 seconds)
  (194/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.297107494 seconds)
  (195/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.295970546 seconds)
  (196/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.297445346 seconds)
  (197/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.303994854 seconds)
  (198/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.298806543 seconds)
  (199/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.30833245 seconds)
  (200/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.298172024 seconds)
  (201/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.309598879 seconds)
  (202/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.323946526 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.327108317 seconds)
  (204/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.299041734 seconds)
  (205/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.308552905 seconds)
  (206/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.313692923 seconds)
  (207/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.296717141 seconds)
  (208/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.34312738 seconds)
  (209/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.301623382 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.288614692 seconds)
  (211/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.362011477 seconds)
  (212/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.457851962 seconds)
  (213/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.540016581 seconds)
  (214/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.56997842 seconds)
  (215/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.318204599 seconds)
  (216/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.328458074 seconds)
  (217/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.457968734 seconds)
  (218/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.371903918 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.390400008 seconds)
  (220/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.402294418 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.428162905 seconds)
  (222/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.330441957 seconds)
  (223/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.326638214 seconds)
  (224/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.293296689 seconds)
  (225/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.302372345 seconds)
  (226/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.302871647 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.295949278 seconds)
  (228/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.314468404 seconds)
  (229/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.326514946 seconds)
  (230/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.356418824 seconds)
  (231/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.304685712 seconds)
  (232/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.31427021 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.317891669 seconds)
  (234/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.296459572 seconds)
  (235/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.396697996 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.334345412 seconds)
  (237/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.301316795 seconds)
  (238/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.356743541 seconds)
  (239/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.28822025 seconds)
  (240/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.351608617 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.351188305 seconds)
  (242/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.310730159 seconds)
  (243/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.309061475 seconds)
  (244/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.310059501 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.305796934 seconds)
  (246/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.303895734 seconds)
  (247/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.299589156 seconds)
  (248/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.317720319 seconds)
  (249/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.346587818 seconds)
  (250/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.303184751 seconds)
  (251/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.394689887 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.30445104 seconds)
  (253/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.348782623 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.316485279 seconds)
  (255/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.42322643 seconds)
  (256/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.307203742 seconds)
  (257/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.338647269 seconds)
  (258/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.348088773 seconds)
  (259/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.308818364 seconds)
  (260/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.299803929 seconds)
  (261/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.370156957 seconds)
  (262/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.312470601 seconds)
  (263/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.329757514 seconds)
  (264/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.293866578 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.307213748 seconds)
  (266/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.325627755 seconds)
  (267/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.309012273 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.297454948 seconds)
  (269/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.288163658 seconds)
  (270/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.453039171 seconds)
  (271/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.31007899 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.314851922 seconds)
  (273/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.413914091 seconds)
  (274/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.296119583 seconds)
  (275/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.298643303 seconds)
  (276/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.333536727 seconds)
  (277/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.414888806 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.30244756 seconds)
  (279/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.338039922 seconds)
  (280/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.307439585 seconds)
  (281/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.347613378 seconds)
  (282/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.3369525 seconds)
  (283/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.287922425 seconds)
  (284/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.306765283 seconds)
  (285/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.316315556 seconds)
  (286/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.299201308 seconds)
  (287/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.324208323 seconds)
  (288/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.29912886 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.307143789 seconds)
  (290/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.339274346 seconds)
  (291/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.291541491 seconds)
  (292/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.304912999 seconds)
  (293/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.313952455 seconds)
  (294/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.390794248 seconds)
  (295/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.292075254 seconds)
  (296/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.302049824 seconds)
  (297/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.317780692 seconds)
  (298/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.294636392 seconds)
  (299/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.308229447 seconds)
  (300/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.325643307 seconds)
  (301/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.314756829 seconds)
  (302/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.305156637 seconds)
  (303/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.336726992 seconds)
  (304/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.297361339 seconds)
  (305/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.331530525 seconds)
  (306/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.334978082 seconds)
  (307/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.309546329 seconds)
  (308/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.323704852 seconds)
  (309/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.301160282 seconds)
  (310/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.316844298 seconds)
  (311/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.315451618 seconds)
  (312/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.312296293 seconds)
  (313/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.32376352 seconds)
  (314/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.299193202 seconds)
  (315/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.377147342 seconds)
  (316/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.299448641 seconds)
  (317/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.314330041 seconds)
  (318/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.307596373 seconds)
  (319/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.307241108 seconds)
  (320/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.305682989 seconds)
  (321/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.327266087 seconds)
  (322/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.311610467 seconds)
  (323/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.313548901 seconds)
  (324/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.329269863 seconds)
  (325/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.456680316 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.419568998 seconds)
  (327/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.363867047 seconds)
  (328/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.319325869 seconds)
  (329/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.340254021 seconds)
  (330/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.335690859 seconds)
  (331/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.298702918 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.294603093 seconds)
  (333/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.333321631 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.298778506 seconds)
  (335/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.30077058 seconds)
  (336/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.308148923 seconds)
  (337/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.301313956 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.349120121 seconds)
  (339/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.290857772 seconds)
  (340/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.29466129 seconds)
  (341/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.317955427 seconds)
  (342/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.32593761 seconds)
  (343/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.311179473 seconds)
  (344/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.290655868 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.297891279 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.291934644 seconds)
  (347/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.298089937 seconds)
  (348/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.366624975 seconds)
  (349/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.298260428 seconds)
  (350/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.33683382 seconds)
  (351/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.333577492 seconds)
  (352/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.453951268 seconds)
  (353/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.33129109 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.318266611 seconds)
  (355/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.295990293 seconds)
  (356/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.305041049 seconds)
  (357/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.370279938 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.3345316 seconds)
  (359/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.302133067 seconds)
  (360/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.302643382 seconds)
  (361/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.292881689 seconds)
  (362/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.299370625 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.327735776 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.308836222 seconds)
  (365/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.305045953 seconds)
  (366/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.294132867 seconds)
  (367/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.418881923 seconds)
  (368/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.325979945 seconds)
  (369/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.30193174 seconds)
  (370/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.325230571 seconds)
  (371/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.29539743 seconds)
  (372/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.342001917 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.344984222 seconds)
  (374/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.304657178 seconds)
  (375/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.312209701 seconds)
  (376/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.330431011 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.303983002 seconds)
  (378/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.331999002 seconds)
  (379/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.303851395 seconds)
  (380/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.292837635 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.303661184 seconds)
  (382/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.305453835 seconds)
  (383/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.305267103 seconds)
  (384/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.35978225 seconds)
  (385/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.300094308 seconds)
  (386/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.311500244 seconds)
  (387/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.310043334 seconds)
  (388/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.320819699 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.312652913 seconds)
  (390/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.305321595 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.302095709 seconds)
  (392/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.297687261 seconds)
  (393/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.302405598 seconds)
  (394/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.3343103 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.389793109 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.308217682 seconds)
  (397/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.297765728 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.308205373 seconds)
  (399/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.305287879 seconds)
  (400/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.309931808 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.299821599 seconds)
  (402/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.316100169 seconds)
  (403/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.329580757 seconds)
  (404/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.305789547 seconds)
  (405/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.313375912 seconds)
  (406/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.300569664 seconds)
  (407/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.317289226 seconds)
  (408/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.317159928 seconds)
  (409/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.313800982 seconds)
  (410/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.304143959 seconds)
  (411/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.297358984 seconds)
  (412/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.303168557 seconds)
  (413/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.302196839 seconds)
  (414/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.314619415 seconds)
  (415/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.300191708 seconds)
  (416/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.303335115 seconds)
  (417/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.294537165 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.317660531 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.367663501 seconds)
  (420/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.319879219 seconds)
  (421/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.303956337 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.302918328 seconds)
  (423/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.305828658 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.3042948 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.305206094 seconds)
  (426/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.325145407 seconds)
  (427/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.420956217 seconds)
  (428/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.289654301 seconds)
  (429/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.300911023 seconds)
  (430/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.299341027 seconds)
  (431/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.293767805 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.312237347 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.330156955 seconds)
  (434/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.319227389 seconds)
  (435/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.293806285 seconds)
  (436/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.315520502 seconds)
  (437/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.29837062 seconds)
  (438/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.311204238 seconds)
  (439/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.295568739 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.316413783 seconds)
  (441/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.339013933 seconds)
  (442/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.317984822 seconds)
  (443/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.311648113 seconds)
  (444/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.294861963 seconds)
  (445/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.303002325 seconds)
  (446/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.34079355 seconds)
  (447/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.341833998 seconds)
  (448/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.300082225 seconds)
  (449/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.304757924 seconds)
  (450/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.307927448 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.309181706 seconds)
  (452/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.426361209 seconds)
  (453/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.312666563 seconds)
  (454/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.303090184 seconds)
  (455/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.303081256 seconds)
  (456/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.293272415 seconds)
  (457/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.309529483 seconds)
  (458/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.319428655 seconds)
  (459/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.303583418 seconds)
  (460/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.307808589 seconds)
  (461/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.298045089 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.330108414 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.309250969 seconds)
  (464/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.336941927 seconds)
  (465/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.42962757 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.308226976 seconds)
  (467/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.308466501 seconds)
  (468/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.310540862 seconds)
  (469/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.302209158 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.357073543 seconds)
  (471/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.301453898 seconds)
  (472/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.292349518 seconds)
  (473/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.310475603 seconds)
  (474/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.296426094 seconds)
  (475/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.33036041 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.330268971 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.340410367 seconds)
  (478/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.501887053 seconds)
  (479/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.335886545 seconds)
  (480/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.301622286 seconds)
  (481/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.292168346 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.308125139 seconds)
  (483/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.318007552 seconds)
  (484/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.341216632 seconds)
  (485/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.40972067 seconds)
  (486/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.326793114 seconds)
  (487/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.308795537 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.311182419 seconds)
  (489/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.322741173 seconds)
  (490/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.414014812 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.300443811 seconds)
  (492/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.316610432 seconds)
  (493/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.327980232 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.334063038 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.314219022 seconds)
  (496/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.325702926 seconds)
  (497/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.297637271 seconds)
  (498/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.327308666 seconds)
  (499/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.323785604 seconds)
  (500/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.316235392 seconds)
  (501/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.301975969 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.31427173 seconds)
  (503/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.301505983 seconds)
  (504/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.293491119 seconds)
  (505/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.298776914 seconds)
  (506/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.301327777 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.30276603 seconds)
  (508/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.292129123 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.313696603 seconds)
  (510/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.339463129 seconds)
  (511/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.338154993 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.331993694 seconds)
  (513/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.349536527 seconds)
  (514/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.328238383 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.315144334 seconds)
  (516/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.307526304 seconds)
  (517/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.376821519 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.295920477 seconds)
  (519/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.294817291 seconds)
  (520/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.373155326 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.310993757 seconds)
  (522/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.30984788 seconds)
  (523/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.36019455 seconds)
  (524/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.312115099 seconds)
  (525/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.321185045 seconds)
  (526/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.289377153 seconds)
  (527/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.299394107 seconds)
  (528/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.303551353 seconds)
  (529/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.303732972 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.334625282 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.32803809 seconds)
  (532/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.359361642 seconds)
  (533/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.355201666 seconds)
  (534/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.291954447 seconds)
  (535/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.310456421 seconds)
  (536/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.30536046 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.313255398 seconds)
  (538/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.29136282 seconds)
  (539/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.300304726 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.306719954 seconds)
  (541/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.305702419 seconds)
  (542/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.302614012 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.300239429 seconds)
  (544/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.301641045 seconds)
  (545/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.304977396 seconds)
  (546/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.328559973 seconds)
  (547/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.309342596 seconds)
  (548/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.306522025 seconds)
  (549/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.299522997 seconds)
  (550/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.310268785 seconds)
  (551/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.313338807 seconds)
  (552/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.304533728 seconds)
  (553/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.302612767 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.307328593 seconds)
  (555/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.306687676 seconds)
  (556/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.302079685 seconds)
  (557/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.500323725 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.311338821 seconds)
  (559/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.46296278 seconds)
  (560/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.318738801 seconds)
  (561/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.309768176 seconds)
  (562/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.311914132 seconds)
  (563/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.319413256 seconds)
  (564/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.315799667 seconds)
  (565/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.298282051 seconds)
  (566/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.461436129 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.33985329 seconds)
  (568/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.30280139 seconds)
  (569/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.339857249 seconds)
  (570/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.295680053 seconds)
  (571/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.313479832 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.334714659 seconds)
  (573/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.300670937 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.325077711 seconds)
  (575/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.41180229 seconds)
  (576/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.299475008 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.312241784 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.319379044 seconds)
  (579/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.30666108 seconds)
  (580/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.318547281 seconds)
  (581/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.324988528 seconds)
  (582/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.302483548 seconds)
  (583/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.319439798 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.316952233 seconds)
  (585/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.311131091 seconds)
  (586/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.311748938 seconds)
  (587/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.344791555 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.307965758 seconds)
  (589/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.291129064 seconds)
  (590/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.329748759 seconds)
  (591/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.300191167 seconds)
  (592/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.298052282 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.343965713 seconds)
  (594/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.309505187 seconds)
  (595/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.329111138 seconds)
  (596/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.31405161 seconds)
  (597/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.317566757 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.414429353 seconds)
  (599/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.301887129 seconds)
  (600/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.311820691 seconds)
  (601/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.325530647 seconds)
  (602/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.315175057 seconds)
  (603/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.306849664 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.317555414 seconds)
  (605/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.385714907 seconds)
  (606/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.307444026 seconds)
  (607/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.339269169 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.293343824 seconds)
  (609/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.309874168 seconds)
  (610/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.317226928 seconds)
  (611/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.329742715 seconds)
  (612/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.305217456 seconds)
  (613/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.301215646 seconds)
  (614/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.309913711 seconds)
  (615/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.365109009 seconds)
  (616/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.347957673 seconds)
  (617/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.343808432 seconds)
  (618/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.313476865 seconds)
  (619/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.306596596 seconds)
  (620/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.298089189 seconds)
  (621/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.333511866 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.302418844 seconds)
  (623/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.311378371 seconds)
  (624/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.294292096 seconds)
  (625/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.509834372 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.326293675 seconds)
  (627/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.306461875 seconds)
  (628/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.335897501 seconds)
  (629/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.327903201 seconds)
  (630/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.307616314 seconds)
  (631/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.503856663 seconds)
  (632/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.316463284 seconds)
  (633/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.310326854 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.321116619 seconds)
  (635/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.303013806 seconds)
  (636/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.378971422 seconds)
  (637/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.312871399 seconds)
  (638/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.355524027 seconds)
  (639/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.316176982 seconds)
  (640/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.295440514 seconds)
  (641/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.306445838 seconds)
  (642/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.459810946 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.294945495 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.306689496 seconds)
  (645/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.339167554 seconds)
  (646/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.361780567 seconds)
  (647/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.317230675 seconds)
  (648/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.299337286 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.3050514 seconds)
  (650/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.299558863 seconds)
  (651/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.307392657 seconds)
  (652/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.331131328 seconds)
  (653/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.339480593 seconds)
  (654/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.32271541 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.312297943 seconds)
  (656/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.326823901 seconds)
  (657/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.303672175 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.316793362 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.338944573 seconds)
  (660/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.30936206 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.397439316 seconds)
  (662/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.371778976 seconds)
  (663/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.349964939 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.316111495 seconds)
  (665/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.342121521 seconds)
  (666/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.301574996 seconds)
  (667/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.311371135 seconds)
  (668/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.324145602 seconds)
  (669/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.319614743 seconds)
  (670/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.376540659 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.316561083 seconds)
  (672/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.310893458 seconds)
  (673/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.300997566 seconds)
  (674/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.301168419 seconds)
  (675/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.330257406 seconds)
  (676/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.312964607 seconds)
  (677/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.303062922 seconds)
  (678/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.340354685 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.327934684 seconds)
  (680/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.327086717 seconds)
done (took 1581.317712309 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 38.966188458 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.44182514 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.770178983 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.001040978 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.464023168 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.623115266 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 43.017724764 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.388703448 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.090874098 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.653515701 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 34.665745227 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.605549095 seconds)
  done (took 434.968425858 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.616963844 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 35.586890028 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 36.597712322 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 35.171214722 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.997691322 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 38.289479434 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.046818915 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.69870615 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 36.323089229 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.965100906 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.135571392 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.026149491 seconds)
  done (took 444.993307813 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 37.392760085 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.406857798 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 37.819591091 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 36.003539909 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.995341467 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 38.079629278 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.798686517 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 35.21308555 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.367312636 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.703039068 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 37.119735152 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.558422466 seconds)
  done (took 451.933974092 seconds)
done (took 1334.176472242 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.268424984 seconds)
    (2/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.14409269 seconds)
    (3/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.110668127 seconds)
    (4/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.365586174 seconds)
    (5/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.157016277 seconds)
    (6/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.085203843 seconds)
    (7/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.166592225 seconds)
    (8/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 5.147040375 seconds)
    (9/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.314460089 seconds)
    (10/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.581883556 seconds)
    (11/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.724131925 seconds)
    (12/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.084386446 seconds)
    (13/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.059954598 seconds)
    (14/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 11.936407131 seconds)
    (15/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.126979013 seconds)
    (16/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.503262522 seconds)
    (17/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 9.200066683 seconds)
    (18/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.10810437 seconds)
    (19/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.080619328 seconds)
    (20/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.05828322 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.306724492 seconds)
    (22/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.413964454 seconds)
    (23/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.320418938 seconds)
    (24/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.2034196 seconds)
    (25/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.527685349 seconds)
    (26/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.248331021 seconds)
    (27/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 5.313594444 seconds)
    (28/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.091330542 seconds)
    (29/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.071569438 seconds)
    (30/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 14.252699179 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.21086137 seconds)
    (32/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.176367907 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.407534372 seconds)
    (34/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.145204647 seconds)
    (35/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.273483994 seconds)
    (36/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.305592428 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.088967016 seconds)
    (38/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.269324383 seconds)
    (39/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 5.146525673 seconds)
    (40/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.057903335 seconds)
    (41/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 12.263666904 seconds)
    (42/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.308903908 seconds)
    (43/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.360233471 seconds)
    (44/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.170854603 seconds)
    (45/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.675213859 seconds)
    (46/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.340660932 seconds)
    (47/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.299912788 seconds)
    (48/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.078036952 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.317064898 seconds)
    (50/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.090518566 seconds)
    (51/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.250554376 seconds)
    (52/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.263112653 seconds)
    (53/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.057829684 seconds)
    (54/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 5.538185127 seconds)
    (55/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.042650633 seconds)
    (56/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 8.694535397 seconds)
    (57/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.064702554 seconds)
    (58/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.597255215 seconds)
    (59/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.072121417 seconds)
    (60/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 12.359379249 seconds)
    (61/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.217368682 seconds)
    (62/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.327554058 seconds)
    (63/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.130808221 seconds)
    (64/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.311988522 seconds)
    (65/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.387749241 seconds)
    (66/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.157743858 seconds)
    (67/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 5.255269364 seconds)
    (68/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.089082092 seconds)
    (69/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.120183096 seconds)
    (70/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.147957819 seconds)
    (71/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.72153203 seconds)
    (72/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.314595339 seconds)
    (73/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.285841454 seconds)
    (74/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.175030273 seconds)
    (75/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.258113569 seconds)
    (76/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.084156325 seconds)
    (77/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.0659801 seconds)
    (78/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 10.266495101 seconds)
    (79/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 5.374637213 seconds)
    (80/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.314591951 seconds)
    (81/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.390773891 seconds)
    (82/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.876640487 seconds)
    (83/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.192998996 seconds)
    (84/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 9.72833353 seconds)
    (85/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.935512473 seconds)
    (86/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.068632968 seconds)
    (87/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.093306111 seconds)
    (88/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.453567154 seconds)
    (89/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.085403531 seconds)
    (90/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.430737637 seconds)
    (91/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.204414225 seconds)
    (92/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.133080494 seconds)
    (93/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.66589277 seconds)
    (94/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.65911762 seconds)
    (95/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.128200035 seconds)
    (96/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.142605371 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.311330181 seconds)
    (98/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 5.858502099 seconds)
    (99/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.078436816 seconds)
    (100/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.675636155 seconds)
    (101/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.081154925 seconds)
    (102/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.171281771 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.309766701 seconds)
    (104/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.090523668 seconds)
    (105/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.21287044 seconds)
    (106/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.651131262 seconds)
    (107/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.307175681 seconds)
    (108/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.109685413 seconds)
    (109/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.12296318 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.338403501 seconds)
    (111/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.358720504 seconds)
    (112/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.205606713 seconds)
    (113/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.064440676 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 12.519168015 seconds)
    (115/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.065514596 seconds)
    (116/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.762291882 seconds)
    (117/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.078846942 seconds)
    (118/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.398774344 seconds)
    (119/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.108579492 seconds)
    (120/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.063315523 seconds)
    (121/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 16.640111237 seconds)
    (122/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.423972889 seconds)
    (123/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.082326058 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.060913968 seconds)
    (125/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.891463159 seconds)
    (126/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.417972842 seconds)
    (127/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.314003875 seconds)
    (128/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.076897767 seconds)
    (129/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.23906809 seconds)
    (130/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.111882672 seconds)
    (131/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.668374231 seconds)
    (132/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.420741858 seconds)
    (133/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.272045831 seconds)
    (134/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.071441582 seconds)
    (135/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 9.163069868 seconds)
    (136/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.296242617 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.321220536 seconds)
    (138/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.157405656 seconds)
    (139/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.168234037 seconds)
    (140/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.344629177 seconds)
    (141/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 5.301784979 seconds)
    (142/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.313413139 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.323539414 seconds)
    (144/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 5.745761597 seconds)
    (145/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.27864447 seconds)
    (146/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.083302127 seconds)
    (147/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.272319778 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.050552411 seconds)
    (149/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.082509861 seconds)
    (150/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 10.26341829 seconds)
    (151/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.091885132 seconds)
    (152/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.319290047 seconds)
    (153/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.673687727 seconds)
    (154/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.104536421 seconds)
    (155/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 10.057972822 seconds)
    (156/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.858690812 seconds)
    (157/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.069859995 seconds)
    (158/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 14.577776969 seconds)
    (159/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.243378381 seconds)
    (160/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 5.729084577 seconds)
    (161/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.089837386 seconds)
    (162/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.343443163 seconds)
    (163/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.064189237 seconds)
    (164/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 6.743084299 seconds)
    (165/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.149564762 seconds)
    (166/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.677013978 seconds)
    (167/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.177827201 seconds)
    (168/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.406270002 seconds)
    (169/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.36708007 seconds)
    (170/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.154167332 seconds)
    (171/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.161491699 seconds)
    (172/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.301296884 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.084226007 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.070150043 seconds)
    (175/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 6.119277002 seconds)
    (176/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.149364351 seconds)
    (177/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.243793031 seconds)
    (178/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.06957428 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 14.563839734 seconds)
    (180/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 9.982377836 seconds)
    (181/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.475251014 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.332089049 seconds)
    (183/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.32886194 seconds)
    (184/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.243660626 seconds)
    (185/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.082870742 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.397305065 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.463246575 seconds)
    (188/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.314388395 seconds)
    (189/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.451757837 seconds)
    (190/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.698169634 seconds)
    (191/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.436585354 seconds)
    (192/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.143000897 seconds)
    (193/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.348414039 seconds)
    (194/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.57730872 seconds)
    (195/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.303552401 seconds)
    (196/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.079546007 seconds)
    (197/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.44335123 seconds)
    (198/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.29515741 seconds)
    (199/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.319492891 seconds)
    (200/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.187972305 seconds)
    (201/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.409068539 seconds)
    (202/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.198761234 seconds)
    (203/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.288381961 seconds)
    (204/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.069133855 seconds)
    (205/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.360812761 seconds)
    (206/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.154190357 seconds)
    (207/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.574932872 seconds)
    (208/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.105358414 seconds)
    (209/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.455079429 seconds)
    (210/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.319655998 seconds)
    (211/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.294099536 seconds)
    (212/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.170514937 seconds)
    (213/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.20687167 seconds)
    (214/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.150936102 seconds)
    (215/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.304789262 seconds)
    (216/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.475692202 seconds)
    (217/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.929486042 seconds)
    (218/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.37754319 seconds)
    (219/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.078495132 seconds)
    (220/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 6.07263594 seconds)
    (221/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.449579514 seconds)
    (222/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.331241479 seconds)
    (223/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.187888698 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.343180397 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.189976765 seconds)
    (226/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.313566454 seconds)
    (227/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.074947608 seconds)
    (228/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.714565236 seconds)
    (229/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.303274573 seconds)
    (230/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.343017377 seconds)
    (231/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.156298429 seconds)
    (232/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 5.189704263 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.293953611 seconds)
    (234/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.364387736 seconds)
    (235/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.548123753 seconds)
    (236/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.662246928 seconds)
    (237/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.263256526 seconds)
    (238/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.280359755 seconds)
    (239/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.165011977 seconds)
    (240/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.099292959 seconds)
    (241/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.164688598 seconds)
    (242/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.456368728 seconds)
    (243/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.141913195 seconds)
    (244/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.435970078 seconds)
    (245/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.169163484 seconds)
    (246/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.210376621 seconds)
    (247/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.069923013 seconds)
    (248/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.077434094 seconds)
    (249/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 12.322923841 seconds)
    (250/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.325755586 seconds)
    (251/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.250260762 seconds)
    (252/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.25037912 seconds)
    (253/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.50112492 seconds)
    (254/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.260699618 seconds)
    (255/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 8.871256872 seconds)
    (256/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.338084972 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 5.186132236 seconds)
    (258/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.094120788 seconds)
    (259/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.152533254 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 10.061804848 seconds)
    (261/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 5.829407138 seconds)
    (262/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.133557477 seconds)
    (263/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.45677047 seconds)
    (264/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.187077353 seconds)
    (265/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.074970659 seconds)
    (266/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.229149037 seconds)
    (267/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 5.148593278 seconds)
    (268/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.081285726 seconds)
    (269/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.087152557 seconds)
    (270/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 14.428013973 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.616664404 seconds)
    (272/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.263935607 seconds)
    (273/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.150598027 seconds)
    (274/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.24245436 seconds)
    (275/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.344920561 seconds)
    (276/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.206779358 seconds)
    (277/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.162437833 seconds)
    (278/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.118590284 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 5.307440633 seconds)
    (280/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 9.70857073 seconds)
    (281/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.988936061 seconds)
    (282/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.315191705 seconds)
    (283/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.428251521 seconds)
    (284/434) benchmarking ("sort", "BigInt", 0)...
    done (took 10.068367088 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.034037402 seconds)
    (286/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 6.374195926 seconds)
    (287/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.31757078 seconds)
    (288/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.13518976 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 9.801443226 seconds)
    (290/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 6.45656324 seconds)
    (291/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.35806058 seconds)
    (292/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.240115793 seconds)
    (293/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.25040636 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.40960901 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.149611585 seconds)
    (296/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.120517009 seconds)
    (297/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.417281158 seconds)
    (298/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.121077934 seconds)
    (299/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 5.675039327 seconds)
    (300/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.294312313 seconds)
    (301/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.065050419 seconds)
    (302/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 9.196169123 seconds)
    (303/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.147096406 seconds)
    (304/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 10.071043462 seconds)
    (305/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 9.80967932 seconds)
    (306/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.146476158 seconds)
    (307/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.315022665 seconds)
    (308/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.134621705 seconds)
    (309/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.245466831 seconds)
    (310/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.088072581 seconds)
    (311/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.075843113 seconds)
    (312/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 5.151401244 seconds)
    (313/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.39718197 seconds)
    (314/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.320105235 seconds)
    (315/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.165804892 seconds)
    (316/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.081242167 seconds)
    (317/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.419937898 seconds)
    (318/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.579887009 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.068373143 seconds)
    (320/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 9.16893014 seconds)
    (321/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.065428008 seconds)
    (322/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.257550604 seconds)
    (323/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.092189769 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.149185099 seconds)
    (325/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.059911374 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 17.044252089 seconds)
    (327/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 11.862827526 seconds)
    (328/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.308727278 seconds)
    (329/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.202142838 seconds)
    (330/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 13.074295773 seconds)
    (331/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.153139948 seconds)
    (332/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.182955923 seconds)
    (333/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.292447057 seconds)
    (334/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.375875707 seconds)
    (335/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.203984734 seconds)
    (336/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.081067212 seconds)
    (337/434) benchmarking ("sort", "Float32", 0)...
    done (took 5.765960115 seconds)
    (338/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 10.074317545 seconds)
    (339/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 12.567041996 seconds)
    (340/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.493558584 seconds)
    (341/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 5.147367955 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.268863741 seconds)
    (343/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 6.299747034 seconds)
    (344/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.143551479 seconds)
    (345/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.134968973 seconds)
    (346/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.14515324 seconds)
    (347/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.448038823 seconds)
    (348/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.399554381 seconds)
    (349/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.157818632 seconds)
    (350/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.201375301 seconds)
    (351/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.14797481 seconds)
    (352/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.183883689 seconds)
    (353/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.26908077 seconds)
    (354/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.10238497 seconds)
    (355/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.309313283 seconds)
    (356/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.092726589 seconds)
    (357/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.435955006 seconds)
    (358/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.128673481 seconds)
    (359/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.13950189 seconds)
    (360/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 12.244828156 seconds)
    (361/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 10.054170985 seconds)
    (362/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.519725718 seconds)
    (363/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.130844862 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 5.418530831 seconds)
    (365/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.550589562 seconds)
    (366/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.215990202 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 5.99557806 seconds)
    (368/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.540581351 seconds)
    (369/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.07130175 seconds)
    (370/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 5.741779984 seconds)
    (371/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.065829736 seconds)
    (372/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.511862332 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.145707865 seconds)
    (374/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.311023706 seconds)
    (375/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.497738993 seconds)
    (376/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.126512776 seconds)
    (377/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.054663296 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.949291157 seconds)
    (379/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.270384109 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.250097032 seconds)
    (381/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.304881403 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.058323872 seconds)
    (383/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.696419634 seconds)
    (384/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.308179475 seconds)
    (385/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.493569193 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.481886421 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.418695089 seconds)
    (388/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.245520285 seconds)
    (389/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.332434748 seconds)
    (390/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.120880687 seconds)
    (391/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.298980449 seconds)
    (392/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.075473924 seconds)
    (393/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 9.546074301 seconds)
    (394/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.075119306 seconds)
    (395/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.081076414 seconds)
    (396/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.336204777 seconds)
    (397/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.075067113 seconds)
    (398/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.06593845 seconds)
    (399/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.715736077 seconds)
    (400/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.317944606 seconds)
    (401/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.273392511 seconds)
    (402/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 10.080693764 seconds)
    (403/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 16.596471732 seconds)
    (404/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.874523303 seconds)
    (405/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.503813676 seconds)
    (406/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.256744302 seconds)
    (407/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 5.338029436 seconds)
    (408/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.567839434 seconds)
    (409/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.130154508 seconds)
    (410/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.241643876 seconds)
    (411/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.238454879 seconds)
    (412/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.392557154 seconds)
    (413/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.096953243 seconds)
    (414/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.125558451 seconds)
    (415/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.257984236 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.29401409 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.069078893 seconds)
    (418/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 5.31269962 seconds)
    (419/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.270293047 seconds)
    (420/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.362851021 seconds)
    (421/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.139523173 seconds)
    (422/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.307117219 seconds)
    (423/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.069498051 seconds)
    (424/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.647895833 seconds)
    (425/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.244290065 seconds)
    (426/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.290254583 seconds)
    (427/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.585256642 seconds)
    (428/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.462993728 seconds)
    (429/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.408769107 seconds)
    (430/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.265334958 seconds)
    (431/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.312266643 seconds)
    (432/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.267769797 seconds)
    (433/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.067899444 seconds)
    (434/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 13.29988355 seconds)
  done (took 2800.353487095 seconds)
done (took 2805.423255394 seconds)
SAVING RESULT...
DONE!
