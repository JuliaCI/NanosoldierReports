cset: moving following pidspec: 62633
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.937258367 seconds)
loading group "shootout"... done (took 0.886635346 seconds)
loading group "string"... done (took 0.253175166 seconds)
loading group "linalg"... done (took 3.412333913 seconds)
loading group "parallel"... done (took 0.023659052 seconds)
loading group "find"... done (took 1.304280376 seconds)
loading group "tuple"... done (took 0.772232702 seconds)
loading group "union"... done (took 3.326475804 seconds)
loading group "dates"... done (took 0.164420655 seconds)
loading group "micro"... done (took 0.062131843 seconds)
loading group "simd"... done (took 0.377196952 seconds)
loading group "io"... done (took 1.45520403 seconds)
loading group "random"... done (took 2.656290267 seconds)
loading group "problem"... done (took 1.258963993 seconds)
loading group "array"... done (took 4.935549587 seconds)
loading group "misc"... done (took 1.059086932 seconds)
loading group "scalar"... done (took 3.671674359 seconds)
loading group "sort"... done (took 0.327890534 seconds)
loading group "sparse"... done (took 3.796301593 seconds)
loading group "collection"... done (took 6.462405443 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.589153533 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.08090148 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.276983496 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.088322389 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.297475474 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.089021087 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.09657015 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.077063192 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.087040138 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.172819805 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.232187357 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.418677233 seconds)
done (took 5.317751084 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.27146426 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034177357 seconds)
    (2/2) benchmarking "String"...
    done (took 0.133856782 seconds)
  done (took 0.839637972 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.146349486 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.017679431 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025461585 seconds)
  done (took 0.855886774 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.022445491 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.103156106 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.024644886 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.025103149 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.025171631 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024504314 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.024594574 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.023872848 seconds)
  done (took 0.912558466 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.030162842 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.026344745 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.024260505 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.026086678 seconds)
  done (took 0.771983714 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023188226 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.088062813 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.022727929 seconds)
    (4/4) benchmarking "different"...
    done (took 0.022698661 seconds)
  done (took 0.816528082 seconds)
done (took 5.169792409 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.214101544 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.818093437 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.06363452 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.192077041 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.382007033 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.316845156 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.08144266 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.251458526 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.157590996 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.034115049 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.189851422 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.044486237 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.579779456 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.48124499 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.032559206 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.160860693 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.609994035 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.04126407 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.074912109 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.311255335 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.042131041 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.04291999 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.049283111 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.029346543 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.186065838 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.139471161 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.615952926 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.068273568 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.029240285 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.14270268 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.031349765 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03444481 seconds)
  done (took 10.159660023 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.157525181 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.155402212 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026713368 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.06301402 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.052876488 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.027383176 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.0325337 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.026148144 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.048141897 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.096588999 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.050755247 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.167097312 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.023880607 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.026706894 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.145516044 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.123725462 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.039383256 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.041289666 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.024686167 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.040628366 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.05409119 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.037433672 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.039955758 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.037017073 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.074846185 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.093443922 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044141628 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.067479332 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.023821897 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.038081259 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.055871932 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.067383016 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.02560071 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.023977074 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.071420196 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043539803 seconds)
  done (took 2.871762257 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.851521087 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.058130551 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.14978752 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.141873257 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0696046 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.054043183 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.192160265 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.086020808 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.060659082 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027790862 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.225554489 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.670681876 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.180328449 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.192972525 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.030186893 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.196319442 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.950627421 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.977664827 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027044591 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.027442796 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.145256818 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029012916 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.188233027 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.024812267 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.147909711 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.865472687 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.028720927 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027615567 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.059467732 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.154810497 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023977619 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.104553577 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.055567341 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028345125 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.594609905 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.024980896 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.022855883 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046228198 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.056066556 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025075746 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.025335579 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.037208996 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.023305907 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.078295723 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.038142449 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.56364975 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.0294181 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.743216852 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.896774554 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.034601266 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.032306656 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065542975 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.022998389 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027433692 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.585553487 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.114343798 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.026048434 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.269953815 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.027032427 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02806254 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.028115198 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.062718812 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026020569 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027907714 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.030589689 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.045481451 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.051634148 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033475119 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.046699437 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.023647031 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025686916 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023639797 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.41843296 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.030642777 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.028141915 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.023579184 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030482413 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02670844 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.026137311 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.071012877 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.05327403 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.051710917 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.02973389 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026860088 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.026230769 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.527071695 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.100737532 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025995572 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.0275316 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.52229123 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.02282908 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025507231 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.028134516 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.047391882 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026305456 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.022733915 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062102319 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027486639 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.137702036 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.539355329 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.026587891 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.022622276 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.660876768 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.027123742 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057507796 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.082569174 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025704101 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.063856777 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.02639105 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.022772894 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.029607206 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.022264512 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.026965486 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.023668461 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024277423 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.023752486 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.026178047 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.026837502 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0256685 seconds)
  done (took 21.188959734 seconds)
done (took 36.729037503 seconds)
(4/20) benchmarking "parallel"...
done (took 0.81662484 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.230108143 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.055736692 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.023102181 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.177222032 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.04781984 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.145906574 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.190972515 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.134849327 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.049154041 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.049929926 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.049913281 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.195352983 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.207430812 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.050027256 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.127850938 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.207391366 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.050835432 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.022739654 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.049362978 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.051604629 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.051557516 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022893054 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.050626213 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.051538097 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.126145753 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.050189273 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.021658962 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.129007093 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.0516352 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.130733029 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.051330814 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.050317795 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.051600787 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.129870234 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.051995981 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.1274155 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.022235192 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.05230091 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.052138278 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.052906756 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.052160965 seconds)
  done (took 4.287467052 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.049730054 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.042762182 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046774003 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.0206534 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031379111 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.043488732 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020567867 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.043354832 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.047660496 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.043110214 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.043540523 seconds)
  done (took 1.267793423 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.043015019 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.045362284 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046239647 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020521774 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.033856746 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044232611 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.019938772 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.04471281 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.046447008 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044258486 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.045033811 seconds)
  done (took 1.213104754 seconds)
done (took 7.526179395 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.164399857 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.130107266 seconds)
  done (took 1.069961678 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.593024144 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.241455249 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.139186618 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.265511783 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.133570057 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.165662443 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.413822708 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.168494044 seconds)
  done (took 6.94702332 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.085332314 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.152966663 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.028035344 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.026446788 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.026942336 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.027365749 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.028974169 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.027342248 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.026082543 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.029238518 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.028673255 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.026409793 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.026783694 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.028034971 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.025818183 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.026606138 seconds)
  done (took 1.537217999 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.030796775 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.029899971 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.031515277 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019954678 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.032171772 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.030215386 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.032058327 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.032605902 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.031588791 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.031167332 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.028972456 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.031866961 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.030803062 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.029198053 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.031904274 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019605603 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.031421399 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.030664087 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.032085227 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.031700186 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.030401462 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.028011872 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.032236016 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.029228241 seconds)
  done (took 1.509886244 seconds)
done (took 11.830812907 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.152363759 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.032301311 seconds)
  done (took 0.976968324 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.132610569 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.133392337 seconds)
  done (took 1.05696634 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029501443 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.017691954 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.035278889 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.026930626 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.018514695 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.018200006 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.03430653 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.018387682 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.018367852 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.018463589 seconds)
  done (took 1.028849142 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019878536 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.025155266 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.023136152 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.021697362 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023509904 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.01903278 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021305041 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.01956911 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.025164225 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.017905024 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.022484371 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.041551196 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.022273469 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.04293267 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022217856 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.02222274 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023553902 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021404171 seconds)
  done (took 1.222958002 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018334554 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.019287318 seconds)
  done (took 0.836908729 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020674475 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017938162 seconds)
    (3/7) benchmarking "month"...
    done (took 0.020381584 seconds)
    (4/7) benchmarking "year"...
    done (took 0.02016471 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.018042537 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.017805527 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018372286 seconds)
  done (took 0.924114743 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.417758971 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.094159281 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342846639 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.026416523 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.040599814 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.240767881 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.02264269 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.027918594 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.027801141 seconds)
  done (took 2.025165268 seconds)
done (took 8.863167048 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.042063207 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.153870589 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.161334167 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.491184641 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.036932298 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.026071371 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.055524578 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.243719634 seconds)
done (took 2.015004573 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.498758664 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.382965165 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.216493418 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.027376788 seconds)
  done (took 2.436718469 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338254397 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.152750409 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.032988583 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.025759457 seconds)
  done (took 1.368626795 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022920679 seconds)
    (2/2) benchmarking "read"...
    done (took 0.030539191 seconds)
  done (took 0.870008835 seconds)
done (took 5.988596083 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031210456 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.018771861 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.026284469 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.021054031 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.020718458 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.019989687 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019997666 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020988524 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.019227294 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.021447165 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.021060891 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020827988 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020522813 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020557025 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.020102064 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020543494 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018243275 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.020195095 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020388334 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020595858 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01840003 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020877713 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.020582896 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.021365662 seconds)
  done (took 1.295982921 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.037085362 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.022307189 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.023257564 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.023863827 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.02459045 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.024134612 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.023849286 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.023017403 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.024297792 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.023404193 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.025097032 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.025610695 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.024026368 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.026027671 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024155969 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.025438089 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.024549045 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023269631 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022996122 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.025234495 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.024919107 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02433238 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.025751833 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025370744 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.025919208 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025760244 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.023833287 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.023895115 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024512859 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.024767428 seconds)
  done (took 1.541012533 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.024130943 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.017067488 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.017435104 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.029481382 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.017481012 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.017494754 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018366171 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.017298823 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017755696 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.018730886 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.018313234 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.017374823 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.018298224 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.017260227 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017439998 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017913848 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.02353362 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.041026876 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017529999 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.017225591 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.023024943 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.017259881 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016923425 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016997346 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.018074827 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.017339326 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.017077136 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017481991 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.016965981 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017826599 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.01718244 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.022427661 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.024413468 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017922455 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.029682361 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.023545828 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.017874416 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.024806523 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.018510563 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.017388179 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.017258296 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.017225002 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.017456972 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.017645027 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.030000674 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017889971 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018956972 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.018255201 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.017979783 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.017492368 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017687822 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019397251 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.024462328 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019226775 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.017786171 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019231552 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.017707356 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.018712613 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.017934934 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.017599469 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.017578969 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.022503524 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019085603 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018406815 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.042764882 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019196577 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.030273624 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.01781429 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.01820606 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022547385 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.018040074 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.039798849 seconds)
  done (took 2.267174839 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028646237 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.027881888 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.037895457 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.028477311 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02088897 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017947189 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021622887 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01793052 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028492698 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.022308515 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018617031 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.02181004 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.028608546 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021871006 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019026735 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.028602133 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022545743 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021530431 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018601704 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022284138 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019606836 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.0218436 seconds)
  done (took 1.333084505 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.10876174 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.024850641 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.07067971 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.028237192 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.027319039 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.028408484 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.024706962 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024590518 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024839801 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025212071 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025316031 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024561537 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.026516934 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025522024 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025366787 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.024793254 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024422555 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.024574496 seconds)
  done (took 1.40743933 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.035080649 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.023345336 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.053673275 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024158597 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.023827468 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.023274511 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027872696 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027762837 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.023529193 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.024908995 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028432858 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024036206 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.024104302 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02484595 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024399877 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.02502366 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.024189441 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024907911 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.028397084 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.02825914 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.028354203 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.028607421 seconds)
  done (took 1.411822461 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03809588 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022794878 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.040884495 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.024041263 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016747648 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.016546658 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.023400906 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.022176983 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.023370687 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.021707832 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022485277 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017508544 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.025996067 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023774495 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.026297495 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024265491 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023672354 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023866278 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022791168 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017621766 seconds)
  done (took 1.289620037 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.13660448 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019466499 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019102022 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02405036 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019312171 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019432756 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024517625 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.01943572 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019532529 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.046047908 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.020141345 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019721144 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024355249 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022277892 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019304285 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024423255 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02465017 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024799674 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020161669 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020042802 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.045850265 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019828657 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024698153 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.019400876 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.019536699 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.019774456 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.020010948 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02294808 seconds)
  done (took 1.564056782 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03990612 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020584269 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.01786593 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.022297226 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.022116559 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.035274052 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.021968873 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.021572737 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.019235809 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.016842956 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.019172072 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.019003369 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.019066038 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.030041244 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.019459181 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019674542 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.03133634 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.021874909 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.035851015 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.036421867 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.020596243 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.031783632 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.020309726 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017999981 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.03614597 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.020434337 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022290727 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023556399 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020629466 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018338825 seconds)
  done (took 1.526413107 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.031101083 seconds)
    (2/2) benchmarking "in"...
    done (took 0.030012262 seconds)
  done (took 0.873452538 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018981413 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.037232431 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.017091138 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.032337418 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.027636786 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022597564 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027637908 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027649279 seconds)
  done (took 1.03489658 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.134066163 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.164604663 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019323584 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019493296 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.132258035 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.092825895 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.145789151 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.032628397 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033387018 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.021842354 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.01910077 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.14652474 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018919987 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.034195191 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020165264 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.029623299 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027002261 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.040033801 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.034516142 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01790279 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.034317803 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020168884 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.019108635 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020157558 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.020600832 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.027866641 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.037699962 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.03379615 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028953299 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.017324805 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.040299704 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018245547 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.019067303 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029073435 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.133136296 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.018024392 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.059565976 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.017636825 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022498283 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01705276 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.031047242 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.041716116 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.034799088 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.039331635 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.019981349 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.02052925 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018202172 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020317715 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02330515 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.028670202 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.018163941 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026242776 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.017756766 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.01998926 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.030219701 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.018083502 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.022962482 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.028386893 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.032904801 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.029872313 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.031877994 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.034359139 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.026872132 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.026896529 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.018111595 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.039928091 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019633978 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.032816918 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.035970943 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019562649 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.032843489 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.017746311 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.016755738 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.018046034 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.053956789 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019720304 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019098947 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.01810473 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018366799 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.01968075 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.029353465 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023605603 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027067379 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021682032 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.03663673 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.028561634 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.017991582 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.026140915 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.039638796 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.023522101 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018118179 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.037701637 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.022592268 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.017726588 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.037766259 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.029776309 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019599624 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.018198325 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.021807405 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032598974 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019493545 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.017072908 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027627799 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019180355 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.13307384 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.023555776 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027738148 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.018368075 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.030725117 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.025839138 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020757032 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.017722022 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.024616155 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019821432 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018131839 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.029801476 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018746122 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.035994217 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.026890982 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.03498022 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.036246377 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.031177105 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.037664511 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.018586778 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.017745728 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.039916409 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.029501042 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020150105 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.039925248 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018663233 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.031487663 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.018999467 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020347113 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.02885796 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.017389304 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020136229 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018701697 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.025409258 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020187601 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020306195 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.025794301 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.028790856 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.033051899 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019965495 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.028857099 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019354248 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.037942986 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.030533082 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.025242323 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022818689 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020073043 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.032305933 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.026542074 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.028501505 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.01805616 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019398846 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.01861545 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.031612834 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030130727 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020546504 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.029291285 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.024992746 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020018848 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.018996522 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020417443 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.023089093 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.022528914 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.01928973 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027616175 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.029169971 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.035460454 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.027155609 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.029539177 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018238559 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018540285 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020680468 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018478919 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.024282512 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.029548458 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.037126332 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.032453381 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.042701241 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019148495 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.030363625 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021074557 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.039030066 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.034489754 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.02038789 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02424647 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017811199 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020706021 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.029534413 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031852908 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.03478247 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.035977828 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.024757722 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.024235398 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.018732191 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.036478027 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019306462 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027913392 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.029396279 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.025631372 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.018801329 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021289695 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.030188896 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.025383628 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.020331843 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.03829428 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.027894637 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019057111 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.035869586 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.019435779 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.032025431 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019177067 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.024099288 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.025660873 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021406243 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.030213485 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.03738564 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018295707 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019402833 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.037356543 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.021233263 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02095796 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.028437014 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.036835209 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.024886126 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.028160839 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.031086201 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.03079543 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.177196064 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.031285294 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.019523211 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.02996162 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021592462 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.032799701 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018704842 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.040911943 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.01775264 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.037110937 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019177475 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.031893983 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.018809554 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.029699077 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019368823 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.039185125 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.019973241 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019343656 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.031563949 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017107975 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.028188759 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.017370255 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.024095938 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.025802162 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.028451522 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.019246545 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027945506 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018860595 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.027519144 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.023445011 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.027347439 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.027811808 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.023591891 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.017425515 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.027274094 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030425929 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.028037632 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.019643094 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.019477073 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018353354 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.02866026 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019303182 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.018622915 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027001102 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.023751598 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.024167212 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018836268 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019070032 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.018923924 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.027152991 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.028225778 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037795291 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027571567 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.026564479 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.028472922 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017470862 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.035485536 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017924795 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.026878677 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.016900376 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.024038706 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.027271723 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.017431068 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039358721 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.019421822 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.027149112 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031896676 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028165978 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.023115811 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.038510684 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021039955 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.026218797 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.026028854 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.023130325 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.025687625 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019194469 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.026882699 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.028676954 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.030165151 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018461546 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.026749024 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028317385 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01926427 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.025831644 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.018980707 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.027140638 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019395357 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.016802604 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.023541975 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030787723 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.024427361 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.024545042 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.018348707 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.017052483 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.018276787 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.025621268 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.023827218 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.028143846 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035420934 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.017202835 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.018840087 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.017932454 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.023032697 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.039184847 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.029266391 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.027302464 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.0240091 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.017241037 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.019490253 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.019531908 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.018220447 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021364444 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.017330375 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.017861494 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.030327732 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.01970215 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.023500564 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018638408 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.019754179 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.030462 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.023175643 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.018944121 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.026394964 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.018089833 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.024674779 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.017681129 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020047941 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.024360473 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.018262636 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.023618933 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.030979809 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.038237705 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.027012603 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.02857115 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019322651 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.026875602 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.035450867 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.026776509 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018957486 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.028418886 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.01768518 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.038974433 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.028889695 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028044495 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028989437 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.018882557 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.03795618 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.024024172 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.02968379 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.036028037 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.0194514 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.027604423 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017939685 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.036004422 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.024469023 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018151058 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.027599685 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027366901 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.02579553 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.03177694 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019594847 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.028977079 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.024413673 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.023499665 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020718798 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020269519 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.028780941 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.037301287 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019903087 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.025064538 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.027698662 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.028203846 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.02464345 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032938645 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.028270884 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019912352 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020359914 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.023148466 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.019341422 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.031730833 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017958583 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.022477476 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022337538 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017426318 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.02480861 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.035621372 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.028798532 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.028825933 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017823352 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017671425 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.037876678 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.023159866 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.022476095 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.027665274 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.030555831 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033013083 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.029849591 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.038947339 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019238493 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.025971828 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032868642 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019875634 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.018201393 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.022709568 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020301672 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.029247825 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030204819 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.027212696 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.02092304 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.026963457 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.033813211 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020104984 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.024219918 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.025275677 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018782619 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.030153605 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.028276952 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.028838671 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020432935 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.01826339 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.022282247 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.028331565 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.026664573 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.028322974 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019700233 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.028350384 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.03466566 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.027251579 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022872474 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.018802297 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022774455 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.029800307 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.026155698 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018611651 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.024265107 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.023655986 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.028770442 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.029891579 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.02495654 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018621999 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.038112111 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.028948152 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.029465854 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020590697 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.0208339 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019290849 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018738795 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031781515 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.018863077 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020825597 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.024772538 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.021070272 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.040376702 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.028877535 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.038011391 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020127237 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.024644279 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018826974 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030059702 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.024836908 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019006196 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.031611507 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018329599 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.037202311 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.033167028 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.027344359 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018885707 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.025902089 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.029418261 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.037266336 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029864737 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.028449156 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022672168 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029707407 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.170711845 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.031113101 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.018195739 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017668415 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.030439533 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02932575 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033067093 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018386899 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.030733467 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020485385 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.029288886 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.028896998 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.019966344 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020070488 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.01986164 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029771212 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.024361801 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.029314373 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.024636148 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.037558641 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019157231 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.030175014 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.027895596 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.030590992 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.034158763 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031846469 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.027867864 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.018152553 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026516405 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.027837573 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019000864 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.024418795 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020746745 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.041833894 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019147473 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019110169 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033429454 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025210711 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.01798433 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.025047926 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.024062166 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.029398196 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.018457318 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.029086977 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.022558976 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.018142975 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.022969026 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.02329389 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.016820299 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.017767815 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.018112551 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029219496 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.023705345 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.017980657 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03843087 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.018732188 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.027455534 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029360994 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.02580826 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019223345 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.0169001 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018523299 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.032919303 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.035941517 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022471044 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.027217865 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019237507 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.028809072 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.01728927 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.028180927 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.026982891 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02720608 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.017438659 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017871826 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.034897294 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035233135 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.023797898 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.037556859 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.028780581 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.019661419 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.04284149 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.028621985 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01850619 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02997624 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019658284 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017193485 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.017124618 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019405119 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.031293164 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017780673 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.01999177 seconds)
  done (took 17.232131944 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.062930883 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018604621 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.017131693 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017207057 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024824331 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018743432 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017131607 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018791445 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018976067 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.020114778 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.0178887 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017901056 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023541369 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034179379 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025892542 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021408318 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017451182 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01880887 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017361601 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018722606 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.024049932 seconds)
  done (took 1.342503007 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020062526 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021427381 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021258254 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021548491 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02053566 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017092174 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021442611 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017929063 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021803731 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017931393 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021819789 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017654727 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.018470892 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018223672 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018113234 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019568186 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.022168956 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021506323 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.018153351 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021881356 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019608167 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.021965281 seconds)
  done (took 1.296797232 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018528048 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017802988 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.027316238 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.016989107 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.016562568 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019810051 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.017086062 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.02306784 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.023274691 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.022797241 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.027749607 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.018034286 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.017181464 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.024688872 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.017361937 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.017917886 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.066236291 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.018265572 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.018572243 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.017681689 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020061529 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.028485116 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.01759011 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.017626892 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.022630958 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020291036 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.017499154 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.019980252 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.018099346 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.02294071 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.018241665 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.017023747 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.026819991 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025602661 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.021608867 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.022199755 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.018033512 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.017245305 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.016557873 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.016947002 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026089109 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.01831863 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.017168467 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.01820776 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.027125303 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017279685 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.017278322 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.027602662 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.017279862 seconds)
  done (took 1.895555584 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.029280757 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.076177074 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.024190263 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.057252088 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.030335316 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.023169147 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.024127543 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.060351425 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.018940613 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.019409881 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.03160613 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.032477241 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020813334 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.022012688 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.025902169 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020369982 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.021071914 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019873808 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.022827554 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.020222636 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.023207202 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.025995787 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.031688346 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.03187455 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.021249516 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.019764812 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.020028736 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.021895106 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.031625444 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.023701042 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.022224544 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.022340633 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.031389436 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.026769001 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020434037 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.020411418 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.032416017 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.020774821 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.020761464 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.018723615 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.019735532 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.021505525 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.025884857 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.032915498 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020812656 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.026680686 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.020875607 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.018919529 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.032268189 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.020695772 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.02451919 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.03339845 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.02184191 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.020643952 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.021576645 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.031716727 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.020908995 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.019516527 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.020786718 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.031450411 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.019096718 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021747048 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.032763109 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.020384886 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.024060419 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.033203474 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.026850518 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.021716127 seconds)
  done (took 2.765933164 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025588135 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.05526367 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.032064497 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.032549424 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.027091241 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.02743071 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.0275165 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.027782244 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.028148054 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.031542504 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.028977567 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.177330121 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.025749109 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.03060131 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.028408497 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.027644331 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.028020889 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.027804133 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.028411349 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028154764 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.027973926 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.033711429 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.029300971 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.034304522 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.034024346 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.025924943 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.028936736 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.028934667 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.034119006 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.02904446 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.033263811 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.028600268 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029032577 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.034471684 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.032997377 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.027836158 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.017051304 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.028099381 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.028585661 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.02849275 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.024926463 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.033988201 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02919343 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.025572786 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029723926 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029838313 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.034817121 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.034270998 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.031006366 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.03235146 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.030084249 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.034192236 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.029189393 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.029041956 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.035034653 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.037755053 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.034904988 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.034903042 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.02987575 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.034301179 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.034243896 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.037125259 seconds)
  done (took 2.926037236 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031435894 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022862201 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.037678455 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.016952774 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.016815856 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.026121942 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.016505141 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.016609646 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.023388778 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.024008718 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025369563 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.027825274 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.029417535 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024896877 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02687332 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.029542203 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.028170399 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02811537 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023906284 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.027768546 seconds)
  done (took 1.384530793 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019481822 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.022379589 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.017614051 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.035872427 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.018400126 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.026377336 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.017849235 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017915462 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01788855 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018215782 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023208717 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023244436 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018403117 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.027725206 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022247427 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.027037162 seconds)
  done (took 1.215374251 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.02086767 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.026459262 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.135003062 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.018602001 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.020298383 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.017724608 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.018941474 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.018139498 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.020605957 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.033426255 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.019124815 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.020834888 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018599935 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.017085468 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.017465467 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.020949837 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.020213864 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.018994752 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.019013084 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.137104453 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028192789 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.019706004 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.021056535 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.018870186 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.020036483 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.027992564 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.020411621 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.020393252 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.01839592 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.021332587 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.021143725 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.031317584 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.020901376 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.019027143 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.017457576 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.018490686 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.019066653 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.021273256 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.021391613 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.019585894 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.018320763 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.021428738 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.019516255 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.01988067 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.021001671 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.022015467 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.020995088 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.031194894 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.019519788 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.021578194 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.019542064 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.020869317 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.019806516 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.031787123 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.021686863 seconds)
  done (took 2.252020402 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037206452 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023378567 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016899157 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.016957286 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.023166777 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.023871681 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023328033 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023143696 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023873774 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017088155 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023738068 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.021942946 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022997047 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022701976 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023500759 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023728403 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017406231 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024749192 seconds)
  done (took 1.279046237 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.025073055 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.022881639 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02340315 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.019244537 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.019412444 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.023838144 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01801847 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.019318691 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019325753 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019751031 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019444876 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.019166962 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0188506 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.018887303 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.023276378 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019684595 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.019190919 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017705348 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.019303988 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017557596 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.023665325 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017185509 seconds)
  done (took 1.311299136 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.201687491 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.16216429 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.045025118 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.040841068 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.030676874 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.057932855 seconds)
  done (took 1.400213257 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.054692224 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.058117797 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.022694695 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023401105 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027698707 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026438205 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026215436 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025687924 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029481537 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032263783 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026664121 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030112531 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029995118 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032238563 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028960715 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028660054 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02727577 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027352814 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024315236 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03462181 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026912908 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030388445 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027159309 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027022867 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027335037 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032395377 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030735118 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033353561 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02695985 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030602947 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028906427 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027620718 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031080857 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033598941 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024682311 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030864955 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027591552 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035603639 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028989553 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032426103 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023764801 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029115782 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030774082 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030545909 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031134638 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027472669 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030769728 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02716117 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026989974 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.038598909 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.028590319 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032213863 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028686208 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031157402 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030750337 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03964126 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033864182 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032606852 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028792404 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033641654 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.033143277 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029373394 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032627087 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033650278 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028599275 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032730472 seconds)
  done (took 2.891543545 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064535718 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.023835932 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026820246 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032678525 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031389165 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026625041 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026724115 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026990575 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026481358 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024524437 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065836203 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027144501 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031813558 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.032078564 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02730787 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027122414 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027308755 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.158015747 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024710822 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.038168895 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027426804 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032377245 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032594692 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032520639 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.033548655 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029318707 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027604416 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02763492 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027625404 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027479058 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030731589 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027593865 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.032209221 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.024414169 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03193808 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02690332 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026333404 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029901749 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026560417 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028576011 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.032648424 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035363537 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027762391 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027750484 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034040544 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027612293 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027510883 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024862862 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027856879 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025082043 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.033890072 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.033970866 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033760534 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031977124 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026771225 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027218229 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027584659 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027500262 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027785779 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029570058 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03255505 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027344495 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.039290676 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02758894 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027582052 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033049512 seconds)
  done (took 3.015793183 seconds)
done (took 58.563288606 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219553465 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.178765458 seconds)
  done (took 1.262254688 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.143749809 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.14458356 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.176202055 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.026849133 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.086628638 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.182484874 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.130867654 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027130171 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026544512 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.02855566 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.027002598 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.02879416 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.028296282 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.027107664 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.091821913 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.027434788 seconds)
  done (took 2.070967721 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.08052536 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.262208057 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.06415552 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.025636741 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114443053 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.033742466 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.028985097 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.033507362 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.033644397 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.027133521 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.080822142 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.041694123 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.031808918 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.032628951 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.027912198 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.030936368 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.032208363 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.033304314 seconds)
  done (took 1.903968351 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.099493932 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.037870485 seconds)
  done (took 1.019844854 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.137024791 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.068546708 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.113300861 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.333338504 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.098239644 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.103822472 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.105073447 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.100984121 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.074588312 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.098075565 seconds)
  done (took 2.104088326 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.06616525 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.065139896 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308805272 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.06014704 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.038229508 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.033975378 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.033867313 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.035432032 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.034167819 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.033925558 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.083718203 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.032030213 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.027891112 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.07929435 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.054883048 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.066218158 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.026517404 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.033880788 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.035988872 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.026476829 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.031467965 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.035010422 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.142644002 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.034898058 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.057986852 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.031854509 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.033650073 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.032504707 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.032873206 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.034701625 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.035658037 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.059647509 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.036534059 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.040827399 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.0324361 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.054361637 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.02734648 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.055522572 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.031753507 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.028351986 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.031826408 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.035225354 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.027776997 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.035107365 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.03354219 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.033335718 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.035176085 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.026207711 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.033926496 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.031427785 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.028205394 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.032781661 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.032629138 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.034377722 seconds)
  done (took 3.382514395 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.08420488 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.073204663 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027916499 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081303714 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072117473 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02837383 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.088787766 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066933532 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.084738626 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02690776 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.0261093 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02599521 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.034390776 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.038271747 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082315002 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075611284 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.029113934 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.027532649 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.075244642 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.076057086 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027083998 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.089235052 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.079256841 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.074905764 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.026818509 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027772794 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026300611 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.026074435 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.035268863 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.035099741 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027322576 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.038376091 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.039012454 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034465723 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025325571 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02606368 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025842436 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.034720815 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035899676 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.035445167 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.033347822 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025882903 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026554888 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026518141 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026827408 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025302346 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.036819703 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.034894586 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.036847323 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027177069 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.027333102 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.025922256 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.026565405 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.03392236 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.032479978 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.034554714 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.038275376 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.027225589 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027091271 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.028807355 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03921984 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035276185 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.035579717 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027060832 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.036326794 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026163854 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037407854 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03968804 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026616144 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026595885 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025428614 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025408506 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025370247 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.033133263 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.033313959 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025911987 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.026699231 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026593091 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035028886 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033044407 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025187119 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.035752524 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025990561 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.026955244 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.027266605 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02742618 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.037450368 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.035427187 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027614034 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.027151629 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.027228569 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027559658 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.026662159 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.0375585 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.036823121 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.036752823 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.038752714 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02795826 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.039243297 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03688754 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027918337 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.035861177 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027867691 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02826662 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.028039389 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.035602586 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.03508328 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036720804 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.026473353 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.026725778 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.036366453 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039810481 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.027273351 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.035329344 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03759416 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.035079105 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.026225138 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.038029904 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027142294 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.038867882 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027437908 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.038677234 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027703031 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.036405276 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.027759308 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.026782515 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027470877 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.039478755 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028545387 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027702234 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027855838 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027839161 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.035751725 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.040267348 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027758106 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.036900252 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.036957709 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.028444528 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.039112477 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027833334 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.038838803 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02805887 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.028476486 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0271487 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.041117025 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027839848 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.028446693 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.027187573 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.038132546 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027544843 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03808122 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.03552077 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027193178 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.039753833 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.038347814 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.035872 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.038878839 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.028536791 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.028262007 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027618702 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.027748458 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.038612274 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.040317916 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.027740587 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026954786 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.034285354 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.038422162 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.026385006 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.035231685 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.034827478 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.035472013 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.027373401 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.173249017 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.037180286 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.038343243 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.034110875 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.03705055 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035594963 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.027361261 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033548728 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035847799 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026483529 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.039410964 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025925606 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.036180715 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036055525 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032070211 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036155715 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.037887923 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.035739382 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.035345934 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.036650597 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025198278 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02574062 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.033405767 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.026626218 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026673607 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.032331095 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.026293606 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.027202134 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.039471714 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02695929 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.035484985 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.025459144 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.033245463 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02559581 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025897902 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038290594 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026142086 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026356908 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032936829 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02577298 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.032548874 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035603906 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.033184915 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026339919 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026597104 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.035877436 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.035037294 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025575782 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025663852 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026939782 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.036215899 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.035906054 seconds)
  done (took 8.775690217 seconds)
done (took 21.406534624 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.16681247 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.080111212 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.174189769 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.098868393 seconds)
  done (took 1.39405541 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.061865039 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.022863861 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.153995401 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.164089875 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.02273503 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.145185399 seconds)
  done (took 1.476077437 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.225459608 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.145984812 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.15150459 seconds)
  done (took 1.43214927 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.152676147 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.312858205 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.593272028 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.14376445 seconds)
  done (took 2.116851863 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.190176358 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.177087368 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.034394689 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.194105443 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.0421087 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.018477581 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.109911669 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.02586581 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.056781937 seconds)
  done (took 1.819413018 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.105211125 seconds)
done (took 9.233958329 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.194092022 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.151193618 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.036963028 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.030352023 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.142837845 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.141048041 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.153762778 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.03367942 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.140972395 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.329087699 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.18263153 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.054445748 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.168806123 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.052558334 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.276215113 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.034673032 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.032302315 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027574207 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.158824137 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.141357209 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.254800352 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.03181012 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.104233956 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.033720853 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.113934014 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.086160025 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.182876534 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.313386828 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.299497605 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.034250107 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.1408829 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.047892653 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.131517437 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.14577926 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.142401282 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.053603312 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022879638 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.259514915 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.124991977 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.331557407 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.16648698 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030298228 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.153730066 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027366348 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021501125 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.153654329 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.03814598 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.030158119 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.049495229 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029803236 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.046108867 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.029423822 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.154153802 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.02697649 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.101431893 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.149242382 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.179225986 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.110821873 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.029395155 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.042890691 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.032071882 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.166658519 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.043575764 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.029517431 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.036683571 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.023028287 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.14925521 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.044483045 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.0233823 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.03400686 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031824921 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.12367275 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.165351324 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.069649177 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.034056981 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.130134419 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.104484409 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.052693998 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.053300032 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.032532202 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.021682251 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.182618044 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.028155807 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.042690025 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029758458 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.057530118 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021740422 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.039159672 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.166903276 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.160188194 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.096584373 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023207044 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.256659354 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.025351634 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.051050051 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023911135 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.023618394 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.182445431 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.02306364 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.023281574 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.033205707 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.032178198 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.025036349 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.16602919 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.11525608 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.030304644 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029634109 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.023667877 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.028738412 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.024151453 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.024244208 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.023698888 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.104785463 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039866716 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022523455 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.117220612 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.140783648 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034938122 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.04393732 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.098196407 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.026320043 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.032830013 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031609389 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.138005535 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.032336195 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.150927378 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024809336 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.049178572 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.130549587 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.104778072 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.118180467 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.02340235 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.170101669 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.033762866 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.02170723 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.030662547 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.053779836 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.0325121 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.038609628 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.031721008 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.170139926 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.035126689 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.029190074 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.129890453 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.02222884 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.120859936 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.105429402 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.142265342 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.029719002 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.035096342 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.103313458 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.049957925 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.054883498 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.049535707 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.028347391 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.023364064 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.023196402 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.039340305 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.022104392 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.022931693 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.039964241 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.03009538 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.023369 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.26407847 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.033776101 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.027561003 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.283445983 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.03768524 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.114734202 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.048561306 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.02393524 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.117424763 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.02518932 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.045600838 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.089707193 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.023252808 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.107322037 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.023780615 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.022631549 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.029829518 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.023545441 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032137054 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.038424619 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.023481453 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.03866457 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.030931294 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.02350042 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.116263967 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.025322816 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.18580344 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.116597813 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.128909421 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.023650687 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.043482473 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.023422648 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.148603055 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.023223736 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.077577044 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.127670923 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.042556902 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.045499914 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.024335301 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.104697467 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.040642795 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.023110413 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.111952949 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.142135989 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.112028858 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.030754323 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.266489191 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.033153796 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.023712988 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.03172485 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032727703 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.024110928 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.107271186 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.028555813 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.022552723 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.022827554 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.024980217 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.02217786 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.051579941 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.022254845 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.031287552 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.022377252 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.025343688 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.024723316 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.021691191 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.031255615 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.107664757 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.141791127 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.029183159 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.04480999 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.037611904 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035553977 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.075271483 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.030169846 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.156479913 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.022386868 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.033356019 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.047086794 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.022690791 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.028579361 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.023538595 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.045212951 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.026976613 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.024920142 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.032135593 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.023585271 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.024004742 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.023470621 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.02377689 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.032658474 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.025053966 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.022744942 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.022616104 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.023462423 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.028444541 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.028603025 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.034920473 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.045440524 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.508919838 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.025076991 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.025597916 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.022950376 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.022694956 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.022914727 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.024870819 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.022630871 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.024773765 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.022833493 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.022189821 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.054586588 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.028499633 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.02393868 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.046519113 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.022117813 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.032323725 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.140333934 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.041358962 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.028853969 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.02266005 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.290244886 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.120705682 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.047526562 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.045071169 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.361642411 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.036014087 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.023848482 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.023780658 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.022963106 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.055590843 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.028957661 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.023996642 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.022528892 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.023113058 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.077286631 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.031923162 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.021760233 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.031981707 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022557483 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.02325133 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.055756958 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02472373 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.023354627 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.04510937 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.037327675 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.110047514 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.036008139 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026279429 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.080106158 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.021403645 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021620865 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.023330297 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.125035589 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.038071812 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.02425108 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.023283358 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.031819623 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.033564791 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.084089699 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.030058279 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.027043102 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.032357176 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.022353187 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.024125778 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.051776733 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.055023072 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.024274022 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.027074936 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.022677787 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.023047249 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.106774358 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.031296305 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.027801621 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.117348332 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.024469804 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.031073737 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.021837189 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.520218268 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.028356959 seconds)
  done (took 24.528592905 seconds)
done (took 25.446486294 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.181189454 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.039930936 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.039798459 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.034545235 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.038415671 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.0379278 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.039769927 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.034910132 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.038701312 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.037719538 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.158652505 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.023268898 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.031851773 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.040898031 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.033961991 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.042921685 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.037847841 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.041145951 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.024673193 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.041698173 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.035581586 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.038317802 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.033256802 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.040983969 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.024112599 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.033383402 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.178326792 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.043831833 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.026823923 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.034646673 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.032457071 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.039314468 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.032636988 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.032191396 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.034618706 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.030084838 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.035980092 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.032040137 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.17347997 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.029264626 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.023788168 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.037763509 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.030944936 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.031935333 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.032183687 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.036248164 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.028134558 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.038299007 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.023021941 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.037943384 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.173497373 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029513458 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.027432441 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.033652201 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.030453332 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.034485494 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.027258993 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.036422902 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.028927575 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.037672643 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.031704508 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.032062703 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.02339497 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.03347173 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.031973437 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.03270915 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.022009424 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028046741 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.022838783 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.022701591 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.02165869 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.032725674 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.030960984 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.029186434 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.02249991 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.023583191 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.022960047 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.037323763 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.031817673 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.033718726 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.023863129 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.02939479 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.028962919 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.023738396 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028382269 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.03595251 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.02215139 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.023932888 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.02332021 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.037386245 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.031617105 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.023762467 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.037144127 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.029284247 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029270601 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.023435135 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.022750399 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.029087392 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.032764944 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.023475659 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.022431612 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029298645 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.029807251 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.03357972 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.024019006 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028722708 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028590261 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.02214986 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.033261618 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.031992099 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.034204561 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.038774323 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.033305426 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.036433754 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.024099683 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.022328699 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.034449248 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.023899561 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028562331 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.032043032 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.029196559 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.03218248 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.023758603 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.022162419 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028092116 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.029560541 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.023457929 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023640799 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.023659216 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.032596786 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.031107955 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.02227982 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.022834632 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.031996985 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.032061066 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.022440519 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.022299316 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.032246883 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.023268357 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.03014839 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02935651 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.033170424 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.022754235 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023255429 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.022590434 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.022872848 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.022380373 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.029335502 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028618561 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.023322363 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.033024689 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.031593983 seconds)
done (took 6.446481207 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.036917166 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.070641355 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.190311914 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.151906743 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.038091632 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.023969758 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.028631643 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.045677117 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.027445683 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.052249153 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.050905477 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.046659095 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.176849549 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.022218402 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.023352964 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.024914433 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021858606 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.036785853 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.158559115 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.051275985 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.071125702 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.023472336 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.041884647 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.047814985 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.038546573 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.04537767 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.025721117 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.024762521 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.027115109 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.043151391 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.053355457 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022612527 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.024212238 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.044817014 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.042575017 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.033957347 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.024556543 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.032225049 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.024874046 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.023266551 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.025642579 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.044494063 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.031820372 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.032235689 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.025280081 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.02481596 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.024520381 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.032499744 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.039514053 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.030937371 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.037809566 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.042373682 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.026162171 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.024331105 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.022374692 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.032859644 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.024705588 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.024518459 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.024885971 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.023463887 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.024750895 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.027047693 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.030108573 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.035283817 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.027954489 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.031705518 seconds)
  done (took 3.813409866 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.041342772 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.053216852 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.03838896 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.038919804 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.022007981 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.023021027 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.023397208 seconds)
  done (took 1.297907922 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.073050405 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.14853192 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.159358944 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.159043897 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.170617673 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.158040117 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.039090737 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.058605257 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.023479936 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.174068207 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.168762319 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.163210289 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.027777861 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.037474624 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.058339709 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.164291853 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.038531329 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.031730916 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.159415723 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.166914401 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02956413 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.057843918 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.037356104 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.025042618 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.160444138 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.153161095 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.027839975 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.02455956 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.026095655 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.023270886 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024063271 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.050245877 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.154702813 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.042110319 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.025893307 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.023740125 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.151599999 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.026106578 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.155234536 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.032320534 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.152741944 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.026975784 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.027506342 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.024668301 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.025856789 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.157076639 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.025434957 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.023975987 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.024055073 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.15694468 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.023717816 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.154183495 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.027475706 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.030275956 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.032235478 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.031566253 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.031701219 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.024401669 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.155714302 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.034959125 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025980844 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.164212372 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.166852368 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.154212507 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.166349004 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.033729079 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.156151095 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.15040527 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.023126207 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.032087644 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023895194 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.165856192 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.027655267 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.026381084 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.029411597 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031971956 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.170331985 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.169415156 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.167846552 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.038890906 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.026009606 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.023249138 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.166975777 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.169988686 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.030483101 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02419008 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.025851131 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.042876453 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.052716617 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.026866402 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.030753556 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.024791191 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.035520895 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.027075252 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.027139992 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.165202212 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.024270338 seconds)
  done (took 8.512757363 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.029511633 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.024137064 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.024380479 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.024998927 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.0252983 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.025357018 seconds)
  done (took 1.319089874 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.052614935 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.025205474 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.038423592 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.025419555 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.049653969 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.156406726 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.157252892 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026286096 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.042590227 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.038237611 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.154112479 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.159509626 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.157353984 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.026317356 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.155486087 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.038160916 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.157498167 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.030287325 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.037302704 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026611455 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.039974468 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.026010993 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026504035 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.16594525 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.027781019 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.038087725 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.035915017 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.037670833 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.037646734 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.026643541 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.026198064 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.027329528 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.032210949 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.025205171 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.156643096 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.033082587 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025757638 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.030283406 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.028239815 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.028180542 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.163177379 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.026747241 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.030653164 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.029078029 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.025568207 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.031990095 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.029219629 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029096003 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.157997372 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.029273132 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.029194332 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.026027027 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.026658052 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.028811089 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.032785051 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026397349 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.029433448 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.158457568 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.026496356 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.032713152 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.025180318 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.026702195 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025953611 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.026475062 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.029932436 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.029152004 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.032310903 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.026173566 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.026555705 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024942214 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.029491945 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.025353655 seconds)
  done (took 4.83528316 seconds)
done (took 20.856147434 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.510885004 seconds)
  done (took 1.615980335 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.120012293 seconds)
  done (took 2.235312374 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.055622658 seconds)
  done (took 1.171633056 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.342681523 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.451708014 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.793253865 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.097954977 seconds)
  done (took 2.787947319 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.86266429 seconds)
  done (took 1.98595722 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.240017933 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.198304138 seconds)
  done (took 1.579090062 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.517726254 seconds)
  done (took 1.628243937 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.557316517 seconds)
  done (took 2.680938456 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.202413065 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.139156284 seconds)
  done (took 1.476141196 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.661895951 seconds)
  done (took 1.785025482 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.949003577 seconds)
  done (took 6.050449601 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.208097181 seconds)
  done (took 1.369990985 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.205140912 seconds)
  done (took 1.323872552 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.735458643 seconds)
  done (took 1.872872049 seconds)
done (took 30.693144097 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.045256491 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.044264592 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.044382325 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03912622 seconds)
  done (took 1.281233652 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.032675025 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.028892212 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.031667732 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.032093265 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.029703152 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.031384409 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.031992163 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02773848 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.029415896 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.028479785 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026698295 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.028307487 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.03087101 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.027351304 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029707628 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.030648098 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.027443991 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.028331742 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.029660166 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.027131235 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.030532838 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.027660056 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.027153292 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028120798 seconds)
  done (took 1.850966685 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.036036963 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.029002791 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.033326669 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.027822231 seconds)
  done (took 1.264588273 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.034521257 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.034623169 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.04331257 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.048567555 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.034053463 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.035181317 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.042103573 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.042303148 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.049046072 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.045627528 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.02473826 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.024217155 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.023525839 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.044783186 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.041917648 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.018216411 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.020013825 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.035708023 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.035035708 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.037715209 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.026567955 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.022125589 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.034474419 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.035834377 seconds)
  done (took 1.98108263 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.040874832 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.022545497 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.040047991 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.05218897 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.052825852 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.022457848 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.038012234 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.052924023 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.092730745 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.022249927 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.028653082 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.022141972 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.066300731 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.022661935 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.039502365 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.072675607 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.075095174 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.027246077 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.059568711 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.022493594 seconds)
  done (took 2.004063599 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029701831 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.027528088 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.027950694 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.022572219 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034859779 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.030763003 seconds)
  done (took 1.318309689 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025768665 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.02560493 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.024471803 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.030590135 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.026026473 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.026161699 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.025566339 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.02310576 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.022655758 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.023775625 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.023601134 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.023898468 seconds)
  done (took 1.444268938 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.185019141 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.030092878 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.028402969 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.022970825 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.025484233 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023681589 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.039935887 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.026008534 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.043562244 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.023848535 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.024514593 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.027175768 seconds)
  done (took 1.61927357 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06576491 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073126589 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109756662 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076436547 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074826555 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054418577 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.213070015 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.036983648 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.13253661 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101527158 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080303098 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051519033 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04506714 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.026844974 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0596647 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080349229 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102715419 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030858061 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078703106 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.267837313 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097321285 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.099398284 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112927465 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079803287 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.052834121 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113795383 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057080208 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064721212 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088403585 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092094954 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085266322 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.062113947 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.029686758 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.029172739 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118848496 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.068195115 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084306458 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.054767129 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067943515 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04833681 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069751994 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.026622739 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.040318968 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.071853227 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045216718 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095273083 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.051113133 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07687011 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040134325 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103243609 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091612138 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.187270053 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045638594 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065895383 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107220169 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077747842 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104051976 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072284875 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044084151 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.233573501 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.063882382 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05793167 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066311265 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038074212 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142232219 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048565554 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.073597722 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070475198 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.054954276 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055461576 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06722733 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09842501 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087409351 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.087838908 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100682082 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052153776 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.080713323 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.059471231 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.088334979 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062163246 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.029107413 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083132599 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093061318 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060183603 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062818213 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093973053 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052833539 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033423548 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.061007412 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.081877728 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038358029 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.075001954 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039384593 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.071148763 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105288269 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059516327 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074995031 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080560719 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03712373 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123175804 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.071979549 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031644172 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083022444 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075798032 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1231112 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055858358 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.033129459 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061626251 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065462465 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.119481426 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071085738 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03937426 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07398243 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106531382 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056233904 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.277900819 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058706944 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111211685 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077702273 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048581203 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034623051 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.052280309 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.229691062 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069638013 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074081594 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055055154 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.043626738 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047460787 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076239549 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052302426 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038365187 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07582572 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.062287093 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.032426603 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046937441 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.035278961 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106041762 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03726973 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100057971 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090118341 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.033402608 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068506785 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056475649 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066827051 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.058987765 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079872407 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099806742 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.153637131 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.049132691 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.053919672 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068820176 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110884828 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089315144 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053265066 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036459378 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062530097 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075067962 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059203146 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089036575 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054950492 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070681945 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065321542 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107699831 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110278429 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06032424 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063696455 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071596086 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.086203396 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033032627 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12660842 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066518746 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082273064 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046566112 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107514059 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.072555781 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050515538 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046618131 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061736859 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.066258842 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068717358 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11116915 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.056837524 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.030362584 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053533668 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111945623 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03693662 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074615559 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.051133807 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.053254407 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082934531 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.057654643 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04212957 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.026743333 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.249131558 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121605411 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.027441001 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073839871 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.066562872 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061235488 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.082141664 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.026876971 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078137521 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099480078 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076481494 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100261274 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127612984 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07789549 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080757564 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.075353755 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.067065345 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.037867271 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.088810763 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09956966 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054618849 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050762577 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097142718 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083266188 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.10227874 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.081540113 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082169587 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.067669454 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067868533 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064484742 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.066135294 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11226242 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084281349 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.08869947 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042764358 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069505007 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079161358 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100764085 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04145971 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108720578 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.04533829 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082681532 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.037473595 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086756385 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.033730854 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.136496937 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03776333 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059816298 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.026283508 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.032207739 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109664414 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.076477268 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07340425 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067017753 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.109092379 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105554607 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.036006986 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072363704 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078813953 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064982539 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.232551197 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.070903128 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.049505305 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054423613 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0706103 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04457677 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.039768405 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078671658 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052981396 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08732558 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042439756 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032923963 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10112387 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064827072 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054314729 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034961816 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06796962 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.086649 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051227732 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044787453 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074678352 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06437017 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103203348 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.050320582 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.058240746 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085664885 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038425642 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.052815995 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.026793002 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.04416099 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.032913385 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08920883 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03387103 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076707156 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.025717526 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096118593 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04736488 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.053645199 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06402386 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072560017 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09400355 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05658271 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10714203 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049480671 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085975361 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072234536 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055754127 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04714118 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064196363 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06169377 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084144343 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.057369753 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088523242 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112648004 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066479162 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11115484 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051384346 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086994495 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070486479 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090016131 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.074564586 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135978836 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10628963 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074980369 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075757957 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033996332 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057110215 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070606272 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079200196 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.30277506 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085411017 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.02939803 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062732487 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052433442 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067598246 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06336907 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039140044 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10729498 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062711878 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.04792731 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072959617 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.04881792 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063811926 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033621682 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058395705 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.062261773 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053445652 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056324906 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074430998 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088221326 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073272259 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1074951 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.063309971 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.053133468 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.080991754 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07250793 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071579531 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045030982 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044754504 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099448952 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080837468 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.087087637 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.059446328 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069244639 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072697751 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060682836 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088742395 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069987323 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.091046454 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037973436 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.034014696 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.025185992 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.029688152 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086826294 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070843901 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074410686 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059556714 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029612639 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064366566 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066068074 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030107088 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048627613 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055345618 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05846998 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.052246732 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069060278 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.073011934 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.05848445 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06690826 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058810029 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113805051 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.062623821 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048144589 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10974885 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119457665 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049938349 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055360134 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.02987245 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038762046 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078622907 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119390412 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.264809146 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.037203363 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046875166 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.045227532 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045637311 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.029443271 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.047117396 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.04892423 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066460399 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05831116 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.074850711 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065902575 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033664996 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064513915 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059451148 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052319582 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.068111313 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081578815 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087970576 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.103987864 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075156094 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067975961 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034330571 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.038527543 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034002924 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036942533 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060868717 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.036795235 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032878012 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104614178 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.051027095 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065820775 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069309338 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047132142 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033064245 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097250968 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.025709365 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098441456 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.028300905 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041380868 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.040684107 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036924982 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05311792 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104322797 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072554464 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075738708 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069981469 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068655379 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128050268 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127617762 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041251482 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108334457 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034173417 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035157457 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034275172 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07418632 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049758808 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07662056 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107115271 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050796544 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063570534 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035710432 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108534427 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.064960417 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065798947 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044853853 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037648004 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108726529 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035938149 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.040808371 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049698139 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074650133 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.02942428 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06427899 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043945369 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03873486 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.276737114 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.668310623 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049688459 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.032541911 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055702474 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105934371 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094708508 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056019702 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069948343 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.082143536 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060800166 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051350194 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066984915 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.157452711 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031434843 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052936233 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.063756649 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056641596 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060435213 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.058753748 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.044687996 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.052948879 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.047108444 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038541492 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06766337 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046912311 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054672549 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065460371 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041139622 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.046589905 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094645051 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.065588522 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.042171686 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047663802 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.063623188 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046317562 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064202944 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.026687687 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072618532 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048403301 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081295725 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.058567338 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068999768 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088261283 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053576909 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101586544 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.070344685 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085742274 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047393349 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.037229044 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091043699 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.050526182 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036912716 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111254908 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.058243144 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.064096495 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064263817 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.055682945 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074563088 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080757303 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074477656 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057985886 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037649164 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064218146 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.066449243 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047968829 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039433663 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.033781869 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.035180198 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.336882472 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047794519 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046266694 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077101548 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050562023 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.212366515 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.062364312 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08181761 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046210713 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061698676 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072655099 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050742525 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070274271 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059640656 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089005565 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136726934 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085069088 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089674514 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094817298 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.034610195 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.032180216 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.025398292 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075278697 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038465407 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.048955947 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037996229 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09652623 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.042685584 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071444886 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.213132772 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039238493 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053439005 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054997672 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.026731812 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041734522 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06734402 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045647607 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037990585 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078768426 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039655699 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091325069 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073492258 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06035606 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055979711 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039260878 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074662534 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.06241531 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.091425347 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055629598 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.033812301 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086980231 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065967909 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104081608 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.031093722 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039414455 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095091832 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066616879 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097397314 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039186776 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118607447 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108576456 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061923431 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100138111 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028658221 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047489527 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050562413 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.091128541 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044327727 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073934207 seconds)
  done (took 44.672286299 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.144859097 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.135773932 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078877203 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.092363292 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.247914627 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.257845028 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.110099854 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.081866052 seconds)
  done (took 2.4473796 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025627745 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.041237851 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.038484997 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.305275775 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.059084981 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.023835815 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.029263459 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.040381904 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024349271 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.023491625 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.062009375 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.023625673 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.023967771 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.470538392 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.022983946 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.029215602 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024791838 seconds)
  done (took 2.545391107 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325420619 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.833652158 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.452629813 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.585610595 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.108355227 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.568107521 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.031542662 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.038704355 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.660040212 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.387365081 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.102671785 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.184248196 seconds)
  done (took 18.552713973 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.032403672 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.167855026 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.168361102 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.031997643 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.032100651 seconds)
  done (took 1.695413361 seconds)
done (took 83.883967321 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.04361768 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.138170661 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023738807 seconds)
  done (took 1.456168998 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.170362568 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.16603485 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.164800366 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.167130618 seconds)
  done (took 1.936775042 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.032652606 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.034752582 seconds)
  done (took 1.31523266 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.201622485 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.271907173 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.050137977 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040860155 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.038489019 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.038847041 seconds)
  done (took 1.374725572 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028278166 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.028204517 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.028476196 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.029510061 seconds)
  done (took 1.38435371 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.144144124 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.022092336 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.024935645 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.027423472 seconds)
  done (took 1.485292023 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.042817038 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.044748297 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.076922101 seconds)
  done (took 1.418134359 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.042002097 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.043505619 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.037205375 seconds)
  done (took 1.386378429 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.068685337 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.055663949 seconds)
  done (took 1.377537163 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.037142809 seconds)
  done (took 1.297584373 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.051039012 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.057117831 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.237312434 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.200635124 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.239318517 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.22451171 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.03436231 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.034726555 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.030685245 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.029169182 seconds)
  done (took 2.406050919 seconds)
done (took 18.657810857 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.038023457 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.150665551 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.272920063 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.046560791 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.786974378 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.27028864 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.68611379 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049993547 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.059646859 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024130593 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.043284328 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.761720924 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.690589357 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.104445586 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.673085746 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.096331013 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.519486225 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025516804 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023653644 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024963764 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.667204591 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024836913 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025003875 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025514458 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.516076719 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.293688395 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026608109 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.095282439 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024778685 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029289794 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.274745268 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026590979 seconds)
  done (took 12.649163643 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027104803 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.086524739 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030795305 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.043532134 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.027306514 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.026885982 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.028524117 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.025589259 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.072704031 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025070023 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.044908633 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024787398 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.029621684 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.02583992 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.046351664 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024163077 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02733899 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.026050666 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025129298 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025824742 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.044984132 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024753571 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025990287 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026021508 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025815567 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.040954802 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026716617 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025571605 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025605799 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030067332 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031339566 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027128168 seconds)
  done (took 2.331546323 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085188476 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.089158549 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.030854762 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.071620037 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.083178724 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.027067501 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.118538446 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.051001348 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.076800127 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.025741412 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.045753051 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.025217845 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.066284715 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.027221475 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.048707174 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025775357 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.028522633 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025810218 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025405739 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.025739775 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.047211106 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025493795 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.026258414 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.026381191 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025913705 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.04339256 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.02684888 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025370386 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025759224 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030144682 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.03153597 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026642477 seconds)
  done (took 2.652295485 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026300212 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.028461034 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.035314034 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.039633356 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.023061475 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.025740929 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.026714408 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.022680933 seconds)
  done (took 1.51565453 seconds)
done (took 20.436585564 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03776065 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.025052049 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.028302168 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.04645338 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.032250545 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.156411481 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.02211086 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.032434513 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.028796041 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028778789 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030222797 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.023662774 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027889039 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.022198508 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.030070282 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.023144993 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.157259293 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027243164 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.157213991 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.158986201 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.026298756 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.03006251 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.034047244 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.160798294 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.160505776 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.159684492 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.033214426 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.029361298 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.023203562 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026148841 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.154861879 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.158883451 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.026593856 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.156164316 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.023955068 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.023911279 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.02820836 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02533381 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.160464873 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.032893252 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025748222 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.033070834 seconds)
  done (took 3.898874972 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.160299888 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.168525353 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.161732259 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.036194869 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.032231842 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.035456633 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.165618824 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.03246547 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030659722 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.163417765 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026788779 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.031380531 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.034054887 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.024034726 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.031926623 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027922846 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.033908995 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.026019894 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.031850788 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.03172931 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.167624153 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.024353453 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.032439275 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.032977644 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.026475723 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.032537811 seconds)
  done (took 2.897203677 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031705083 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.048258784 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.053447336 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.111789143 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.070692132 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.041665209 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.041842601 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.053669628 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.061978117 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025337619 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.04940038 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.05493451 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05622244 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032859558 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.066792812 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.044838645 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.037922325 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.026237071 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.032157051 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.062321461 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.048924405 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.044169003 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.059710374 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.046195029 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02368946 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034941884 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032331069 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.044245361 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032973232 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.0382429 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.028883582 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.028165192 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025966496 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.038550673 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.029175931 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.022806939 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.049841523 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.038278074 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040195405 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.065960824 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.03507621 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.025824706 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.054793678 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.091687039 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.023307343 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.026051708 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.028131688 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038387604 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025145234 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056081121 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041231835 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02309524 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.045184316 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.025799462 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026528042 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.043856094 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026038175 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.026990913 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.037332105 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.030956293 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.047578634 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.030961138 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.048054025 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.02427643 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.036564972 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.02539364 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.026074234 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.023238809 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.062750801 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033217402 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.082301584 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.026092326 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.022781103 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.038806862 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.037614615 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.032708996 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.024658598 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.046463883 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.039559415 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.028792685 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.037167115 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.027465794 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.027416762 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.064034805 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.023689953 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.02318169 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022757826 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.027568984 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.028548986 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.025872268 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.039378454 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.024272796 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.028578186 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.041661542 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.024423443 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025255305 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.027037982 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.025326602 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.023510022 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.035002302 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.026946921 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.025481013 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.038471877 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.025924872 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.028240164 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.041468715 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.03482153 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.023581973 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.025987651 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.031047409 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.026156644 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.029196338 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.02815746 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.026674148 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.030233074 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.033401399 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.031604714 seconds)
  done (took 5.648003089 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.257335354 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.245406817 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.024779029 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.24626211 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.034352887 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.174546837 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.246455149 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.247332387 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.024558936 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.024972499 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023419978 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.192446245 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.183939361 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.193070147 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.17269841 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.026534507 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.053985864 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.193998396 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.252356759 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.245542522 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.052544669 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.032678773 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.026568879 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.025950308 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.025054704 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.033509038 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.041952895 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.03346484 seconds)
  done (took 4.655653198 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.032409929 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.075304359 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.029687138 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.053686542 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.044469111 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.026017028 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.027801895 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.026908445 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.044612787 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.031465572 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025640467 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.029902506 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.029485297 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.02784895 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026496192 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.03266968 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.032697718 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.033392703 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.029321467 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.030712805 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.037650349 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.051498096 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.029186316 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.02483704 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.028543185 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.024917873 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030896992 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.033817696 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.024222494 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.024712734 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.02205118 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030092794 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.041506392 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026688351 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.025117075 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.025418921 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.025406212 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.025252329 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.026079798 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.023789626 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.023792291 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.031211484 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.023751408 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.030585082 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.040581577 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.02748233 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.027177338 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.028514374 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.028139617 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.02161276 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.028906766 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.028024821 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.027297059 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.034453572 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.029387831 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.027580574 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.026255074 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.039893153 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.030939587 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.024048466 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.02412643 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.023681212 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.027029789 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.032271749 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.043378113 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.027165989 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.024085937 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.025959337 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.027544363 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.040686085 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.024354661 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.031513125 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.022007937 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.025680783 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.027729692 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.027323888 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.026197323 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.023142105 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.0237628 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.024415171 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024347771 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.024088792 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.023752057 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.027520031 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.022366456 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.022719175 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.025876272 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.02661205 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.031281873 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.023898732 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.028172042 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026544625 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023328055 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.027182047 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.030273779 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.027896138 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.046748436 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.032613521 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.024529531 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.021426523 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040192145 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.026695489 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024154012 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.026475095 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.02962558 seconds)
  done (took 4.426997341 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.055190735 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.027807572 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.046756623 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.06059175 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.036186494 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.031255716 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.040006158 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.02679689 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.049332544 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.024449627 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.035806659 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.023822981 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.039539531 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.033971883 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.027455409 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.036596313 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.028722769 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.048182199 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.042095767 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.024545212 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.035831234 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.039817376 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.039963045 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045248761 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.044809001 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.045801571 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.039494622 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.029376241 seconds)
  done (took 2.354393975 seconds)
done (took 25.156325813 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.384942782 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.54970096 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.339193081 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.007411283 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.382010688 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.470879141 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.546460347 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.324872577 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.987904675 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.408798366 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.025356886 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.198937369 seconds)
done (took 62.01314734 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.338430101 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.48228698 seconds)
    (2/2) benchmarking "String"...
    done (took 1.562147341 seconds)
  done (took 4.358821181 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.746570423 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.311006972 seconds)
    (3/3) benchmarking "different"...
    done (took 1.346760081 seconds)
  done (took 5.694579569 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.654425792 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.828396775 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.576758619 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.317706533 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.337593959 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.811498128 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.457846579 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.955891062 seconds)
  done (took 28.566623714 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.297891485 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.708177397 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.690840019 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.785135459 seconds)
  done (took 18.861101458 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.748901956 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.71014905 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.711334469 seconds)
    (4/4) benchmarking "different"...
    done (took 2.000455755 seconds)
  done (took 8.591646709 seconds)
done (took 76.354865261 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.309255775 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.811151752 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.324858596 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.463795813 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.318483731 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.395960434 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.293989117 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.307019598 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.288670778 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.291680842 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.289468879 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.297958503 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.284282826 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.330389867 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.300492455 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.304835734 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.770977603 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.308930068 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.313273128 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.412895774 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.645395878 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.273633119 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.305332595 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.365011855 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.950138064 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.326683464 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.380243395 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.290434483 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.937753403 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.307055612 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.283802323 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.284479244 seconds)
  done (took 189.053268161 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.284982226 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.234584177 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.233771372 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.302685322 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.734444496 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.656701209 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.155090296 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.773689006 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.283966125 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.330275641 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.364709959 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.292447253 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.421745223 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.854394081 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.327504971 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.311722146 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.231874657 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.148014919 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.33745196 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.229881687 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.300562815 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.964368202 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.928577389 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.170244171 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.320286627 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.326775239 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.29632557 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.307214211 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.778008047 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.213573195 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.30591476 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.312038315 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.462808907 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.526893417 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.315779752 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.305549084 seconds)
  done (took 160.631924558 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.548902406 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.2883695 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.336186482 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.408550138 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.338122403 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.186301227 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.305911943 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.268665821 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.266429953 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.298429109 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.289738439 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.358073769 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.303142839 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.064917421 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.286017196 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.286447995 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.290596784 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.022811366 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.275118016 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.304476313 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.297819735 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.386374743 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.606339944 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.387923945 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.282216034 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.305527871 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.429346366 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.292353279 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.304043867 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.301027604 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.407365073 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.285914663 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.423543757 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.406771696 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.304315946 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.350047878 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.290129395 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.647330629 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.299354112 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.295334553 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.29143989 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.316056448 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.263742799 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.56313813 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.394384811 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.295498763 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.321955832 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.736202067 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.904450414 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.286301439 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.293325575 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.289294265 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.269459596 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.298880303 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.290035156 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.299940702 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.34653211 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.295198025 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.282070761 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.28410738 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.288085482 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.272576662 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.301699307 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.297315169 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.316824778 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.976318538 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.864728812 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.626729252 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.105610026 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.29721593 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.297791444 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.279528924 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.724483046 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.356542429 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.287010852 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.278738062 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.447987322 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.29593762 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.291938389 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.218705427 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.248341942 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.290294622 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.387343273 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.280819452 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.286993328 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.58494567 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.074724527 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.305239094 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.311456235 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.331466547 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.280878032 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.280257819 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.299135312 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.242961356 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.279248582 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.28780921 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.741120677 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.277981818 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.294072503 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.672821486 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.651956717 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.303054984 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.385310972 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.707590076 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.298057901 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.280762794 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.279507158 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.313978184 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.280430565 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.301877703 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.289228641 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.27842662 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.286418597 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.303743222 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.296277258 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.300681545 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.289859099 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.303715202 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.293685804 seconds)
  done (took 352.17259911 seconds)
done (took 704.822187217 seconds)
(4/20) benchmarking "parallel"...
done (took 1.279046745 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.563892426 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.287129939 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.443798676 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.522657924 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.484600491 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.473107842 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.502721466 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.574017332 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.511039451 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.452998535 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.512616557 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.471312629 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.599939277 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.541497768 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.612974574 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.575250829 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.501416506 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.065900755 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.486803386 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.466039129 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.494780228 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.472379369 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.445628603 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.544152642 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.595353992 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.454680915 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.695905817 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.545692866 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.520118839 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.54754342 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.540341351 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.577830981 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.51376397 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.591979102 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.527895368 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.582525286 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.477184278 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.579326802 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.482068263 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.496134011 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.523999736 seconds)
  done (took 71.141721242 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.705944738 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.486822449 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.576699489 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.588043445 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.059625295 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.584915508 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.668248266 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.479909332 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.485208677 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.622210847 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.627256519 seconds)
  done (took 20.22369162 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.579468947 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.464946412 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.597507524 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.612936369 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.72100605 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.592286564 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.653815313 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.490332379 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.484568222 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.59306606 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.615074282 seconds)
  done (took 19.718484222 seconds)
done (took 112.351455178 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.873454831 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.353483793 seconds)
  done (took 4.503399465 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.329054469 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.315347201 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.309359999 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.292332928 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.30704413 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.314292784 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.365367969 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.325064841 seconds)
  done (took 11.84880722 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.287339912 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.309589222 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.308553948 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.299189068 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.277805585 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.286506938 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.289343101 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.310561313 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.303439826 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.292178481 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.28159808 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.287726762 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.295487456 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.312650913 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.305246412 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.28848936 seconds)
  done (took 22.019689463 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.317282287 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.290407374 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.301832177 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.288668377 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.281835769 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.282290111 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.28810872 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.327843049 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.302423697 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.309635248 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.296765675 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.301020968 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.301519323 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.311089548 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.30577556 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.308603118 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.297424347 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.286363181 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.310739988 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.29498518 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.308507103 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.305615185 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.289641221 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.28676594 seconds)
  done (took 32.49648975 seconds)
done (took 72.151251488 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.868897465 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.303623706 seconds)
  done (took 7.46426963 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.301451858 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.309322007 seconds)
  done (took 4.004673059 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.302076991 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.296622386 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.30839857 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.293986248 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.297720836 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.301474486 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.317346304 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.314924245 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.317630747 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.302764158 seconds)
  done (took 14.334323022 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.294791887 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.308584021 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.292365595 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.312487354 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.308111194 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.312885082 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.303914328 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.293846915 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.280462372 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.322029283 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.314134073 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.485515958 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.282860014 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.547875784 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.300024004 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.315437379 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.307344442 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.298678901 seconds)
  done (took 25.179384386 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.285349366 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.297436704 seconds)
  done (took 3.865295611 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.313655154 seconds)
    (2/7) benchmarking "second"...
    done (took 1.291617207 seconds)
    (3/7) benchmarking "month"...
    done (took 1.315883486 seconds)
    (4/7) benchmarking "year"...
    done (took 1.28371614 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.29367683 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.31564347 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.295360018 seconds)
  done (took 10.381090303 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.739475888 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.447755725 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.508697724 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.737839343 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.955372818 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.23705263 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.951660305 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.233975154 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.121963129 seconds)
  done (took 18.224054568 seconds)
done (took 84.751494807 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.944999099 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.308174973 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.951547393 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.431726282 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.334895543 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.659151875 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.309298812 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.906108676 seconds)
done (took 39.163356799 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.610392815 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.289239215 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.319387744 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.336905656 seconds)
  done (took 20.226240651 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.280457156 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.87398643 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.322273862 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.229656967 seconds)
  done (took 20.101286239 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.798984302 seconds)
    (2/2) benchmarking "read"...
    done (took 1.815283713 seconds)
  done (took 4.919974858 seconds)
done (took 53.154011216 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.290527469 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.305196145 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.305910839 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.301540457 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.29705055 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.320336843 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.280160523 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.306737079 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.31021341 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.304108442 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.288798934 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.28299175 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.296354984 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.277902027 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.298248367 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.299875856 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.300245417 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.311545604 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.302029898 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.317583117 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.301280417 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.296832857 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.305294431 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.310695378 seconds)
  done (took 32.499223766 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.373914646 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.348298049 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.375395898 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.361150904 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.393181425 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.369621424 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.358097942 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.323039043 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.366359772 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.346632089 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.33544627 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.393730497 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.335937138 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.388234756 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.329267186 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.400409104 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.359195396 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.353467906 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.345757324 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.403592776 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.365198123 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.354923391 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.401715753 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.321890976 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.376799065 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.341664041 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.355537228 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.36382446 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.322625156 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.388130014 seconds)
  done (took 42.138251639 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.339922225 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.29153039 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.280690009 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.381926758 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.30044358 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.327977642 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.321838619 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.30522177 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.313332198 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.303749593 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.268806509 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.317386157 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.31575095 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.306339603 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.307711149 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.290663017 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.359388658 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.466883092 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.297403335 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.29230768 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.341761464 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.283882095 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.298750074 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.300830723 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.298809631 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.327294137 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.298861252 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.295465073 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.302898026 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.29355163 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.291349745 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.345500556 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.345561568 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.316114601 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.429529568 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.351071833 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.310710524 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.803952433 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.297938279 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.30461477 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.301016114 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.305460454 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.299875192 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.275941192 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.362847919 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.316492126 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.279978534 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.292040018 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.300162236 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.302483993 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.304000647 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.300233288 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.313122742 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.305109506 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.31086201 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.322999242 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.313796496 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.293765731 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.296250371 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.302282892 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.307717007 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.380916529 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.319210585 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.307228283 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.684001341 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.307682393 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.37531708 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.303882886 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.296288546 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.523541141 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.325148456 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.524416608 seconds)
  done (took 100.270627323 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.292565672 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.299012276 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.367405992 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.380640773 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.318870925 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.327878893 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.30762297 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.287626864 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.94690898 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.311012826 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.298729676 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.283858139 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.969880405 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.320201196 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.302045963 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.361270684 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.285263191 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.281499297 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.286489189 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.297494741 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.291129174 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.296620455 seconds)
  done (took 31.414562367 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.332706116 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.319465154 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.348339689 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.329975973 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.308955119 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.300948983 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.316510581 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.319374935 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.333210571 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.342885505 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.328582516 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.339530295 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.29286703 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.336464732 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.339383429 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.405094963 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.336653194 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.390407093 seconds)
  done (took 25.320079255 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.477552218 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.476447129 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.403269801 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.333285098 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.574239289 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.538797417 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.413901259 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.476651956 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.338111779 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.455998675 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.493715329 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.337031211 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.533793801 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.358723922 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.342051179 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.56029684 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.36566349 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.321993655 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.396730412 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.385498747 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.481579693 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.411583667 seconds)
  done (took 32.741053912 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.329696674 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.364970737 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.39593326 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.381987445 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.293980986 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.300623376 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.365739307 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.344025371 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.311650042 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.349299316 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.35600647 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.290508416 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.419028672 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.343356509 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.397447046 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.357603734 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.358059125 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.369249089 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.303596963 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.307202206 seconds)
  done (took 28.228992698 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.310512654 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.293230469 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.284215042 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.322004407 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.301730274 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.306953232 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.302564756 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.291641418 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.281328573 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.531600564 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.315831322 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.3191173 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.314022094 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.283723346 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.302859331 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.327590581 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.314126573 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.278083294 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.292441665 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.309649335 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.514522305 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.288603013 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.281127478 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.312021539 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.31719566 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.317360127 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.29753202 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.29755484 seconds)
  done (took 38.218966885 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.360866566 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.281546058 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.316675781 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.294045376 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.306436531 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.365621436 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.298978623 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.29153884 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.31459163 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.299726698 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.290475163 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.299962648 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.329303773 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.349219283 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.307151848 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.312245539 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.346675288 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.292566614 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.385131958 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.286908682 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.312413959 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.405286174 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.278978319 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.293653251 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.296908386 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.305503798 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.287856637 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.311218439 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.313794664 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.301984531 seconds)
  done (took 58.749061052 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.335501491 seconds)
    (2/2) benchmarking "in"...
    done (took 1.338573372 seconds)
  done (took 3.953152979 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.287180415 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.386569058 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.29706223 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.500642105 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.457350833 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.474877811 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.459666701 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.400162055 seconds)
  done (took 12.542955574 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.29560687 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.722769653 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.316441426 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.273689351 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.298626543 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.765931562 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.234923985 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.148084623 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.106564952 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.153185189 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.397570252 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.78326009 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.257889014 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.629806832 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.434336201 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.153295032 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.534431208 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.836380245 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.382485599 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.410143214 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.076387203 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.415348508 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.302618077 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.295213356 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.295611355 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.188127819 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.194607471 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.731980896 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.456496722 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.425075944 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.090155683 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.391750002 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.306499062 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.555616556 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.410037096 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.308066058 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.446624971 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.397659528 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.310274864 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.310959131 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.060525867 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.043324886 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.580093917 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.529872152 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.392734819 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.300066105 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.2945956 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.29219516 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.594587145 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.949729096 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.242771625 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.260940071 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.435715419 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.286330005 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.016291415 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.325236445 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.311778559 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.184325791 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.887038523 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.530054266 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.646643401 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.386273918 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.288075879 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.418119827 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.306577961 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.496595666 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.073054072 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.103160766 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.077178063 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.420559006 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.808584143 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.316362398 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.296829412 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.304527093 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.231617642 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.618132676 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.312490753 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.295804639 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.301816351 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.301247078 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.549628191 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.427816752 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.1296441 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.42182171 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.454052117 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.728321556 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.432977413 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.29326824 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.992089889 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.162362152 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.39762946 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.954609518 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.540815127 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.44057847 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.322932264 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.567737236 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.348860648 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.295761062 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.138269972 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.929141822 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.309685608 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.308360011 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.652862597 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.331963114 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.289304725 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.311697581 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.993195488 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.418249352 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.422925139 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.323931156 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.285080151 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.30287043 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.878342388 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.407503353 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.319663402 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.777807714 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.283816555 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.807038422 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.552216948 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.502360741 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.659842601 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.309462292 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.559971428 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.120258668 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.296178769 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.815871888 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.142628186 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.861679776 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.560420897 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.43877604 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.180723437 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.371049745 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.280863851 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.445751131 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.383750932 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.298230803 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.313435893 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.309769047 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.303664774 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.29433238 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.451450327 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.699081834 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.161249289 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.315873652 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.569088552 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.44427901 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.187238104 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.495066945 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.996674604 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.452439862 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.319482982 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.084935291 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.594339476 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.010014231 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.443992135 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.299077467 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.296292099 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.147395216 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.315990068 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.39109503 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.316957603 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.933296765 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.385475316 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.299984001 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.301717788 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.765762983 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.42730674 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.309033769 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.407091762 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.084327925 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.168974889 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.309300132 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.613797445 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.413585499 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.308114426 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.301313686 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.296182929 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.086397914 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.930885743 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.466887732 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.924970314 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 6.057988692 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.420613916 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.467144371 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.410034889 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.570392484 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.548495379 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.456111777 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.286696103 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.308813379 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.282666466 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.779932903 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.148281147 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.318148182 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.202835156 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.311884155 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.250656857 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.407424836 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.135763873 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.292073445 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.992093745 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.305006137 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.395138876 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.286389038 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.283662437 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.464806879 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.469705211 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.45291522 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.887909687 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.314051309 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.296510569 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.991654453 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.435656527 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.996713413 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.410611078 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.101254681 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.390446466 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.423251926 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.430566135 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.011555908 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.430098266 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.290055926 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.063443058 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.451487366 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.297545576 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.367173068 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.009935346 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.078670378 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.047796564 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.952177706 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.276344708 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.849575674 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.563641549 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.42980001 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.171076427 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.399991938 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.542261418 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.344508967 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.834105844 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.333796824 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.069622245 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.317991815 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.085697763 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.295350324 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.312084712 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.423316878 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.817975043 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.40913867 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.296857664 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.482657193 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.387247201 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.966193113 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.443484336 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.408954448 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.657416189 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.364378952 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.410465238 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.521255257 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.360072003 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.219672088 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.307407116 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.65541208 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.270790555 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.313491622 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.397095647 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.084211485 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.48515887 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.577935535 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.447990503 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.291111459 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.298058965 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.523419165 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.388747342 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.301847021 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.644226592 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.309102373 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.351005883 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.40721852 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.313640179 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.300690123 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.532553262 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.478597954 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.623365811 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.76918073 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.89175624 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.144658689 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.413210292 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.02906532 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.429649 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.993206986 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.394326808 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.318486 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.984055977 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.439916953 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.592385769 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.443986687 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.453222973 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.95530607 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.426687057 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.616039771 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.489403212 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.419603925 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.078683265 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.876955361 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.579177267 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.720515559 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.354896766 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.830670004 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.363632231 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.850489168 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.295264005 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.978960441 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.365752203 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.34956911 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.311253919 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.288057136 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.827478723 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.268431992 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.324127579 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.090890001 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.014309177 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.239270179 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.039027971 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.388832159 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.302936892 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.292828128 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.316182227 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.201843879 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.384071889 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.678971939 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.429934501 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.289781637 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.305186877 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.273017177 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.667301999 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.135971631 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.182696413 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.280393346 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.428905944 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.282262556 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.296322934 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.313535837 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.331571269 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.317425214 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.31301975 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.832073518 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.318564239 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.919121162 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.413526164 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.296793645 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.510099674 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.362452148 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.298160154 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.528468902 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.386232635 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.395935683 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.360353541 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.302724691 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.75184528 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.441319648 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.289285829 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.587366244 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.576105352 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.559888738 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.875444252 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.357764781 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.731620487 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.636378855 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.099072786 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.285746425 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.218139934 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.41935814 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.090189861 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.309810458 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.761934515 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.902340525 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.303121411 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.613575667 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.19695481 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.686588941 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.447018588 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.36667674 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.307616444 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.306775102 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.3985033 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.53790724 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.320662675 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.601102264 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.498855089 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.30422337 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.603623729 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.405572896 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.538039617 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.327934826 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.32196943 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.308563589 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.294750118 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.761658906 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.188477137 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.409472126 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.292641084 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.201074873 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.185467345 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.18884897 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.961818948 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.198820794 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.447592024 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.293923172 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.501081865 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.357717374 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.110824933 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.294657217 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.090735178 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.662391725 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.355585015 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.498534269 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.685559494 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.015740007 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.730163675 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.433143953 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.309490733 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.701121844 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.312862282 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.456105877 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.247906673 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.641044922 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.855537327 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.760509387 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.561188402 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.423806839 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.206228015 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.836601368 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.29219589 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.302726774 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.173872378 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.433520115 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.619800889 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.287751517 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.580066042 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.448505424 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.960954593 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.984206878 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.456871128 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.91343764 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.456455534 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.299100977 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.141763781 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.223186165 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.490059501 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.421273986 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.304686955 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.326496145 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.008051229 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.8941572 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.546892626 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.383838548 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.320714381 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.088340555 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.99387901 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.417626956 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.31460888 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.271147104 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.763523222 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.349305194 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.325155954 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.753509077 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.894143136 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.459824958 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.813633813 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.421943845 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.448034898 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.596940953 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.70122238 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.493075328 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.366697759 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.314864886 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.309284201 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.291763503 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.850594069 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.301722316 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.300731208 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.920165542 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.42335422 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.059897665 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.25659955 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.547597501 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.389594492 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.732794033 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.453618171 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.799762857 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.173066097 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.379254468 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.569586912 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.368305087 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.434424518 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.082778993 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.395137784 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.304927521 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.278974534 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.650824225 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.689143542 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.703830487 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.644499215 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.41887926 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.988397981 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.4275814 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.116920285 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.301902291 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.30589148 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.785496783 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.458317925 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.72713818 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.459441189 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.77443115 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.429228452 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.629920958 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.542758067 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.384764814 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.310300508 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.321288819 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.333820191 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.318901207 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.840946218 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.222076379 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.794288093 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.466248761 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.148684428 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.821311385 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.167355867 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.480047168 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.599921271 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.626523569 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.33448176 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.281592107 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.69200483 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.394182402 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.502938664 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.365687668 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.096550108 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.372169304 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.285640442 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.871267908 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.314270365 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.313364 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.319405716 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.197908862 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.117864196 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.436370264 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.524301295 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.407792501 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.299575924 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.918679698 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.587886351 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.31677945 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.320259409 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.316270162 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.191916778 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.406160639 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.304975802 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.65072283 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.453153023 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.656214459 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.117986056 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.75161581 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.381060107 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.304363203 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.325522923 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.033705981 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.909440439 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.353330026 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.649839357 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.34008445 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.796178071 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.299531795 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.793704444 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.855983718 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.316959923 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.443638659 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.303399942 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.310204259 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.27498459 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.255137913 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.049207917 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.825399103 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.392272709 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.092858915 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.290414733 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.339881943 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.459899561 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.380960931 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.299840817 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.321194909 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.307511276 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.79723267 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.287876808 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.291552774 seconds)
  done (took 1550.992010941 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.570835178 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.327137545 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.300419423 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.312893505 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.294791773 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.294618365 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.307133664 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.310287225 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.297733364 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.288510671 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.31990626 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.314356466 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.318846983 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.572034572 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.280831614 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.318341602 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.314254256 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.306179402 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.292867501 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.297940938 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.3198624 seconds)
  done (took 29.271126383 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.30171655 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.301326011 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.322571091 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.302224331 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.291734875 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.279155187 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.304410758 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.321800511 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.308090079 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.297886992 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.311591074 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.314473198 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.331846019 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.333201695 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.3098883 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.300723805 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.305710964 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.318714375 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.317758861 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.317024643 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.315178373 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.315070889 seconds)
  done (took 30.113054456 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.281674618 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.307149346 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.029008127 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.413751212 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.306832471 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.311367525 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.316966514 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.515381837 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.310491264 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.204016844 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.692432753 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.332804959 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.323857855 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.519991164 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.41639326 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.298163113 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.448965367 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.304968511 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.301532926 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.291602356 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.317843726 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.529596826 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.448709857 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.297121651 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.13269496 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.468240142 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.331698666 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.303855141 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.301200732 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.288016658 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.388657897 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.296562883 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.174376646 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.115400617 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.6442682 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.194158609 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.387312298 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.306432219 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.295267225 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.319947822 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.525299567 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.08700898 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.301023235 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.302206087 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.615598204 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.426174076 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.299457014 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.650244978 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.319449426 seconds)
  done (took 98.283533261 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.30173444 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.430746116 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.372491806 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.288272802 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.400491579 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.320527413 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.341560245 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.320077678 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.309816823 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.313666818 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.451805283 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.473791704 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.29601935 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.302754376 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.391267874 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.328960742 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.317200003 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.307699851 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.299930891 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.320725067 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.301527596 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.372314734 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.417283174 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.477670184 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.31427961 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.318692608 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.304800692 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.313339097 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.460649256 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.302262671 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.301085351 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.311271088 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.422046513 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.421562505 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.321877303 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.314045388 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.428427654 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.317793194 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.305851531 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.306082684 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.295138315 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.301919492 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.350831724 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.414256763 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.30828488 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.411056787 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.303164955 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.310871236 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.464613178 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.30413608 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.30397531 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.469448185 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.318326373 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.332932485 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.3151809 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.422649712 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.316823162 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.29821015 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.315141466 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.444245999 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.305068351 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.301459313 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.472391315 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.305750106 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.30420471 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.482376991 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.403904063 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.309796044 seconds)
  done (took 93.119595303 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.32394069 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.455006525 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.488937756 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.482794396 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.438849591 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.424048754 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.443536355 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.448982906 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.45254468 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.43634802 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.437118151 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.412064772 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.423227389 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.408814341 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.454686517 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.390894022 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.429365219 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.438382828 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.447383312 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.431269441 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.400849 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.465749543 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.433995395 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.46061274 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.666913458 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.440988551 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.444704519 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.449451964 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.505320757 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.444118359 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.665263044 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.46506104 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.46514747 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.487071322 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.668484814 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.440549458 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.314049193 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.428455705 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.45203495 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.446123648 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.408904483 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.474220611 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.436712051 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.409308651 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.421149279 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.453296932 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.480955345 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.646714171 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.409843785 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.444451091 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.432359481 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.471829252 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.446807309 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.437150239 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.469101691 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.417496986 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.484386144 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.485677213 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.461777758 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.465834925 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.475168906 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.405827787 seconds)
  done (took 91.553622898 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.291984346 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.310784277 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.391033075 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.307253198 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.29981605 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.405189175 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.317678966 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.307895629 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.313686915 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.306978392 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.322624999 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.39142904 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.688242015 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.306382777 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.409590851 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.645397389 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.400481137 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.384881687 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.311454752 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.407206775 seconds)
  done (took 30.819863396 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.312890208 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.299297289 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.312744016 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.481783167 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.307480277 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.443941501 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.33430703 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.303288868 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.306493348 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.302540382 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.298013786 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.312750956 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.301643415 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.446935442 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.299809687 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.430887094 seconds)
  done (took 22.769818055 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.315201093 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.286351431 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.311773549 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.295335093 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.316885726 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.29341497 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.299004289 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.310654489 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.302393362 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.792069762 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.302090288 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.278779425 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.308635722 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.333201955 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.32788264 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.314693565 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.301700498 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.322412554 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.31226103 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.307920146 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.874150923 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.307686567 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.291172139 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.288997273 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.290175778 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.880317005 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.313771651 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.311139595 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.286037823 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.285454204 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.318280472 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.779826314 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.287252784 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.302465031 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.306386691 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.307082151 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.303996207 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.295078895 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.32300818 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.289682205 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.286129928 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.284428787 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.280920833 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.302421393 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.309458819 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.313763101 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.321545091 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.776221536 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.320473759 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.313708527 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.313455578 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.317466659 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.326505456 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.785652 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.298882891 seconds)
  done (took 76.117310178 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.352480984 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.372367397 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.30188182 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.322450533 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.375192475 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.362938616 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.337575159 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.329412869 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.355885846 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.314475363 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.377334295 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.319051972 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.326717083 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.361190699 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.349618008 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.329174094 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.290353727 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.39649021 seconds)
  done (took 25.478113344 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.297269421 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.307565864 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.305321905 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.303621033 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.299831475 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.319347222 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.328546193 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.312579152 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.302259702 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.297420464 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.322536894 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.312266072 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.295405198 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.300932677 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.285800855 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.314614037 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.303230434 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.293953727 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.308898492 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.298054452 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.301887646 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.291356195 seconds)
  done (took 30.005248864 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.347371297 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.341649208 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.310094011 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.317527712 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.325764623 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.348492177 seconds)
  done (took 9.320476837 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.345130322 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.363718901 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.347058706 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.376490958 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.40077086 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.390501036 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.393875008 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.382657191 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.376115486 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.626640398 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.409888448 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.381754945 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.378315689 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.437182945 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.40139434 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.361327066 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.423734659 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.390953501 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.363951007 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.370630998 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.394334507 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.403540213 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.408181457 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.372141057 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.392327998 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.437625035 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.360506269 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.608727381 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.392494272 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.352386711 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.353178223 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.386431664 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.370566014 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.604044191 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.361990995 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.38009733 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.390084516 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.404516621 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.377409406 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.438106636 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.356185362 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.384084088 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.397059045 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.40565931 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.368467456 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.387421519 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.401015507 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.390441509 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.386778137 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.623685 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.371232722 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.422870696 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.365189793 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.384472181 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.37626436 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.599635581 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.583208987 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.439029684 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.380346393 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.61232287 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.426368972 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.368350925 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.449637855 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.623744632 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.385341374 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.435469863 seconds)
  done (took 94.769673104 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.445867927 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.353428717 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.394037388 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.618320885 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.430444296 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.392383838 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.403835225 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.384280591 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.3929562 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.392384735 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.413784439 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.391311611 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.440818093 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.463214253 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.417165792 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.399169892 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.38073228 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.442137744 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.383404185 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.583214702 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.397341674 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.450940883 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.428453162 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.435923638 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.602674779 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.381173211 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.398408993 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.38421011 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.388776021 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.395320091 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.41107565 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.412797042 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.4300759 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.363367683 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.428470773 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.401018366 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.404541017 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.38522221 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.40877136 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.40372131 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.440290674 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.396986882 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.380863612 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.368571627 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.59780118 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.36654379 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.399432257 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.35371656 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.385328717 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.382751097 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.594883964 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.59922383 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.609624023 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.446095573 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.420807788 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.415818497 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.40454728 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.371352948 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.406332754 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.398558976 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.428300003 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.373199119 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.607621903 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.386910539 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.392170823 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.442622772 seconds)
  done (took 95.51377748 seconds)
done (took 2685.505126915 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.310163343 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.340048255 seconds)
  done (took 13.921230244 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.307810239 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.302266401 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.468890826 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.321673268 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.323513414 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.415308258 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.316089332 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.329993322 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.309282072 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.431997774 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.31333137 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.443555063 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.421085409 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.297301459 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.335915258 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.322084725 seconds)
  done (took 42.980039772 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.297033106 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.055230585 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.238122442 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.078533331 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.345709859 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.091255163 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.648022663 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 6.123496453 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.629124391 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.751997525 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.579568024 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.249501214 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.313969194 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.370101604 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.002072461 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.90285022 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.989625151 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.072576775 seconds)
  done (took 65.043522205 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.284753652 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.480083031 seconds)
  done (took 9.09167019 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.334305065 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.302520272 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.284331543 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.317907695 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.305527355 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.311884414 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.328158698 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.265182144 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.310665389 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.337996282 seconds)
  done (took 64.41409782 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.312074315 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.983885291 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.734100182 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.735911892 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.9396074 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.781682032 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.447333441 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.66323457 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.390742609 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.316560845 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.69900252 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.809404681 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.205701 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.592348606 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.973023055 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.557763926 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.009591931 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.685742598 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.645839702 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.724007405 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.519661936 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.481162443 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.754981536 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.172664945 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.292701989 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.917383285 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.58104597 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.454785848 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.405511088 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.501323636 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.765162402 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.312208136 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.694850921 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.318114377 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.499152173 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.968211375 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.011649153 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.503012483 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.74688931 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.663350393 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.699581581 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 4.014231953 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.374217407 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 4.008815151 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.450578688 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.661044129 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.337430874 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.544069787 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.407593167 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.420959285 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.913904112 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.485708191 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.440224634 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.438915972 seconds)
  done (took 166.26830694 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.298356923 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.757242947 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.46809957 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.302233025 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.735913079 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.523117919 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.135625758 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.778373311 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.302658717 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.529832044 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.490505748 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.452362245 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.317235936 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.294324463 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.305506256 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.3022406 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.474860689 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.819492651 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.321309452 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.295968086 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.512176308 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.556318575 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.420851152 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.290559132 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.457498743 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.559069378 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.716667202 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.436366156 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.696952444 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.311510444 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.74510968 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.310488794 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.292257545 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.202824416 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.691981294 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.653481962 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.758127092 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.293624252 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.032967587 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.291967031 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.919217585 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.487951261 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.645180858 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.438274206 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.451817868 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.537558856 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.917186233 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.308588831 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.034726518 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.485805134 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.529433238 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.521424731 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.604711116 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.322300482 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.858735972 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.292437238 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.296773945 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.586282368 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.45697314 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.438867013 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.298180122 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.258355073 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.294679275 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.57112889 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.297487473 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.418212276 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.302057194 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.307177824 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.426580263 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.459130082 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.460212441 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.540458789 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.544494335 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.231105908 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.649752347 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.546977965 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.705021146 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.540335189 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.314237283 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.304051545 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.681997337 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.755596822 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.47197507 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.564808306 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.634512004 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.589998499 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.855027616 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.301869227 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.541097924 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.470599758 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.629702556 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.447108129 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.669821193 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.191631457 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.281423155 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.286903075 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.605171456 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.443168522 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.305891616 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.83003272 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.575879625 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.17437519 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.508109773 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.813138366 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.43494113 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.302540775 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.858020932 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.290584744 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.501855618 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.597077494 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.312410619 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.287507867 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.456424242 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.240667414 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.304570638 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.337245846 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.691933515 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.325188672 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.477165123 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.292032825 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.568338714 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.132103797 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.544362413 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.298622043 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.563964185 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.522452503 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.46116703 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.308058389 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.644214423 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.585611215 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.714288272 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.530442746 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.908802568 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.288840918 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.591227189 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.301534135 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.287937132 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.506432964 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.257585381 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.491786027 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.309175378 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.644165218 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.470578463 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.697836565 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.328186794 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.555734651 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.563954471 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.700049861 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.294077435 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.445295176 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.286252799 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.343295288 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.472900244 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.279411371 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.275587855 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.186924392 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.311821413 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.467716397 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.549801271 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.986310353 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.698631946 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.657211367 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.299049473 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.766176434 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.505266929 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.838948003 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.771512593 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.472423725 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.288231394 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.302416927 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.285786593 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.531737487 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.497523653 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.30781916 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.309147809 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.03711478 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.444707299 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.302153146 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.510528465 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.617868993 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.749736659 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.515396317 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.307778615 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.673075089 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.283357102 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.491637244 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.82366504 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.632566569 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.305275499 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.32144148 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.301292007 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.299264363 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.503670888 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.567930494 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.005790905 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.443370011 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.604071596 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.516643933 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.622600526 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.771307428 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.288580224 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.568102907 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.294793794 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.725605696 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.308923834 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.518439844 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.553749751 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.279113733 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.614595981 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.686148998 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.554269231 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.711815447 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.318437547 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.297155972 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.286065961 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.460680776 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.754425925 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.29295314 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.835585455 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.679260897 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.425647273 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.524776571 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.547114675 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.273130702 seconds)
  done (took 773.059535629 seconds)
done (took 1136.091410414 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.284362242 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.286341805 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.298127608 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.294171509 seconds)
  done (took 26.456135762 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.282060181 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.395805668 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.477284641 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.301516408 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.71751451 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.347481828 seconds)
  done (took 12.810830187 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.278287478 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.311812312 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.294234354 seconds)
  done (took 20.175067549 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.592410653 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.751563511 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.489319357 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.399929747 seconds)
  done (took 7.535703809 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.333681037 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.331957862 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.300898311 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.34630711 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.313632581 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.288776066 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.308086392 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.323771709 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.325122011 seconds)
  done (took 13.202388637 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.899793603 seconds)
done (took 87.379160392 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.577064308 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.623029082 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.473682922 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.456630749 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.441016961 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.650163435 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.417099486 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.31896551 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.663683471 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.701572944 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.760957374 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.432088028 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.680708099 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.722096641 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.546713902 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.338163231 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.309601107 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.369307093 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.919588523 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.472253299 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.727561187 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.426243919 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.297602517 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.33323168 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.198287895 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.440978597 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.564031039 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.11011411 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.291979678 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.331213582 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.373253633 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.774259362 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.551190765 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.619752393 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.413617613 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.156626372 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.693730648 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.449024679 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.446131037 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.826274991 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.58744019 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.454489903 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.314163136 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.464812135 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.640770276 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.332531327 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.327548918 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.471566829 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.730338596 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.468642412 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.846784093 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.323555338 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.889592969 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.391281568 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.446281537 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.290335205 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.205162753 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.775407123 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.475680437 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.61518654 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.335862181 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.436771326 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.178292776 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.346971675 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.489104968 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.561909242 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.736247648 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.467840304 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.760168794 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.306436145 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.321379765 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.335843999 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.042780606 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.446912849 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.293922789 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.469872172 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.564927307 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.463736099 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.300734894 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.487331422 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.542448579 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.299764275 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.447472644 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.66948485 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.471713744 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.696500936 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.747882254 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.762242261 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.745458557 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.188117644 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.922292557 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.246416043 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.406500067 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.305376055 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.744672902 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.421358703 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.497180808 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.761264261 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.447549976 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.818942396 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.345884154 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.320063598 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.658698901 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.568544873 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.087219278 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.320168965 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.450712471 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.307311147 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.595452781 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.098469859 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.392157975 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.855088924 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.309888401 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.358332422 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.836410784 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.291501375 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.624136101 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.731347976 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.44350732 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.285910444 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.613091151 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.308402964 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.427579298 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.835948272 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.688488924 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.502538765 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.292726258 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.513660938 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.284875283 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.481661349 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.306604706 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.884351482 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.838952135 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.33042425 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.55516129 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.432959551 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.296700819 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.682041517 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.364505947 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.503302465 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.632968691 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.628601336 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.483919227 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.306411322 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.647282631 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.29587723 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.526741903 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.622465977 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.447288444 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.629634122 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.380802978 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.312094379 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.281877615 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.737825963 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.898094457 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.835272139 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.534506862 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.416370882 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.803762521 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.662041603 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.134422126 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.448820915 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.370443064 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.313938101 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.319647128 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.385942146 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.292098156 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.287457811 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.600729116 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.549761687 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.845301871 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.082542324 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.292679524 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.592596558 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.447689297 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.175053914 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.899403438 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.300476532 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.567046409 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.808416822 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.533885965 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.3547707 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.295378175 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.33900503 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.011868916 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.335067298 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.613193312 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.774039658 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.608408251 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.692576458 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.529695621 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.333494083 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.623170962 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.546052363 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.618493346 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.513025428 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.732114315 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.431262319 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.636206848 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.381138098 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.619176473 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.312697143 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.34481331 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.547154374 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.803797292 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.633537389 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.543708955 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.489061144 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.653031441 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.313339126 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.590898444 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.412398323 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.69052836 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.32458704 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.558343706 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.39263171 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.716903055 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.211051228 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.426958815 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.608820188 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.426804478 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.454538515 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.757050852 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.325994399 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.64894684 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.461711576 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.474996295 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.532083868 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.334951471 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.427375765 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.598128523 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.428536052 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.515865138 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.106004577 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.766037253 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.866830091 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.4204239 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.283089259 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.765796702 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.33260517 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.330788249 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.592767939 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.481753117 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.61601966 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.444641235 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.46159024 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.388294936 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.331908312 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.816729224 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.121449206 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.904284463 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.222975362 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.326927084 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.283608329 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.715622047 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.661136363 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.347297745 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.443618513 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.877474659 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.319311719 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.462117181 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.305478421 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.299406747 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.051000632 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.431285568 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.55907573 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.861355703 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.307016511 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.472551891 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.300664115 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.704186223 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.758913406 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.371001044 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.442752963 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.637504858 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.317096969 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.696942096 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.318309722 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.484569999 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.627894358 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.432604369 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.426412439 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.272764039 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.346998694 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.73474044 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.51399867 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.78465432 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.339348304 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.77786769 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.372104459 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.542775918 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.328959939 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.404195902 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.720621869 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.477007232 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.694320762 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.302009139 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.464954129 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.565526135 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.32960766 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.33806349 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.435124551 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.88588308 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.744186492 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.565167146 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.39291395 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.275974369 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.543452589 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.284718813 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.80284479 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.464007093 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.436606828 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.925927131 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.793638751 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.292668963 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.522343209 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.302532097 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.649485835 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.330628361 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.33314774 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.427455901 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.377639115 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.300877059 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.777565708 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.480840643 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.801095693 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.395336468 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.140780551 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.446405104 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.469872268 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.420325066 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.740626177 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.299981791 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.286632477 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.436038872 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.986632532 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.517652861 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.342970717 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.600021013 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.312549243 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.909604389 seconds)
  done (took 933.320785838 seconds)
done (took 934.789986803 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.57891382 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.685712887 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.568702546 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.224895031 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.114760128 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.974476074 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.601204705 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.541999381 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.409036305 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.575514932 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.277212589 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.145526814 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.407134323 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.450286967 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.41005393 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.43504028 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.524104589 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.561771913 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.441189588 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.278108739 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.711864252 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.273230364 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.73929169 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.635503106 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.710585822 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.437340261 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.543723412 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.851042372 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.858364983 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.52008069 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.550650392 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.598217092 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.147254621 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.557700991 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.430205054 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.410265937 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.202868089 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.41550898 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.588111003 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.413765781 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.703848548 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.447104794 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.048181896 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.160632988 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.128703623 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.755446862 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.187889296 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.413852471 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.469688876 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.521248456 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.554448679 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.549226378 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.833372384 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.545649839 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.176054303 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.169828717 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.844633548 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.21378529 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.063724571 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.537807762 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.843993263 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.440471939 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.540443769 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.534313281 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.439496279 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.618408861 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.744359523 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.593242954 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.606366533 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.602739307 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.576185026 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.562832288 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.427638379 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.455078846 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.482312677 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.563271311 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.17247846 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.562664748 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.119082378 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.435028282 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.243101557 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.258092611 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.264146087 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.404110416 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.561472955 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.08411911 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.123126582 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.252279068 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.474279326 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.610071636 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.261775118 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.567418469 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.804772302 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.523932395 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.572344865 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.587304578 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.153614484 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.578107788 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.288679785 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.597059735 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.113538972 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.548359579 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.365511561 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.422338805 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.437320184 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.592014182 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.548243022 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.761040979 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.555648306 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.481185844 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.707357836 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.484201887 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.554824722 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.443475127 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.415687674 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.111991588 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.598558483 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.214380393 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.55695177 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.97449659 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.620522169 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.432673435 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.749957308 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.634965891 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.583311276 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.424758433 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.444726703 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.253725846 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.443005983 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.449751232 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.514115394 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.844577007 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.543215075 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.25702926 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.561501132 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.114112123 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.55770833 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.542756805 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.408553588 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.242707916 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.422528314 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.280010872 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.610426391 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.69987412 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.572709193 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.635469303 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.455834213 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.598113521 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.561900482 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.458912555 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.551995752 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.449323835 seconds)
done (took 279.79595902 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.669444221 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.504192236 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.575458778 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.591831102 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.677046928 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.672625267 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.371563893 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.7495931 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.427727156 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.714675458 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.560434107 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.186847414 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.517547192 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.507509257 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.669750517 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.545154738 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.414000707 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.574453958 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.754682781 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.659029393 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.145021712 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.559324181 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.44572188 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.710307791 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.28808901 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.130966741 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.675780491 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.448899003 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.582337273 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.068370075 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.128202026 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.584874955 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.661721156 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 5.091701967 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.723660972 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 3.046725081 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.676242228 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.123313674 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.667013166 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.649487721 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.574701929 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.152576102 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.052277206 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.135609713 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.465652324 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.665070029 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.372398874 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.234484981 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.299473456 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 3.068845264 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.594963166 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.120570598 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.217861057 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.645258382 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.537160838 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.996617402 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.801481401 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.798383361 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.665004714 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.611952728 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.663170092 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.718606617 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.745855258 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.502299932 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.108083584 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.578736344 seconds)
  done (took 161.398695181 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.734202775 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.617165405 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.72210163 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.721949164 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.880087453 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.725788215 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.819621836 seconds)
  done (took 15.518191723 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.37144265 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.364542679 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.569355433 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.555620283 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.363974706 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.50790963 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.479631577 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.107824976 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.600313098 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.383502394 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.681110343 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.539336159 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 3.026938663 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.078149816 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.46695003 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.61486285 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.33089798 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.423421571 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.409338703 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.614721168 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.115442307 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 3.075444242 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.582145427 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.45758322 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.362042244 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.380516664 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.366517004 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.323113753 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.397954781 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.346823289 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.358499898 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.469439737 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.368325157 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.06766616 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.375927346 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.681123624 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.369721424 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.420980989 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.507653572 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.304771687 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.33442362 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.385102859 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.4876315 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.351598625 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.337954902 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.564404109 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.326734337 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.371760203 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.32593383 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.357811146 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.557599644 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.357607651 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.369275136 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 3.046909029 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.564251554 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 3.082953165 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.440742431 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.33041979 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.375745479 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.423124326 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.354402067 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.612259168 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.602014492 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.332486641 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.559686257 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.642178449 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.356430167 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.338304478 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.318809541 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.597385169 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.353081057 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.620398749 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.362750552 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.414066435 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.439196917 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.508603588 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.565585209 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.152910059 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.129158401 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.016409766 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.327459513 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.344418652 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.651681564 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.289092165 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 3.037576575 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.345714039 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.420135174 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.991492527 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.26199198 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.351302332 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.661906147 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.341135166 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.415662171 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.419495613 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.396470845 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.410461217 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.580820133 seconds)
  done (took 172.218117252 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.538679535 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.927811192 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.570735448 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.344660195 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.479387785 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.639197315 seconds)
  done (took 16.806984951 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.664729392 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.150979335 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.368488601 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.360806018 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.413979246 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.353760229 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.371930989 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.537366306 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.489219245 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.372421224 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.351844028 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.378273122 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.35682192 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.495921458 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.357218878 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.370565587 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.362664384 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.388069645 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.373212107 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.43956388 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.677162675 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.39364461 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.414043356 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.262758025 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.399930516 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.369342161 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.301611376 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.376779918 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.369185174 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.671427573 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.548272136 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.356252545 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.197907921 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.69059356 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.114629482 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.250813159 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.497954317 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.363699838 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.404240169 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.344984589 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.368276146 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.432881475 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.383912114 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.368368898 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.717474822 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.185454385 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.427475614 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.606459206 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.361801238 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.378707725 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.389269783 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.384218158 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.363205578 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.378066901 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.027801261 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.764157394 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.314147753 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.359997214 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.382429844 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.219552625 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.427393852 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.336466264 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.697069723 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.29992839 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 3.056393145 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.375087698 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.267653718 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.475171466 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.403379757 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.373935541 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.390919585 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.369354182 seconds)
  done (took 132.61454798 seconds)
done (took 499.851308678 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.322212764 seconds)
  done (took 7.605536208 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.395150133 seconds)
  done (took 7.844674534 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.312835346 seconds)
  done (took 7.624713893 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.305847028 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.319301135 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.310364118 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.341184213 seconds)
  done (took 26.613382305 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.489323295 seconds)
  done (took 7.789753271 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.27685978 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.316161629 seconds)
  done (took 13.9740657 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.504235469 seconds)
  done (took 7.827599364 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.797254545 seconds)
  done (took 8.106957472 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.29091603 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.320009188 seconds)
  done (took 13.91908875 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.320733107 seconds)
  done (took 7.642865847 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.358074104 seconds)
  done (took 9.764679192 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.342160069 seconds)
  done (took 7.677903626 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.34055081 seconds)
  done (took 7.661674422 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.515106179 seconds)
  done (took 7.826235196 seconds)
done (took 143.169861976 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.301807577 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.3113604 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.302578411 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.302765176 seconds)
  done (took 26.525822682 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.645421713 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.617979085 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.635921891 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.677938724 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.576611779 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.587088175 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.62215319 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.635181462 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.575607307 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.793858284 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.607992642 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.770342001 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.681774056 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.615543553 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.628618489 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.80141587 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.666426076 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.620161903 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.570838363 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.636762801 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.785235947 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.807259597 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.075747251 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.03747436 seconds)
  done (took 41.958859406 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.518874806 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.666862388 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.486757727 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.692456115 seconds)
  done (took 7.645510102 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.321992052 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.702634232 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.687803853 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.743908026 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.653364694 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.492237417 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.692311899 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.481586354 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.490234221 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.448514081 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.948180848 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.453792753 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.501143221 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.724325034 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.503517532 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.305087929 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.304532087 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.452040255 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.686503575 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.520915736 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.567177298 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.677196927 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.674628653 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.662729478 seconds)
  done (took 38.995927975 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.080142875 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.240152698 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.667916138 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.241106409 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.012387537 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.103310396 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.575972302 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.82747205 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.573481679 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.549370798 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.048703612 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.06630992 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.454768568 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.195142912 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.128919558 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.489966804 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.503421453 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.147222137 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.916748274 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.604042089 seconds)
  done (took 42.730997669 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.301248338 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.308279512 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.545159095 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.470863769 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.299595359 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.317666131 seconds)
  done (took 29.547628003 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.399475361 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.447306648 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.631724146 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.580940168 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.458497563 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.454996877 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.997675931 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.518391583 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.101232201 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.120844839 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 3.007836593 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.744262997 seconds)
  done (took 24.761278605 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.307826349 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.344610956 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.281540256 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.477258208 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.179361784 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.158721411 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.62931744 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.306108937 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.413777341 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.495570617 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.176798141 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.474960374 seconds)
  done (took 42.547637671 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.502700601 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.558566892 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.631968099 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.264830864 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.845386432 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.40916659 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.721034081 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.84212664 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.393612279 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.178208582 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.835201913 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.361710706 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.842627787 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.277860119 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.307563328 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.62757548 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134736438 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.806435321 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.758011581 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.387726367 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.268916366 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.468915729 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.300011323 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.89651123 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.63786945 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.320478135 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.519329988 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.539626647 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.303699189 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.515391881 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.382646359 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.770324677 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.507506274 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.603004647 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.844019146 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.363717484 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.403421688 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.573784375 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.899778427 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.605142313 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.448685219 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.450850751 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.297402872 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.534407357 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.566652845 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08860016 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.298452056 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.962153273 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.300144867 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.467211751 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.242714149 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.996365768 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.649377421 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.036728944 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.440008713 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.639723992 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.484351739 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.571846499 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.614511577 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.381884428 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.524962333 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.384176415 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.494505973 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.266816288 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.840105263 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.643409435 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.676127782 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.641768487 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.557693588 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.617591615 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.654576331 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.474771612 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.497705655 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.435671751 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.816206442 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.23231582 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.725347237 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.294893391 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.04467135 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.871505703 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.276326158 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.416418081 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.055173699 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285860964 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.286470561 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.486060268 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.176653305 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.286183529 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.390005625 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.361567258 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.741769246 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.467167657 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.460729496 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.578716822 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.011263364 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.284420512 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.208460419 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.580565338 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.283300012 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.877224445 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.359003373 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.262315289 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.390273024 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.874076126 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.699347124 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.337648856 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.067088029 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.965071228 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.620555092 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.93947795 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.476319786 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.304691189 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.652118951 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.622203885 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.309425312 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.076881149 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.596943219 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.426273057 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.676889039 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.299059438 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.281498863 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.707071627 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.488558936 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.361738732 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.50831434 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.316944662 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.451521162 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.319196391 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.103725849 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.345928087 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.560650341 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.83919867 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.520281063 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.391692189 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.253997129 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.442737101 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.83990041 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.362937912 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.601258063 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.751539692 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.902838183 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.799753949 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.308131852 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.143881238 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.785502085 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.648624859 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.656598282 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.902596336 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.485527191 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.413114523 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.282485143 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.459024807 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.29195885 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.871281161 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.311932526 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.11838122 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.068234894 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.661150634 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.301955506 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.290404562 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.59060449 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.564521874 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.044787592 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.358980719 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.448206114 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.574367239 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.57845339 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.286072047 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.272322758 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.670394099 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.567442097 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.836293089 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.557923865 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.051465949 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.636002577 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.795148063 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.515402687 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.638478853 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.131497563 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.567932172 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.679218537 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.0125553 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.329252929 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.854848443 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.413785988 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.73471594 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.549809531 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.04716946 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.556072413 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.222994443 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.345175305 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.780776818 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.276416804 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.454263767 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.755631069 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.346225759 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.878192809 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.527411988 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.527447317 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.64896434 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.325452621 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.663184898 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.159916164 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.725403195 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.677244912 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.615885135 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.294303085 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.156059064 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.874353142 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.828401364 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.451316827 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.786338785 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.614215868 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.372438943 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.305439227 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.680235054 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.331302187 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.14036391 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.642331545 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.115560536 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.030007538 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.455135533 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.303168616 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.306555872 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.291383766 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.472974141 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.365845241 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.47321166 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.929517392 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.582680824 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.642842794 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.301360895 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.309315711 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.592373927 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.620537876 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.569778827 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.834463955 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.892868755 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.99264941 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.392849942 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.970511676 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.475056477 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.33858569 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.991292745 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.636383478 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257747783 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.488061787 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.135157833 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.511598107 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.494552207 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.583970003 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.307812297 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.805351022 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.964824213 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.300641253 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.324134944 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.456138068 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.285211788 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.604992953 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.059698771 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.556906746 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.070523696 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.593329121 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.564927979 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.484136701 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.715591126 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.840320752 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.079814716 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.273323896 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.45689259 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.380978399 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.626094018 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.312511665 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.598086108 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.972535823 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.023868347 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.156880696 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.826766393 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.579786145 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.487016569 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.803685425 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.567200903 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.630966114 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.259940666 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.978674147 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.292603034 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.445634426 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.265310565 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.421745758 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.63280199 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.702961463 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.784425318 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.371253588 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.845794213 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.681842671 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.420033635 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.493117901 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.552943399 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.297194826 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.586613089 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.29563394 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.811532275 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.691762878 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.303702278 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.130335787 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.5129715 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.62412631 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.478160641 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.931067137 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.353080392 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441847891 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.789955872 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.486283748 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.463958134 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.644792002 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.436659832 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.348353753 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.358163146 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.864266306 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.307923696 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.781929726 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.912569801 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.884386904 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.684717389 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.082747479 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.305847769 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.525873835 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.479252042 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.304323755 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.476780083 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.704163033 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.349851472 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.523283451 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.619094122 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.542659551 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.825062565 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.394009346 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.905528891 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.59492185 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.79900489 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.863832564 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.075409441 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.808924111 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.825490145 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.830393558 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.306364756 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.452654223 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.801602547 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.123657881 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.373608105 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118594731 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.087836467 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.484849162 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.746008633 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.430992674 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.104432175 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.477359551 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.54164119 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.520650447 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451158543 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.28359346 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.984577584 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.087736061 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.547459994 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.461527917 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.502573133 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.488305771 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.949239482 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.85249762 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.603565709 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.086001623 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.790198575 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.538310337 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.275270362 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.275812706 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.59480258 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.484029542 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.378399898 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.626298186 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.730894611 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.349976656 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.345168398 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.821597815 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.901795389 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.05891932 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.034280482 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.658384325 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.819914573 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.748219784 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.304771516 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.069436687 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.534823077 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.747858628 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.712419963 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.219569451 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.685498407 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.610285541 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.469826127 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.284358623 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.503537495 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.315122253 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.384951201 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.204502984 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.607695368 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.38797124 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.163224742 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.940815613 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.7428188 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.340050583 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.358387786 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.549285683 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.530690408 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.307314864 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.960500261 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.710189762 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.480983653 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.294340472 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.067707904 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.27691916 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.522668316 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.772915493 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.506117233 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.146226021 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.426438375 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.965671587 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.927318327 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.833618155 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.512959433 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.288193797 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135026773 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.320683389 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.040623667 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.116431585 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.547847018 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.822394946 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.502406542 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.32808706 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.64235365 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.437154565 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.636362869 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.812965984 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.78618413 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.704096002 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.670095224 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.601568262 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.09145567 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.454420286 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.532708577 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.297730329 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.280590409 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.361082255 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.674907131 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.680617043 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.318414308 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.866629372 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.551968533 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.498429145 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.488480474 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.37656475 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.905206327 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.505236249 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.472654869 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.451072045 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.532717283 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.666035468 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.313197773 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.556619436 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.314091864 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.344515681 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.517567615 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.56807744 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.679614319 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.624159597 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.185922932 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.480984519 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106321152 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.250223637 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.862444583 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.330593831 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.129072691 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.686817586 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.288631854 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.795039657 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.986251 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.515063189 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.573181442 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.465901604 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.789062008 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.516924362 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.818374671 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.327475427 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.965842526 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.723702275 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.311447991 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.782400243 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.377336531 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.479401357 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.086501211 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.794163611 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.303224738 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.123897987 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.498205686 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.858346243 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.582234895 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.515761982 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.306033193 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.113775239 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.277184381 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.287076268 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.339733446 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.869855066 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.326904344 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.878511088 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.501195319 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.465708572 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.300875143 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.439032481 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.33548485 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.524650947 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.907012204 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.536743166 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.58039624 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.495888723 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.296814925 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.96034673 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.014636808 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.884489734 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.515586474 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.758558295 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.67734544 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.068635244 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.773669081 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.882315278 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.539602905 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.525327074 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.715249086 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.544956954 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.349046719 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.534595017 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.302011557 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.606174982 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.484578302 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.88182443 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.558652583 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.68276977 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.671896155 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.320082126 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.884557621 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.759443195 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.178106078 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.3136471 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.609623168 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.303985897 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.119452041 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.920607351 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.46437641 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.480124457 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.29087339 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.900291018 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.597125695 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.427981835 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.30133452 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.519902805 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.839883076 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.286701934 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127845956 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.200215971 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.527883333 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.625788583 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.266527601 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.498881558 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.33753156 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.262263131 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.818203554 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.346825357 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.610225657 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.281554358 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.82128366 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.290984447 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.450572173 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.486051443 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.681110714 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.308545386 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.307653397 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.488211609 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.308691787 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.303278615 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.644799736 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.398119345 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.558432201 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.784755129 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.564729691 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.6328639 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.154750508 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.420391132 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.323345681 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.622716906 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.163385201 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.859856252 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.533345402 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.828434454 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.400699061 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.328404945 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.865381553 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.57160741 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.038585199 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.443925572 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.828469458 seconds)
  done (took 2077.332111534 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.381357722 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.377471488 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.379291107 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.378225941 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.388978699 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.41027538 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.351782633 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.323742508 seconds)
  done (took 52.288673384 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.29220141 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.266888478 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.817043433 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.462437046 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.326474379 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.567455555 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.472007323 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.881106047 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.508473811 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.380943242 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.376601663 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.413965138 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.296312162 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.354051328 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.283153724 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.387863464 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.273578779 seconds)
  done (took 94.717025046 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.358129768 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.578882154 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.325438363 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.586157164 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.368804853 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.808180028 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.31675362 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.28552132 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.795273302 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.035376558 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.315286492 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.439802145 seconds)
  done (took 84.549475429 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.36240618 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.334683143 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.346002921 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.330282664 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.345738798 seconds)
  done (took 8.018862649 seconds)
done (took 2572.950254947 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.559014711 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.862745085 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.888716882 seconds)
  done (took 5.042435557 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.377152502 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.437258112 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.514017196 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.45371901 seconds)
  done (took 7.084484786 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.593557179 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.791741331 seconds)
  done (took 4.671704239 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.804286735 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.332457361 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.864844632 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.330470062 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.316828689 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.313159424 seconds)
  done (took 20.278668158 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.358340143 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.316664709 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.340429587 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.317398277 seconds)
  done (took 6.624424969 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.316980646 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.35720638 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.297186683 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.330580945 seconds)
  done (took 19.615134593 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.533528931 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.547483163 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.058065171 seconds)
  done (took 6.451230935 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.129034793 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.690282068 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.101753486 seconds)
  done (took 7.223643822 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.607390551 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.21512106 seconds)
  done (took 6.145664283 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.48146371 seconds)
  done (took 2.776269763 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.798423231 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.802069002 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.157808994 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.180002353 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.347390281 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.651366423 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.652434047 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.610929755 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.027027224 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.854860753 seconds)
  done (took 20.380602891 seconds)
done (took 119.165690558 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.231785631 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.713189507 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.473376566 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.391431922 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.478316497 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.49361398 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.327213589 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.161831729 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.614904516 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.616233918 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.404237504 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.484689892 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.353170528 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.704036081 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.342913447 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.660331183 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.754117703 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.263019123 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.075805889 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.653854838 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.934294746 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.626953466 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.086049014 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.651172268 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.740811239 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.48042756 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.221815827 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.673459229 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.361724373 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.225485545 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.491713331 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.928612807 seconds)
  done (took 158.931080369 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.327772552 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.337883486 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.341818228 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.305093974 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.191568019 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.336174577 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.32644429 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.31217709 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.056612578 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.057833507 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.333291152 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.196152647 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.317610422 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.317022386 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.338309583 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.30270076 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.162750288 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.318831024 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.337763801 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.336965716 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.32020422 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.987983567 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.340305241 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.97872735 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.202192584 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.319853165 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.328672152 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.2965456 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.33607581 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.327418986 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.316518701 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.30471195 seconds)
  done (took 193.940820387 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.299394846 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.319430099 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.326684634 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.311393133 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.310799977 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.333985815 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.319836008 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.335523369 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.336257209 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.333692662 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.327766547 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.343501565 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.311214594 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.295395982 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.307694983 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.325585351 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.328356727 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.314860512 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.305626536 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.319279375 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.318010823 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.315725622 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.303596051 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.289680749 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.32683594 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.269761173 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.283837897 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.318312204 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.307187364 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.288150952 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.310653363 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.32273326 seconds)
  done (took 203.38047055 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.61255469 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.355739216 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.251394464 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.866146734 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.23378709 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.346988207 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.892493088 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.602930581 seconds)
  done (took 15.460032221 seconds)
done (took 573.032302593 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.00791706 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.222545278 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.475189511 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.532576341 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.918149257 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.615227483 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.520364679 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.805504372 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.066881237 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.780069339 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.78871766 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.545367324 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.150865783 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.525515156 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.507337776 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.779783658 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.717531621 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.022371451 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.518560933 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.178344606 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.545664268 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.162702408 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.81018899 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.0865194 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.787480848 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.220661056 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.406229906 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.732280819 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.541495699 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.528526578 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.25833878 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.685167206 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.541189649 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.533411126 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.801629835 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.787456684 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.644790681 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.748128865 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.480973637 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.969862292 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.185864021 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.905341705 seconds)
  done (took 83.359560053 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.336961298 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.375306641 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.530378899 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.416217373 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.962890813 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.387363115 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.578839009 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.561911794 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.420622451 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.54689067 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.57928358 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.985508516 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.578724267 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.931438575 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.561208754 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.583428123 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.355943515 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.93566219 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.565309315 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.529441382 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.381569071 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.503554225 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.382482277 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.532701303 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.377040701 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.381444325 seconds)
  done (took 41.599974711 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.381816849 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.509675049 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.602162374 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.725547334 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.564302793 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.342367177 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.67512386 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.45641798 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.335992679 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.803097724 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.455297961 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.498845139 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.515894241 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.602280305 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.935107816 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.500295338 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.512580215 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.517454615 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.525164457 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.566754108 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.435058597 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.421657969 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.689727118 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.500345609 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.121488644 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.701168059 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.779741293 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.896902776 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.905976082 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.512836664 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.469689324 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.673848513 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.71248538 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.57758697 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.475295347 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.377180511 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.389356672 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.467132616 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.225224032 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.503263463 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.68364138 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.537161134 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.717168221 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.841571812 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.40752595 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.587003918 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.766327167 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.452503348 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.472058532 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.180935298 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.617803288 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.422118254 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.486072631 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.541598467 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.470812681 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.827360169 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.551875499 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.624540243 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.552184207 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.934059189 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.431983827 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.706253748 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.534369796 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.431233013 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.662572974 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.568877515 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.567769852 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.771051829 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.731097365 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.889375147 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.885131234 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.427311755 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.381430446 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.439537556 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.518401184 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.788789622 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.807519236 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.617674016 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.750592531 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.671591725 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.872658182 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.752603859 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.30922602 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.998013741 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.384591226 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.346625074 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.412308315 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.646087931 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.656744693 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.78191604 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.85304125 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.616306058 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.675143642 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.76703868 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.782356986 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.725317013 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.328643524 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.358962453 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.560994078 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.83861058 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.388871809 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.602912546 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.97241753 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.705034138 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.644667111 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.572786174 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.735952503 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.412587801 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.781387299 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.329962043 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.54940688 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.676834559 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.601021965 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.66903123 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.33733913 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.831783588 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.440499899 seconds)
  done (took 252.358679 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.288071748 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.299298148 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.294576722 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.296202073 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.288550023 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.89682248 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.373906017 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.278361348 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.929507215 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.360097083 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.282937259 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.293536556 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.29115638 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.292535599 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.88939921 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.849986785 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.941058053 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.294470034 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.296553889 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.297204078 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.990422819 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.300922699 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.294127605 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.271130504 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.294740851 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.282027359 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.28649217 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.315298293 seconds)
  done (took 157.366608576 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.348899417 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.729086052 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.375959346 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.451623803 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.375585069 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.366448367 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.86825646 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.479748167 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.418806951 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.357955107 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.350236725 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.616965414 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.585096786 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.938799042 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.470181307 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.464793115 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.005293257 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.484243709 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.373437639 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.35124351 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.51077907 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.691552884 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.640447916 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.608396267 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.508346622 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.612975407 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.447802142 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.370027629 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.483928032 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.845820865 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.35638658 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.720647571 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.475402304 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.330746965 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.838192069 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.688470149 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.936077886 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.913299638 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.551908311 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.320706262 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.323822807 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.590847936 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.653167924 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.406934956 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.362940745 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.017856549 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.360631866 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.765288954 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.394800774 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.318018066 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.445396807 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.450738864 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.601312002 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.29520739 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.512567815 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.46721316 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.845548865 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.323707889 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.398011041 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.665974009 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.331414628 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.834202428 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.995873903 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.416650257 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.342167045 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.189455926 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.428930411 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.860283978 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.963432563 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.407362935 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.729662054 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.547197545 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.317083746 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.623244945 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.518007508 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.803012023 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.922757472 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.490335582 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.437981372 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.422315961 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.614045841 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.331575405 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.89352759 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.441654527 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.328773302 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.838818467 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.754574043 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.312927402 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.3621182 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.485986963 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.504572719 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.568362979 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.627963542 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.428898675 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.235205084 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.621099591 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.671441331 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.364525498 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.467272765 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.347793641 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.75002895 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.539909846 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.331723652 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.665932992 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.739465189 seconds)
  done (took 175.585228031 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.053470697 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.405596004 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.607675559 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.885524912 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.679937898 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.750254152 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.575572606 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.426477154 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.613656435 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.552193893 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.565363494 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.472577109 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.316457779 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.097548446 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.40003688 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.52314734 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.424861713 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.966098362 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.687453841 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.298938156 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.706394706 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.072603222 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.644089236 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.729264291 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.74865111 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.862732544 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.009264957 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.485078292 seconds)
  done (took 53.854274186 seconds)
done (took 765.428814996 seconds)
SAVING RESULT...
DONE!
