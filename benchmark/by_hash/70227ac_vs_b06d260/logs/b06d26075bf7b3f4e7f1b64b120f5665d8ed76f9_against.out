cset: moving following pidspec: 4165656
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.780385586 seconds)
loading group "array"... done (took 3.01992589 seconds)
loading group "misc"... done (took 0.398468706 seconds)
loading group "sort"... done (took 0.245985377 seconds)
loading group "frontend"... done (took 0.004298327 seconds)
loading group "shootout"... done (took 0.706228135 seconds)
loading group "sparse"... done (took 0.483657981 seconds)
loading group "scalar"... done (took 0.978231921 seconds)
loading group "dates"... done (took 0.134877325 seconds)
loading group "alloc"... done (took 0.016464327 seconds)
loading group "find"... done (took 1.167625007 seconds)
loading group "io"... done (took 1.161381263 seconds)
loading group "tuple"... done (took 0.731672107 seconds)
loading group "string"... done (took 0.199187417 seconds)
loading group "random"... done (took 2.127069558 seconds)
loading group "micro"... done (took 0.04690921 seconds)
loading group "broadcast"... done (took 0.544353356 seconds)
loading group "parallel"... done (took 0.018779911 seconds)
loading group "linalg"... done (took 2.678297281 seconds)
loading group "collection"... done (took 5.722358485 seconds)
loading group "simd"... done (took 0.872217212 seconds)
loading group "inference"... done (took 2.431349735 seconds)
loading group "union"... done (took 2.818701733 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.126486027 seconds)
  done (took 1.830282863 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.138198516 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.247775312 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.603850047 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.14093692 seconds)
  done (took 3.816108976 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.683291639 seconds)
  done (took 1.382177759 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.969709457 seconds)
  done (took 1.681211068 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.976157369 seconds)
  done (took 1.674804026 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.230581328 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.196108184 seconds)
  done (took 1.125179118 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.921943041 seconds)
  done (took 5.626463268 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.530989836 seconds)
  done (took 2.236647444 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049896536 seconds)
  done (took 0.778992916 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.22808629 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.222735195 seconds)
  done (took 1.191467454 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229865184 seconds)
  done (took 0.947452389 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.426208142 seconds)
  done (took 1.148642845 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.323211034 seconds)
  done (took 1.043311747 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.367627247 seconds)
  done (took 2.084479089 seconds)
done (took 27.334004817 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.273913096 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12489111 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116974219 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.161316495 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000303228 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162452068 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.092629911 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.320159791 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126581437 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.184868816 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.033950112 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.475146258 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026956343 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253569262 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047839983 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029740137 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.181041531 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020432718 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.442182127 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022219384 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057850477 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020418008 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.195293302 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4815e-5 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.356106296 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027867874 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038801137 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041670554 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032190311 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063906123 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022396502 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.366973852 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059270005 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.60013119 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063505381 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081172622 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091291636 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119540633 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030896173 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023798069 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023544798 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031265248 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074306953 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.029127296 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 8.1386e-5 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.069057077 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066444945 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018502387 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031737153 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020715356 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078108918 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034135965 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056160355 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021077029 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 0.08285807 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044845836 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.040420618 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134541882 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086931763 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026131649 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015594405 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047648591 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037837482 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059162211 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028872228 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058671672 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.077837559 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.033697169 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015806705 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082918135 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023191589 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041952602 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.040587257 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075273777 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047213721 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04041898 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041973488 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041172556 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065566916 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057120062 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075942573 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084246947 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051044435 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09372081 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064767046 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061045106 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042315171 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03536063 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173718328 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.017518266 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047418476 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057017362 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.016678615 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000326373 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028324808 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019160274 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031088723 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057680472 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.0342e-5 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040225102 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042565209 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050335543 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.010815137 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046666012 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.00048884 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.033473885 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012060644 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.5952e-5 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058733687 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012832902 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.4881e-5 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023730237 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028199653 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012505332 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066484161 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023313832 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052113586 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070639289 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016228102 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.018784274 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087784148 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05799258 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025005515 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031117562 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046778638 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.018944627 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013082987 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.9856e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079685747 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014859238 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024270232 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05163337 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.04282836 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015403728 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016247244 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053102351 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.02255717 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030835014 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.1078e-5 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029304051 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039494118 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010739326 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068712146 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074900188 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060005 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011626469 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062604887 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073365362 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036304288 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035750473 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088691645 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034886372 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048795867 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014293648 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051664331 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011341991 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.031375412 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034243358 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05062803 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033573601 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.8276e-5 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04954667 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027102466 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.068439847 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.066918296 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047963161 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018936436 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026718259 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048893198 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036294193 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043303544 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043700643 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07136305 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016579109 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050273348 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020020804 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021722553 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027834015 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024298257 seconds)
    (180/608) benchmarking "5d"...
    done (took 0.221648159 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020610709 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022133917 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040897644 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.4367e-5 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037281301 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021761536 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006767927 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016522082 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000215466 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010892258 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033213734 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.9546e-5 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027401926 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035582424 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061460962 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024673952 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053209997 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.00031659 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.087423429 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025899022 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082953008 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036101847 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050241148 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4656e-5 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035613128 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047550937 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052630174 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.049405507 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.545106677 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084031065 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063553366 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.2919e-5 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039522243 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.01592624 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032629604 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000339106 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044377435 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058341275 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006791867 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.03500607 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037159495 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017228213 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023842726 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.2425e-5 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.2635e-5 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020407077 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03030404 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006779698 seconds)
    (229/608) benchmarking "6d"...
    done (took 0.210785074 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025485076 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.917e-5 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026250325 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075469794 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02534985 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.019078918 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098197521 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.020557044 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027662237 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049366572 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070758541 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017939551 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080238528 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014721152 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047250114 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073362984 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046780089 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8084e-5 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050555133 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035000761 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04289503 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019432821 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047218425 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.0149e-5 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000104679 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.039749935 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046617879 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043606151 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000111718 seconds)
    (259/608) benchmarking "3d"...
    done (took 0.059741456 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062032094 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021946895 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040596127 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023484558 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059492389 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022222747 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.065053485 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047129847 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021930302 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000201558 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016631714 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076518507 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069286956 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000328825 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166239312 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.019078835 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055868539 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.021145405 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085672506 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.045267399 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068154225 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.02151222 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.030261781 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.047733028 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039035098 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000122914 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034552199 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040465968 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048329687 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041914983 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.037030941 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021665633 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035082301 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.016068253 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000160311 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.028124568 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052531961 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014400591 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015675271 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046977981 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.027314353 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.9177e-5 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027880388 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026270037 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037558865 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000452891 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054424074 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01665881 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.3649e-5 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.3483e-5 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042834176 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.052306915 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.021193959 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053715121 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061545263 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029830923 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020853833 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016351555 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070916353 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027042409 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02722144 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088591791 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.081886533 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.015795334 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022741497 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021456963 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.01919306 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058176542 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054141025 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034006412 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070388022 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.037934549 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051398387 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.019289174 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015950372 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.00011388 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021694597 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072233222 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060600246 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 0.298539575 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 3.8523e-5 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000146811 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01422209 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085726151 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.011951402 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031420366 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.9904e-5 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051012796 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000306475 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073882802 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 6.7012e-5 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091430189 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000484471 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046240414 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087501267 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029519187 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019882004 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015862281 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.9447e-5 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061304877 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043020412 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167959212 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051880289 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.5162e-5 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044116372 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015779055 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.1832e-5 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024298086 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.00048396 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 0.048219734 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029390841 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028114399 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053940138 seconds)
    (373/608) benchmarking "7d"...
    done (took 0.250938691 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051562357 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036429268 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3288e-5 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02331433 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017735697 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034101269 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01860616 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.076762193 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017504837 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021135424 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026100452 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024663409 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054282175 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067111828 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033609231 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050687045 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065413316 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076941679 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.035335439 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047191179 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02382172 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04853161 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171754716 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017464394 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060474502 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022721948 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013408557 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059736131 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043050113 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000535256 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038903296 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043433826 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079253732 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075819609 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064073144 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015754708 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024096263 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048764501 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.0344e-5 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027070406 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046533425 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000115164 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.014686135 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026432649 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.4318e-5 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 9.8105e-5 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018146814 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01447454 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.013664496 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000150215 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028702998 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032557136 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.015932831 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060993274 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01938441 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.3016e-5 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064631811 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023127776 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015875032 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017152483 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02496437 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082853619 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035536792 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.01378942 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03417364 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057520879 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069770576 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026912154 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.016684051 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.02709989 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.9781e-5 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.053131534 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010314045 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7802e-5 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018921186 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037603026 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021267277 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.0774e-5 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033056095 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049928917 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027020795 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056242453 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067155885 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044847667 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067434282 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.1122e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030594668 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076098088 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046711637 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025907851 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024724658 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.021889523 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013786359 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1907e-5 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055797533 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011685618 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044400872 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041373929 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.032308879 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041041572 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015760439 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060904191 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035200584 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.021993535 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042385298 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073784199 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025442495 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038820516 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059034149 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027679643 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067137052 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16559149 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.063961413 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045629538 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03273675 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015490523 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060500757 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06338622 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027129817 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062391466 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065266134 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011145159 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041701315 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.0079e-5 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027634768 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000560966 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072615525 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.059699745 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024908329 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042084622 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071071549 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048032757 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016503292 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069782613 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1854e-5 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011078201 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053560136 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04908903 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047253708 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.446040561 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.0024e-5 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019848001 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027654019 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000325481 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051526056 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052571426 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050075431 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012731402 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084236175 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027626901 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041024225 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02134315 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030351803 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059316379 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058472238 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.1549e-5 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054473016 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.039758493 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026125406 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.016046909 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021985361 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.028319469 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000112173 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071107377 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049363917 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048637668 seconds)
    (540/608) benchmarking "2d"...
    done (took 0.046456003 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033254979 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.6565e-5 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021771359 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014278862 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.7685e-5 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065420182 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.046486527 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032632776 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.0053e-5 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02939243 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.059274508 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024200407 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051577064 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028522657 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027327757 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.061012234 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.1853e-5 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017791634 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06390109 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.2529e-5 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065059066 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045992739 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030044599 seconds)
    (564/608) benchmarking "4d"...
    done (took 0.09424636 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.6021e-5 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012650425 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.0634e-5 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046727447 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069231612 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069918658 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052995009 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041147839 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068386618 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024706685 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023576821 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053204087 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.031854677 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034463056 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015623187 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030687028 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064759098 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014118807 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065115858 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062240063 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.034977019 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000113763 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041488115 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 9.9986e-5 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066533518 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019830202 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042068887 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067272755 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062449568 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025954246 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028237564 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077952705 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.016292414 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027116257 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02487451 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063200957 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028983143 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000344162 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047545024 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.182302987 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.048519535 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000103839 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024715153 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062741857 seconds)
  done (took 29.024644117 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.062340359 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.23099342 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.038737277 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.056798504 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.058529378 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.052214979 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.032550596 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.192559054 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.063753721 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.052839108 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.03910029 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.067308088 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.039317311 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.052089545 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.048332366 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.034297432 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.039960634 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.051778584 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.099178571 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.066221613 seconds)
  done (took 2.209633538 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.199233375 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.028996507 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.092977731 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.073406474 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.074671654 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.536713711 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.053355593 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 4.9206e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.284644203 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.055868791 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.2803e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.004099447 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.1527e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.006819284 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.1888e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.008338466 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.1866e-5 seconds)
  done (took 2.282603515 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.17272736 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.344745489 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.107182529 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.193740073 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.131626697 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.305611043 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.486110214 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.286171657 seconds)
  done (took 2.872838657 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.132768456 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.03446277 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.113658827 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.097644957 seconds)
  done (took 1.216072336 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.055689475 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024403176 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.033989887 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024265273 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044369748 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.02417418 seconds)
  done (took 1.046681733 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045016823 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.051926797 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.176376486 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035641663 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.034683505 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.039028299 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.055195006 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045680621 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.036855634 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.039990955 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.031673385 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.025980315 seconds)
  done (took 1.488178218 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.058135012 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045587895 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.051092638 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.043771355 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.039551952 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039333524 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.051059806 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.044747193 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.038557098 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.024763467 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030240166 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.047248658 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031211862 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031583266 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030113771 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034734127 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035620371 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.019702219 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.045970381 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042075732 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.043918217 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.045111882 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.035031913 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.046090541 seconds)
  done (took 1.797062201 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.149851049 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014190112 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.010583412 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.014432591 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.014886259 seconds)
  done (took 1.047069265 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.140221001 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.51363758 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.430324208 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142265715 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009273995 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.007489065 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.544535567 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.663691737 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.384249074 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.758752848 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.592506933 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.098600696 seconds)
  done (took 27.126605894 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.051706975 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.048216419 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.051583177 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.04595372 seconds)
  done (took 1.039569631 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.030949715 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.4485e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.041939256 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.2417e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.3062e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.043422042 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.037827931 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 2.1685e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.384e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.2549e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.4407e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.9638e-5 seconds)
  done (took 1.002292148 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035501349 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.0450555 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033383759 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040321717 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.046337027 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027436315 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026225477 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039687606 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.04034192 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037774605 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022519798 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045204615 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.039822969 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.02853106 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.037604043 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022469309 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033348769 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.040623004 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.02688645 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.033886776 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023109926 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.044504722 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038097228 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022429336 seconds)
  done (took 1.680833179 seconds)
done (took 74.557062033 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.092630277 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.036707102 seconds)
  done (took 0.972102072 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.20571563 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.059571485 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.061333729 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.054036558 seconds)
  done (took 0.971255644 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033870491 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035287451 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.03995674 seconds)
  done (took 0.96742445 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.046284122 seconds)
  done (took 0.910096733 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.147278584 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.239114202 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.091976742 seconds)
  done (took 1.334153126 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.16418009 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.055959305 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.055551973 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022105536 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.032092867 seconds)
  done (took 1.02565853 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044458099 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.029862884 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.019996314 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.01919349 seconds)
  done (took 0.972489592 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.061588588 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.058349773 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.058239685 seconds)
  done (took 1.036590346 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.060465973 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021808048 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.021779649 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021477372 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022237078 seconds)
  done (took 0.950844638 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.174926182 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.081663576 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.036233278 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.090802244 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094810587 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.9913e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.0137e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.3141e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.1441e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.071993409 seconds)
  done (took 1.412408927 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.121230058 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.213e-5 seconds)
  done (took 0.989101146 seconds)
done (took 12.883084938 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.105011413 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.109927234 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.563375094 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.584506976 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.036117387 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.024547036 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.030344106 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.4674e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.023811884 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.1692e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.910896478 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028237569 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.573862252 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026701391 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.082095208 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030173014 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.2791e-5 seconds)
  done (took 11.99158291 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.001e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000901912 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000369766 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000933353 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000575539 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1577e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.1029e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000350893 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.00102766 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000369025 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000359933 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000586056 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.022859485 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000534696 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000421821 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000549859 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000380835 seconds)
  done (took 0.970546403 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.4998e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 7.884e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.228e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 7.099e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.79e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.461e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.503e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.972e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.8421e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.682e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.7068e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.433e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.1505e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.696e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.095e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.202e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.795e-6 seconds)
  done (took 0.909126755 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5002e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.2036e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0312e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.789e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.5127e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.007e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.675e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.252e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.6793e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.983e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.0605e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3613e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000218424 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2218e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5111e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.1212e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 8.728e-6 seconds)
  done (took 0.910669331 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.037366925 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.034435049 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.892857389 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.974857175 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 9.011021003 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.03799503 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.188251105 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 0.030510447 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.391260456 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.0324037 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.735404422 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.280985525 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.228759634 seconds)
  done (took 21.784486196 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.242731835 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.209599139 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.129610962 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.061825536 seconds)
  done (took 1.585170139 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.146960662 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.107041053 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.072350073 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.06043638 seconds)
  done (took 1.32489745 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.103892192 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.049394219 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.065728305 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.054698503 seconds)
  done (took 1.214023413 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.038041701 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.055385565 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.036912503 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.028398738 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.03403587 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.054685308 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.024534898 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.024683891 seconds)
  done (took 1.238468458 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6489e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000167087 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.9596e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.5121e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.4321e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.885e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.21e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.0952e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.00010572 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.9556e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.7549e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.3453e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001877201 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.0993e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.523e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.6214e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.7435e-5 seconds)
  done (took 0.944461807 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5252e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.9487e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.142e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.745e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.068e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.139e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.827e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.112e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.917e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.896e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.619e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.711e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.1729e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.516e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.3762e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.566e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.366e-6 seconds)
  done (took 0.944980359 seconds)
done (took 44.685080906 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027441435 seconds)
done (took 0.962236834 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.091743553 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074221414 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.054729853 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.116946544 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065861995 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.113524716 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.092418773 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.484467027 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.071516291 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.070772865 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.387871663 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.829403332 seconds)
done (took 5.39446236 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.109408455 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.211405105 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.046547269 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080519974 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.3023e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.040630675 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.080751398 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.037679461 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.107533054 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.054585231 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.088699246 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.051594456 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.297e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.8887e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053179772 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082144722 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000719289 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.105589648 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.03660484 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.4149e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.5542e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000714156 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000678425 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.2652e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.032591529 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000779559 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.5284e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000800891 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059318104 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.1003e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000142615 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.1069e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.3595e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2798e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.3854e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001094742 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 9.1052e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.065462206 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.2363e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000812483 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012528114 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.6074e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000982671 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.8948e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000136927 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001013204 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.2445e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.5109e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.769e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000706132 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.8476e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.4993e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.8983e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 8.98e-6 seconds)
  done (took 2.382719821 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.543294214 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.443912775 seconds)
  done (took 1.940807826 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.059589472 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.11435187 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.156171674 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.127175559 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.110475498 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 4.1296e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 7.698e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 9.787e-6 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.20897391 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.5301e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.0004e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.328e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 9.278e-6 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.4929e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.5263e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 7.771e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.6858e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.8677e-5 seconds)
  done (took 1.74257419 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.461764017 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.164396362 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.305940571 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076468823 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075298207 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.12827003 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000158885 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073197589 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.9207e-5 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078357397 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.072040588 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.9658e-5 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.033992968 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.4204e-5 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.0277227 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002627973 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.130628783 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002780451 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.09165079 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075987004 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.9873e-5 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.03335985 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.033364612 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.068091284 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.2329e-5 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002193291 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.00209219 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075076748 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002048322 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.034899592 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00010886 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001252525 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.03516887 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.029920409 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000720824 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031526472 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003184771 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.001868752 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.034938686 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003454392 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001786365 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000107432 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033170829 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000226705 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000131934 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000177561 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.9348e-5 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.7704e-5 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.034987714 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1348e-5 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.6003e-5 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.9061e-5 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002569159 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000124693 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.6587e-5 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003869935 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00011105 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002303733 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032921276 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.0459e-5 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000217634 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004660305 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.3635e-5 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000105698 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006159351 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001646838 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.8242e-5 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0029852 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000572463 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002390637 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000205317 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000155537 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002477607 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012329543 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000191583 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000106575 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002914105 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032014855 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.9806e-5 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.4473e-5 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.041500142 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.00022046 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.00355361 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.011695236 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002227374 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000202534 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006238654 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009073838 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000204763 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000105697 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000191228 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.00780444 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000110021 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.015958826 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.002548291 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 6.1562e-5 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000208731 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001376007 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.3856e-5 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.004337816 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001398307 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.00892915 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.001311683 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.4164e-5 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001997936 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000144392 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000119944 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.007643366 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.00233697 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.9679e-5 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.049394358 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000156302 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.118e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000218249 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003045364 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008164002 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008104653 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001396014 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000148684 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008349884 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.00201162 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011017791 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000121873 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001439716 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.3949e-5 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000120151 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000183535 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001552588 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007412771 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004993807 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000165409 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000227262 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013199013 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002343143 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000527203 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008090859 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.00012493 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012736032 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.009003952 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000247426 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000838789 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000110626 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001615817 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002534567 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 7.8358e-5 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.1861e-5 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000184158 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01152717 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.5488e-5 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.016365466 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.7575e-5 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.7432e-5 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002421846 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.9049e-5 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000150891 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001423209 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000130217 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1553e-5 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.2178e-5 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002445985 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.6061e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.017299861 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.4859e-5 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.923e-5 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001166366 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004775084 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000710637 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000141265 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.2825e-5 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000180391 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.000110217 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000538237 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.3509e-5 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001757441 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004984365 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000175955 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008592493 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003401063 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002095215 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000804076 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.7149e-5 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001719946 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.7769e-5 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000217474 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000129896 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002600332 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000135953 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.3763e-5 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001648469 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002760935 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006929683 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000122484 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.3172e-5 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002578846 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001454743 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000130637 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000180001 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000143638 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001979877 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000473503 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014294847 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003651489 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000748792 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.8485e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.00216233 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009106397 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.5042e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000111798 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002802813 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002831587 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0001218 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000184245 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.5889e-5 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018801654 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000122089 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000220299 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000880319 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.5386e-5 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007209685 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001269347 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000142847 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000154908 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.5217e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.00138201 seconds)
  done (took 3.800886859 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.058705794 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.143513081 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.235967081 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.031120345 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000195343 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.147273476 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000165795 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.261588497 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000118618 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.001892378 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000104922 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.046528011 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000235499 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.469808822 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.258836534 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.224814976 seconds)
  done (took 3.840983835 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.831778111 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.877236169 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.262802104 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.411105721 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.136398834 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.442174802 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133367267 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.108867492 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.112157316 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.10053209 seconds)
  done (took 5.394006183 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059662752 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.176415373 seconds)
  done (took 1.211940489 seconds)
done (took 21.257383972 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020522028 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020162061 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.019617373 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022007233 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.01938899 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.036301396 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019963106 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.019223079 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.048687376 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020052154 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.026394779 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033130737 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.020169632 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.019070691 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019153176 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.018762765 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.019886249 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019355986 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021317112 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.019285799 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020076366 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020840808 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.02031483 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020620265 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.019857458 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025619461 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020288931 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019495648 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025435057 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020902339 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020453797 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020469479 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019036747 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.019046253 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.019650145 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.018949477 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.027010115 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020295765 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020347869 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021201868 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.019956514 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020838777 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020267809 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020696927 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.019119104 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.018749177 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021251705 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.020956709 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.019274256 seconds)
  done (took 2.032505159 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035072052 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.6075e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.034659917 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.5647e-5 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 9.514e-6 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2755e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.1175e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 6.463e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.032e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.409e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.4946e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.42e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.979e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.846e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.912e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.741e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.008956682 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.9615e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.3606e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 5.852e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.762e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 5.842e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 5.317e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.823e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.335e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.469e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 5.279e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.734e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.4e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.254e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 5.589e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.089e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.0128e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.6243e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.105e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.98e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.637e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 9.641e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 7.083e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.456e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.492e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.101e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.6293e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.741e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.422e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 5.857e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.503e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.709e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.266e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 5.673e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.066e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.928e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.669e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.784e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 7.947e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 7.688e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.862e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.598e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.582e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.1997e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.136e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 6.131e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.533e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.936e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.199e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.014e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.813e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 6.242e-6 seconds)
  done (took 1.146597508 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019510025 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 9.296e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.104e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.638e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.631e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.165e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.716e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.124e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.125e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.621e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 9.376e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.317e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.557e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.272e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.548e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.623e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.327e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.213e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.235e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.941e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.27e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018929295 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1576e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.684e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.7e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.815e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.569e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.259e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.741e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.233e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.32e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.678e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.203e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.042e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.348e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.978e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.044e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2023e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.823e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.111e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.37e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.086e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0441e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.499e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.561e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.299e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.433e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.529e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.192e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.083e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.096e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.199e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.246e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.269e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.195e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.43e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.547e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.13e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.314e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.383e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.741e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.182e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.141e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.111e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.478e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.238e-6 seconds)
  done (took 1.018605658 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043301281 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026526966 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.04618935 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.041776089 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.03683821 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.049242165 seconds)
  done (took 1.222637461 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021493008 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.4658e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020740998 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.1504e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 9.518e-6 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.304e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.935e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.419e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.098e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.601e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.218e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.721e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.075e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 5.67e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.447e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.083e-6 seconds)
  done (took 1.021312628 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019145186 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.5138e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.674e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017172734 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018652812 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.898e-6 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.948e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000148188 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.081e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.081e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.513e-6 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.982e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.903e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.618e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 9.791e-6 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.14e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.28e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.748e-6 seconds)
  done (took 1.033121248 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019251022 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3372e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018566818 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.27e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 7.966e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 6.925e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.865e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.293e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.972e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.253e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 9.961e-6 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.122e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.958e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.686e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.563e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.654e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.172e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.837e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.479e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.042e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.991e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.536e-6 seconds)
  done (took 1.016614867 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018852977 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0331e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018901571 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.0869e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.056e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.784e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.011e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.216e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.199e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.34e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 9.347e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.606e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.599e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.497e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.357e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.173e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.263e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.651e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.348e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.552e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.376e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.625e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.29e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.283e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.023e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.358e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.407e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.502e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.0586e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.233e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.804e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.299e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.221e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.205e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.346e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.919e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.577e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.67e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.934e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.273e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.375e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.146e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.6975e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.07e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.593e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.428e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.575e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.309e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.196e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.257e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.594e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.506e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.42e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.303e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.575e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.401e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.565e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.519e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.956e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.861e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.553e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.227e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.609e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.246e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.416e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.198e-6 seconds)
  done (took 1.016152473 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.019193718 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018571064 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.287e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 7.279e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 7.061e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.103e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 6.059e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 6.142e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.21e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.627e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 8.993e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.681e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.204e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.645e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.753e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.294e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.057e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.064e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.308e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.173e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.324e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.36e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 8.577e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.5e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.943e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.361e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.956e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.411e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.126e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.12e-6 seconds)
  done (took 1.017004313 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.019215766 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.4203e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020647374 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.1803e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.821e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.828e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.995e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.271e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.23e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.944e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.0111e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.909e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.808e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.543e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.095e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.914e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.479e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.577e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 6.183e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.1152e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.513e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.53e-6 seconds)
  done (took 1.019813101 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019358121 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.3551e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.43e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018493381 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.1035e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.669e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.21e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.412e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.596e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.112e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.4344e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.432e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 4.951e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 4.939e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.927e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.126e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.045e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.154e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.018e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.769e-6 seconds)
  done (took 1.016740093 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021338985 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018475884 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 9.651e-6 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.0094e-5 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.263e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.31e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.669e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.006e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.523e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.726e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0458e-5 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.726e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.638e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.731e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.517e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.905e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.678e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.528e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.1455e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.686e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.959e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.655e-6 seconds)
  done (took 1.019083026 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01952767 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.0581e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.618e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.418e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.206e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 6.074e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 6.259e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 6.207e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.601e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.118e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 9.063e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.18e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.698e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.457e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.638e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.532e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.668e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.657e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.917e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.322e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.545e-6 seconds)
  done (took 0.998792858 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019311736 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.01914356 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020680509 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020075907 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015882569 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019421555 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.01575314 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.023572789 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015468294 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019072411 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.018890536 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.018617466 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.019616543 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023055997 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015799331 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019774148 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019652306 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021423344 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019881977 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.02010731 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019809191 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.015526198 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019267435 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019495622 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020257295 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020126103 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.020843051 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015559504 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015628483 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019186135 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019245189 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019012354 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.020650296 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019186125 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.019591119 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028558105 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.02051171 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015435531 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015497732 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020151502 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019680609 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.019729924 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018813902 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.0155054 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019646212 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.018997463 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.018877126 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015636175 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015466391 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019537271 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015713801 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019316649 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015465484 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.0189011 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019055731 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015376609 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015491224 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.019283751 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015454458 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019281896 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015416567 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015413507 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019627736 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015547041 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.018850704 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015647444 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019306455 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019295121 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019010681 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.01906707 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022228142 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020081432 seconds)
  done (took 2.327083112 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020073195 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019487785 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.93e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.55e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.618e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.452e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.529e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.639e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.92e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 4.989e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.8e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.136e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 4.845e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.949e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.818e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.924e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 4.708e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.034e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.108e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.018e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.542e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.066e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.12e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.378e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.214e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.273e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.366e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.34e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.315e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.531e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.116e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.146e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.179e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.166e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.352e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.133e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 4.883e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.165e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.073e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.217e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.265e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.442e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.5474e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.179e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.441e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.207e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.359e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.322e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.147e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.954e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.222e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.148e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 4.92e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.265e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.295e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.152e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.056e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.179e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.851e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.095e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.12e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.101e-6 seconds)
  done (took 1.022000442 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.019299561 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.01723794 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017287853 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018974526 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017619505 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.5692e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 7.9597e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.211e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 8.063e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.723e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017486141 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.795e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 7.7658e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 6.1193e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.049e-5 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.87e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.0796e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.568e-6 seconds)
  done (took 1.089654442 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.01924928 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018724507 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.1694e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.61e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.44e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 4.994e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.712e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.481e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.613e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.133e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.3902e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.599e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 4.998e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.328e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 4.99e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.137e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 4.727e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.208e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.903e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.676e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.885e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.933e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 5.026e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.14e-6 seconds)
  done (took 1.019487715 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.051341302 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.0187e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 7.405e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.432e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.073e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.909e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.667e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.829e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.905e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.826e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 9.202e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.887e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.884e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.535e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.678e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.464e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.295e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 8.858e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.802e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.926e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.195e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.655e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.518e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.712e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.049e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.534e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.85e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.634e-6 seconds)
  done (took 1.033666614 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018888519 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.018918869 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.5589e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 7.106e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.387e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.773e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.668e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.807e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.532e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.268e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.94e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.717e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.296e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.436e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.363e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.276e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.354e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.519e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.387e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.549e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.103e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.322e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 6.391e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.394e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.835e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.556e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.503e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.579e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 6.001e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.1e-6 seconds)
  done (took 1.018480675 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020693578 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018432252 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023072945 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.109e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 5.92e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018487431 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 9.379e-6 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019018903 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.02202741 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022019319 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023815852 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.4679e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019150044 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.3001e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.0786e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.020659392 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.1361e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 8.75e-6 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 9.317e-6 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 8.73e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 8.228e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 6.018e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 6.418e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 9.765e-6 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 5.937e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 6.448e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.095e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.516e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.578e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 6.898e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 7.324e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 5.886e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.129e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.453e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.939e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.893e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.82e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.402e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 5.954e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.739e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020228088 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.0107e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.7749e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 8.561e-6 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 5.664e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 6.55e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020525668 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.0088e-5 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.0555e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 6.636e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 9.129e-6 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 8.23e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.905e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 7.49e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.822e-6 seconds)
  done (took 1.229987567 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019098179 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.5373e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.542e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018654746 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.199e-6 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.7767e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.77e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 5.644e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.805e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.345e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.0625e-5 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.763e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.267e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017096266 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.1868e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.1419e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.466e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.000100815 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.172e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.157e-6 seconds)
  done (took 1.039773785 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019245042 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.4955e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020465127 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.1517e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.16e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.056e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.998e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.07e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.517e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.729e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0161e-5 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.085e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.049e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.715e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.756e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.783e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.0821e-5 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.565e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.849e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.331e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.664e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 6.039e-6 seconds)
  done (took 1.023756712 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.018762931 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.018867838 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.2592e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.848e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.0337e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.131e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.162e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.627e-6 seconds)
  done (took 1.020619826 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020075169 seconds)
    (2/2) benchmarking "in"...
    done (took 0.019930672 seconds)
  done (took 1.018822667 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.032130569 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020688826 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018892959 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.02307432 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024186095 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024063652 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01999636 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027820217 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020818797 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.021745132 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020753373 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020446492 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.024117701 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020563844 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021808889 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021689429 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020478382 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020730506 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022647604 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020923453 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020719697 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022322944 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020775962 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020021104 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026453537 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020770248 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021403661 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019932856 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022255971 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.02030274 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02078716 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026227858 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020332255 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019865768 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019822506 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.02144347 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021214279 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021148752 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021683827 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019513694 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019392484 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020698003 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023381819 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020183668 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004399984 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023566836 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.01977884 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019576912 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019873393 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022588643 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026583784 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021644933 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.021990788 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020903086 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021080917 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01980071 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.02069771 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021430463 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020250801 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021832314 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026364596 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.0268305 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021365039 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020129232 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021130471 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.026394384 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.02161719 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019944346 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019276209 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020999959 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.0241736 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.021750605 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022266966 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02196056 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020315268 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.02167135 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026648435 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.01997564 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022374685 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020394567 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020460251 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021001949 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020079649 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.023619674 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021367181 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026630316 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020824018 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022298246 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020398834 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021147289 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020884763 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.026681501 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021887652 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022872295 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021574125 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022319074 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019507825 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.01892359 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019740976 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.01947663 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018964168 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021165424 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026509844 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020475996 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.019916397 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020855629 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028040137 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022195755 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003230999 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021305464 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.022254614 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021013258 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021107347 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026268105 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.02084939 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.025928895 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023232914 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020157781 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019403977 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020229036 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003395631 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019246649 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019826292 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020094853 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021156712 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022389609 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021144202 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019124571 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.020830824 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021272824 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019520346 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020356111 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020804648 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020023729 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019933403 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.019816305 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021915592 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.020886548 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020602272 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020574814 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022523261 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.022563053 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019989361 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020407347 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021679023 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023016598 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020715543 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021396018 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021780022 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018853362 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021340135 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.021746949 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019344248 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020372237 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020691799 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021455013 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.021774843 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021270028 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019329383 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021210226 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019589942 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019249514 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027518343 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.01942592 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021429055 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021702749 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020760926 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003061679 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002759015 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020344005 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022199973 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.02059246 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020808913 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020284274 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020164329 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021124735 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021919991 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019991365 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020557495 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022364152 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020810676 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019351976 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019828513 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022244376 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018826262 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020736189 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.021586051 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022157182 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004021154 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022088497 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018664927 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021153958 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.019933508 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022063501 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020369032 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020425088 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019050727 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.02169348 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025893911 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019929264 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021999267 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021338413 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019740621 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020579124 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020544612 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021149419 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021018511 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.020963855 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019235955 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022948789 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018851374 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021708886 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019492559 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020444595 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020319698 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020083449 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019881436 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021025146 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020071998 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027898615 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.0213948 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020253331 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02608603 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026021399 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019124365 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.01998714 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026051993 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020659094 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020933925 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.02140935 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026043228 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021655974 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020655319 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020565299 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023227194 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.022842621 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021683793 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018670192 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.020707106 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021123565 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022050907 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019459356 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.018758976 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021300657 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.02203708 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023094078 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021401224 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021770069 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020244319 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021583319 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020849981 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022770437 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021725635 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019298484 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021467292 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023500099 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.02198921 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020302357 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021682177 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026185438 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019636253 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020328999 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.019982629 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020809698 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021381235 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021418406 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021040959 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022409046 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.020871957 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022749912 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020212889 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026970797 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020049907 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020225469 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019033861 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.027274724 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020642478 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.01860512 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020109156 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021497869 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021000111 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.021981566 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019023906 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021302027 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018984889 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021480387 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025993144 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023309131 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021498716 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.02142095 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020374112 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020568042 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020061689 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.020307589 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.020793938 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021102461 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021108631 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019635577 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.02062544 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020157225 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025181806 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019208736 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020529968 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018992129 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021613407 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.018982122 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021441269 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02142115 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.020924373 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019928708 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.021953235 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021427455 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020183682 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020396302 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020109973 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.020836654 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019830415 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019900287 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019125913 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01856197 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021306317 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.020973696 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020723879 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022888109 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022002197 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.019993968 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021535341 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020232552 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024044739 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022574755 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022802706 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022992923 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022135883 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.020801538 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020807519 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020153203 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.02503933 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.020994129 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019812602 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020622682 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.020845452 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020391598 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021131286 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019071975 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021836283 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008753348 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020132445 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020699421 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.02086006 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022620679 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021581511 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020325072 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021111385 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020144862 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019600116 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019641005 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020198088 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020161133 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019711618 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025349006 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020002413 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.02013343 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025005098 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.021942052 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021822542 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021184009 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.019541749 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019882293 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.022868914 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025689899 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020303636 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021319955 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020752247 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021667891 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020199472 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022313286 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019506536 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021611303 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.020971579 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020442745 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019774788 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018607706 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021455098 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020258404 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020346878 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020142221 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021434965 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.01904398 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020092743 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020796424 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021544737 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.019861338 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020519126 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021062359 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.02029789 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.019685192 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019838808 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020286496 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020749805 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025945728 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019129506 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021339658 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020119122 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019219776 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019667355 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019682178 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.021783294 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018579259 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019122454 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026034128 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020946939 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019879581 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018799527 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021701123 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020687922 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019667666 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021200481 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022072735 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019845864 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020590767 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018729254 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.0226075 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019013059 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.021877979 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019872639 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019709032 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020833449 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020802526 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018603374 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019163863 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019977838 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022372541 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021094897 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020487433 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.02090342 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.019972781 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.02120322 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018510256 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021340903 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021373671 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.025586941 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.021759593 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019775492 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020076881 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.025865836 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020053378 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.020961717 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021379472 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.019983759 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019711993 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019775485 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003774313 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02217017 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019724903 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021063541 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019784249 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.02193045 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.021987277 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.019911582 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018419479 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020108445 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019830469 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020097345 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021639778 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021402391 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020096192 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020629478 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003058793 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018786689 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019802314 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020101572 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020137428 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020083393 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02079947 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020705941 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.019827305 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018613523 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.019515478 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003147222 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.0198617 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021241132 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020540131 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.02005667 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020375417 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019741787 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.020875041 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020550072 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020730267 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025512823 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.00350076 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019190186 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021293164 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.021838321 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020126162 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020038625 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019645654 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020322688 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019696781 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019716687 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019306371 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019906712 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020159506 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019649475 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.025756831 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.020899747 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019049383 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019973564 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019496449 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019839661 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020613974 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.02251387 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.019892202 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020684107 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.01953387 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019500306 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021367266 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02542206 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022265087 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022122865 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020348819 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018762476 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022057961 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019844299 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02007095 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.020962208 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027066423 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018733692 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.019895806 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020030042 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020021697 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019572185 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021028445 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019701918 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020000657 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019929065 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.021241067 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.02038909 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020587452 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.01948613 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025160864 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.020841153 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020003374 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019509906 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021156994 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020049135 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020045432 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021145543 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025906649 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021401276 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018931687 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02240161 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018541338 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021101702 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008534008 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022123261 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019478336 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021195822 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025527321 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020366028 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019857923 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.020696656 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020419204 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019885715 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019774085 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020739683 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019377439 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021726842 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019748511 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019275514 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019941209 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.025452943 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019678397 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018649341 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021398548 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.02296044 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019772868 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022401669 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022387604 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.02086372 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021143101 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022334457 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025077191 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022948327 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.0205702 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019199303 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018790427 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019895981 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.021763496 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003813183 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021632229 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.008758165 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019423849 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019280914 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022184952 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020524597 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.003914407 seconds)
  done (took 13.338720135 seconds)
done (took 41.751031945 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.01909147 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018592386 seconds)
    (3/7) benchmarking "year"...
    done (took 0.018900731 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.019906771 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020554471 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020698186 seconds)
    (7/7) benchmarking "second"...
    done (took 0.020611147 seconds)
  done (took 1.145744346 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021213839 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.465373241 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.02158516 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.025833253 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.273621112 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.190283077 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.182849084 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.025815076 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.025619862 seconds)
  done (took 2.247842135 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020422303 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021401249 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.02125004 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022813793 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.040017094 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019705134 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022465372 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019993367 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.020757562 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026873182 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021878401 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019971436 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029733899 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024591973 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023471689 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020854118 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.020831672 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022319498 seconds)
  done (took 1.446114175 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.041223277 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.021952449 seconds)
  done (took 1.086053526 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019475143 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020389835 seconds)
  done (took 1.062221591 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.019245435 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.148438683 seconds)
  done (took 1.191922642 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.036462054 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020552538 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020652019 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.020578719 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.030447643 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.033123131 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.032780394 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.020475147 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020777305 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.02020097 seconds)
  done (took 1.278744378 seconds)
done (took 10.489306215 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.059581344 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.090981955 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.029927183 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.052314182 seconds)
done (took 1.256736041 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041626238 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040116203 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040068806 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028495357 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053607421 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03755185 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040482476 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.5278e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040325433 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.05443125 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.204e-5 seconds)
  done (took 1.393573336 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040677046 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.04009264 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039781288 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029886022 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.050388327 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027359258 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040231718 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.5873e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040490106 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.051357153 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.5272e-5 seconds)
  done (took 1.386399943 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.085510443 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083330539 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083152935 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.090521408 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.085846283 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027028936 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.8987e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08256971 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082456902 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.4449e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.086501482 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.082690766 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019026878 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.085706214 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.4287e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.0548e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.0253e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 7.021e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.08615417 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082039859 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.2706e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.2278e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.1192e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4725e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 6.881e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.094e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.609e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.3526e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 8.605e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.081083731 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082375942 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.3243e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.4556e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.641e-6 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 8.496e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 6.927e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1362e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0568e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 9.58e-6 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 9.923e-6 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0242e-5 seconds)
  done (took 2.24757191 seconds)
done (took 6.053796979 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023340856 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032099841 seconds)
  done (took 1.079107884 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.235822092 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.879804513 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.764219373 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.917397374 seconds)
  done (took 4.603541834 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.883767073 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.103823685 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.04993391 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.038096201 seconds)
  done (took 2.147662285 seconds)
done (took 9.102452816 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.069568638 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022501321 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020541314 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021539762 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020350106 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021033227 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020794499 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.021957651 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020494377 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022743513 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021873742 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021753852 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020201534 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022191381 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022487275 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020134452 seconds)
  done (took 1.455815867 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.13454882 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.224310956 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.273011564 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038714748 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.081720644 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027760221 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.142657193 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022564467 seconds)
  done (took 3.981466369 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022839011 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021261995 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024121515 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019973555 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.021829147 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023007245 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021691117 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023019708 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019782901 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.02103967 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021690098 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021459464 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023055929 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022342728 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021652175 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.024616976 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.022294152 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022207463 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026187067 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.022399971 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023226281 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.022634476 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021502477 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026486869 seconds)
  done (took 1.582459213 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021194276 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044606854 seconds)
  done (took 1.11920936 seconds)
done (took 9.181163801 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023106354 seconds)
    (2/2) benchmarking "String"...
    done (took 0.02317164 seconds)
  done (took 1.08488263 seconds)
  (2/7) benchmarking "join"...
  done (took 0.278012034 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.040496571 seconds)
    (2/4) benchmarking "different"...
    done (took 9.39e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021121198 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.968e-5 seconds)
  done (took 1.12519449 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020371922 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.133400253 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000210618 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.728e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000878874 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 7.842e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.805e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.00055263 seconds)
  done (took 1.177686498 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022606888 seconds)
    (2/3) benchmarking "different"...
    done (took 8.276e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 3.7e-6 seconds)
  done (took 1.069365737 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.037606867 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024664491 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020850963 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021137378 seconds)
  done (took 1.149567657 seconds)
done (took 6.952783864 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02208381 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020491108 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030327785 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.023906501 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.020827389 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023265974 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023212237 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020036164 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.037700938 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.059939159 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.7654e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.033105975 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.020277445 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.032616679 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.021563037 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.023184789 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.020646671 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.3432e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.020190038 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.0189e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023060838 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.020517548 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.021747295 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.0494e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.2039e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025756746 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.6958e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.2098e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.2809e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.0601e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.3347e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022073761 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.9302e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.0495e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.4838e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 7.108e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 5.607e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 5.004e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023215753 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.0261e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.5602e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023335944 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 4.0506e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 7.843e-6 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.4114e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 9.861e-6 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0246e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 6.024e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.1857e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 8.804e-6 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.1999e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.477e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.1327e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.020675217 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.025611459 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.2479e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.0822e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.5332e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 9.656e-6 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 8.872e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024629059 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.020769464 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.2634e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.8242e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.2101e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.728e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.56e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 9.84e-6 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.2099e-5 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034385682 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.034235946 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.9578e-5 seconds)
  done (took 1.811661238 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.038383816 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.044319053 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024068335 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023575118 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.02338452 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019274802 seconds)
  done (took 1.215902397 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02189595 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021069564 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024900692 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.034011993 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.02132841 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.039595043 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.02086401 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020959384 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024361433 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025166295 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020314346 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.020944219 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020786037 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.031309828 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024772775 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021562043 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021555786 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.02379093 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.050463983 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023984775 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021041284 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.023856765 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033710387 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.023564829 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021606336 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.038711425 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.020934365 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.023861794 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020356468 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028896036 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.034486882 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023707626 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.02463473 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.027937694 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022699312 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.030925123 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.036644757 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.032467631 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.047120708 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.031225595 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.020917557 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.04960299 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062392346 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038630173 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.033037532 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.02037142 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.019972933 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.020961698 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024085162 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021194401 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020204049 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023207141 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032543045 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.026862647 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.01912819 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029606279 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022578617 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.029699794 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022561003 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021061182 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020836545 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021694426 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021764474 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.021627928 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024986409 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028803212 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032772593 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.022807912 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021381649 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023569018 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020859174 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031262101 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020719695 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.023786861 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021118993 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.02316151 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.033972751 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021041864 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024180787 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021513845 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.0327705 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.03951573 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021125831 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023591097 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028204442 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018648348 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.027410058 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.03436723 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021384861 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.024444883 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.020638625 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.019513055 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.021506095 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.047711128 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.033450097 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.032687304 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029609862 seconds)
  done (took 3.643681443 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.050756305 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034387852 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033848688 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031083331 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.019888091 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020686528 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020766665 seconds)
  done (took 1.265868586 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.038903566 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.052547527 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.034740549 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.04951631 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.046712274 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.043715812 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.049244417 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.051091136 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.036614541 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.7103e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.039003947 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.037677499 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036507195 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.024852531 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002551797 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.047584149 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.034245737 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.037846287 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.0961e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.040361271 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.04168751 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.047667056 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.024650208 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.044489579 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.025535811 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039526328 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.7153e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.030147844 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.021916537 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.3653e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.00109198 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.027862879 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.5816e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.5174e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.025503945 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.034300439 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.02506124 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.4327e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.028401896 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.024822512 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.022438682 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.034170129 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.5584e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 8.214e-6 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.4743e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035072554 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.2307e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 7.7003e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005710728 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.866e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.1086e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001105183 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.068e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 8.695e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.6344e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 6.734e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.2269e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.02296171 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.41e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001099035 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.1408e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 9.057e-6 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.3933e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.025227343 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 6.9698e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 9.79e-6 seconds)
  done (took 2.345925382 seconds)
done (took 11.328879462 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037044773 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.099284743 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.058800804 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.124248295 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.139893938 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.354848334 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023350426 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.037454423 seconds)
done (took 1.934102805 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.045340247 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026473077 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.032735751 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.025445853 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.020619035 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029382154 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.101085212 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.023397111 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020505787 seconds)
  done (took 1.412368312 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.196966462 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.333372429 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.270419825 seconds)
  done (took 1.863960939 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.037977417 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.06204854 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.032589398 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.6556e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 7.796e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.047304228 seconds)
  done (took 1.250711993 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.231874531 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.07166742 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.112670598 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093339385 seconds)
  done (took 1.583277432 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.167811879 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.160919984 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.28221391 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.105333839 seconds)
  done (took 1.791420413 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.058750752 seconds)
done (took 9.027683151 seconds)
(18/23) benchmarking "parallel"...
done (took 1.078379077 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.025230384 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.023045134 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.039827652 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.035706616 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.022348329 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.105784715 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.044273766 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.145709193 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.040190192 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.022513559 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.242329865 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.025048531 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.029301891 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.03555944 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.022970486 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.120975811 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.028048915 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.118499765 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.040898713 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.088700442 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.118939442 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.08176528 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.229285432 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.031309376 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.090650597 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.023509225 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.028536665 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.085353612 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.090889396 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.045627363 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.044148944 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.028322777 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.027672125 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.026884329 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.02405574 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.036413534 seconds)
  done (took 3.335569674 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.051301152 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.245193821 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.088929007 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.150619996 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.056865267 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.03908559 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.187509129 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.143675805 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.248495016 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.00391016 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000156828 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.161626096 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003625796 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.127365458 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.141461152 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.275421987 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172104865 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048891474 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.208364759 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039922761 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.448858158 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022094714 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.638299152 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.9824e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.00368646 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.8967e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.05221295 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.290048063 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227821638 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000571286 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.252577908 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.318097835 seconds)
  done (took 13.727420985 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.551846587 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.178466567 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.092454798 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.020580427 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.110752737 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.146926412 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020330529 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09176768 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.085378503 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043917407 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.200842627 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.2905e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072669291 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.240852641 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033331117 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.107105786 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.215536252 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.057554203 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.114777552 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.052399932 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086413922 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.197428492 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051720476 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007825156 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.0659336 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059726886 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.033716282 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.063369644 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 8.5241e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.775820172 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.041968941 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.111310711 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.180523331 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.0517411 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.114618514 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025712167 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.2304e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.065794969 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.026189188 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.041913074 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000616417 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9546e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.020571813 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019699138 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.4907e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030335532 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.12924552 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.100723069 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.0928e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.08978762 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.026969612 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019902506 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012147924 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022270249 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.4171e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067854087 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.799022558 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09139748 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.026933514 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.050070632 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.21003326 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.992450463 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.2001e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.013433394 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.20003576 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.063555873 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.083609218 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.3992e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.050820552 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.2147e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066388393 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 9.2753e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019947857 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109824099 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053522445 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.7074e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001636741 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.107229084 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025873598 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001759267 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.7136e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.7967e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.1944e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.115740274 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.511355746 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.001568917 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.9135e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 7.8311e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001307731 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053369545 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000121123 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.8699e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02088231 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.0717e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.6876e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.106371325 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.0613e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 3.6463e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000140479 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.565e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001475329 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.014168398 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000728431 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.17033037 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.4896e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 6.0166e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.701245979 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.9994e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.00457251 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.1057e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.3337e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.5711e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.004930333 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001094115 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.843146485 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.004180612 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.0586e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007617848 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.7903e-5 seconds)
  done (took 25.08748438 seconds)
done (took 43.769204372 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.089975308 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059107395 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02694887 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.048461875 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.037326998 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.147806222 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.098335671 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035738027 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019541911 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.031889026 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.043405719 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035609112 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020245325 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.053212621 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.040819103 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028263273 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032086296 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.03067384 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020734717 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.02530907 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.02608513 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022628108 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019708912 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020016097 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031748211 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022301975 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026818545 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.019894975 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026057793 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.026878795 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029748989 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.030343191 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.018964454 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040541676 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.051629238 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020313899 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026549155 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.6695e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032489149 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.069804535 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.2776e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035743986 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019220572 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.101128004 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070992144 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.020689387 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.074326562 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.055766191 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039327862 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.027876986 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.038588581 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.038753231 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025602754 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025597986 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025311657 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.029509595 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.023770357 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.029248968 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.020477424 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049322858 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.020884229 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056673051 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036244658 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025977306 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.7092e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020034585 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.038859199 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.02804749 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025365719 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026897681 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026727701 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019638919 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.025996803 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.030881877 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040774071 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.029730704 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.052611621 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025311457 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032507251 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026557281 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.026452575 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038405402 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043143953 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032278859 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.057639645 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020710718 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032973448 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.0290368 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5426e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036476295 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.3224e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057214917 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034008056 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.028976742 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.03117047 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.028984595 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028757771 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036799538 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019120315 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035422939 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020035894 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.030903992 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026577166 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.034355561 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.61e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028825392 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024319829 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.5343e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 9.541e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.049658818 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026304961 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034332457 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031112228 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020770061 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027747434 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020022246 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.035643163 seconds)
  done (took 4.961916816 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033120462 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.051731531 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.134847188 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023083558 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.092282786 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.067310183 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.03884476 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.105853115 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040265094 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.163737394 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.040178436 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.141285538 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148649961 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.041354131 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026269411 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041083744 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021261301 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.089703344 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.026831505 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.023211224 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028145614 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.042428054 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.021888168 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022727662 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021111853 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.021700898 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043082409 seconds)
  done (took 2.682222629 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.03458186 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.033642585 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.02647845 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.039886254 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023346625 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033070046 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025680009 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.030893653 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036706416 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023240524 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.03635216 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021299534 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018917977 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.062570451 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026421554 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026784163 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026327697 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018923424 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022552246 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021121461 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.02000325 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028763872 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.054364533 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025038951 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.1666e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020863529 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036674027 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033311746 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021071751 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.0458e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020740363 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018997131 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021669257 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026969506 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020983589 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.02360488 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.020766299 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.2487e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018595738 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.0204119 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.021789718 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.030940639 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019947836 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.027768201 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035052329 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.4858e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.034250137 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.032334104 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023336675 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.040740531 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.029871466 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021986992 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.046e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.1079e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023032987 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020054019 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 4.6858e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.03256648 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024144808 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019560601 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.6302e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.036957758 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021185663 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.03783813 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.032539143 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021444439 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 3.763e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000121116 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026728444 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.2839e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 8.477e-6 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.0107e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.037130106 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026221143 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.039037917 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023168545 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024346811 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026375549 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.4669e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035286636 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.027913361 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.6038e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020501948 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.3539e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.6522e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.026867845 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023575095 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.032662117 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.5959e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.249e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040570785 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.1775e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024861606 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.4522e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021680162 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.5363e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.1105e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030410175 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.4223e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.2642e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.1616e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03794364 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.4646e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.2676e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.2412e-5 seconds)
  done (took 3.26846897 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033895322 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032230149 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052776513 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036833388 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047232022 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037073913 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020662589 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031272179 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021145249 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.024971148 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021310965 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021337094 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.040383618 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038159037 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044406054 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034112774 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.031526766 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.047231694 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.02131018 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.042956647 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.042566828 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032401508 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.0363915 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.036150474 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03069166 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.044070951 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037119909 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040350659 seconds)
  done (took 2.116033123 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027464578 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028081797 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.023944026 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.026690336 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.02771944 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028731362 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.028792772 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02181926 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026136027 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022123046 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027569357 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027624171 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026003944 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023205162 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.029649459 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.024741566 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.02748767 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022369492 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024573085 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027212262 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.022660357 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025780564 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.02851666 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.028670064 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027681987 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.025612609 seconds)
  done (took 1.8130557 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023657537 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.027930653 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.030137925 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031027148 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.036775405 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06575611 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.037875699 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.031758817 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020321696 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029967138 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005647024 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.021257336 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.0347538 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.023774192 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021524836 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004788784 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.020967417 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.011781058 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027075521 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.02099374 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.0216209 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011854953 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005473313 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012729104 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012014268 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.6874e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.028540635 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026032978 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026262422 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008892817 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003220235 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011625388 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.021443172 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011441292 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.00535252 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.009797066 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.7595e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003371043 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011277195 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008060878 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008361657 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.3793e-5 seconds)
  done (took 1.910037503 seconds)
done (took 17.856465316 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.059636867 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.168100916 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.046392495 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.056044323 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.071949306 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.072649734 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.030948934 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.058068326 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.040754648 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.079596201 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.046760042 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.109456451 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.041490259 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.07010418 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.225e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.054364172 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 6.4493e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.073004645 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.027984971 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.080080699 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.028323817 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.4935e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.07824908 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.094100886 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.065950166 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.046866583 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029589302 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.068373867 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.067454869 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.086214731 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.048829712 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.0981e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.062816993 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.067179669 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.065895103 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.039796865 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.077977185 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.0575e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.069199631 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.053168345 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.0520895 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.073311383 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.043793033 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.086688126 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.075418505 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.059700978 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.6485e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.09212124 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.060026934 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.8155e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.063848531 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.048082852 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.065108397 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.057454046 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.057177752 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.080695708 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057835669 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.5289e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.086705344 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031817599 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.073179575 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.031366627 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.3256e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.04735772 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.060763874 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.031850424 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.046445817 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.2634e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.076275706 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.5464e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.1219e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.083191069 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.2373e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.044053818 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.063582305 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.046569416 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.086843229 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.6253e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.5211e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.058196928 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.06418763 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.066133205 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.040054012 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.4451e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.0081e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.069036765 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.4263e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.053873354 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.0881e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.4613e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.043403722 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.055915522 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.055316015 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.065293147 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.059624432 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.066611427 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.8437e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.032059979 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.049944956 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.065069712 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.073810878 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.072030943 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.2715e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.058772993 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.5576e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.064846498 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.068082967 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 3.7718e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.067730263 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.1762e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.3349e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.751e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.031698507 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.6241e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.6429e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.065991495 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.063404279 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.049960033 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.056952827 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.7183e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.028312471 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.0154e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029654558 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.057469429 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.0778e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.069488238 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.032787774 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.2273e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.6908e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.8454e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.066379785 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.5436e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.068442898 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031556935 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.6047e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.062164696 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.066103803 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.052887288 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.060899249 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.6372e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.078464593 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.075947976 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.050295049 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.068914913 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.3041e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.153e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.031603582 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.067761816 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.05627752 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.9961e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.7511e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.7575e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.156e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.060381927 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.4579e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.052159701 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.3963e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.7108e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.7047e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.068838108 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.9572e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.8007e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.86e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.2303e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.06662253 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.3037e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.6937e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.050693711 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.1318e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.036177369 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 9.2218e-5 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.2082e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.5868e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.056772616 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.050266897 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.060422366 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.073600689 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.0658e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.056771853 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.062397701 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.2202e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.6457e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.8407e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.145e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.2314e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.0313e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.5286e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.7812e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.2458e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.6153e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.050655881 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 3.8014e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.8483e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.0491e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.049809617 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.040735274 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.1214e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.1222e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.029102068 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.056244226 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.2695e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.7503e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.037249225 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.9152e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.06323594 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.1495e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.0809e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.039896834 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.6138e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.5818e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028871271 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.823e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.2911e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.035287588 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 3.9337e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.031980119 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.058515962 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.027980363 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.0447e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.834e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.5611e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.038932277 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.1415e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.848e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.064799927 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.2239e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.3655e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.068249615 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.5106e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.794e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.058799834 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.9242e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.13e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.9114e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031620007 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 3.6594e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.05493571 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.2124e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.0922e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.7496e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.0091e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034835869 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 3.9909e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.6205e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.058498982 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 3.5807e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.024425151 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.070560983 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.9691e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.8321e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.7021e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.0385e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.7638e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.6931e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.05993621 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.0856e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.9735e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.3834e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.043819703 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 3.2428e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.3268e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.6331e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.2935e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.3505e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.9677e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.7925e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.2581e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7793e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.2893e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.3042e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.027969579 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.064756653 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.4951e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.7573e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.039330926 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.4249e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.9818e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.7148e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032175158 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024609322 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.6487e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.1477e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.04968417 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.3584e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.6628e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.0695e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.038170898 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 3.7356e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.5767e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.8654e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.9061e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.502e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.6931e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.8196e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.073767556 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.031186396 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036562194 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.047687142 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.181e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.8835e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.070069902 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.1277e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.8018e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.9274e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.7842e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6484e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.697e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.5753e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.053786006 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.1631e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.0421e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.5596e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.5634e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.0382e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.4228e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.7706e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.077571273 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.064315148 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.1163e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.044978809 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.6561e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.0832e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.8752e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.9643e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.6996e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.4993e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8773e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031963042 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 5.6421e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.4109e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.9206e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.9657e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.2499e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.9022e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.5981e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.3889e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.047501259 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.7561e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.8839e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.056128046 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.9935e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.0623496 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.6197e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.0005e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8275e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.967e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.057315577 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.4576e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 3.0567e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.1598e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.266e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.5054e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.0022e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.9839e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.4171e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.8926e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.8395e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.5002e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010805778 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.7824e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.3101e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.1971e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.6791e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.0212e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2234e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.7497e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.0134e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.0674e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.1164e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.498e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.5816e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.6961e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.6646e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.8719e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.0527e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.6618e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6699e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.779e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.5674e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.7417e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011351956 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.6876e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.0484e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.7588e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 6.6582e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.753e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.9994e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.2507e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.4019e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.6171e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.6033e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.6083e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7518e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.4421e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.8151e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.6806e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.5182e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.7048e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7764e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.0894e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.4813e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 9.491e-6 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.083988483 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.1647e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.75e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.3054e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.4488e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.0988e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.8582e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.2961e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.1592e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.03144705 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 3.743e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.524e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.7228e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.1078e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.4759e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.4425e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.606e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.4522e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.2612e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.7746e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.9742e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.02983897 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031087377 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.9313e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.1277e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.057237688 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 3.6224e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.7127e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.743e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.2757e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.0361e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.0095e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.6019e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.4299e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.5158e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.3159e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.7956e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.0026e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.6248e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.1234e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.9633e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.1255e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.5043e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4349e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.2452e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.7648e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.3528e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.0986e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.4512e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.1887e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.8409e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.9183e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.2925e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 7.923e-6 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.4937e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.6643e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.2128e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.066490869 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.7158e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 3.3807e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.9509e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.3959e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.7891e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.083328666 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.074871639 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.7172e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.4086e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.018e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.4757e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.6781e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.1529e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.064e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.3634e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.7603e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.91e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.4011e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.7483e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.7687e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.3991e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.1173e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.275e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.064255113 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.5851e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.796e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.6315e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.9148e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.3822e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.0678e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.9149e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.9133e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.4276e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.9936e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.059582311 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.6318e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.058972416 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.76e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 3.6499e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.9169e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.7079e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.5991e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.1162e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.030045174 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 3.4429e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.1194e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.0133e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.3214e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.0691e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.8989e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 4.8346e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.1821e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.8771e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.5007e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.5804e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3454e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.0241e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.1407e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.9909e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.8228e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.2027e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.43e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.8229e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.0028e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.3281e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.3568e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.5251e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.3428e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.057539662 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.6487e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.3876e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.027999185 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 3.6834e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.3486e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.9343e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.0406e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.4446e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.3236e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.8912e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.1693e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.3028e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.4261e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.6415e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.2121e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.5053e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.5316e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.848e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.3244e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.766e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.3363e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 9.595e-6 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.010830316 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.031536411 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.4066e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.1458e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.5043e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.8475e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.7722e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.7243e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.4647e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.05591323 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.5327e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.038921538 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.553e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.5401e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.8473e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.1044e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.5212e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.707e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.5298e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.4283e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.9531e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.2474e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.8234e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.0993e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.3039e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.6539e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.7969e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.6168e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.9342e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.3908e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.4216e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.3712e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.9859e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.0205e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.9523e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.6411e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.2507e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.4725e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.8245e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.627e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.010926524 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 3.7094e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.9789e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.235e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.2882e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.382e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.9243e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.6746e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.6598e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.9067e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3213e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.8776e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.3086e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.2381e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0117e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.5575e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.2519e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.3594e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.8287e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.2144e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.6937e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.7223e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.3277e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.6341e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6756e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.0716e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.0389e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.2374e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.5733e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.3888e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3174e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.8689e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 8.781e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.7773e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.6344e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.7597e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.9246e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.3078e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.3441e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.2456e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.7139e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.5533e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.3145e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.3569e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.3859e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.289e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.5933e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.4157e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.0598e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.7953e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.4481e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 9.289e-6 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.6088e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.0408e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.3316e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 6.0216e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.3837e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.9762e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.8607e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.3769e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.4874e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.7282e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.3357e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.6945e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.2721e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.2576e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.2721e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.1809e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4018e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.3937e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.3942e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.4493e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5011e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1073e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.5218e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.8933e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.1536e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3911e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.1341e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.4674e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.4033e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.3864e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.1001e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.3298e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.064e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.2389e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.3358e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.5255e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.2801e-5 seconds)
done (took 11.601172738 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.392532841 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.263316573 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.387209162 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.174825867 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.474763559 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.879610451 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.016836732 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.586650336 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.30478414 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.109898731 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.784625368 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.083409578 seconds)
  done (took 40.602655472 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.424026547 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.253078268 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.391794042 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.115581563 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.297962553 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.704514974 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.745350348 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.404645721 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.498663627 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.114452029 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.619931619 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.085346869 seconds)
  done (took 24.318647137 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.78160977 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.094674421 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.160086729 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.149410713 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.139425772 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.143597594 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.800394357 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.314218679 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.400337128 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.040994583 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.384769767 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.048500887 seconds)
  done (took 10.595627065 seconds)
done (took 76.691281047 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028197765 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.030426417 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.120663629 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.078458371 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06323781 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.038861842 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.039900357 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.036295165 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.116232952 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.144884273 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.3993e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.047006839 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.031015252 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.120750837 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03268897 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031336389 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026035051 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.03355935 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.061199072 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.042241424 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038645159 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.236125763 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.0303201 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030312459 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024459443 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037545765 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032836631 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.110983128 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.172446471 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.038480491 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.02932796 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 8.5232e-5 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.030126868 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.093403202 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.056816295 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030160518 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.030787404 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.215224897 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.178642776 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.031910615 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.037694533 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.09802164 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.03750968 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.195630972 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.029888845 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.161757931 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.121632404 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030555433 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.030208313 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.04537232 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024683072 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.029818789 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.111731711 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.115122784 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.4796e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.2018e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.197471978 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000221575 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 6.9761e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.036042992 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.066570097 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033115152 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020435698 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.027060602 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.034182107 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.040893197 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029757385 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029697556 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.182755164 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.093403949 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.114970151 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.036586317 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029916505 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.052887405 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.037127408 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.067927299 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034302425 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000109208 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.029269862 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045409447 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027234949 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.090562569 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.108061562 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 9.721e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029442415 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.035013729 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027352408 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.135142482 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.2118e-5 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028465935 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 4.5342e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.027925476 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.140848061 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029475945 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028628344 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.027528357 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029492797 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000259449 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.4536e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.145275507 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.193760616 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.08957351 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031612483 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030523825 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032283966 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.156355172 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030233163 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.076134654 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 7.7269e-5 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.026580725 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.032467801 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001723256 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.030081241 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 8.5889e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030831739 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.027876397 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.112345271 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.029527592 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.037236074 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029900423 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.144484915 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.093881008 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031134586 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.038991074 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.028974094 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.16581565 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.028293805 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038223644 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.09437007 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.019680052 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000102227 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.028645197 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029288951 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031082285 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.037564566 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028848872 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029187693 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.026928968 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.086224443 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.113310681 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001225558 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.089293736 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048187953 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.02931664 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.107822414 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.032790702 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.053869365 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027780414 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.090212973 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.7848e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.221143435 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026413747 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.028925134 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.454e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.166059612 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.174605981 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037778946 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.0941e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.6048e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002675847 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.253954628 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000148323 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031605116 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045087099 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029109287 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.149813825 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.13809949 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.090003741 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002217341 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027100284 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.033435785 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000899831 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 4.3882e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.048155348 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.23213691 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001243848 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029190557 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.143793324 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.036427687 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 7.084e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.089290901 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.028303943 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033170486 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026703754 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.159294784 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.029326886 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.133114115 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.031585073 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.03148817 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029559994 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.110433588 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000104619 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.027709721 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.177458598 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.026533977 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000111439 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024306059 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.03064559 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.0133e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.088935877 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029314037 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.03718881 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.095673889 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033568992 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000147461 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029714517 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000110218 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.024901484 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027791122 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.019956016 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.036709665 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 7.7432e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.086640603 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029400043 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.108810873 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.265985836 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.150061357 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.9184e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.1684e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029574375 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.285949085 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 6.7391e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029615392 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031947151 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033395203 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000107825 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.1125e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.030393159 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001706435 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033551329 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 7.9547e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029498799 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.1862e-5 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.110985137 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.4819e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.444e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.036223041 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.033660865 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.041716137 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.087443068 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.090355838 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 4.2973e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025247472 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.00113197 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 6.2704e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.033995295 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027340049 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.3685e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034766026 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.036967402 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 7.7868e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.141037239 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.4469e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031044878 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042351541 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.2145e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.4446e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028281567 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.024456348 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.065110595 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045106966 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 6.3413e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 7.0143e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.2648e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031010931 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029316147 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.2047e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 3.4145e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.2021e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.032593566 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.0203e-5 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002265991 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.087374428 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.02892943 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.028881861 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033732126 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001722602 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.108406434 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 7.7085e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.029998756 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.062543604 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.9617e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.0112e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.032987768 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.026924632 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025678423 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.035186034 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.246600858 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.108990044 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.7104e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.0763e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028782335 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.03284748 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028020087 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031287959 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 7.3942e-5 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.878499587 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036311386 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.17443163 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001864897 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044166557 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001727126 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.169146471 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 6.7744e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.035323172 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 3.992e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029018178 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028203728 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.02872922 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035222912 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.035708694 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.5018e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026408839 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026136409 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 3.8566e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 8.5463e-5 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.4197e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.032595418 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002192609 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.8173e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000101788 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.032615234 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.034814037 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.214031741 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.033254614 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.056567774 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.043071879 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 8.3275e-5 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.000999856 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.4084e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031410688 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 3.5769e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.9453e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.0588e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 8.5594e-5 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093860487 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 4.7172e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001679266 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.8296e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.6988e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.4044e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.2768e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.5698e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000773361 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032896801 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 8.2654e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033616557 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000121542 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.069388017 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.220142232 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037409887 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043042006 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029394192 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045019317 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 9.2196e-5 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001060103 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.133842037 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 9.3397e-5 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.991728505 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.031966786 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.2565e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 6.5096e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.3237e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.9043e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029230347 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.0264e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.028356553 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.2511e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000120276 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.115188415 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025456413 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.033731854 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001844634 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.027465032 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.028972478 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.3621e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000798127 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 3.7254e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.03725516 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042233203 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.001897549 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.9699e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002650142 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.026767786 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033039241 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000110167 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.0258e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 7.5943e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.4043e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.6735e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.5672e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.030806133 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3424e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001820745 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027762533 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 7.4504e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 3.9169e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.5379e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.030876084 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.2727e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065365485 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.0527e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 7.1287e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031870298 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.036039334 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000113125 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.156e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.2267e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 4.1632e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026623625 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000957795 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 6.8884e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.8655e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000111863 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.2691e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073091951 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.031632294 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.0569e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.028176801 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 6.7876e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.477546193 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.7031e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 3.8544e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.4596e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001797725 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.5116e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031060373 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.7809e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042459641 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.3646e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.036170983 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.309098549 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.03329762 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035435861 seconds)
  done (took 22.774850077 seconds)
done (took 25.156712964 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.903149575 seconds)
  done (took 10.262108473 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.368222734 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.399668918 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.392855583 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.362177292 seconds)
  done (took 31.883076618 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 8.390720286 seconds)
  done (took 10.75240426 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 8.118025161 seconds)
  done (took 10.478576202 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.742351943 seconds)
  done (took 10.100869761 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.423128682 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.397138809 seconds)
  done (took 17.182452511 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.738040162 seconds)
  done (took 12.099045025 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.688495837 seconds)
  done (took 10.048796304 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.36107866 seconds)
  done (took 9.720821108 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.359654477 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.360380386 seconds)
  done (took 17.078155831 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.381952205 seconds)
  done (took 9.744465712 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.360237998 seconds)
  done (took 9.720860098 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.496388711 seconds)
  done (took 9.860604822 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.983666003 seconds)
  done (took 10.340590922 seconds)
done (took 181.725216739 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.373399957 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.369956328 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.364680378 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.875188032 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.758742245 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.361153048 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.361636379 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.36284028 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.361958907 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.361416749 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.36493516 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.363376896 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.361949508 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.367003766 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.365881155 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.367755716 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.372767676 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.36568753 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.368981991 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.364544517 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.366099809 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.367725648 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.36698212 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.628365505 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.36521806 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.371660884 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.365391518 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.375211967 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.361102991 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.37036767 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.36860758 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.370169761 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.373654532 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.372818365 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.369053428 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.36821556 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.373928514 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.369105367 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.380652307 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.37125278 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.377102618 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.371977712 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.369602444 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.8898469 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.636502657 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.372669532 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.376629278 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.373069601 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.377696991 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.377652055 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.378906624 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.377745616 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.385355861 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.378751186 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 3.113375856 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.388689322 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.379794988 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.392492448 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.381103081 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.386051959 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.377511201 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394405048 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.380768769 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.37965664 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38071854 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.664230024 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.393329592 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.380350531 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.380632946 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.380153483 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.381216738 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.377393293 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.379575784 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.380580157 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389215571 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.218955834 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.427187245 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.378383914 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.381707289 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.38515901 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.38826828 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389574697 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.383081745 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.389460819 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.388930306 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392162038 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.389132282 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.388425795 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.38724246 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.417528454 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.385631815 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.387969013 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.387089613 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.779752484 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394111588 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.381120396 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.382590639 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.381925904 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.580503487 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.383534714 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.38731966 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.383336658 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.385687761 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404029787 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.726174616 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.386117518 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.401473614 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.413164088 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.395483371 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.77610531 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.606867651 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.389035152 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.38160914 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.791686408 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.390419332 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.38558122 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.385948089 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.38688431 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.381226251 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.387486019 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.385262069 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.384171117 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.817620567 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.393483986 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.383328175 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 5.830834087 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.383928622 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.45848457 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.385246401 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.389341333 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.388047731 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.388144129 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.978536587 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.386216233 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.387431658 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.388807927 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.391575718 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.386214735 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.210040018 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.403359134 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.395957157 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.524472018 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.390852625 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.383466381 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403693697 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.384727406 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.383996778 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.391884026 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395107865 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.387681334 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.387910866 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.390307243 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408769546 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.481829807 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.388765474 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.57228861 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.376617944 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.473894126 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.605334225 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.508256085 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.422358287 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.389352462 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.386828355 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.560963868 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.38687596 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.389655348 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.385543535 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.393050306 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.383300378 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.389965036 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394465895 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.388415106 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.388440306 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.391618911 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.394645618 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.528664891 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.391325071 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.387598497 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.383249928 seconds)
    (180/608) benchmarking "5d"...
    done (took 5.836926602 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.383612414 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.397317726 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.385412515 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.781934826 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.390220223 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394996626 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.394105182 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.38920011 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.508070502 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.392393404 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.383728872 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.553192034 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38430489 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.381205964 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.394942498 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.384830034 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.389580668 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.778852967 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.384037033 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.390967675 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390148079 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.391135289 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.38611856 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.644764042 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389824408 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.381776767 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.395176159 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.298538972 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.386436269 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.383975627 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.401181102 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.560445241 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396539352 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.398835204 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.38422763 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 3.967816151 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.386466331 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.398098598 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.388041375 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.877638486 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.390998653 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.388907721 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391158128 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.498486144 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499555805 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.392495457 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387128319 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.392637145 seconds)
    (229/608) benchmarking "6d"...
    done (took 7.388575951 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396385346 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.537286257 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.391239317 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.388707404 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.390347754 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.394841102 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.399571301 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.395588309 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.389383075 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394838609 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.390684037 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389333563 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.39629964 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.392659618 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.392129485 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387288403 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.387360841 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.652008744 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.392493739 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404962981 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.387644207 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389367745 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.387743891 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.88026234 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.898112648 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.392897397 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.391425788 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393871013 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.801905111 seconds)
    (259/608) benchmarking "3d"...
    done (took 3.976359342 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.395580362 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.389871219 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.392694475 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.346920192 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.392851244 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.392765631 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.880036319 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.394714864 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398899306 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.135194586 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.521515648 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.398277725 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399242322 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.666003285 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394706241 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.745419207 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396369221 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.394027654 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.405147533 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.393528045 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.39627646 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.396086186 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.392854761 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.399074236 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.393891695 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.940385227 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.39466654 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401769069 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.402798761 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.391906606 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.39434138 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398368051 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391552652 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.324895563 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.699115189 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.397702478 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.394732606 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.486367686 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.496266078 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.391941667 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.398756061 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.808478948 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.396558153 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.394211255 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.391494719 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.498888387 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.392236987 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.394344557 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.543446204 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.855247764 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.400685667 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.396431343 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.398596946 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.387263863 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398186357 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.394568985 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39641269 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412811358 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.396893103 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.480520424 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.396900191 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39068037 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.053687059 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.401337388 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394257935 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393771366 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39533728 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.394023124 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.411105585 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394944107 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408251429 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.394814799 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.407895389 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.399585392 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.393384198 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.981896341 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.404720621 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406848336 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.402480011 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 7.504867581 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.648191459 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.65807408 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.41053189 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396451689 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.395269114 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.238222086 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.818854073 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40378227 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.328320636 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.396640575 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.661502232 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.426744615 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.737916516 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.405860903 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397236096 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399332552 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397237796 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398122378 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.544294645 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.405616748 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401252113 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.397678179 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.397218619 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.725475999 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.430007362 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.399189721 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.317786948 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.418910966 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.743561237 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 3.507261756 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410201142 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39967317 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397770378 seconds)
    (373/608) benchmarking "7d"...
    done (took 5.633615158 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.400726651 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.399710658 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.605041015 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402453409 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.406621987 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419331566 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405489719 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.418799845 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.402811254 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.395921591 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409995784 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400830008 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.410612184 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404988781 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39859409 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401974068 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39919932 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.40268259 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.402939364 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.396656373 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.408946138 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.395560018 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.407771709 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.409270481 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.402372789 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.742755248 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.767459353 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.394266359 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403560178 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.744539855 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.403682919 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.396934135 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413666991 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416270623 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41004824 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.402812419 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.40267053 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.399083174 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.653766054 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.406115938 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.400901913 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.987623786 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.318201547 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.404279629 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.524955786 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.954718761 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.398817564 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403310782 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.776240796 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.689342425 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.39455816 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.403222471 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.399774285 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.402184588 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397629472 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.426058497 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.397843499 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.397026216 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.765427974 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410206906 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.701536821 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.609514455 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.498987393 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.398731356 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.673328362 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405997195 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410905384 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.401188859 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402673774 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.531394375 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.895083784 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.46270165 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.529426114 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.507049607 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.393265704 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.407031956 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402938082 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.424585043 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.396846217 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403036326 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.393886197 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404655336 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405497467 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.394871165 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396765664 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.425773808 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.397505965 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.401640411 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.401064929 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.39902755 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.398646274 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.874419204 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.41191767 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.891781373 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.443151989 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.533691079 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40117892 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.396766295 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.400534035 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405846241 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.403751751 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40508578 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.415083087 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.406242801 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.410683681 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406403032 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.404662004 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.41079727 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404890809 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.393863212 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.402941046 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.405624063 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.403930405 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.416831294 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.404706478 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.409295811 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.39626246 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.398869188 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408553383 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405488789 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.398213839 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.402902351 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.396408493 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.044279461 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417097099 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.124706408 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.399505599 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.355690537 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41389682 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.410419395 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.400437128 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.404628605 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40386617 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.417488957 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.572233041 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.397488052 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.398263752 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.398185671 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.405537212 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404544578 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.515024168 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.450891282 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405174729 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.900289529 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411633999 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.408767768 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.405487583 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406917652 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.399923364 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405263023 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406553554 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406622554 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415815423 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403925225 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.406422373 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.020648054 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.452905516 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.35714845 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.150519855 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.400275296 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.523464605 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.405441121 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.972902674 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.437078524 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.400468007 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.403898577 seconds)
    (540/608) benchmarking "2d"...
    done (took 3.761268348 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411609365 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.048855856 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.583834869 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.507809013 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.633596509 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.407209708 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.40661167 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.404187953 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.47871483 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404556851 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.693506199 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.403276841 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.404192741 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.402012362 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.399201425 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.406423068 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.704279636 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410865512 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406262006 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.32268154 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.417700787 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415613284 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406927694 seconds)
    (564/608) benchmarking "4d"...
    done (took 4.224880128 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.855775717 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.411347136 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.4292928 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.416060452 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420647667 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418831707 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.406107818 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.412374929 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.401208032 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401457985 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41283375 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.401169786 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.506667895 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413216145 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.401103082 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.406050097 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418370944 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400368636 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.396610217 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.397738724 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.396074336 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.969882548 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.408106028 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.68791628 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413260985 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.397397999 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.238273338 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.404828843 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.415861256 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.3943678 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397208281 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.400625545 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.400175751 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.39907665 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401622907 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.403354661 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401100596 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.061599409 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40640414 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.412258081 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.811634035 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.861386311 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.402122061 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.399958506 seconds)
  done (took 4001.734860898 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.629322331 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.475356994 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.297464762 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.379436507 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.809261514 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.963732002 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.327196331 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.83143858 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.216563147 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.265848421 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.288851923 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.309260499 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.133831709 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.219221532 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.27394201 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.57281015 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.276683513 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.504793681 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.505448901 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.928675466 seconds)
  done (took 64.626015332 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.41660904 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.579614415 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.427413353 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.399010109 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.39990797 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.40826918 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.410936244 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.449959187 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.924918635 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.155265168 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.358376516 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.404591193 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.255729843 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.400365583 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.873011296 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.413389585 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.360678819 seconds)
  done (took 96.037897112 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.425187073 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.521649488 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.43311547 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.43351318 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.413579429 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.505568657 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.617888373 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.495830099 seconds)
  done (took 62.245167697 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.856141013 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 2.922235524 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.420697712 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.133355982 seconds)
  done (took 14.732446266 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.403248512 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.558970532 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.400680947 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.774385618 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.405708112 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.58043734 seconds)
  done (took 34.525679626 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.293599982 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.53908631 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.414854918 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.412938619 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.410509459 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.231616364 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.561738296 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 3.032085603 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.024376389 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.412597013 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.518653277 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.531445508 seconds)
  done (took 55.784095554 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.754739405 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.888091988 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.620745717 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.587828698 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.820089089 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.930299249 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.507356897 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.683135631 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.411611266 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.43982225 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.617274036 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.456988 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.651820035 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.465701421 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.651651076 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.785820444 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.815669595 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.435435801 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.708300662 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.801993061 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.614481482 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.710179379 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.789230558 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.04982798 seconds)
  done (took 71.599430442 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.644066864 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.623558678 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.635228816 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.616482895 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.655663322 seconds)
  done (took 15.580051765 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.471994055 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.50180799 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.595373594 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.517198041 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.406676393 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.402405153 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.405137294 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.991693217 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.989276229 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.940922741 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.990859113 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.473955151 seconds)
  done (took 107.090805523 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.41477703 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.403230033 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.407157935 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.407585877 seconds)
  done (took 32.029068248 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.466624439 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.4949999 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.819915182 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.595314073 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.480797755 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.670551859 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.640189443 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.668051277 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.484146675 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.496733784 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.482700717 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.957796299 seconds)
  done (took 36.66015006 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.743326195 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.720387476 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.758011863 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.767189481 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.721126054 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.703681032 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.706787266 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.771622764 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.752091226 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.769135355 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.640919408 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.717858468 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.748316044 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.091497238 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.77058587 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.641571457 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.744074582 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.748650274 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.087808078 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.746550584 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.639791763 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.717010687 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.763609139 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.689904538 seconds)
  done (took 68.559309062 seconds)
done (took 4663.574145828 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.270858716 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.203714681 seconds)
  done (took 9.138157625 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 3.062548223 seconds)
  (3/15) benchmarking "20517"...
  done (took 3.143499892 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.373590881 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.273736398 seconds)
  done (took 9.185046116 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.468991908 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.021812907 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.055942243 seconds)
  done (took 10.947824893 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.582510642 seconds)
  done (took 4.985618406 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.914986765 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.744378702 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.595287844 seconds)
  done (took 10.656939542 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.430925154 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.173043251 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.57699372 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.624286655 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.893531901 seconds)
  done (took 15.694671179 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.400843669 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.523074026 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.423205335 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.789043428 seconds)
  done (took 24.542912035 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.409952583 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.418151925 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.41020455 seconds)
  done (took 24.643425106 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.639272616 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.43592242 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.436118515 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.43813903 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.439086889 seconds)
  done (took 12.148858164 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.890486987 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.818267602 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.873928766 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.85232746 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.25319608 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.670797571 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.858760719 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.748663093 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.529675131 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.727187647 seconds)
  done (took 30.621870773 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.915746067 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.74356471 seconds)
  done (took 8.058732328 seconds)
done (took 179.453169852 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.40805782 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.418962795 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.412697542 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.41651403 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.416819725 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.406817585 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.408933419 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.413583452 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.417297771 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.413075762 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.413244505 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.414244765 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.553733558 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.411704057 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.419764603 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.413538816 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.419385252 seconds)
  done (took 43.578401302 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.432798306 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.825623403 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.197455496 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.685819562 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.263683947 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.437148645 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.607112131 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.124970543 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.310591956 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.200170055 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.22079261 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.049668472 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.412835593 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.028949395 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.407096786 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.161520299 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.393308318 seconds)
  done (took 84.159117881 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.408095882 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.409970675 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.410634563 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.410680799 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.412864875 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.409418087 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.411737014 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.411039861 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.409974556 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.409619041 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.409363948 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.40921383 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.43534656 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.40844891 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.413808599 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.40815464 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.416354932 seconds)
  done (took 43.40561458 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.409851753 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.455372019 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.423233699 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.44904877 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.440003095 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.40824979 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.410043029 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.422870226 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.438934393 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.423973992 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.421310415 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.431675899 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.295408395 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.428169551 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.430709965 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.43872305 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.43373531 seconds)
  done (took 44.565255942 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.407368924 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.409776969 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 8.154242999 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.458066478 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.521250662 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.399030479 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.876250913 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.41056725 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.809082927 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.576604444 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.528367783 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.947961382 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.813556946 seconds)
  done (took 84.713946127 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.405017291 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.410900455 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.403462884 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.408375558 seconds)
  done (took 32.031429837 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.403555852 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.407034661 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.403616053 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.422767385 seconds)
  done (took 32.045189011 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.438932079 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.437773328 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.441063516 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.423172609 seconds)
  done (took 12.157099371 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.609350269 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.152796908 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.139427767 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.102066745 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.915402187 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.33121371 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.097966952 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.55253435 seconds)
  done (took 28.300810515 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.412962532 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.753549104 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.585553226 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.730962342 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.612087847 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.418826598 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.431714909 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.633952412 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.791994715 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.646672628 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.629624844 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.639384904 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.406422507 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.565345722 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.605048066 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.600776687 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.665178089 seconds)
  done (took 51.531675963 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.408467694 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.414678979 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.413304176 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.413363706 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.414625011 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.410579614 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.40893825 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.414828895 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.413952475 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.416654992 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.414864475 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.411334829 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.496066965 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.412816479 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.423366527 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.414382533 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.422238452 seconds)
  done (took 43.529820881 seconds)
done (took 502.427751881 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.402247607 seconds)
done (took 9.802334615 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.43438143 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.515911016 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.407823688 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.759864471 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.400913524 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.436517127 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.413286037 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.441625541 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.42735211 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.462356609 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.216884254 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.054592127 seconds)
done (took 75.370641498 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.656220074 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.402922287 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.500107943 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.272524657 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.064379613 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.562595042 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.276028366 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.450832488 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.842557028 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.601002874 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.402006665 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.372784403 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.053834724 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.607438016 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.176654555 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.572144483 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.353277802 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.844974503 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.715924423 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.783341684 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.110842904 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.154073874 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.397333888 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.593797044 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.40287486 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.507314985 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.230152321 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.2417513 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.63923448 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.489449009 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.919204942 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.155852482 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.619233372 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.654450544 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.498515846 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.405469175 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.712471396 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.066178716 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.69585939 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.163063195 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.408363558 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.722152234 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.387721506 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.162136891 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.046194614 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.40035714 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.30130801 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.542654442 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.568861015 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.2050764 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.546393486 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.348245684 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.640951194 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.069256218 seconds)
  done (took 235.918663305 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.539390654 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.702210924 seconds)
  done (took 17.70411062 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.668150778 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.458660166 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.74374348 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.321924398 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.571404736 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.83905069 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.837571971 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 3.043031161 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.846088094 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.560504174 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.9435991 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.643522608 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.038846031 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.927483547 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.945301986 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 2.99276935 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.66936136 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.046046248 seconds)
  done (took 62.503085407 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.858115807 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 3.006086556 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.840831913 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.408697711 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.413278511 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.403644597 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.144212289 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.689630768 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.814769761 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.882157124 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.4073929 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.941631076 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.92929333 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.1944159 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.429999441 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.408517958 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.825583136 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.413366666 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.707604948 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.428301193 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.592093749 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.984509048 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.844000392 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.418355625 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.655230467 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.409736758 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.403324917 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.418312937 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.402218987 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.383097529 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.911504302 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.403465034 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.658483752 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.415363714 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.159193777 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.410411157 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.402580749 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.400607209 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.766164483 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.422042136 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.401711608 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.840079329 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.413879719 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.234309127 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.937669995 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.173370151 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.754868728 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.922987248 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.986126979 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.58062571 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.637228814 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.96527225 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.417141165 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.943559314 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.863002909 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.410232009 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.906290986 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.406293677 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.860929439 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.838247729 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.357977981 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.405294346 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.919809434 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.800248603 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.414031428 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.402671088 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.994624566 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.422528836 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.343692135 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.412403668 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.356337725 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.060718333 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.410327896 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.425580583 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.144137731 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.923111741 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.41243321 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.40646898 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.767248463 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.835814603 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.436711324 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.370938814 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.405602126 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.408365843 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.401798568 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.261368574 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.412780688 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.407343368 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.231560519 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.900090768 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.336941834 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.410254668 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.89769364 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.416222488 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.401118526 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.801907244 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.20689947 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.404012997 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.628510953 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.410701625 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.318991024 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.405915382 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.778392888 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.888325766 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.404765374 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.894166084 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.944277704 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.404324297 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.401630311 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.67689121 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.413959755 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.004221391 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.967665773 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.391389234 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.406880451 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.409072763 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.406888607 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.398684962 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.883149015 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.415472441 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.400880678 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.40760781 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.872809528 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.403750749 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.931839667 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.945125536 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.186782387 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.408397822 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.408688558 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.397764482 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.054933543 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.344926379 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.415089635 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.410980036 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.909420781 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.416733407 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.885606217 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.414829595 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.405653919 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.685891025 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.407769599 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.961670858 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.515891094 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.461995697 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.885000512 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.638279999 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.591983811 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.405989324 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.629974436 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.424148074 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.658361502 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.879649695 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.413560263 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.628646937 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.090672922 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.410486393 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.778338456 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.850391859 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.687092243 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.422738708 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.775139426 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.411951415 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.694002138 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.897194041 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.405104151 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.405075277 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.853472392 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.808356052 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.588875625 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.166030759 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.967906209 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.202827146 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.973351798 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.402285237 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.414329404 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.095289991 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.415461057 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.403588488 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.404215233 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.161617755 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.885069542 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.402346451 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.8305553 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.377236466 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.891873207 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.413780059 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.928566812 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.728627667 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.428632241 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.413151692 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.411084775 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.771258681 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.88413292 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.40040454 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.402610242 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.900524122 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.122682158 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.937069456 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.400648996 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.178204706 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.416381558 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.40487553 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.398079806 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.90158887 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.40293423 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.406165812 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.575325972 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.932673204 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.405590963 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.405405393 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.949537161 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.099364076 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.67535319 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.432369679 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.882587644 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.348710799 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.406668516 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.922137912 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.411825206 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.402033536 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.949511934 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.791815443 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.912059991 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.411093597 seconds)
  done (took 1137.756782542 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.933159591 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.466284692 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.761061873 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.23889616 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.225746989 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.50049611 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.958577102 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.560424077 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.832696589 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.890938157 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.696857753 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.426862661 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.302860118 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.687480766 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.568068617 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.586232685 seconds)
  done (took 88.034982063 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.476386572 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.461401753 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.490330248 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.458790063 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.470604197 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.452163049 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.491522848 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.442462668 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.466376035 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.447686879 seconds)
  done (took 77.055438542 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.872803688 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.494860653 seconds)
  done (took 12.774634343 seconds)
done (took 1634.167521056 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.432950583 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.782022831 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.503721132 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.448169187 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 4.020709012 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.430723307 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.430170896 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.432002916 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.924194328 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.233593074 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.558185564 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.943331762 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.917635425 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.498307581 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.429404702 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.428087717 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.893717094 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.25343963 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.445853974 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.449604349 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.438610019 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.445767345 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.44189317 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.442857447 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.916486795 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.111081367 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.805750957 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.44883548 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.901621717 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.503944071 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.432180124 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.431597533 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.431966951 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.431278525 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.152868958 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.250368216 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.472540222 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.432883212 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.431697072 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.325633551 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.448030761 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.442882987 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.4377761 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.440199291 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.436357463 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.437527396 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.397641361 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.879792126 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.476663551 seconds)
  done (took 143.50059634 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.459327244 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.462584834 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.540773155 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.594335189 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.465012063 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.4530647 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.457480426 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.589369405 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.462946104 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.462168563 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.526346879 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.464708338 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.462693417 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.449881471 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.459086847 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.595934304 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.460739466 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.448219664 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.458598407 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.453456956 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.539705685 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.464287915 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.461124014 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.465673502 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.459002839 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.452764018 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.532830753 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.467195597 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.54072922 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.453935372 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.463518691 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.453688451 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.453945603 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.471917699 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.468994152 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.466430874 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.46769056 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.753789872 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.464575618 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.528262522 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.588880402 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.459894506 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.466545928 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.464067853 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.454979436 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.452592929 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.474775979 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.448720875 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.458369637 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.53457329 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.463303656 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.524953657 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.447611079 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.590429073 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.464617572 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.46531528 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.530571849 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.470894006 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.594222459 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.487076041 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.45437165 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.535972526 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.462050694 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.587213918 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.474111674 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.461051599 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.451657602 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.47617023 seconds)
  done (took 171.707079392 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.487150618 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.486668245 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.487933719 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.487466194 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.696624175 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.488677226 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.687021313 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.547456868 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.485026594 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.48383722 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.688607705 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.485608172 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.545661468 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.48702527 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.487974044 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.543645917 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.69652384 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.484046216 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.542954179 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.486020147 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.48849355 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.47480822 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.487712517 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.68771375 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.488055322 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.487952553 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.468009765 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.489864737 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.488145914 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.467176449 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.543402682 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.48578069 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.486245602 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.478137945 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.477859007 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.680966036 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.688745973 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.459747526 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.475828006 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.458972289 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.544477593 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.487501012 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.484975405 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.467061416 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.544679903 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.54994386 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.48916264 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.544026367 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.490358735 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.489107926 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.543018243 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.488727054 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.509261777 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.486804339 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.478141827 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.68297434 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.541320184 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.48762824 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.467199296 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.542081001 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.486168441 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.540723816 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.548657227 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.489039755 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.488378145 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.505690325 seconds)
  done (took 168.832623437 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.414301972 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.412447423 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.430185302 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.429080267 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.414605546 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.427083334 seconds)
  done (took 16.931507871 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.478172916 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.54394243 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.551797547 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.538810028 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.545065946 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.257904477 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.539486825 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.274946682 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.256386547 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.588076877 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.551730236 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.58775032 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.489164652 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.480133132 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.470283374 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.267150837 seconds)
  done (took 45.835310762 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.494798472 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.468037041 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.459836043 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.272061276 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.47159414 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.46119589 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.492629943 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.299462036 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.524763658 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.477638362 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.463815078 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.466939357 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.469312782 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.466368719 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.459238807 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.459280072 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.460603795 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.458326177 seconds)
  done (took 48.535341836 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.546380256 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.456676487 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.594626396 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.64112168 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.478957186 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.546270273 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.452341554 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.633719055 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.643748489 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.634958898 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.585145018 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.592472247 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.456567602 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.583590297 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.524999465 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.453610958 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.525558349 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.522221701 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.453530786 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.520817451 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.456204034 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.482756514 seconds)
  done (took 58.190872578 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.463344727 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.477882945 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.692342135 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.48198109 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.693980834 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.47849707 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.680938276 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.543728431 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.478093463 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.478351953 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.692501142 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.485086564 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.485514669 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.476885194 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.479994118 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.479428288 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.48972898 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.690244767 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.476678773 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.542728237 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.475782645 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.544104245 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.476753002 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.48550818 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.695130751 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.485267488 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.509340138 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.68041783 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.458627331 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.455349916 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.479641471 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.476273782 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.477566474 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.484558884 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.484038678 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.477747396 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.487296965 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.541631818 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.478837867 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.47707639 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.477508625 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.478698635 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507288327 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.477730619 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.545813491 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.547771048 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.485887674 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.46474944 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.484888615 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.464213619 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.486359056 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.476928113 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.696237072 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.477937333 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.486639774 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.480623957 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.546346754 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.488398985 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.483206272 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.478448775 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.478116682 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.541968584 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.463458626 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.48585021 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.480321709 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.492833174 seconds)
  done (took 168.283440517 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.49909887 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.479819208 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.482686631 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.480463226 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.480102987 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.462644213 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.480579538 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.465088429 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.947388244 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.487336647 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.457651491 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.404558368 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.450977607 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.482344364 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.943972917 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.498448945 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.479716623 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.450686362 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.486727297 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.452589642 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.4828733 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.451602164 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.485607367 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.482466386 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.403925058 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.480596967 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.456411867 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.479351014 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.450008143 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.479755709 seconds)
  done (took 93.430755481 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.459702743 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.506579085 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.510043549 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.506307264 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.505141735 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.456374426 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.455624712 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.509645958 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.456572592 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.50548553 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.509176713 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.456573886 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.516600664 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.45568583 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.492903694 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.493213425 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.456714292 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.465958935 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.456682247 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.458775375 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.465945107 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.457419253 seconds)
  done (took 56.963166027 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.451718465 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.554567935 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.554001609 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.367004123 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.55457767 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.622461649 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.452748102 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.54318105 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.368234051 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.5432931 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.522546202 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.454747949 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.449399517 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.524298173 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.525001914 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.544808251 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.627179649 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.525953813 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.556798092 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.524214331 seconds)
  done (took 56.672185608 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.491795205 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.522340475 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.522254527 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.511007423 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.510949152 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.853708479 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.461579161 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.523264969 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.462762881 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.509361765 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.012225699 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.52320335 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.500138051 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.500930908 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.854739614 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.509129015 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.493567569 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.475438208 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.463113919 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.475075348 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.010062749 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.493545434 seconds)
  done (took 59.085641871 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.466161042 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.468288887 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.466502027 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.667049281 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.471617154 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.465601242 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.470598958 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.472888025 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.466511724 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.466826339 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.51658716 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.510063254 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.501978547 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.490373196 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.472550639 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.666992353 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.490514262 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.46582125 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.519871239 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.485089111 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.470954493 seconds)
  done (took 54.878088903 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.443223079 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.444124273 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.487762104 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.452469719 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.42631863 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.437852441 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.425371021 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.504004254 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.427731349 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.440161969 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.442447196 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.439424727 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.446287346 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.531579884 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.428061781 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.442794257 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.450035976 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.49037046 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.447377461 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.442859184 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.512529222 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.62782985 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.707111793 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.59607371 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.449750065 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.646503675 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.554542759 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.539687072 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.55245622 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.529545392 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.440995031 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.439721659 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.446926433 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.441857922 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.442952995 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.599292907 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.476519972 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.42622752 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.429304656 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.445662679 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.442917095 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.455659071 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.440787497 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.425375516 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.43929314 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.441294833 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.441979967 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.427072174 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.426236943 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.442625235 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.426787762 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.441931229 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.426033309 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.43921191 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.439736855 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.426859005 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.428141752 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.43626449 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.427191284 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.44315276 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.429078492 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.42807986 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.444089727 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.428299725 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.439651149 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.427867061 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.438933789 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.440406336 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.44060972 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.443052223 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.529015634 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.445719129 seconds)
  done (took 179.81671169 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.543495049 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.512228035 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.595438852 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.797079149 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.593404265 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.543726789 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.54045697 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.510098884 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.541166701 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.599063331 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.593090089 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.54056897 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.594718239 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.539713838 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.540644015 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.541715466 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.542250993 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.541418068 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.597102178 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.53731334 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.505439803 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.546052065 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.795576166 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.541628651 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.510791777 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.601526945 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.557065656 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.496232966 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.541353711 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.542101013 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.597010883 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.499153443 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.515338758 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.541117137 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.539994076 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.505005856 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.541560881 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.540213241 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.544014889 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.542939079 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.514619791 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.537830156 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.516232268 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.599409629 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.79665569 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.599969414 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.594210321 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.561449505 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.541761406 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.56104157 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.542528803 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.515777697 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.542244865 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.546476001 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.597009975 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.595989058 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.595869662 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.792509501 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.539601195 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.545025837 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.543643166 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.554774037 seconds)
  done (took 161.492541594 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.454353788 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.345143821 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.290471389 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.461582294 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.264961683 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.455417817 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.265156137 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.455517156 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.461242508 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.455013673 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.272815106 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.461170969 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.347143916 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.353293036 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.455276077 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.461715443 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.271708374 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.46228936 seconds)
  done (took 53.399518923 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.475038051 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.473787678 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.474885847 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.277647361 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.475511857 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.453028589 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.793879749 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.474215737 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.27599683 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.474205359 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.474473671 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.470454336 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.472189046 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.414916813 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.416659593 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.415713632 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.474774821 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.415178526 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.79335453 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.473810471 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.476419994 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.473820898 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.460467585 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.47463873 seconds)
  done (took 71.765502834 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.467129778 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.461727941 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.468138122 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.466213129 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.461791357 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.492625597 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.468936209 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.490161788 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.650077256 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.460169049 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.490397056 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.466479692 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.492961419 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.492490419 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.491342295 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.491490835 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.651755938 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.466660322 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.465023116 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.462203302 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.469639648 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.464216002 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.462364988 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.490074622 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.465216297 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.462259324 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.466431434 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.465960406 seconds)
  done (took 72.014818275 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.487077498 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.467239134 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.492210307 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.535877066 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.538497982 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.493839049 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.469482007 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.482596354 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.466342677 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.481892465 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.539382893 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.541552912 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.530629322 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.481265718 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.461411676 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.458860722 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.489743519 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.45897106 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.460781342 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.463620381 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.496209526 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.472722171 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.465586836 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.542535331 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.461237371 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.477555909 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.529979572 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.492212201 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.537571139 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.489875258 seconds)
  done (took 77.176300952 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.440810009 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.477048149 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.451979019 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.473269361 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.485675559 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.457998342 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.459976124 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.475422485 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.452843306 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.448721548 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.826536525 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.45102119 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.471778304 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.480727155 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.452213636 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.451881988 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.472910204 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.450319389 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.443293449 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.932510631 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.455182665 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.477214534 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.473292714 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.447070393 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.456000925 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.451806798 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.474040938 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.482800294 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.479789233 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.820582073 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.486037096 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.459951988 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.448975789 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.439615964 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.454247214 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.478374209 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.812892947 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.931820545 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.477940443 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.45421983 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.448663015 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.482586936 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.442691068 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.467476084 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.441088847 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.448782345 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.446592699 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.447611341 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.476757756 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.476635471 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.446041072 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.478134551 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.475540735 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.450280462 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.810301335 seconds)
  done (took 140.165343144 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.482680309 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.459266589 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.464126498 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.462004562 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.458375692 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.480266111 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.473773709 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.521168868 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.514378192 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.464190593 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.458023955 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.513263646 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.463630262 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.340870347 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.4528181 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.454513186 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.455498815 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.62266672 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.462558517 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.460830752 seconds)
  done (took 53.874814703 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.480921634 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.478609736 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.460361465 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.473904632 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.51081575 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.465645303 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.873947366 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.517395509 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.521636786 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.527739202 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.9348736 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.464179871 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.463893535 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.873138154 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.481775845 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.455076323 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.467190551 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.467409136 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.467289318 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.45226155 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.934451305 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.481338459 seconds)
  done (took 58.665997031 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.460241901 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.642554292 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.57130147 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.587330746 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.46255325 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.520216125 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.527689443 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.597416641 seconds)
  done (took 22.77815945 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.609050763 seconds)
    (2/2) benchmarking "in"...
    done (took 2.451438257 seconds)
  done (took 7.473539864 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.860496285 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.57626288 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.451881464 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.56267073 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.476024542 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.194875719 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.466882595 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.01661464 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.447926194 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.449891017 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.442028622 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.988027905 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.564576716 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 3.992274382 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.434420722 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.455810453 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.379335092 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.512429245 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.705878271 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.811446684 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.847076726 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.578027889 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.442655625 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.853802289 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.013595996 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.60628277 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.656788408 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.442777228 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.530942776 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 3.993202736 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.297458346 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.337348328 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.827808755 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.802104055 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.504927448 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.875726425 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.507804857 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.456825248 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.583315209 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.263666457 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.759272754 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.275829343 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.683561527 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.563931642 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.630249181 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.342321332 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 4.049621061 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.448458165 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.443754643 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.465422729 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.428157734 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.030374455 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.687955276 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.491868953 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.905731843 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.269206281 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.444526789 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.023679244 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.679513395 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.297308438 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.165551074 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.327798948 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.317547504 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.259573393 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.287793353 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.641041663 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.44715604 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.447788203 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.445149941 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.446466712 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.342770838 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.318402273 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.380125964 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.349351612 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.251737247 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.66675629 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.49742493 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.490076686 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.190629941 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.581411789 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.369605544 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.976484492 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.505467862 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.119829137 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.355267965 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.826915963 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.682072277 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.581701126 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.448045711 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.448399077 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.19487109 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.601482602 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.246967211 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.23494043 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.79344414 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.909876087 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.61765158 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.442239879 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.439920045 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.866831346 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.26946987 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.110505371 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.72436559 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.560375936 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.444206852 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.607259701 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.092647993 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.540237527 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.629817691 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.047860553 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.976080941 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.593386731 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.552505488 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.380559811 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.994622352 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.122498689 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.101510352 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.612594002 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.453360792 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.819957662 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.506293046 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.446263847 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.448327123 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.44675227 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.341501045 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.543666661 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.301365033 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.466414698 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.41189457 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.691282745 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.641701085 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.536661149 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.562711452 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.440136005 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.441189285 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.437323813 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.16887813 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.347203863 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.483387144 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.444019155 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.916743496 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.109244368 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.58776147 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.940019569 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.089707349 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.085250394 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.475861469 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.304374292 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.227517559 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.573653752 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.472878081 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.897143284 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.564769902 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.441055375 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.445095103 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.968592355 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.561969945 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.508358117 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.444824284 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.34178806 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.506253833 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.448727146 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.755956547 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.121058185 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.688769007 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.268752804 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.913521153 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.521801486 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.461278155 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.442469228 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.700138791 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.579371475 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.445924288 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.442621751 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.445864386 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.478038695 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.731652528 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.587969055 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.444809907 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.297705377 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.593431408 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.174480067 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.265923003 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.138907309 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.266303528 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.132621946 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.386069668 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.379974922 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.574760311 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.586108151 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.980121588 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.453249659 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.443151807 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.12620753 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.58137537 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.760649697 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.503759808 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.273837915 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.373249931 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.465557659 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.696741445 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.346958614 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.936134805 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.000691387 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.51218849 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.313411948 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.482014132 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.256284733 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.582952397 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.098208398 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.624074442 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.782708662 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.21716944 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.276296319 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.44594299 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.45121272 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.374680322 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.512319765 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.335402794 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.820424751 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.535564031 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.827914725 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.822512077 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.85532355 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.59449478 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.446006832 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.227530418 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.788831882 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.409340959 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.267042416 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.871179219 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.561712909 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.489335409 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.453206862 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.774124918 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.095707161 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.489663493 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.577944498 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.465929747 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.455974731 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.28530142 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.495391692 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.437007447 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.287608144 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.057644368 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.891645366 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.687499944 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.755662043 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.896509602 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.678593681 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.56954905 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.563941522 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.049428811 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.570192197 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.972712178 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.801960835 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 4.055493984 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.439664966 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.290824873 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.782937568 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.68392552 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.4468594 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.440505835 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.132293075 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.30363745 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.297386709 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.957622247 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.979021186 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.646056227 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.469882193 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.871381305 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.450317655 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 4.034516383 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.489982714 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.441206781 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.997875026 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.276566909 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.4404676 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.444599187 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.748252359 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.296206409 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.851525967 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.643634855 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.31274815 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.505206513 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.658952914 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.875472017 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.965683931 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.578133108 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.181199211 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.803388505 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.795387472 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.716959452 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.550959546 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.314884265 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.708796954 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.977780451 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.21603218 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.994116706 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.59739254 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.927020345 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.72205186 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.439730137 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.439186452 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.726349555 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 4.041816552 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.791213967 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.795958707 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.896603876 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 4.033756526 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.952765751 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.016880803 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.205993721 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.227785339 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.586533402 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.88152054 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.273942564 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.446825633 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.439490361 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.440347775 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.513833164 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.764839274 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.516528371 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.612937513 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.984650841 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.711588316 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.326579427 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 4.04218592 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.469891661 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.160713155 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.015049087 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.613756105 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.702571735 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.890646197 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.055245593 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.924339849 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.574614849 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.330594391 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.56618622 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.278322514 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.322132058 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.259211962 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.88957933 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.504559941 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.189374113 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.649187099 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.770891459 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.507631014 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.575680191 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.588716208 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.347833514 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.577705559 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.680051962 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.886923742 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.556004938 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.443773455 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.43849329 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.442365038 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.816125228 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.517070706 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.549892973 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.555019111 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.645666081 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.04168032 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.931651176 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.043776028 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.578136088 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.444023097 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.818951063 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.162411065 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.775773554 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.979158042 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.81568954 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.252403728 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.961213085 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.129708328 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.693862091 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.903490765 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.488883948 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.517673954 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.444582218 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.441045525 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.189001786 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.585518518 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.445659139 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.385604126 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.551605575 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.577299608 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.440871884 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.376253156 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.116825759 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 3.992643247 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.387268878 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.227497769 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.581481765 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.443677742 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.445133465 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.325324819 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.487033692 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.398324601 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.693728268 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.344561856 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.499717687 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.164794843 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.265556884 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.147078115 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.205695705 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.264096884 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.441147283 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.807806795 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.773998669 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.806263614 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.506222055 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.576958774 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.557550364 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.445370405 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.189772134 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.087317109 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.710473842 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.445173837 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.442800304 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.850838957 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.569862512 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.959016781 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.569158901 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.446859008 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.581279345 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.925361686 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.636026615 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.444740952 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.445807696 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.959042173 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.627367826 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.353713469 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.609447764 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.586824415 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.758368967 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.635882266 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.187637737 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.021015239 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.635685152 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.022565301 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.715046706 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.445247972 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.436336446 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.900356487 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.319621287 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.044091932 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.230093576 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.506630098 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.085424163 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.518972419 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.816473425 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.606781391 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.26801136 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.575585281 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.959524776 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.124123312 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.542708266 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.446498885 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.768911783 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.5080579 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.791836576 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.516357965 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.60161475 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.584421594 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.454479257 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.471690128 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.443401349 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.452286593 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.76493837 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.518445088 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.281513565 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.846856494 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.450200454 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.445538784 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.442834003 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.443840904 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.476247877 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.447921206 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.561624308 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.337019424 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.80701407 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.332087227 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.586848555 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.558965192 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.73348539 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.379667673 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.333588096 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 5.072440039 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.44810911 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.703465529 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.880343781 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.440558622 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.988599313 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.993572261 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.520216081 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.444370113 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.445536975 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.14299265 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.393213643 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.454695719 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.44500583 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.805690817 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.986981167 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.576429531 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.446227862 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.44770761 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.450858114 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.551319272 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 4.002648625 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.456068383 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.270136516 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.581156672 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.442847197 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.365437238 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.863750911 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.725216042 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 4.071041979 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.460522322 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.442535332 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.926017638 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.706915967 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.066017507 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.613566699 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.344428168 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.641575315 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.434314382 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.467204191 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.452494346 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.445507121 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.117206547 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.572407025 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.448249548 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.445273271 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.972782715 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.716730305 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.525137841 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.475442158 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.494576595 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.617285179 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.322191448 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.511290837 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.747975452 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.44383903 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.835475503 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.756951989 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.919744635 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.611693179 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.595707774 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.841826739 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.603492218 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.485612432 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.455791434 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.563072597 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.502475701 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.487631948 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.458172455 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.614266663 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.447261703 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.537249272 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 4.00800205 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.447527452 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.44662561 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.963567491 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.627948663 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.215934946 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.585486896 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.452871804 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.456349376 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.386190104 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.527209757 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.443381797 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.700184406 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.936080705 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.601137394 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.85562066 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.949017048 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.596637316 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.458248386 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.994782667 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.015395391 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.75309333 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.498538128 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.451685587 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.444392351 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.418249076 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.827615733 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.581880381 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.581644494 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.184943728 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.117053366 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.970170468 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.664798406 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.090473312 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.285916966 seconds)
  done (took 1957.861491893 seconds)
done (took 4001.734343715 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.640827458 seconds)
    (2/7) benchmarking "month"...
    done (took 2.548185984 seconds)
    (3/7) benchmarking "year"...
    done (took 2.535554419 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.452332336 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.463206572 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.461997179 seconds)
    (7/7) benchmarking "second"...
    done (took 2.463537636 seconds)
  done (took 19.976214756 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.06442503 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.896016507 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.902817377 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.085627998 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.466820683 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.267058371 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.44433881 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.167448533 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.239000659 seconds)
  done (took 28.946269254 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.539430684 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.458790498 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.463876986 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.474082676 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.687417759 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.590476471 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.476196361 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.585667744 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.620453775 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.64971904 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.600136298 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.448511846 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.629100521 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.647050177 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.580733154 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.614340699 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.459090954 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.61118008 seconds)
  done (took 48.548122358 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.431959268 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.430725276 seconds)
  done (took 7.274671372 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.446390039 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.450062081 seconds)
  done (took 7.307341716 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.562729918 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.531541161 seconds)
  done (took 9.504502469 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.940856363 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.447026498 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.446788348 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.447210817 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.725698112 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.872413058 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.778132162 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.44395538 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.450433931 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.441224498 seconds)
  done (took 28.470155845 seconds)
done (took 153.216727507 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.407119485 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.511283067 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.974095152 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.650953848 seconds)
done (took 32.947245473 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.587639397 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.591422314 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.672925699 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.717937635 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.673397348 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.97312396 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.67552704 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.554722983 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.670447508 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.585238409 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.569554475 seconds)
  done (took 31.684651914 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.581965525 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.586260174 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.66761886 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.685537885 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.667141437 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.311852547 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.671507051 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.625617517 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.67165912 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.579460542 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.697688259 seconds)
  done (took 34.16069266 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.486638079 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.513637901 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.51737277 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.58836254 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.525404611 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.536193321 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.517478234 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.544650645 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.550429461 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.476778478 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.528636423 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.453874454 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.71296078 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.532024962 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.474904905 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.79988927 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.160465598 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.538314411 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.539400526 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.673551373 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.474228584 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.513034674 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.470889512 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.565329188 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.45998294 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.458055818 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.450438865 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.572161511 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.527464845 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.506760535 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.550526988 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.47540222 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.581473607 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.459039041 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.5218247 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.458258402 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.521187865 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 3.001187301 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.498458881 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.475168875 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.559529614 seconds)
  done (took 111.184601253 seconds)
done (took 179.439347138 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.881819211 seconds)
    (2/2) benchmarking "read"...
    done (took 2.937076237 seconds)
  done (took 8.23238888 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.511495973 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.815139166 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.623351369 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.593431771 seconds)
  done (took 25.44880675 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.412745648 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.684131296 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.570824576 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.529697527 seconds)
  done (took 27.614538114 seconds)
done (took 71.216995236 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.42569548 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.418898638 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.428094533 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.417971315 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.424765221 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.417235747 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.417957218 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.417571449 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.421415911 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.419290618 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.416840739 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.418513659 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.417119704 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.41729092 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.416877228 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.416106221 seconds)
  done (took 41.123386971 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.415940932 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.419982416 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.436491192 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.422936586 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.421051797 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.42012403 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.421121461 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.419684998 seconds)
  done (took 21.786322171 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.42063784 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.417542028 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.420245047 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.418773157 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.418938043 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.419747371 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.420685118 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.421079313 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.42168665 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.419946718 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.422738226 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.421840127 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.421826853 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.420877394 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.421196324 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.421911795 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.425899685 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.419495703 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.421430515 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.420221196 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.419990221 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.419817009 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.423427283 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.42172136 seconds)
  done (took 60.516200055 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.445529018 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.884202902 seconds)
  done (took 7.740516273 seconds)
done (took 133.593526244 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.536583951 seconds)
    (2/2) benchmarking "String"...
    done (took 2.613197038 seconds)
  done (took 7.561942328 seconds)
  (2/7) benchmarking "join"...
  done (took 7.463150255 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.581909589 seconds)
    (2/4) benchmarking "different"...
    done (took 2.518745409 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.716619142 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.579768607 seconds)
  done (took 12.809397816 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.444781921 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.200095425 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.405456042 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.047093995 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.899874089 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.609980488 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.055411916 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.262385939 seconds)
  done (took 33.894119371 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.725132819 seconds)
    (2/3) benchmarking "different"...
    done (took 2.472863344 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.455324807 seconds)
  done (took 10.069842198 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.604683981 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.55897874 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.211752911 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.636276708 seconds)
  done (took 16.420184605 seconds)
done (took 94.091285847 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.463176036 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.443777288 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.46066859 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.961489855 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.218471353 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.455690722 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.501064499 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.442950898 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.534020211 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.698951978 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.625976564 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.302586554 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.438902694 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.410571035 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.685550045 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.45735964 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.442451641 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.508405813 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.440160795 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.57970319 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.45791886 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.444336367 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.474021204 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.461109065 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.523800446 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.470302795 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.4447576 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.468072436 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.444012634 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.438706066 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.524085806 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.451629611 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.957771819 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.237105376 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.781268499 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.219872264 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.198157477 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.46580892 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.47146506 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.472282755 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.436208016 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 3.028757236 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.579371568 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.545127895 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.650288681 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.736791507 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.66623684 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.471454493 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.829476285 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.231141303 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.495409611 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.304991451 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.541672242 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.686704046 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.456763847 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.471353551 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.526747366 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.965875664 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.237817078 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.45236202 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.470423008 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.442041445 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.463139717 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.509233389 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.968506459 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.220593268 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.764260448 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.158062326 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.5095669 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.546043277 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.163598089 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.960738678 seconds)
  done (took 213.379470198 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.829659146 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.498624783 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.071605817 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.842263847 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.070430675 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.627139191 seconds)
  done (took 21.12211963 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.466830035 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.455891005 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.452244824 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.753363648 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.543198398 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.4790025 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.455093016 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.454171967 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.502883694 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.489647387 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.471773134 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.4542521 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.45281978 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.408475452 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.717235702 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.476869621 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.455351844 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.467905752 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.749315345 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.465621299 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.453625319 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.468871733 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.706108973 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.466948645 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.464507899 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.512244783 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.538046615 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.504884693 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.477575452 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.735853063 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.464024447 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.595604586 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.487767393 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.45855023 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.471685508 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.746838975 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.633566976 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.71032268 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.411473646 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.410715081 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.64672989 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.293169774 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.317615734 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.844726252 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.706240888 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.545593613 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.475518486 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.635458335 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.412029453 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.288170536 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.449851423 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.466895566 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.596165304 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.409860795 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.614287817 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.577546338 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.47176667 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.409894375 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.464996975 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.453994007 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.46109053 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.48065367 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.637703184 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.475185014 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.451393401 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.667949127 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.709327583 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.410313488 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.169350218 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.46981309 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.45516747 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.617870711 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.600172766 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.473146361 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.60486773 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.468342487 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.513018763 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.412401013 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.58745133 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.372674079 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.708949015 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.413297194 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.458631915 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.473872371 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.413042515 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.474528624 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.743284424 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.467819666 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.30996091 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.485571914 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.414578086 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.52951911 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.147261118 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.46932326 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.752712194 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.707844193 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.77059137 seconds)
  done (took 311.226621518 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.66921541 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.759772497 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.008201945 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.766971335 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.558713976 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.753817414 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.081628192 seconds)
  done (took 22.010916883 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.615436529 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.81072954 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.410477357 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.416252714 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.410417545 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.613129911 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.411950152 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.72229549 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.640849598 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.809192399 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.674078992 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.775499525 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.41222444 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.415308999 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.414154974 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.631671431 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.510731362 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.640966504 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.410245162 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.410289162 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.618612631 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.614806431 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.64281319 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.413570166 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.474543869 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.411353419 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.410231534 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.693892139 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.605128434 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.661528688 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.420516055 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.737513942 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.721972127 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.642103266 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.417314702 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.578774558 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.733117496 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.727270839 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.642309717 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.461060257 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.591374311 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.502942431 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.650996625 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.574919771 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.697691219 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.5886062 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.578759977 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.730573571 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.417617674 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.459857977 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.602861512 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.416824159 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.604288618 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.485701587 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.638964224 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.78511659 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.616799603 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.412912742 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.58490545 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.413955612 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.692610634 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.411798675 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.414089146 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.412346958 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.673745916 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.413735766 seconds)
  done (took 281.609165998 seconds)
done (took 852.185692556 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.311277204 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.843380167 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.444598248 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.46391147 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.417475296 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.754439152 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.811197611 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.395156492 seconds)
done (took 47.857886423 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.450856687 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.449143705 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.454170329 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.469906434 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.444836287 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.447954764 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.405182146 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.876137445 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.443332832 seconds)
  done (took 29.851720852 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.409729495 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.157442665 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.41057759 seconds)
  done (took 23.385533666 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.541984667 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.702909197 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.551191581 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.658298628 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.86391741 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.762717569 seconds)
  done (took 18.487842563 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.412409902 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.416951162 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.408676892 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.416871701 seconds)
  done (took 32.207822493 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.801872791 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.48372225 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.527228555 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.802013723 seconds)
  done (took 13.020584839 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.545104797 seconds)
done (took 122.913429655 seconds)
(18/23) benchmarking "parallel"...
done (took 2.795672288 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.327543183 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.280661591 seconds)
    (3/36) benchmarking "trsv"...
    done (took 3.95249034 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.859051283 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.170566111 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.451100832 seconds)
    (7/36) benchmarking "symv!"...
    done (took 3.82859238 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.478322418 seconds)
    (9/36) benchmarking "trmv"...
    done (took 3.938489563 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.382900178 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.587564246 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.444712271 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.543178681 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.879317946 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.445617807 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.455334277 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.274137054 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.488796252 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.409108076 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.454909044 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.472043665 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.43852739 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.606918704 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.336641232 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.450175948 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.634093004 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.807751327 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.440570225 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.449601875 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.410150311 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.407865686 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.830149689 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 3.916763337 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.914425349 seconds)
    (35/36) benchmarking "symv"...
    done (took 3.909016141 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.619594265 seconds)
  done (took 197.705908591 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.48132562 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.504811837 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.416214944 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.53136585 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.439824573 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.408287876 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.586225946 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.422051929 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.420711363 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.409037261 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.410550295 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.4910288 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.410589868 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.425673068 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.429110599 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.373057734 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.483023813 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.446994823 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.493917703 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.444042582 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.797171748 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.272255325 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.991364462 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.432215946 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.411700564 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.469976206 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.44396053 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.41547893 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.540169423 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.121910494 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.381718511 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.147037176 seconds)
  done (took 219.863816773 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.516367275 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.40981665 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.41093329 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.415855392 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.410734011 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.414178336 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.410916046 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.55988055 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.413743591 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.411669885 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.917065227 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.410131662 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.412650087 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.413041062 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.41176619 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.413154632 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.422410956 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.412403241 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.818520784 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.429915304 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.412492756 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.414592687 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.486168905 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.800823035 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.790186295 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.449857395 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.415329021 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.411281529 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.42009371 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 5.020886154 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.470154329 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.413756847 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.421409424 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.425780385 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.41531292 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.411422844 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.410376345 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.411432595 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.488761213 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.467581468 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.442991941 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.410381646 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.414937547 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.412782625 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.421526856 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.471050682 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.638239118 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 5.01831617 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.410531043 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.464578122 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.619181448 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.413938211 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.009208978 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.52923533 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.41864086 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.409242134 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.840323018 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.410396856 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.424696644 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.410348838 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.447594465 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.774080617 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.415073798 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.530508105 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.333433452 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.411633976 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.282891045 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.413135509 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 5.021483184 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.42034179 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.14895658 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.413244091 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.417861963 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.474268398 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.12218084 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.422404911 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.48808955 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.107797898 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.41403369 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.496345256 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.412347629 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.411964841 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.416154784 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.452813146 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.882346385 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.48140184 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.421643284 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.414963495 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.466976307 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.099091449 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.415975015 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.416629298 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.413611171 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.413405066 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.415561253 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.418448008 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.418051475 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.414296591 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.422546853 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.415357381 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.484488911 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.45053952 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.432891173 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.034601173 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.413485904 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.413683243 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.732192138 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.416364774 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.479797104 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.42470291 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.417324205 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.419624973 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.657726286 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.444892794 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 24.779892055 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.474015264 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.412695222 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.83752578 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.608591913 seconds)
  done (took 487.394839317 seconds)
done (took 909.887631962 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.617146073 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.810644675 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.722351106 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.63457651 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.725009048 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.06970039 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.021921698 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.342448326 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.647675367 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.594619238 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.699591719 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.824327093 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.572518947 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.556403432 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.454784128 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.557862242 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.613558502 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.571666785 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.581400751 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.531618041 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.073172251 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.695791524 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.225424547 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.827628215 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.509586826 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.511925583 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.565734804 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.568416291 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.092442721 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.382796027 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.071346319 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.53257423 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.486005709 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.658218238 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.488304731 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.577612738 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.608872756 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.474565259 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.523532038 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.514508744 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.437868666 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.938294607 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.636346551 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.364354539 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.402506587 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.929237321 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.438818691 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.43543847 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.444407116 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.515009218 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.467369408 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.92008287 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.0026284 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.66872893 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.686402344 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.622776964 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.716642537 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.608403799 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.600161854 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.606113461 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.525129867 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.264896141 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.739926463 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.690258074 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.580551764 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.560193334 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.536712975 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.922664327 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.460105488 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.556425341 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.566155277 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.539914242 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.131354289 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.829629496 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.484371501 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.662662415 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.677588724 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.699712914 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.223051859 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.909808586 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.876979328 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.901748568 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.692900528 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.551787135 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.871237671 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.540875013 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.614738661 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.563702919 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.482403027 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.572293722 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.478555378 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.986731198 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.749213729 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.800991888 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.743696678 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.684329295 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.708735504 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.830445662 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.659574915 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.612107316 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.34262141 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.752709434 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.697663496 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.528133342 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.556599887 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.502810221 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.584608946 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.494634074 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.473078714 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.951868225 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.488561975 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.367179362 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.808197121 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.705300479 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.919141724 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.689542551 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.37393391 seconds)
  done (took 347.279946197 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.728533432 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.42617219 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.569299541 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.411504112 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.407752883 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.409647991 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.417233482 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.63414481 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.502135623 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.407030327 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.415270088 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.408255644 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.410269533 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.405302931 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.635130692 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.426477587 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.409384244 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.41139921 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.409290988 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.414850925 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.413500115 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.412944227 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.066488123 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.496091788 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.407290481 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.411657962 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.113191489 seconds)
  done (took 184.129850379 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.502448036 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.91043055 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.666833701 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.779424492 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.829227231 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.759690114 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.476359115 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.48326195 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.544220811 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.680232465 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.408678833 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.864285596 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.449560592 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.808599318 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.466550826 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.475820373 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.478552084 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.443123414 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.517959854 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.659853695 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.544799175 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.476108316 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.735471094 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.483167903 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.472128649 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.633105812 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.642373155 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.643793204 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.566093349 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.692897758 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.828511359 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.467951616 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.443591669 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.482289213 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.545491329 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.61734115 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.527987393 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.820548902 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.459918236 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.670783305 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.461439722 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.821806138 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.462058585 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.490741375 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.642423376 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.552638578 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.872720664 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.001740248 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.699389712 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.483972087 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.476441304 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.553841884 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.829010902 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.679208014 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.8489548 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.452504593 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.871605062 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.730836659 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.69947132 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.442359322 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.683925207 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.472022378 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.47040038 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.551390377 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.919033394 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.640033051 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.831859111 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.747792742 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.477105462 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.951535283 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.489036545 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.699628932 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.123256514 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.581352246 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.176773709 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.599624992 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.452408546 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.49067296 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.489945355 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.755227526 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.47889354 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.557536987 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.514202484 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.549720907 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.630061689 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.572538784 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.769691438 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.933974106 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.521830314 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.830174116 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.170271186 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.769985453 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.458964897 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.539402172 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.442901853 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.549151289 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.62122524 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.801939643 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.881552842 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.725768707 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.266337188 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.943702876 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.455130802 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.530675812 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.48427452 seconds)
  done (took 289.046593857 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.504921755 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.66765273 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.952870818 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.857343864 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 3.094401157 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.597478024 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.540015518 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.484673227 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.607411531 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.525341524 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.564693468 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.522010905 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.724908359 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.926406574 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.704308525 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.084618285 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.488686454 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.913278377 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.587649413 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.565499764 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.085869506 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.481140845 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.723470305 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.664784525 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.42839616 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.692312642 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.73047561 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.622753118 seconds)
  done (took 84.751978552 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.493268181 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.545001469 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.456576694 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.556059115 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.545338051 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.543545471 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.498289054 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.932467824 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.519479929 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.502181187 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.532008734 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.461002287 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.990464065 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.463185741 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.487651967 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.540937328 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.532129325 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.946239549 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.543259997 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.958497837 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.506637411 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.550549146 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.496599456 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.471708566 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.502203439 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.462449811 seconds)
  done (took 69.469602408 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.555248226 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.377503511 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.643623177 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.722690187 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.958881266 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.612574279 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.84075979 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.429468819 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.635174893 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.529588317 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.241911677 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.989588534 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.623804341 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.959677566 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.565845266 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.492687065 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.921253042 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.545204845 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.804933423 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.598967225 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.069338069 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.569712241 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.664853764 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.662890145 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.565897766 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.622457026 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.543435037 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.955898048 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.557165264 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.594026139 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.705379762 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.548057831 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.064209838 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.536554375 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.549868373 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.86416602 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.638416828 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.969664652 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.571637864 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.407233111 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.557574714 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.640211889 seconds)
  done (took 123.323531872 seconds)
done (took 1100.674388075 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.593682218 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.458259122 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.436200646 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.444289153 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.478102634 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.445807541 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.433851479 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.638275669 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.45058601 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.445173664 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.455243533 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.451785622 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.444861575 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.455087654 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.472785934 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.445048786 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.590351748 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.481032186 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.429938923 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.438941121 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.445551627 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.435921756 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.45479722 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.438264141 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.471246999 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.438435359 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.42461322 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.461506766 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.439885794 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.462317434 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.441885365 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.448061599 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.445309924 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.443508816 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.452205285 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.450201395 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.436244109 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.452815592 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.436476588 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.441554892 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.434842147 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.454503376 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.451933376 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.490782171 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.464093608 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.450474891 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.446550199 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.455447502 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.559748942 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.451290069 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.450195735 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.444165658 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.44700016 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.440973493 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.446944882 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.456650419 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.444940269 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.441689662 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.464960673 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.439510833 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.465634743 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.425830955 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.477107777 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.43546768 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.435566525 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.437686713 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.44757524 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.439271042 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.449702634 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.426324919 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.442867774 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.475156963 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.441320433 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.435709972 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.442401915 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.441099241 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.463756185 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.466569647 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.435483342 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.442300392 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.44298785 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.458203994 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.460279911 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.55038381 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.46183593 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.442029281 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.473980644 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.443317498 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.466239514 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.469055104 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.447503319 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.443961917 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.438129804 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.447746389 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.432899718 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.447263717 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.46595463 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.461052234 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.453917954 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.446731007 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.470718531 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.454041476 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.481574755 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.445819017 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.425284636 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.460963572 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.456994256 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.458486738 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.454212219 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.552300507 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.458874662 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.469079444 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.440054481 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.434894486 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.437691041 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.436905478 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.44140489 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.432500191 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.647155812 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.44067356 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.435602184 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.443931041 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.42661941 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.443112027 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.436251474 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.441712104 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.432222983 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.449838341 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.502787183 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.490438539 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.44619326 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.453827115 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.459643093 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.444375109 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.43833184 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.450248487 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.468326882 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.441767496 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.446266899 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.449653027 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.459527131 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.46003181 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.465452561 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.474625336 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.434727588 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.445629347 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.430861802 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.440786464 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.464304655 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.443221072 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.439212465 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.448942456 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.447237273 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.433839199 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.460414202 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.428464769 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.441410107 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.439216816 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.441600111 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.444399435 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.469670993 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.474103836 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.448619768 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.434849942 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.44278559 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.441341404 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.437333735 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.445779353 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.440521107 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.437936252 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.464799901 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.462625081 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.436816151 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.474629693 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.437052347 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.44675122 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.469294497 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.464679911 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.473945918 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.446018591 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.475256113 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.475219327 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.442906233 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.46937552 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.453036536 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.46720894 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.436015481 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.440376097 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.43682091 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.447048775 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.435090419 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.463439569 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.442536832 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.441588105 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.45682084 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.446369154 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.450340851 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.45375911 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.443869539 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.438664329 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.447130637 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.467804175 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.436540004 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.445537366 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.439217515 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.437082167 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.455466168 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.442848012 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.449737912 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.45663208 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.430718282 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.451667694 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.460154998 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.439914635 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.452200617 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.446293081 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.44699171 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.425177379 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.472242677 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.446679224 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.442546271 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.444812601 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.434329302 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.443160161 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.442094995 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.439222372 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.461768806 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.458977168 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.451524824 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.445518996 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.590340874 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.449704998 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.450045376 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.439101977 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.441353207 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.450225648 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.443530369 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.4380831 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.452493622 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.442649167 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.430782117 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.426298191 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.441063306 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.426120533 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.458863757 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.465731407 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.43401116 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.441762054 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.446644976 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.445817352 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.448363051 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.45375113 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.447693722 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.441727513 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.444779309 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.463840676 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.442112763 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.432251889 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.461167438 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.444773227 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.448658538 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.589910863 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.486431978 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.433665414 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.453368541 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.435741964 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.447530279 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.444332702 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.428359184 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.459499264 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.426311526 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.434911691 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.440864115 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.462143117 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.430962937 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.451936424 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.458044354 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.433828424 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.435758908 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.426934821 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.478030155 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.444129439 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.533070607 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.643691319 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.696820614 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.597238775 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.436050445 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.454532217 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.627191159 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.570987253 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.562067723 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.558171569 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.554948218 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.440983091 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.447138119 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.439409192 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.425830665 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.441401214 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.439424104 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.436744406 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.43865657 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.43924467 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.494685502 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.441037107 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.435661868 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.468893769 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.485615391 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.438085612 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.442230808 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.435707679 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.488675675 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.43324045 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.426933732 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.451377877 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.469623519 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.438754736 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.444484926 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.437521184 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.453253325 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.440051177 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.44291366 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.445396815 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.422999148 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.453010932 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.449422569 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.45936403 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.438741125 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.431335972 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.554557016 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.444226784 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.448810523 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.443163236 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.46065443 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.435429724 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.430042471 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.435994473 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.433741387 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.471009874 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.438050432 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.437966556 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.439276335 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.467094654 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.454506593 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.423140011 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.439974753 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.437609525 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.432262791 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.452153821 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.449634054 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.423878251 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.436861053 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.430674865 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.424227826 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.448843724 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.472184264 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.432193264 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.440169784 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.443815808 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.433327679 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.44035046 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.438768018 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.548815223 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.433156093 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.437933753 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.451150036 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.485988587 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.440742835 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.447873818 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.442513391 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.43342512 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.43020946 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.44412485 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.435482757 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.547307129 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.446465744 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.447455698 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.431554691 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.434868885 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.447816684 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.43798165 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.452182438 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.438512825 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.431922372 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.431110478 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.636526374 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.454191169 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.451379025 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.553768801 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.430282715 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.439493857 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.428912677 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.435610872 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.435960252 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.431119571 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.448934599 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.439984044 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.46457483 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.438395759 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.453811516 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.468690149 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.443525748 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.427091516 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.474880703 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.434048131 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.439114068 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.458799016 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.425061026 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.455514621 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.448953082 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.43219383 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.453588477 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.430206217 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.435168306 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.428122195 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.432311918 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.447943259 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.452436897 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.433029287 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.446074697 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.438768561 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.458294438 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.434070687 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.441130955 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.420171758 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.43284427 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.445117802 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.443004349 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.439699375 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.441180676 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.433235081 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.435250472 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.435429339 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.431623728 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.435205787 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.444327825 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.427912195 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.439606827 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.434342553 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.437917268 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.429518503 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.437256836 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.423284747 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.451694341 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.43267018 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.435311611 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.43103927 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.452005082 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.435967577 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.432821692 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.47426853 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.433517575 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.45534337 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.49187093 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.446267547 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.429414821 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.423675571 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.440145621 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.439453816 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.503347071 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.466400919 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.451024001 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.461367361 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.445747565 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.469304321 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.461251319 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.477884352 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.468974249 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.44684165 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.459619686 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.441129961 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.431465348 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.441731684 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.447320527 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.454598277 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.428587775 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.43526174 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.447056196 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.433570732 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.470622864 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.469676074 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.450245377 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.462452063 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.467071696 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.479545007 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.443870598 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.44921561 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.466625229 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.424144089 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.43237676 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.444622704 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.437264291 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.457868048 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.43859531 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.448983012 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.561878351 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.440562312 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.596149363 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.432523935 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.457217489 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.449853158 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.453584971 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.432825582 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.457069693 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.434049495 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.434692652 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.489214611 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.44702452 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.440289472 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.448353852 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.44068541 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.559883167 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.512225496 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.445411693 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.440160702 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.43915608 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.431620618 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.446212805 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.456169721 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.443759685 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.44844911 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.461467385 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.441642294 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.452441247 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.432197283 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.432884475 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.439510601 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.439484178 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.510490516 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.596736274 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.42937561 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.429465511 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.424834235 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.440414562 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.438299743 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.441539577 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.444536193 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.523002515 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.433392485 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.443725391 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.455527126 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.517236878 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.436673318 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.450714396 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.486135166 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.434454037 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.436754125 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.441813099 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.432842672 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.44055056 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.429746581 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.434090419 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.433399034 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.429755792 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.469352971 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.445088004 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.485361089 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.439756924 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.473153777 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.437518182 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.429574455 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.441917799 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.451146951 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.476796524 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.434950118 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.455060845 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.454565128 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.44575037 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.436385849 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.479109888 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.43998874 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.440316394 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.459193176 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.432302529 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.447313175 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.501387528 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.466364644 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.439464308 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.441734159 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.443050988 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.546791402 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.465293351 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.427660156 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.449197573 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.453843362 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.456598317 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.453938447 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.474117981 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.436083064 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.432601417 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.439587504 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.450396538 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.425653856 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.442512292 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.452099795 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.456597347 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.437534508 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.43807126 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.451231803 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.442081769 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.441855223 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.436887543 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.428383786 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.444468227 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.4390812 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.432992441 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.460108102 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.442353642 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.437291925 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.458244378 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.443130061 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.429029204 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.454040977 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.443426136 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.447000495 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.443817355 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.480395031 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.464262883 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.435390846 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.431739574 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.438888562 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.439240832 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.458854682 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.441163813 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.428407313 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.45723755 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.576148643 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.492124045 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.453213125 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.49015119 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.443912611 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.436103857 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.455085271 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.4449924 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.435181478 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.457318163 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.44458826 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.477888532 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.449572355 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.447642125 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.479193853 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.464964785 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.439379616 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.433317001 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.446669531 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.439153257 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.434142952 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.640496925 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.441916583 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.458442879 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.450925897 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.444311116 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.451241787 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.437858624 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.44495238 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.462246444 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.467811355 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.47617698 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.438956275 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.490190056 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.43539551 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.510237271 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.447598391 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.447868752 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.501195703 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.435972433 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.45247298 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.592100038 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.464448071 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.442739396 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.442619729 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.59693107 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.45691836 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.447990478 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.435220338 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.443023461 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.431899596 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.440442946 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.437492504 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.453278426 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.492871975 seconds)
done (took 1671.291157644 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.531294968 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 33.934442372 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.044282109 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.568420365 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.009687017 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.581041367 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.54876032 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 34.012674916 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 34.531305449 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.680940662 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.737783272 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.468730362 seconds)
  done (took 435.069835473 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 45.68133249 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.669117259 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.325233149 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.298835751 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.245699401 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.945899956 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 46.404684025 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 38.522938211 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.816233065 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 38.550013885 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.74920461 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.879265199 seconds)
  done (took 467.709858123 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.35024465 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 35.050039231 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.244358755 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 38.023203519 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.603675145 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.491948196 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.003335556 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.371753962 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 39.121315252 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.677692139 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 39.15711315 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.702098581 seconds)
  done (took 457.504568382 seconds)
done (took 1362.710392831 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.453122315 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.560922035 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.445529781 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.433485474 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.786534662 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.593339191 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.705354459 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.376258312 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.601476553 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.953086349 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 9.501330326 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.676875012 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.379326586 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 12.438881512 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.95882257 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.404083204 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 13.417450819 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.430045095 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.880489442 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.374417287 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.724331022 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.830517485 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.446150164 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.366941643 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.439494125 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.723142715 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.374435129 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.52037655 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.846576397 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.564383098 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.391217949 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.509990468 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.61054465 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.409503264 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.78894293 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.395861799 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.79388239 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.61164542 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.893816126 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.627496136 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.719795594 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.800226125 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.612624621 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.377430808 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.389458183 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.616956322 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.389247079 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.860897998 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.396129129 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 6.05489896 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.438113126 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.619024972 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.601437302 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.559366543 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.432873548 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.392253488 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.600353671 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.361964921 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.597486299 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.509061205 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.464374901 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.621899085 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.898580379 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.462154552 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.374366965 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 12.843831085 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.383823343 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.615631929 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.380592649 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.830443053 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.57467005 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.717363497 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.454997262 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 6.02720705 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.584967389 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.462338271 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.439898394 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.710640106 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.377309552 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 16.927378461 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 12.012660904 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.600139836 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.463320106 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.604929833 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.618204732 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.597864818 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.464547331 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.377179211 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 10.083285614 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.392323697 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.434149079 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.548327812 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 10.283674225 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.645192855 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.396542446 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.60332071 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.641613935 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.393913989 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.450402234 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.771993777 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.726366322 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.461861645 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.618485153 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.466411253 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.180793575 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.876119477 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.392732415 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.490715681 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.525625292 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.433761934 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.506449643 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.368889747 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.833519623 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.600849968 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.391080511 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.617361493 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.564830255 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.618537758 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.377814856 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.397163628 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.705998817 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.402117079 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.369923176 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.517202502 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.995387658 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.721687186 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.473162106 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.654167769 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.87193837 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 12.000180719 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.674634269 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.374951756 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 12.87464738 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.900421849 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.373062788 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 9.740883109 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.620620563 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.467355746 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.429047124 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.506381793 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.376129597 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 13.020744151 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.422165143 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.614993133 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.485425573 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.544211653 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.404103621 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.653578852 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.450502516 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.431097123 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.371986742 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.458171717 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.619650164 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.485944689 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.969489411 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.397695088 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 10.103633788 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.579434552 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.575108697 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.379597529 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 18.122076348 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.856846448 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.967616738 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.679572078 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.62565604 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.597439654 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.729481871 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.43141135 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.378375428 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 10.009452916 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 6.021374674 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.243056209 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 6.170275297 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.978172916 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.368628733 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.371788312 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 13.035957023 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 6.146537889 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.820823172 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.935140461 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.861246011 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.80171718 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.508388829 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.390951036 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.804201333 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.623996138 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.778794163 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.581235829 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.941589331 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.627574771 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.689018654 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.749995682 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.51757251 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.595184453 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.380068694 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.757725105 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.420182842 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.618267796 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.567841672 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.605676927 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.401422865 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.276156478 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 9.926196706 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 11.472806272 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 7.558192285 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.470183966 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.751262461 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.45629302 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.549974176 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.294247959 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.73035393 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.598213462 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.431715341 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.437716287 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.555371859 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.373797326 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.628230422 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.391354994 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.393646196 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.555145581 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.377414716 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.70756543 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.389015869 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.742710738 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.447550649 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.660298259 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.623322722 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.508275509 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.375137133 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.963043124 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.606077052 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.618411054 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.604342065 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.5570939 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.577680562 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.458634129 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.724671286 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 6.038958383 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.850705537 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.451292836 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.478982306 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.437418583 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.433835839 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.374719034 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 9.478182213 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.66810047 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.468221969 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.452665 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.304947537 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.375311717 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.626524161 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.702941443 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.649940115 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.620705576 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.734332075 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.488553497 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.453517429 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.39015795 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.451977283 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.427870508 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.38910492 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.469785882 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.587471051 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.473821097 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.745240627 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.640478384 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.398932421 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.45493754 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.549823348 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.611311929 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.630750789 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.37340931 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 9.888704366 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.613885322 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.628287269 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.071276142 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.381884598 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.760976314 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.459331167 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.492084902 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.365303579 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 12.854478748 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.391422803 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.535134774 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.617728257 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.465166948 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.729856356 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 10.040358142 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.654133056 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.402315188 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.502406554 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.630288065 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.421382175 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.381308034 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.416174908 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.53597973 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 6.063287962 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.724909173 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.621670407 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.366684714 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.510477404 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 11.107194301 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.934255479 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.575679532 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.7339555 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.41493261 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.369378713 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.64280704 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.39036729 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.714320101 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.847069715 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.580075772 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.388367014 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.493516234 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.457332375 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.663791462 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.393485058 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.700483086 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.378707971 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.514138643 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.857883465 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.569348865 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.735992841 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.098998015 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.257842356 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.431572504 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.723425991 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.580925321 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.286907039 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.241669357 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.594672273 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.478109854 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.555253561 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.611442845 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.698021388 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.403755963 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.476180931 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.374642716 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 6.375569151 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.429374763 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.439625093 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.572359884 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.448889851 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.206426081 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.324416871 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.602252018 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.461323587 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.757886548 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.462191487 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.11609663 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.504405456 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.442523134 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.384417717 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.958504402 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.663626223 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.377691604 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 11.078783626 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.164095138 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.555180414 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.486290042 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.38973263 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.585531432 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.552231147 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.450875545 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.616360289 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.383505504 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.854165156 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.380270295 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.843542544 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.585587096 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.49875186 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.736421801 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.379599533 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 6.026516426 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.629489838 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.394985365 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.245652792 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 6.270605233 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.711439771 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.399011129 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.370796186 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.983064044 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.372653238 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.381566252 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.727327765 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.77799437 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.710203558 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.655574866 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.610322692 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.546505434 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.386510268 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.501745167 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.38846687 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.375651044 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.824917757 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.619834336 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.446918171 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.57314166 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.901855794 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.45117769 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.37392405 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.327412584 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.631359871 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.61900544 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.552427218 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.748338125 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.455433625 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.515451118 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.562591037 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.456692686 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.287579337 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.521021235 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.379496938 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.872451225 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.595654224 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.376604705 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 17.004468956 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 11.804175791 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.619341325 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.574541247 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.73107841 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.416569506 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.48223995 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.453723006 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.366676993 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.824467289 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.418271148 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.589833058 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.676374391 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.394895623 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.825508061 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.45591519 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.101046164 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.731691723 seconds)
  done (took 2929.047030733 seconds)
done (took 2934.443344291 seconds)
SAVING RESULT...
DONE!
